{"version":3,"sources":["webpack:///static/js/vendor.1afd0e9b73ea5b9e8cd8.js","webpack:///./~/core-js/library/modules/_descriptors.js","webpack:///./~/core-js/library/modules/_core.js","webpack:///./~/core-js/library/modules/_is-object.js","webpack:///./~/vue-loader/lib/component-normalizer.js","webpack:///./~/vue/dist/vue.esm.js","webpack:///./~/core-js/library/modules/_fails.js","webpack:///./~/core-js/library/modules/_global.js","webpack:///./~/core-js/library/modules/_object-dp.js","webpack:///./~/babel-runtime/core-js/json/stringify.js","webpack:///./~/babel-runtime/core-js/object/define-property.js","webpack:///./~/babel-runtime/helpers/classCallCheck.js","webpack:///./~/babel-runtime/helpers/createClass.js","webpack:///./~/core-js/library/fn/json/stringify.js","webpack:///./~/core-js/library/fn/object/define-property.js","webpack:///./~/core-js/library/modules/_a-function.js","webpack:///./~/core-js/library/modules/_an-object.js","webpack:///./~/core-js/library/modules/_ctx.js","webpack:///./~/core-js/library/modules/_dom-create.js","webpack:///./~/core-js/library/modules/_export.js","webpack:///./~/core-js/library/modules/_hide.js","webpack:///./~/core-js/library/modules/_ie8-dom-define.js","webpack:///./~/core-js/library/modules/_property-desc.js","webpack:///./~/core-js/library/modules/_to-primitive.js","webpack:///./~/core-js/library/modules/es6.object.define-property.js","webpack:///./~/jsplumb/dist/js/jsplumb.js","webpack:///./~/vue-router/dist/vue-router.esm.js","webpack:///./~/vue-style-loader/lib/listToStyles.js","webpack:///(webpack)/buildin/global.js","webpack:///./~/css-loader/lib/css-base.js","webpack:///./~/vue-style-loader/lib/addStylesClient.js"],"names":["webpackJsonp","module","exports","__webpack_require__","Object","defineProperty","get","a","core","version","__e","it","rawScriptExports","compiledTemplate","scopeId","cssModules","esModule","scriptExports","type","default","options","render","staticRenderFns","_scopeId","computed","create","keys","forEach","key","__webpack_exports__","global","isUndef","v","undefined","isDef","isTrue","isFalse","isPrimitive","value","isObject","obj","isPlainObject","_toString","call","isRegExp","toString","val","JSON","stringify","String","toNumber","n","parseFloat","isNaN","makeMap","str","expectsLowerCase","map","list","split","i","length","toLowerCase","remove","arr","item","index","indexOf","splice","hasOwn","hasOwnProperty","cached","fn","cache","bind","ctx","boundFn","l","arguments","apply","_length","toArray","start","ret","Array","extend","to","_from","toObject","res","noop","looseEqual","b","isObjectA","isObjectB","e","looseIndexOf","once","called","this","isReserved","c","charCodeAt","def","enumerable","writable","configurable","parsePath","path","bailRE","test","segments","handleError","err","vm","info","config","errorHandler","inBrowser","console","error","isNative","Ctor","pushTarget","_target","Dep","target","targetStack","push","popTarget","pop","protoAugment","src","__proto__","copyAugment","observe","asRootData","ob","__ob__","Observer","observerState","shouldConvert","isServerRendering","isArray","isExtensible","_isVue","vmCount","defineReactive$$1","customSetter","dep","property","getOwnPropertyDescriptor","getter","setter","set","childOb","depend","dependArray","newVal","notify","Math","max","del","mergeData","from","toVal","fromVal","mergeHook","parentVal","childVal","concat","mergeAssets","normalizeProps","props","name","camelize","normalizeDirectives","dirs","directives","update","mergeOptions","parent","child","mergeField","strat","strats","defaultStrat","extendsFrom","extends","mixins","resolveAsset","id","warnMissing","assets","camelizedId","PascalCaseId","capitalize","validateProp","propOptions","propsData","prop","absent","isType","Boolean","hyphenate","getPropDefaultValue","prevShouldConvert","$options","_props","getType","match","len","createTextVNode","VNode","cloneVNode","vnode","cloned","tag","data","children","text","elm","context","componentOptions","ns","isStatic","isComment","isCloned","cloneVNodes","vnodes","createFnInvoker","fns","invoker","arguments$1","updateListeners","on","oldOn","add","remove$$1","cur","old","event","normalizeEvent","capture","passive","mergeVNodeHook","hookKey","hook","wrappedHook","oldHook","merged","extractPropsFromVNodeData","attrs","altKey","checkProp","hash","preserve","simpleNormalizeChildren","prototype","normalizeChildren","normalizeArrayChildren","isTextNode","node","nestedIndex","last","_isVList","ensureCtor","comp","base","resolveAsyncComponent","factory","baseCtor","errorComp","resolved","loading","loadingComp","contexts","sync","forceRender","$forceUpdate","resolve","reject","reason","then","component","delay","setTimeout","timeout","getFirstComponentChild","initEvents","_events","_hasHookEvent","listeners","_parentListeners","updateComponentListeners","once$$1","$once","$on","remove$1","$off","oldListeners","resolveSlots","slots","defaultSlot","functionalContext","slot","every","isWhitespace","resolveScopedSlots","initLifecycle","abstract","$parent","$children","$root","$refs","_watcher","_inactive","_directInactive","_isMounted","_isDestroyed","_isBeingDestroyed","mountComponent","el","hydrating","$el","createEmptyVNode","callHook","updateComponent","_update","_render","Watcher","$vnode","updateChildComponent","parentVnode","renderChildren","hasChildren","_renderChildren","scopedSlots","$scopedSlots","emptyObject","_parentVnode","_vnode","propKeys","_propKeys","$slots","isInInactiveTree","activateChildComponent","direct","deactivateChildComponent","handlers","j","$emit","resetSchedulerState","queue","activatedChildren","has","waiting","flushing","flushSchedulerQueue","watcher","sort","run","activatedQueue","slice","updatedQueue","callActivatedHooks","callUpdateHooks","devtools","emit","queueActivatedComponent","queueWatcher","nextTick","traverse","seenObjects","clear","_traverse","seen","isA","depId","proxy","sourceKey","sharedPropertyDefinition","initState","_watchers","opts","initProps","methods","initMethods","initData","_data","initComputed","watch","initWatch","propsOptions","isRoot","getData","watchers","_computedWatchers","userDef","computedWatcherOptions","defineComputed","createComputedGetter","dirty","evaluate","handler","createWatcher","$watch","initProvide","provide","_provided","initInjections","result","resolveInject","inject","hasSymbol","Reflect","ownKeys","provideKey","source","createFunctionalComponent","mergeProps","_context","h","d","createElement","injections","functionalOptions","createComponent","_base","cid","resolveConstructorOptions","model","transformModel","functional","nativeOn","mergeHooks","createComponentInstanceForVnode","parentElm","refElm","vnodeComponentOptions","_isComponent","_componentTag","_parentElm","_refElm","inlineTemplate","hooksToMerge","fromParent","ours","componentVNodeHooks","mergeHook$1","one","two","callback","normalizationType","alwaysNormalize","ALWAYS_NORMALIZE","_createElement","SIMPLE_NORMALIZE","getTagNamespace","isReservedTag","parsePlatformTagName","applyNS","renderList","renderSlot","fallback","bindObject","scopedSlotFn","slotNodes","resolveFilter","identity","checkKeyCodes","eventKeyCode","builtInAlias","keyCodes","bindObjectProps","asProp","mustUseProp","domProps","renderStatic","isInFor","tree","_staticTrees","_renderProxy","markStatic","markOnce","isOnce","markStaticNode","initRender","renderContext","_c","$createElement","initInternalComponent","constructor","super","superOptions","modifiedOptions","resolveModifiedOptions","extendOptions","components","modified","latest","extended","sealed","sealedOptions","dedupe","Vue$3","_init","initUse","Vue","use","plugin","installed","args","unshift","install","initMixin$1","mixin","initExtend","Super","SuperId","cachedCtors","_Ctor","Sub","initProps$1","initComputed$1","ASSET_TYPES","Comp","initAssetRegisters","definition","getComponentName","matches","pattern","pruneCache","current","filter","cachedNode","pruneCacheEntry","componentInstance","$destroy","genClassForVnode","parentNode","childNode","mergeClassData","genClassFromData","staticClass","class","dynamicClass","stringifyClass","stringified","isSVG","isUnknownElement","unknownElementCache","document","window","HTMLUnknownElement","HTMLElement","query","selected","querySelector","createElement$1","tagName","multiple","setAttribute","createElementNS","namespace","namespaceMap","createTextNode","createComment","insertBefore","newNode","referenceNode","removeChild","appendChild","nextSibling","setTextContent","textContent","registerRef","isRemoval","ref","refs","refInFor","sameVnode","sameInputType","createKeyToOldIdx","beginIdx","endIdx","updateDirectives","oldVnode","oldDir","dir","isCreate","emptyNode","isDestroy","oldDirs","normalizeDirectives$1","newDirs","dirsWithInsert","dirsWithPostpatch","oldValue","callHook$1","componentUpdated","inserted","callInsert","modifiers","emptyModifiers","getRawDirName","rawName","join","updateAttrs","oldAttrs","setAttr","isIE9","isXlink","removeAttributeNS","xlinkNS","getXlinkProp","isEnumeratedAttr","removeAttribute","isBooleanAttr","isFalsyAttrValue","setAttributeNS","updateClass","oldData","cls","transitionClass","_transitionClasses","_prevClass","parseFilters","exp","pushFilter","filters","lastFilterIndex","trim","prev","expression","inSingle","inDouble","inTemplateString","inRegex","curly","square","paren","p","charAt","validDivisionCharRE","wrapFilter","baseWarn","msg","pluckModuleFunction","modules","m","_","addProp","addAttr","addDirective","arg","addHandler","important","warn","events","native","nativeEvents","newHandler","getBindingAttr","getStatic","dynamicValue","getAndRemoveAttr","staticValue","attrsMap","attrsList","genComponentModel","number","valueExpression","assignment","genAssignmentCode","modelRs","parseModel","idx","index$1","expressionPos","expressionEndPos","lastIndexOf","eof","chr","next","isStringStart","parseString","parseBracket","substring","inBracket","stringQuote","_warn","warn$1","genSelect","genCheckboxModel","genRadioModel","genDefaultModel","valueBinding","trueValueBinding","falseValueBinding","CHECKBOX_RADIO_TOKEN","selectedVal","code","lazy","needCompositionGuard","RANGE_TOKEN","normalizeEvents","isIE","isChrome","add$1","oldHandler","target$1","ev","remove$2","addEventListener","supportsPassive","removeEventListener","updateDOMListeners","updateDOMProps","oldProps","_value","strCur","shouldUpdateValue","checkVal","composing","isDirty","isInputChanged","activeElement","_vModifiers","normalizeStyleData","style","normalizeStyleBinding","staticStyle","bindingStyle","parseStyleText","getStyle","checkChild","styleData","updateStyle","oldStaticStyle","oldStyleBinding","normalizedStyle","oldStyle","newStyle","setProp","addClass","classList","getAttribute","removeClass","tar","replace","resolveTransition","def$$1","css","autoCssTransition","nextFrame","raf","addTransitionClass","removeTransitionClass","whenTransitionEnds","expectedType","cb","getTransitionInfo","propCount","TRANSITION","transitionEndEvent","animationEndEvent","ended","end","onEnd","styles","getComputedStyle","transitionDelays","transitionProp","transitionDurations","transitionTimeout","getTimeout","animationDelays","animationProp","animationDurations","animationTimeout","ANIMATION","hasTransform","transformRE","delays","durations","toMs","s","Number","enter","toggleDisplay","_leaveCb","cancelled","transition","_enterCb","nodeType","enterClass","enterToClass","enterActiveClass","appearClass","appearToClass","appearActiveClass","beforeEnter","afterEnter","enterCancelled","beforeAppear","appear","afterAppear","appearCancelled","duration","activeInstance","transitionNode","isAppear","isRootInsert","startClass","activeClass","toClass","beforeEnterHook","enterHook","afterEnterHook","enterCancelledHook","explicitEnterDuration","expectsCSS","userWantsControl","getHookArgumentsLength","show","pendingNode","_pending","isValidDuration","leave","rm","performLeave","beforeLeave","leaveClass","leaveActiveClass","leaveToClass","explicitLeaveDuration","afterLeave","leaveCancelled","delayLeave","invokerFns","_enter","setSelected","binding","isMultiple","option","getValue","selectedIndex","hasNoMatchingOption","onCompositionStart","onCompositionEnd","trigger","createEvent","initEvent","dispatchEvent","locateNode","getRealChild","compOptions","extractTransitionData","key$1","placeholder","rawChild","hasParentTransition","isSameChild","oldChild","callPendingCbs","_moveCb","recordPosition","newPos","getBoundingClientRect","applyTranslation","oldPos","pos","dx","left","dy","top","moved","transform","WebkitTransform","transitionDuration","decode","html","decoder","innerHTML","decodeAttr","shouldDecodeNewlines","re","encodedAttrWithNewLines","encodedAttr","decodingMap","parseHTML","advance","parseEndTag","lowerCasedTagName","stack","lowerCasedTag","lastTag","expectHTML","isUnaryTag$$1","isUnaryTag","no","canBeLeftOpenTag$$1","canBeLeftOpenTag","isPlainTextElement","stackedTag","reStackedTag","reCache","RegExp","endTagLength","rest","all","endTag","chars","textEnd","comment","commentEnd","conditionalComment","conditionalEnd","doctypeMatch","doctype","endTagMatch","curIndex","startTagMatch","startTagOpen","attr","startTagClose","attribute","unarySlash","isNonPhrasingTag","unary","IS_REGEX_CAPTURING_BROKEN","rest$1","parseText","delimiters","tagRE","buildRegex","defaultTagRE","tokens","lastIndex","exec","parse","template","endPre","element","pre","inVPre","platformIsPreTag","inPre","warn$2","platformGetTagNamespace","platformMustUseProp","isPreTag","preTransforms","transforms","postTransforms","root","currentParent","preserveWhitespace","guardIESVGBug","makeAttrsMap","isForbiddenTag","forbidden","processPre","processRawAttrs","processFor","processIf","processOnce","processKey","plain","processRef","processSlot","processComponent","i$1","processAttrs","if","elseif","else","addIfCondition","block","processIfConditions","slotScope","slotTarget","i$2","lastNode","isTextTag","decodeHTMLCached","checkInFor","inMatch","forAliasRE","for","alias","iteratorMatch","forIteratorRE","iterator1","iterator2","findPrevElement","condition","ifConditions","slotName","isProp","dirRE","hasBindings","parseModifiers","modifierRE","bindRE","camel","onRE","argMatch","argRE","ieNSBug","ieNSPrefix","optimize","isStaticKey","genStaticKeysCached","staticKeys","isPlatformReservedTag","markStatic$1","markStaticRoots","genStaticKeys$1","static","staticInFor","staticRoot","walkThroughConditionsBlocks","conditionBlocks","isBuiltInTag","isDirectChildOfTemplateFor","genHandlers","genHandler","isMethodPath","simplePathRE","isFunctionExpression","fnExpRE","genModifierCode","modifierCode","genKeyFilter","genFilterCode","keyVal","parseInt","bind$1","wrapData","generate","ast","prevStaticRenderFns","currentStaticRenderFns","prevOnceCount","onceCount","currentOptions","warn$3","transforms$1","dataGenFns","platformDirectives$1","isPlatformReservedTag$1","genElement","staticProcessed","genStatic","onceProcessed","genOnce","forProcessed","genFor","ifProcessed","genIf","genSlot","genComponent","genData","genChildren","genIfConditions","conditions","genTernaryExp","shift","genDirectives","genProps","genScopedSlots","genInlineTemplate","needRuntime","hasRuntime","gen","baseDirectives","inlineRenderFns","genScopedSlot","genForScopedSlot","scope","checkSkip","el$1","getNormalizationType","genNode","needsNormalization","some","maybeComponent","genText","transformSpecialNewlines","bind$$1","componentName","baseCompile","makeFunction","errors","Function","transformNode","classBinding","genData$1","transformNode$1","styleBinding","genData$2","getOuterHTML","outerHTML","container","cloneNode","toUpperCase","SSR_ATTR","LIFECYCLE_HOOKS","optionMergeStrategies","silent","productionTip","performance","ignoredElements","isReservedAttr","_lifecycleHooks","freeze","hasProto","UA","navigator","userAgent","isEdge","isAndroid","isIOS","_isServer","_Set","env","VUE_ENV","__VUE_DEVTOOLS_GLOBAL_HOOK__","Symbol","nextTickHandler","pending","copies","callbacks","timerFunc","Promise","logError","catch","MutationObserver","counter","observer","textNode","characterData","_resolve","Set","uid","subs","addSub","sub","removeSub","addDep","arrayProto","arrayMethods","method","original","observeArray","arrayKeys","getOwnPropertyNames","isSettingProps","walk","items","instanceData","defaultData","raw","prototypeAccessors","defineProperties","uid$2","expOrFn","deep","user","active","deps","newDeps","depIds","newDepIds","cleanupDeps","this$1","tmp","teardown","init","$mount","keepAlive","mountedNode","prepatch","insert","destroy","uid$1","_uid","_self","dataDef","propsDef","$set","$delete","immediate","hookRE","cbs","prevEl","prevVnode","prevActiveInstance","__patch__","__vue__","$nextTick","_o","_n","_s","_l","_t","_q","_i","_m","_f","_k","_b","_v","_e","_u","patternTypes","KeepAlive","include","exclude","created","destroyed","builtInComponents","configDef","util","defineReactive","delete","ssrContext","testEl","acceptValue","svg","math","isHTMLTag","nodeOps","hooks","baseModules","klass","cssText","cssVarRE","importantRE","setProperty","normalizedName","normalize","prefixes","upper","prefixed","hasTransition","ontransitionend","onwebkittransitionend","onanimationend","onwebkitanimationend","requestAnimationFrame","activate","platformModules","patch","backend","emptyNodeAt","createRmCb","childElm","removeNode","createElm","insertedVnodeQueue","nested","setScope","createChildren","invokeCreateHooks","isReactivated","initComponent","reactivateComponent","pendingInsert","isPatchable","innerNode","ancestor","addVnodes","startIdx","invokeDestroyHook","removeVnodes","ch","removeAndInvokeRemoveHook","updateChildren","oldCh","newCh","removeOnly","oldKeyToIdx","idxInOld","elmToMove","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","canMove","patchVnode","postpatch","invokeInsertHook","initial","hydrate","hasChildNodes","childrenMatch","firstChild","isRenderedModule","isInitialPatch","isRealElement","hasAttribute","oldElm","parentElm$1","vmodel","model$1","originalDisplay","__vOriginalDisplay","display","unbind","platformDirectives","transitionProps","mode","Transition","_leaving","oldRawChild","delayedLeave","moveClass","TransitionGroup","prevChildren","rawChildren","transitionData","kept","removed","c$1","beforeUpdate","updated","hasMove","body","offsetHeight","propertyName","_hasMove","clone","platformComponents","content","encoded","div","singleAttrValues","ncname","qnameCapture","g","&lt;","&gt;","&quot;","&amp;","&#10;","open","close","esc","tab","space","up","right","down","genGuard","stop","prevent","self","ctrl","alt","meta","middle","cloak","klass$1","style$1","modules$1","directives$1","baseOptions","reduce","ref$1","compile","finalOptions","tips","tip$$1","compiled","compileToFunctions","functionCompileCache","fnGenErrors","idToTemplate","mount","documentElement","__g","anObject","IE8_DOM_DEFINE","toPrimitive","dP","f","O","P","Attributes","TypeError","__esModule","instance","Constructor","_defineProperty","_defineProperty2","descriptor","protoProps","staticProps","$JSON","$Object","desc","aFunction","that","is","hide","$export","own","out","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","IS_BIND","B","IS_WRAP","W","expProto","C","virtual","R","U","createDesc","object","bitmap","valueOf","sgn","x","Vectors","subtract","v1","v2","y","dotProduct","sqrt","scale","flatnessTolerance","pow","_distanceFromCurve","point","curve","candidates","w","_convertToBezier","degree","higherDegree","numSolutions","_findRoots","dist","t","_bezier","newDist","location","distance","_nearestPointOnCurve","td","cdTable","z","row","column","k","lb","ub","min","depth","left_count","right_count","left_t","right_t","_getCrossingCount","_isFlatEnough","_computeXIntercept","sign","old_sign","n_crossings","intercept_1","intercept_2","left_intercept","right_intercept","det","dInv","a1","b1","c1","a2","b2","c2","max_distance_above","max_distance_below","XNM","YNM","XMK","temp","_curveFunctionCache","_getCurveFunctions","order","f_term","l_term","c_term","t_term","one_minus_t_term","_termFunc","terms","_pointOnPath","cc","_x","_y","_dist","p1","p2","_isPoint","_pointAlongPath","tally","curLoc","direction","abs","_pointAlongPathFrom","_locationAlongPathFrom","_gradientAtPoint","Infinity","atan","_gradientAtPointAlongPathFrom","_perpendicularToPathAt","_theta2","sin","cos","jsBezier","distanceFromCurve","gradientAtPoint","gradientAtPointAlongCurveFrom","nearestPointOnCurve","pointOnCurve","pointAlongCurveFrom","perpendicularToCurveAt","locationAlongCurveFrom","getLength","Biltong","_isa","_pointHelper","_gradient","gradient","_p1","_p2","_quadrant","normal","lineLength","quadrant","_segmentMultipliers","theta","PI","intersects","r1","r2","x1","x2","y1","y2","encloses","allowSharedEdges","v3","v4","_inverseSegmentMultipliers","pointOnLine","fromPoint","toPoint","segmentMultiplier","perpendicularLineTo","theta2","Sniff","android","matchesSelector","selector","possibles","querySelectorAll","_gel","getElementById","srcElement","_pi","doCompute","_one","_d","guid","_store","__ta","__tauid","_unstore","__taExtra","_unbind","__taUnstore","_curryChildFilter","evt","_fn","pathInfo","registerExtraFunction","newFn","DefaultHandler","isTouchDevice","touchMap","tfn","_bind","SmartClickHandler","__taSmartClicks","__tad","_pageLocation","__tau","click","_tapProfiles","tap","touches","taps","dbltap","contextmenu","TapHandler","clickThreshold","dblClickThreshold","isMouseDevice","__taTapHandler","tt","downSelectors","finished","clearSingle","clearDouble","currentTarget","tc","_touchCount","eventId","pLoop","meeHelper","__tamee","MouseEnterExitHandler","activeElements","over","mouseenter","mouseexit","relatedTarget","toElement","mousedown","mouseup","mousemove","iev","rv","appName","ua","$1","isIELT9","_genLoc","prefix","ts","_touches","_getTouch","clientX","scrollLeft","clientY","scrollTop","_screenLocation","_clientLocation","changedTouches","targetTouches","originalFn","attachEvent","_each","_el","detachEvent","__taTouchProxy","Window","Mottle","params","mouseEnterExitHandler","tapHandler","_smartClicks","smartClicks","_doBind","off","originalEvent","payload","originalIsMouse","MouseEvent","eventToBind","bindingAMouseEvent","pl","sl","cl","screenX","screenY","_decorate","_evt","eventGenerators","TouchEvent","touch","createTouch","createTouchList","initTouchEvent","MouseEvents","initMouseEvent","ite","evtName","createEventObject","eventType","eventName","fireEvent","consume","doNotPreventDefault","stopPropagation","returnValue","preventDefault","pageLocation","setForceTouchEvents","setForceMouseEvents","_suggest","head","_vanquish","_difference","l1","l2","_isString","getOffsetRect","elem","box","docElem","pageYOffset","pageXOffset","clientTop","clientLeft","round","_pl","pageX","pageY","_classes","draggable","droppable","drag","hover","noSelect","ghostProxy","_devNull","_true","_foreach","_setDroppablesActive","dd","andHover","setActive","updatePosition","setHover","_consume","_inputFilter","_katavorio","getInputFilterSelector","_class","uuid","_uuid","enabled","setEnabled","isEnabled","toggleEnabled","scopes","addScope","removeScope","toggleScope","katavorio","TRUE","FALSE","Drag","rightButtonCanDrag","downAt","posAtDown","pagePosAtDown","pageDelta","moving","consumeStartEvent","dragEl","_multipleDrop","scroll","multipleDrop","isConstrained","useGhostProxy","snapThreshold","_snap","thresholdX","thresholdY","_dx","floor","_dxl","_dxt","_dy","_dyl","_dyt","posses","posseRoles","toGrid","grid","snap","getPosition","setPosition","setUseGhostProxy","constrain","negativeFilter","allowNegative","_setConstrain","constrainRect","size","containment","setConstrain","revertFunction","setRevert","_assignId","_katavorioId","_filters","_testFilter","_setFilter","setFilter","_exclude","addFilter","removeFilter","clearAllFilters","canDrag","matchingDroppables","intersectingDroppables","downListener","which","button","position","moveListener","upListener","markSelection","markPosses","_dispatch","consumeFilteredEvents","mark","ignoreZoom","getZoom","moveBy","updateSelection","updatePosses","unmark","unmarkSelection","unmarkPosses","notifySelectionDragStop","notifyPosseDragStop","getFilters","abort","getDragElement","beforeStart","revert","notifyStart","force","positions","sel","getSelection","dPos","ghostProxyOffsets","finalPos","selection","andNotify","getSize","getMatchingDroppables","dragClass","cs","notifySelectionDragStart","doNotCheckDroppables","offsetLeft","offsetTop","_rankSort","drop","desiredLoc","cPos","gp","rect","pageRect","focusDropElement","pagePosition","canDrop","isHover","handle","filterExclude","Drop","rank","_activeClass","_hoverClass","hoverClass","allowLoopback","_katavorioDragHover","r","random","Katavorio","katavorioParams","_selection","_selectionMap","_dragsByScope","_dropsByScope","_zoom","_reg","_obj","_unreg","_prepareParams","_dd","_p","_mistletoe","existingDrag","_css","overrideCss","_scope","inputFilterSelector","setInputFilterSelector","o","_katavorioDrag","_katavorioDrop","select","deselect","deselectAll","_posses","members","_posseAction","setZoom","_scopeManip","kObj","_kObj","snapToGrid","getDragsForScope","getDropsForScope","_destroy","selIdx","elementRemoved","destroyDraggable","destroyDroppable","reset","_processOneSpec","_spec","dontAddExisting","posseId","posse","addToPosse","spec","setPosse","diff","removeFromPosse","removeFromAllPosses","setPosseState","state","_isnum","_iss","_isb","_isnull","_iso","_isd","_isf","_ise","jsPlumbUtil","isString","isBoolean","isNull","isDate","isFunction","isEmpty","isNumber","Date","getTime","merge","collations","ar","cMap","inObj","q","term","lc","array","_getArray","functionChain","successValue","failValue","populate","values","functionPrefix","fromString","findWithFunction","removeWithFunction","addWithFunction","hashFunction","addToList","insertAtStart","suggest","insertAtHead","_protoFn","_makeFn","protoFn","logEnabled","log","wrap","wrappedFunction","newFunction","returnOnThisValue","EventGenerator","_listeners","eventsSuspended","eventsToDieOn","ready","listener","__jsPlumb","fire","_gone","shouldFireEvent","eventOrListener","getListener","forEvent","setSuspendEvents","isSuspendEvents","silently","cleanupListeners","cleanup","sizeElement","height","width","rendererTypes","connectorTypes","_ju","_timestamp","_updateHoverStyle","_jsPlumb","paintStyle","hoverPaintStyle","mergedHoverStyle","jsPlumb","fill","_updateAttachedElements","timestamp","sourceElement","affectedElements","getAttachedElements","_splitType","_mapType","typeId","_applyTypes","doNotRepaint","getDefaultType","getTypeDescriptor","defType","types","tid","applyType","repaint","jsPlumbUIComponent","idPrefix","parameters","paintStyleInUse","beforeDetach","beforeDrop","overlayPlacements","Defaults","HoverClass","typeCache","cacheTypeItem","getCachedTypeItem","getId","overlays","oo","defaultOverlayKeys","fo","convertToFullOverlaySpec","_defaultType","getDefaultScope","appendToDefaultType","isDetachAllowed","connection","isDropAllowed","sourceId","targetId","dropEndpoint","checkCondition","domListeners","setListenerComponent","_removeTypeCssHelper","typeIndex","cssClass","canvas","getParameter","setParameter","getParameters","setParameters","getClass","hasClass","clazz","updateClasses","classesToAdd","classesToRemove","setType","clearTypes","reapplyTypes","hasType","addType","_cont","removeType","toggleType","setPaintStyle","setHoverPaintStyle","getPaintStyle","getHoverPaintStyle","ignoreAttachedElements","currentlyDragging","isHoverSuspended","isSuspendDrawing","recalc","_jsPlumbInstanceIndex","getInstanceIndex","jsPlumbInstance","_defaults","LogEnabled","_connectionTypes","_endpointTypes","_currentInstance","_instanceIndex","_bb","_initialDefaults","_info","getElement","_getId","repaintEverything","_container","_containerDelegations","unbindContainer","setContainer","each","conn","moveParent","selectEndpoints","ep","previousContainer","eventAliases","endpointclick","endpointdblclick","_oneDelegateHandler","componentType","jp","_addOneDelegate","elId","managedElements","getContainer","initialized","importDefaults","Container","restoreDefaults","connections","endpointsByElement","endpointsByUUID","offsets","offsetTimestamps","draggableStates","connectionBeingDragged","sizes","_suspendDrawing","_suspendedAt","DEFAULT_SCOPE","Scope","_curIdStamp","_idstamp","_appendElement","appendToRoot","_draw","ui","clearEdits","repaintEls","dm","getDragManager","getElementsForDraggable","_updateOffset","offset","anchorManager","redraw","_getEndpoint","_initDraggableIfNecessary","isDraggable","dragOptions","headless","isDragSupported","DragOptions","isAlreadyDraggable","initDraggable","dragEvent","dragEvents","stopEvent","startEvent","_started","_manage","setHoverSuspended","elementDraggingClass","sourceElementDraggingClass","targetElementDraggingClass","setConnectionBeingDragged","getUIPosition","uip","elements","dragEnded","disabled","register","_scopeMatch","e1","e2","s1","s2","_prepareConnectionParams","referenceParams","endpoint","sourceEndpoint","targetEndpoint","uuids","isFull","connectionType","connectorOverlays","connectorPointerEvents","_mergeOverrides","_addEndpoint","addEndpoint","anchor","anchors","endpoints","endpointStyles","endpointStyle","endpointHoverStyles","endpointHoverStyle","_oneElementDef","defs","matchType","newConnection","tep","newEndpoint","setDeleteOnEmpty","uniqueEndpoint","finalEndpoint","sourceEndpointDefinitions","targetEndpointDefinitions","_newConnection","connectionFunc","ConnectionType","getDefaultConnectionType","_newEndpoint","finaliseConnection","_finaliseConnection","con","isDetachable","jpc","doInformAnchorManager","suspendedEndpoint","isTemporarySource","doNotFireConnectionEvent","eventArgs","endpointFunc","EndpointType","Endpoint","fireDetachEvent","elementId","endpointAdded","_operation","func","ii","jj","retVal","_setDraggable","setElementDraggable","_setVisible","alsoChangeEndpoints","setVisible","oidx","isVisible","_toggleDraggable","setDraggable","_toggleVisible","changeEndpoints","_getCachedData","doNotCreateIfNotFound","isConnectionBeingDragged","getManagedElements","connectorClass","connectorOutlineClass","editableConnectorClass","connectedClass","endpointClass","endpointConnectedClass","endpointFullClass","endpointDropAllowedClass","endpointDropForbiddenClass","overlayClass","draggingClass","endpointAnchorClassPrefix","hoverSourceClass","hoverTargetClass","dragSelectClass","Anchors","Connectors","Endpoints","Overlays","ConnectorRenderers","SVG","EndpointStyle","results","inputs","_ensureContainer","myOffset","paint","anchorLoc","compute","xy","wh","addEndpoints","animate","properties","animationSupported","stepFunction","animEvents","step","completeFunction","complete","revalidate","doAnimate","conditionName","connect","stTypes","epDefs","_set","sid","sep","_st","cId","oldEndpoint","evtParams","originalSourceId","newSourceId","originalTargetId","newTargetId","addConnection","makeEndpoint","detachFromConnection","fireMoveEvent","setSource","sourceChanged","setTarget","updateOtherEndpoint","deleteEndpoint","dontUpdateHover","deleteAttachedObjects","deleteObject","deleteEveryEndpoint","_is","setSuspendDrawing","doFireEvent","connType","argIsConnection","connectionDetached","unregisterEndpoint","newEndpoints","deleteConnection","deleteEveryConnection","count","deletedCount","batch","deleteConnectionsForElement","endpointCount","connectionCount","unravelConnection","doNotCleanup","initDroppable","_setOperation","_getOperation","prepareList","input","doNotGetIds","filterList","missingIsFalse","getConnections","flat","sources","targets","proxies","originalEp","ss","_curryEach","executor","_curryGet","_makeCommonSelectHandler","setters","getters","_makeConnectionSelectHandler","common","setDetachable","setReattach","setConnector","isReattach","_makeEndpointSelectHandler","setAnchor","noElementFilters","either","sourceMatchExact","targetMatchExact","inner","_ep","noMatchSource","isSource","noMatchTarget","isTarget","getAllConnections","getEndpoint","getEndpoints","getDefaultEndpointType","Connection","appendElement","_hoverSuspended","idstamp","connectorsInitialized","registerConnectorType","connector","candidate","can","offsetParent","_getContainerFromDefaults","manage","_transient","updateOffset","getOffset","bottom","centerx","centery","getRenderModes","renderer","AnchorManager","makeAnchor","pp","_a","DoNotThrowErrors","specimen","newAnchor","getOrientation","DynamicAnchor","anchorParams","orientation","Anchor","makeAnchors","makeDynamicAnchor","anchorSelector","selectorFilter","_instance","negate","ok","getSelector","_makeElementDropHandler","elInfo","dropOptions","proxyComponent","_drop","EndpointDropHandler","targetCount","maxConnections","onDrop","locked","isRedrop","suspendedElement","eps","deriveEndpointAndAnchorSpec","_mtNew","positionFinder","dropPosition","elPosition","elSize","ap","constructorParams","maybeCleanup","dropEvent","_drag","_jsPlumbRelatedElement","makeTarget","_doOne","elid","_isJsPlumbGroup","_def","targetDef","unmakeTarget","doNotClearArrays","makeSource","aae","onMaxConnections","_del","existingStop","endpointAddedButNoDragYet","anchorDef","oldAnchor","oldConnection","mouseDownListener","sourceCount","elxy","getPositionOnElement","tempEndpointParams","_delTempEndpoint","extract","att","setDragFilter","unmakeSource","eldefs","unmakeEverySource","_getScope","_setScope","getScope","getSourceScope","getTargetScope","setSourceScope","setTargetScope","setDragScope","setDropScope","unmakeEveryTarget","_setEnabled","toggle","originalState","newState","_first","toggleSourceEnabled","isSourceEnabled","setSourceEnabled","toggleTargetEnabled","isTargetEnabled","setTargetEnabled","_elEach","isIdAlready","updateOffsets","removeAllEndpoints","recurse","ebe","childNodes","_doRemove","clearFor","removeFloatingConnection","floatingConnections","removeElement","ae","empty","dontRemoveFocus","removeAllGroups","removeGroupManager","doReset","_clearObject","setDefaultScope","dontPrependDefault","bits","as","setId","newId","doNotSetAttribute","sConns","tConns","setElementId","setReferenceElement","changeId","_conns","epIdx","setDebugLog","debugLog","repaintAfterwards","curVal","getSuspendedAt","doNotRepaintAfterwards","_wasSuspended","doWhileSuspended","getCachedData","toggleVisible","toggleDraggable","addListener","registerConnectionType","registerConnectionTypes","registerEndpointType","registerEndpointTypes","typeDescriptor","setIdChanged","oldId","setParent","newParent","_dom","_id","_pdom","_pid","o1","o2","names","getFloatingAnchorIndex","isFloating","ConnectionsDetachable","ConnectionOverlays","Connector","DropOptions","EndpointOverlays","EndpointStyles","EndpointHoverStyle","EndpointHoverStyles","HoverPaintStyle","LabelStyle","color","MaxConnections","PaintStyle","stroke-width","stroke","ReattachConnections","RenderMode","getInstance","overrideFns","ovf","DragManager","_draggables","_dlist","_delements","_elementsWithEndpoints","_draggablesForElements","parentOffset","_oneLevel","cEl","cOff","childOffsetOverrides","domEl","cel","pid","pLoc","cLoc","endpointDeleted","pId","currentChildLocation","clearParent","revalidateParent","childOffset","co","getDragAncestor","de","aid","_setClassName","cn","className","baseVal","_getClassName","_classManip","curClasses","_oneSet","classes","screenLocation","clientLocation","dragManager","recalculateOffsets","atts","attName","setAttributes","contains","toAdd","toRemove","setClass","getPropertyValue","currentStyle","relativeToRoot","op","_maybeAdjustScroll","zoom","offsetWidth","getAbsolutePosition","setAbsolutePosition","animateFrom","animateOptions","getWidth","getHeight","getRenderMode","_jp","_makeLabelOverlay","_params","labelStyle","mergedParams","Label","_processOverlay","_newOverlay","OverlayCapableJsPlumbUIComponent","overlayPositions","label","labelLocation","defaultLabelLocation","keep","existing","updateFrom","reattach","addOverlay","removeOverlay","overlay","getOverlay","getOverlays","hideOverlay","hideOverlays","showOverlay","showOverlays","removeAllOverlays","overlayId","dontCleanup","removeOverlays","bgCanvas","isAppendedAtTopLevel","getLabel","lo","getLabelOverlay","setLabel","setLocation","setAbsoluteOverlayPosition","getAbsoluteOverlayPosition","_clazzManip","action","dontUpdateOverlays","_makeConnectionDragHandler","stopped","_ui","anchorPoint","getCurrentLocation","stopDrag","_makeDraggablePlaceholder","ipco","ips","_makeFloatingEndpoint","referenceAnchor","referenceCanvas","FloatingAnchor","reference","typeParameters","findConnectionToUseForDynamicAnchor","elementWithPrecedence","connectorStyle","connectorHoverStyle","connectorHoverClass","connectorTooltip","visible","floatingEndpoint","dragProxy","connectionCost","connectionsDirected","currentAnchorClass","deleteOnEmpty","_updateAnchorClass","oldAnchorClass","getCssClass","anchorClass","prepareAnchor","currentAnchor","setPreparedAnchor","continuousAnchorFactory","internalHover","prepareEndpoint","endpointArgs","tooltip","setEndpoint","setPreparedEndpoint","reattachConnections","connectionsDetachable","detachable","dragAllowedWhenFull","detachFrom","setElement","parentId","curId","rehomeEndpoint","makeInPlaceCopy","loc","acc","inPlaceAnchor","hideOnDrag","connectorSelector","setStyle","connectorPaintStyle","dimensions","isDynamic","oIdx","oId","oInfo","oOffset","oWH","txy","twh","tElement","draw","draggingInitialised","placeholderInfo","existingJpc","existingJpcParams","_dragHandler","defaultOpts","beforeStartEvent","beforeStartParams","startParams","_continue","beforeDrag","canvasElement","dragId","endpointToFloat","centerAnchor","_savedAnchor","anchorIdx","dragScope","getDragScope","suspendedElementId","suspendedElementType","referenceEndpoint","getDropEvent","deleteConnectionNow","floatingElement","floatingId","floatingIndex","fe","_forceReattach","_forceDetach","deleteAfterDragStop","visibility","anchorParamsToUse","_initDropTarget","isTransient","isDropSupported","overEvent","outEvent","dhParams","getDragObject","_jpc","bb","doNotChangeConnections","doNotNotifyOtherEndpoint","isConnectedTo","found","getConnectionCost","setConnectionCost","areConnectionsDirected","setConnectionsDirected","_elId","setDragAllowedWhenFull","allowed","equals","getUuid","computeAnchor","existingConnection","_doContinue","continueFunction","optionalData","aParam","originalSourceEndpoint","newSourceEndpoint","originalTargetEndpoint","newTargetEndpoint","makeConnector","renderMode","connectorName","connectorArgs","forComponent","_makeAnchor","_updateConnectedClass","_jsPlumbConnections","previousConnection","editable","pointer-events","editorParams","lastPaintedAt","editableRequested","setEditable","isEditable","isEditing","eS","eT","deleteEndpointsOnEmpty","_detachable","_reattach","myInfo","myWH","otherInfo","otherOffset","otherWH","initialTimestamp","cost","directed","geometry","setGeometry","setData","_types","updateConnectedClass","typeMap","_anchors","informEndpoints","getUuids","getCost","setCost","isDirected","getConnector","getGeometry","prepareConnector","connectorSpec","setPreparedConnector","doNotChangeListenerComponent","previous","previousClasses","transfer","tId","sId","sourceInfo","targetInfo","sE","tE","sAnchorP","tAnchorP","resetBounds","sourcePos","targetPos","strokeWidth","overlayExtents","minX","minY","maxX","maxY","lineWidth","outlineWidth","extents","xmin","bounds","ymin","xmax","ymax","es","outlineStroke","ehs","drawEndpoints","_amEndpoints","continuousAnchorLocations","userDefinedContinuousAnchorLocations","continuousAnchorOrientations","Orientation","HORIZONTAL","VERTICAL","DIAGONAL","IDENTITY","axes","connectionsByElementId","anchorLists","calculateOrientation","sd","sourceAnchor","targetAnchor","atan2","midpoints","dim","sf","tf","sourceEdge","targetEdge","isContinuous","isEdgeSupported","placeAnchorsOnLine","elementDimensions","elementPosition","horizontal","otherMultiplier","reverse","other","xp","yp","currySort","reverseAngles","leftSort","edgeSortFunctions","_sortHelper","_array","placeAnchors","_anchorLists","cd","sS","sO","placeSomeAnchors","unsortedConnections","isHorizontal","sc","_setAnchorLocation","anchorPos","weAreSource","weAreTarget","addFloatingConnection","doRegisterTarget","registerConnection","otherIndex","otherEndpoint","otherAnchor","removeEndpointFromAnchorLists","eId","connInfo","doNotRedraw","removeConnection","getConnectionsFor","getEndpointsFor","_updateAnchorList","lists","aBoolean","otherElId","edgeId","connsToPaint","endpointsToPaint","firstMatchingElIdx","endpointId","listToAddTo","listToRemoveFrom","_continuousAnchorEdge","rIdx","insertIdx","sourceElId","oldTargetId","sIndex","tIndex","originalId","newElement","tIdx","currentId","offsetToUI","doNotRecalcEndpoint","endpointConnections","connectionsToPaint","anchorsToUpdate","orientationCache","sourceContinuous","targetContinuous","oKey","getDefaultFace","fc","ContinuousAnchor","faces","clockwise","availableFaces","opposites","clockwiseOptions","antiClockwiseOptions","secondBest","lastChoice","verifyEdge","edge","clearUserDefinedLocation","setUserDefinedLocation","userDefinedLocation","lastReturnValue","ao","getUserDefinedLocation","refCanvas","_lastResult","_endpoint","_convertAnchor","getAnchors","_curAnchor","_lastAnchor","_distance","cx","cy","ax","ay","acx","acy","_anchorSelector","minIdx","minDist","udl","_curryAnchor","ox","oy","fnInit","DynamicAnchors","AutoDefault","_curryContinuousAnchor","Continuous","pf","AnchorPositionFinders","Fixed","dp","Grid","gx","gy","mx","my","Perimeter","anchorCount","shape","Error","_circle","_path","anchorsPerFace","_computeFace","fractionalLength","_shape","_rectangle","_shapes","Circle","Ellipse","Diamond","Rectangle","Square","Triangle","Path","points","tl","da","rotation","amountInDegrees","_jg","Segments","AbstractSegment","findClosestPointOnPath","getBounds","Straight","m2","_recalc","getGradient","getCoordinates","setCoordinates","coords","pointOnPath","absolute","pointAlongPathFrom","farAwayPoint","within","closest","_x1","_y1","fractionInSegment","Arc","_calcAngle","_calcAngleForLocation","segment","anticlockwise","sa","startAngle","endAngle","TWO_PI","ea","radius","ac","sweep","circumference","frac","gentleRound","ceil","angle","arcSpan","Bezier","cp1x","cp1y","cp2x","cp2y","_translateLocation","_curve","SegmentRenderer","getPath","laf","AbstractComponent","AbstractConnector","totalLength","segmentProportions","segmentProportionalLengths","stub","sourceStub","targetStub","gap","sourceGap","targetGap","userProvidedSegments","edited","paintInfo","ConnectorEditors","_setGeometry","internallyComputed","_getGeometry","getPathData","hasBeenEdited","editor","isActive","overrideSetEditable","findSegmentForPoint","_updateSegmentProportions","_findSegmentForLocation","inSegmentProportion","proportion","_addSegment","updateBounds","_clearSegments","setSegments","_segs","_prepareCompute","swapX","swapY","lw","so","oIndex","sx","sy","tx","ty","oProduct","xSpan","ySpan","startStubX","startStubY","endStubX","endStubY","isXGreaterThanStubTimes2","isYGreaterThanStubTimes2","opposite","perpendicular","orthogonal","sourceAxis","anchorOrientation","getSegments","segBounds","seg","_compute","addSegment","prepareCompute","maxStub","maxGap","AbstractEndpoint","Dot","defaultOffset","defaultInnerRadius","DOMElementEndpoint","displayElements","getDisplayElements","appendDisplayElement","Image","_onload","onload","url","img","deleted","widthToUse","heightToUse","setImage","_img","margin","padding","outline","actuallyPaint","Blank","background","AbstractOverlay","endpointLoc","endpointLocation","incrementLocation","amount","getLocation","Arrow","foldback","computeMaxSize","elementCreated","currentConnectionPaintStyle","hxy","mid","tail","cxy","fromLoc","__","PlainArrow","_getDimensions","forceRefresh","cachedDimensions","getDimensions","AbstractDOMOverlay","detached","initialised","initiallyInvisible","webkitTransform","mozTransform","msTransform","oTransform","absolutePosition","locToUse","minx","miny","clearCachedDimensions","containerExtents","Custom","GuideLines","tailLine","headLine","labelText","font","borderWidth","dStyle","borderStyle","border","lt","_getEventManager","_mottle","getEventManager","_jpi","STOP","REVERT","GROUP","CMD_SHOW","CMD_HIDE","GroupManager","_cleanupDetachedConnection","group","_connectionSourceMap","_connectionTargetMap","getMembers","_updateConnectionsForGroup","processed","oneSet","_jsPlumbGroup","_managedGroups","connMap","addGroup","getEl","manager","addToGroup","doNotFireEvent","getGroup","groupEl","currentGroup","elpos","cpos","collapsed","getDragArea","updateConnectionsForGroup","handleDroppedConnections","expandConnection","collapseConnection","newPosition","removeFromGroup","groupId","getGroups","removeGroup","deleteMembers","manipulateDOM","expandGroup","_groups","_collapseConnection","proxyEp","groupElId","originalElementId","otherEl","shouldProxy","getAnchor","isProxyEndpoint","collapseGroup","_collapseSet","conns","_expandConnection","originalElement","_expandSet","repaintGroup","refreshAllGroups","Group","_findParent","_isInsideParent","leftEdge","rightEdge","topEdge","bottomEdge","_orphan","_unbindDragHandlers","_pruneOrOrphan","prune","_revalidate","orphan","_bindDragHandlers","ghost","__el","dropOverride","proxied","internal","endpointIndex","overrideDrop","getGroupManager","els","targetGroup","dragArea","doNotUpdateConnections","removeAll","orphanAll","dragParams","toggleGroup","mgr","getGroupFor","Flowchart","lastOrientation","_super","midpoint","alwaysRespectStubs","lastx","lasty","cornerRadius","loopbackRadius","lx","ly","sgnx","sgny","segLength","_cloneArray","writeSegments","radiusToUse","sgnEqual","commonStubCalculator","stubCalculators","axis","pi","areInProximity","stubs","oss","oes","midx","midy","orientations","lineCalculators","sis","midLines","linesToEnd","startToEnd","startToMidToEnd","otherStubs","soIdx","toIdx","_so","_to","otherFlipped","stub1","stub2","segmentIndexes","startStub","otherStartStub","endStub","otherEndStub","extent","otherAxis","comparator","_val","AbstractBezierConnector","showLoopback","curviness","proximityLimit","isLoopbackCurrently","sp","tp","_w","_h","loopback","_computeBezier","majorAnchor","getCurviness","_findControlPoint","sourceAnchorPosition","targetAnchorPosition","soo","too","_CP","_CP2","_sx","_sy","_tx","_ty","controlPoints","_segment","StateMachine","_controlPoint","_midx","_midy","svgAttributeMap","stroke-linejoin","stroke-dashoffset","stroke-linecap","xhtml","_attr","attributes","_node","xmlns","_pos","_clearGradient","_updateGradient","uiComponent","gradientUnits","stops","styleToUse","stopColor","stop-color","applyGradientTo","_applyStyles","parts","_appendAtIndex","SvgComponent","pointerEventsSpec","originalArgs","svgParams","useDivWrapper","_superSetEditable","outlineStyle","outlineStrokeWidth","bgPath","SvgEndpoint","makeNode","updateNode","AbstractSvgArrowOverlay","superclass","makePath","p1_1","p1_2","attachListeners","d1","d2","_jk","_getDragManager","category","_animProps","pName","enctype","ldist","tdist","steps","linc","tinc","_int","setInterval","clearInterval","isElementDraggable","oc","specs","addToDragSelection","removeFromDragSelection","clearDragSelection","_do","readyState","message","resolveProps","route","resolveQuery","extraQuery","_parseQuery","parsedQuery","parseQuery","param","stringifyQuery","encode","val2","createRoute","record","redirectedFrom","router","stringifyQuery$$1","fullPath","getFullPath","matched","formatMatch","_stringifyQuery","isSameRoute","START","trailingSlashRE","isObjectEqual","aKeys","bKeys","isIncludedRoute","queryIncludes","guardEvent","metaKey","ctrlKey","shiftKey","defaultPrevented","findAnchor","_Vue","_router","_route","registerInstance","callVal","registerRouteInstance","beforeCreate","history","View","Link","beforeRouteEnter","beforeRouteLeave","resolvePath","relative","append","firstChar","hashIndex","queryIndex","cleanPath","defaultDelimiter","delimiter","PATH_REGEXP","escaped","modifier","asterisk","partial","repeat","optional","escapeGroup","escapeString","substr","tokensToFunction","encodeURIComponentPretty","encodeURI","encodeAsterisk","pretty","encodeURIComponent","token","attachKeys","flags","sensitive","regexpToRegexp","groups","arrayToRegexp","pathToRegexp","stringToRegexp","tokensToRegExp","strict","endsWithDelimiter","fillParams","routeMsg","regexpCompileCache","createRouteMap","routes","oldPathList","oldPathMap","oldNameMap","pathList","pathMap","nameMap","addRouteRecord","matchAs","normalizedPath","normalizePath","regex","compileRouteRegex","instances","redirect","childMatchAs","aliasRoute","normalizeLocation","_normalized","assign","rawPath","parsedPath","basePath","createMatcher","addRoutes","currentRoute","paramNames","_createRoute","record$1","matchRoute","originalRedirect","resolveRecordPath","aliasedPath","aliasedMatch","aliasedRecord","decodeURIComponent","setupScroll","saveScrollPosition","setStateKey","handleScroll","isPop","app","behavior","scrollBehavior","getScrollPosition","shouldScroll","getElementPosition","isValidPosition","normalizePosition","scrollTo","getStateKey","positionStore","docEl","docRect","elRect","genKey","Time","now","toFixed","_key","pushState","replaceState","runQueue","normalizeBase","baseEl","resolveQueue","activated","deactivated","extractGuards","records","guards","flatMapComponents","guard","extractGuard","flatten","extractLeaveGuards","bindGuard","extractUpdateHooks","extractEnterGuards","isValid","bindEnterGuard","poll","resolveAsyncComponents","hasAsync","resolvedDef","isError","pathname","search","checkFallback","ensureSlash","getHash","replaceHash","href","pushHash","registerHook","createHref","routerView","$route","_routerViewCache","inactive","routerViewDepth","encodeReserveReplacer","toTypes","eventTypes","required","exact","exactActiveClass","$router","globalActiveClass","linkActiveClass","globalExactActiveClass","linkExactActiveClass","activeClassFallback","exactActiveClassFallback","compareTarget","parse_1","compile_1","tokensToFunction_1","tokensToRegExp_1","supportsPushState","History","readyCbs","readyErrorCbs","errorCbs","listen","onReady","errorCb","onError","transitionTo","onComplete","onAbort","confirmTransition","updateRoute","ensureURL","beforeHooks","iterator","postEnterCbs","resolveHooks","afterHooks","HTML5History","History$$1","expectScroll","go","fromRoute","HashHistory","setupListeners","AbstractHistory","targetIndex","VueRouter","apps","matcher","setupHashListener","beforeEach","beforeResolve","afterEach","back","forward","getMatchedComponents","normalizedTo","newStyles","media","sourceMap","part","eval","cssWithMappingToString","useSourceMap","cssMapping","btoa","sourceMapping","toComment","sourceRoot","unescape","mediaQuery","alreadyImportedModules","addStylesToDom","domStyle","stylesInDom","addStyle","createStyleElement","styleElement","isProduction","isOldIE","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","applyToTag","newObj","styleSheet","replaceText","cssNode","hasDocument","DEBUG","listToStyles","getElementsByTagName","_isProduction","newList","mayRemove","textStore","replacement"],"mappings":"AAAAA,cAAc,IAER,SAAUC,EAAQC,EAASC,GCDjCF,EAAAC,SAAAC,EAAA,cACA,MAAsE,IAAtEC,OAAAC,kBAAiC,KAAQC,IAAA,WAAgB,YAAaC,KDShE,SAAUN,EAAQC,GEXxB,GAAAM,GAAAP,EAAAC,SAA6BO,QAAA,QAC7B,iBAAAC,WAAAF,IFiBM,SAAUP,EAAQC,GGlBxBD,EAAAC,QAAA,SAAAS,GACA,sBAAAA,GAAA,OAAAA,EAAA,kBAAAA,KHyBM,SAAUV,EAAQC,GIvBxBD,EAAAC,QAAA,SACAU,EACAC,EACAC,EACAC,GAEA,GAAAC,GACAC,EAAAL,QAGAM,QAAAN,GAAAO,OACA,YAAAD,GAAA,aAAAA,IACAF,EAAAJ,EACAK,EAAAL,EAAAO,QAIA,IAAAC,GAAA,kBAAAH,GACAA,EAAAG,QACAH,CAcA,IAXAJ,IACAO,EAAAC,OAAAR,EAAAQ,OACAD,EAAAE,gBAAAT,EAAAS,iBAIAR,IACAM,EAAAG,SAAAT,GAIAC,EAAA,CACA,GAAAS,GAAApB,OAAAqB,OAAAL,EAAAI,UAAA,KACApB,QAAAsB,KAAAX,GAAAY,QAAA,SAAAC,GACA,GAAA3B,GAAAc,EAAAa,EACAJ,GAAAI,GAAA,WAAmC,MAAA3B,MAEnCmB,EAAAI,WAGA,OACAR,WACAd,QAAAe,EACAG,aJmCM,SAAUnB,EAAQ4B,EAAqB1B,GAE7C,cKrFA,SAAA2B;;;;;AASA,QAAAC,GAAAC,GACA,WAAAC,KAAAD,GAAA,OAAAA,EAGA,QAAAE,GAAAF,GACA,WAAAC,KAAAD,GAAA,OAAAA,EAGA,QAAAG,GAAAH,GACA,WAAAA,EAGA,QAAAI,GAAAJ,GACA,WAAAA,EAKA,QAAAK,GAAAC,GACA,sBAAAA,IAAA,gBAAAA,GAQA,QAAAC,GAAAC,GACA,cAAAA,GAAA,gBAAAA,GASA,QAAAC,GAAAD,GACA,0BAAAE,GAAAC,KAAAH,GAGA,QAAAI,GAAAZ,GACA,0BAAAU,GAAAC,KAAAX,GAMA,QAAAa,GAAAC,GACA,aAAAA,EACA,GACA,gBAAAA,GACAC,KAAAC,UAAAF,EAAA,QACAG,OAAAH,GAOA,QAAAI,GAAAJ,GACA,GAAAK,GAAAC,WAAAN,EACA,OAAAO,OAAAF,GAAAL,EAAAK,EAOA,QAAAG,GACAC,EACAC,GAIA,OAFAC,GAAArD,OAAAqB,OAAA,MACAiC,EAAAH,EAAAI,MAAA,KACAC,EAAA,EAAiBA,EAAAF,EAAAG,OAAiBD,IAClCH,EAAAC,EAAAE,KAAA,CAEA,OAAAJ,GACA,SAAAV,GAAsB,MAAAW,GAAAX,EAAAgB,gBACtB,SAAAhB,GAAsB,MAAAW,GAAAX,IAWtB,QAAAiB,GAAAC,EAAAC,GACA,GAAAD,EAAAH,OAAA,CACA,GAAAK,GAAAF,EAAAG,QAAAF,EACA,IAAAC,GAAA,EACA,MAAAF,GAAAI,OAAAF,EAAA,IASA,QAAAG,GAAA7B,EAAAZ,GACA,MAAA0C,IAAA3B,KAAAH,EAAAZ,GAMA,QAAA2C,GAAAC,GACA,GAAAC,GAAArE,OAAAqB,OAAA,KACA,iBAAA8B,GAEA,MADAkB,GAAAlB,KACAkB,EAAAlB,GAAAiB,EAAAjB,KAiCA,QAAAmB,GAAAF,EAAAG,GACA,QAAAC,GAAArE,GACA,GAAAsE,GAAAC,UAAAjB,MACA,OAAAgB,GACAA,EAAA,EACAL,EAAAO,MAAAJ,EAAAG,WACAN,EAAA7B,KAAAgC,EAAApE,GACAiE,EAAA7B,KAAAgC,GAIA,MADAC,GAAAI,QAAAR,EAAAX,OACAe,EAMA,QAAAK,GAAAvB,EAAAwB,GACAA,KAAA,CAGA,KAFA,GAAAtB,GAAAF,EAAAG,OAAAqB,EACAC,EAAA,GAAAC,OAAAxB,GACAA,KACAuB,EAAAvB,GAAAF,EAAAE,EAAAsB,EAEA,OAAAC,GAMA,QAAAE,GAAAC,EAAAC,GACA,OAAA3D,KAAA2D,GACAD,EAAA1D,GAAA2D,EAAA3D,EAEA,OAAA0D,GAMA,QAAAE,GAAAxB,GAEA,OADAyB,MACA7B,EAAA,EAAiBA,EAAAI,EAAAH,OAAgBD,IACjCI,EAAAJ,IACAyB,EAAAI,EAAAzB,EAAAJ,GAGA,OAAA6B,GAMA,QAAAC,MAyBA,QAAAC,GAAApF,EAAAqF,GACA,GAAAC,GAAAtD,EAAAhC,GACAuF,EAAAvD,EAAAqD,EACA,KAAAC,IAAAC,EAOG,OAAAD,IAAAC,GACH7C,OAAA1C,KAAA0C,OAAA2C,EAPA,KACA,MAAA7C,MAAAC,UAAAzC,KAAAwC,KAAAC,UAAA4C,GACK,MAAAG,GAEL,MAAAxF,KAAAqF,GASA,QAAAI,GAAAhC,EAAAlB,GACA,OAAAc,GAAA,EAAiBA,EAAAI,EAAAH,OAAgBD,IACjC,GAAA+B,EAAA3B,EAAAJ,GAAAd,GAAkC,MAAAc,EAElC,UAMA,QAAAqC,GAAAzB,GACA,GAAA0B,IAAA,CACA,mBACAA,IACAA,GAAA,EACA1B,EAAAO,MAAAoB,KAAArB,aAoHA,QAAAsB,GAAA7C,GACA,GAAA8C,IAAA9C,EAAA,IAAA+C,WAAA,EACA,aAAAD,GAAA,KAAAA,EAMA,QAAAE,GAAA/D,EAAAZ,EAAAkB,EAAA0D,GACApG,OAAAC,eAAAmC,EAAAZ,GACAU,MAAAQ,EACA0D,eACAC,UAAA,EACAC,cAAA,IAQA,QAAAC,GAAAC,GACA,IAAAC,GAAAC,KAAAF,GAAA,CAGA,GAAAG,GAAAH,EAAAjD,MAAA,IACA,iBAAAnB,GACA,OAAAoB,GAAA,EAAmBA,EAAAmD,EAAAlD,OAAqBD,IAAA,CACxC,IAAApB,EAAiB,MACjBA,KAAAuE,EAAAnD,IAEA,MAAApB,KAmGA,QAAAwE,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAC,aACAD,GAAAC,aAAA1E,KAAA,KAAAsE,EAAAC,EAAAC,OACG,CAKH,IAAAG,IAAA,mBAAAC,SAGA,KAAAN,EAFAM,SAAAC,MAAAP,IA0DA,QAAAQ,GAAAC,GACA,wBAAAA,IAAA,cAAAZ,KAAAY,EAAA7E,YAgKA,QAAA8E,GAAAC,GACAC,GAAAC,QAAmBC,GAAAC,KAAAH,GAAAC,QACnBD,GAAAC,OAAAF,EAGA,QAAAK,KACAJ,GAAAC,OAAAC,GAAAG,MAoHA,QAAAC,GAAAL,EAAAM,GAEAN,EAAAO,UAAAD,EASA,QAAAE,GAAAR,EAAAM,EAAA1G,GACA,OAAAkC,GAAA,EAAAiB,EAAAnD,EAAAmC,OAAkCD,EAAAiB,EAAOjB,IAAA,CACzC,GAAAhC,GAAAF,EAAAkC,EACA2C,GAAAuB,EAAAlG,EAAAwG,EAAAxG,KASA,QAAA2G,GAAAjG,EAAAkG,GACA,GAAAjG,EAAAD,GAAA,CAGA,GAAAmG,EAeA,OAdApE,GAAA/B,EAAA,WAAAA,EAAAoG,iBAAAC,IACAF,EAAAnG,EAAAoG,OAEAE,GAAAC,gBACAC,OACA1D,MAAA2D,QAAAzG,IAAAG,EAAAH,KACAlC,OAAA4I,aAAA1G,KACAA,EAAA2G,SAEAR,EAAA,GAAAE,IAAArG,IAEAkG,GAAAC,GACAA,EAAAS,UAEAT,GAMA,QAAAU,GACA3G,EACAZ,EACAkB,EACAsG,GAEA,GAAAC,GAAA,GAAAxB,IAEAyB,EAAAlJ,OAAAmJ,yBAAA/G,EAAAZ,EACA,KAAA0H,IAAA,IAAAA,EAAA5C,aAAA,CAKA,GAAA8C,GAAAF,KAAAhJ,IACAmJ,EAAAH,KAAAI,IAEAC,EAAApB,EAAAzF,EACA1C,QAAAC,eAAAmC,EAAAZ,GACA4E,YAAA,EACAE,cAAA,EACApG,IAAA,WACA,GAAAgC,GAAAkH,IAAA7G,KAAAH,GAAAM,CAUA,OATA+E,IAAAC,SACAuB,EAAAO,SACAD,GACAA,EAAAN,IAAAO,SAEAxE,MAAA2D,QAAAzG,IACAuH,EAAAvH,IAGAA,GAEAoH,IAAA,SAAAI,GACA,GAAAxH,GAAAkH,IAAA7G,KAAAH,GAAAM,CAEAgH,KAAAxH,GAAAwH,OAAAxH,QAOAmH,EACAA,EAAA9G,KAAAH,EAAAsH,GAEAhH,EAAAgH,EAEAH,EAAApB,EAAAuB,GACAT,EAAAU,cAUA,QAAAL,GAAA5B,EAAAlG,EAAAkB,GACA,GAAAsC,MAAA2D,QAAAjB,IAAA,gBAAAlG,GAGA,MAFAkG,GAAAjE,OAAAmG,KAAAC,IAAAnC,EAAAjE,OAAAjC,GACAkG,EAAA1D,OAAAxC,EAAA,EAAAkB,GACAA,CAEA,IAAAuB,EAAAyD,EAAAlG,GAEA,MADAkG,GAAAlG,GAAAkB,EACAA,CAEA,IAAA2F,GAAA,EAAAC,MACA,OAAAZ,GAAAmB,QAAAR,KAAAS,QAKApG,EAEA2F,GAIAU,EAAAV,EAAAnG,MAAAV,EAAAkB,GACA2F,EAAAY,IAAAU,SACAjH,IALAgF,EAAAlG,GAAAkB,EACAA,GAUA,QAAAoH,GAAApC,EAAAlG,GACA,GAAAwD,MAAA2D,QAAAjB,IAAA,gBAAAlG,GAEA,WADAkG,GAAA1D,OAAAxC,EAAA,EAGA,IAAA6G,GAAA,EAAAC,MACAZ,GAAAmB,QAAAR,KAAAS,SAOA7E,EAAAyD,EAAAlG,WAGAkG,GAAAlG,GACA6G,GAGAA,EAAAY,IAAAU,UAOA,QAAAF,GAAAvH,GACA,OAAAyD,OAAA,GAAAnC,EAAA,EAAAiB,EAAAvC,EAAAuB,OAAiDD,EAAAiB,EAAOjB,IACxDmC,EAAAzD,EAAAsB,GACAmC,KAAA2C,QAAA3C,EAAA2C,OAAAW,IAAAO,SACAxE,MAAA2D,QAAAhD,IACA8D,EAAA9D,GAgCA,QAAAoE,GAAA7E,EAAA8E,GACA,IAAAA,EAAc,MAAA9E,EAGd,QAFA1D,GAAAyI,EAAAC,EACA5I,EAAAtB,OAAAsB,KAAA0I,GACAxG,EAAA,EAAiBA,EAAAlC,EAAAmC,OAAiBD,IAClChC,EAAAF,EAAAkC,GACAyG,EAAA/E,EAAA1D,GACA0I,EAAAF,EAAAxI,GACAyC,EAAAiB,EAAA1D,GAEKa,EAAA4H,IAAA5H,EAAA6H,IACLH,EAAAE,EAAAC,GAFAZ,EAAApE,EAAA1D,EAAA0I,EAKA,OAAAhF,GA4DA,QAAAiF,GACAC,EACAC,GAEA,MAAAA,GACAD,EACAA,EAAAE,OAAAD,GACArF,MAAA2D,QAAA0B,GACAA,GACAA,GACAD,EAcA,QAAAG,GAAAH,EAAAC,GACA,GAAAhF,GAAArF,OAAAqB,OAAA+I,GAAA,KACA,OAAAC,GACApF,EAAAI,EAAAgF,GACAhF,EA0EA,QAAAmF,GAAAxJ,GACA,GAAAyJ,GAAAzJ,EAAAyJ,KACA,IAAAA,EAAA,CACA,GACAjH,GAAAd,EAAAgI,EADArF,IAEA,IAAAL,MAAA2D,QAAA8B,GAEA,IADAjH,EAAAiH,EAAAhH,OACAD,KAEA,iBADAd,EAAA+H,EAAAjH,MAEAkH,EAAAC,GAAAjI,GACA2C,EAAAqF,IAAqB5J,KAAA,WAKlB,IAAAuB,EAAAoI,GACH,OAAAjJ,KAAAiJ,GACA/H,EAAA+H,EAAAjJ,GACAkJ,EAAAC,GAAAnJ,GACA6D,EAAAqF,GAAArI,EAAAK,GACAA,GACW5B,KAAA4B,EAGX1B,GAAAyJ,MAAApF,GAMA,QAAAuF,GAAA5J,GACA,GAAA6J,GAAA7J,EAAA8J,UACA,IAAAD,EACA,OAAArJ,KAAAqJ,GAAA,CACA,GAAA1E,GAAA0E,EAAArJ,EACA,mBAAA2E,KACA0E,EAAArJ,IAAqB8C,KAAA6B,EAAA4E,OAAA5E,KAUrB,QAAA6E,GACAC,EACAC,EACApE,GA+BA,QAAAqE,GAAA3J,GACA,GAAA4J,GAAAC,GAAA7J,IAAA8J,EACAtK,GAAAQ,GAAA4J,EAAAH,EAAAzJ,GAAA0J,EAAA1J,GAAAsF,EAAAtF,GA3BA,kBAAA0J,KACAA,IAAAlK,SAGAwJ,EAAAU,GACAN,EAAAM,EACA,IAAAK,GAAAL,EAAAM,OAIA,IAHAD,IACAN,EAAAD,EAAAC,EAAAM,EAAAzE,IAEAoE,EAAAO,OACA,OAAAjI,GAAA,EAAAiB,EAAAyG,EAAAO,OAAAhI,OAA4CD,EAAAiB,EAAOjB,IACnDyH,EAAAD,EAAAC,EAAAC,EAAAO,OAAAjI,GAAAsD,EAGA,IACAtF,GADAR,IAEA,KAAAQ,IAAAyJ,GACAE,EAAA3J,EAEA,KAAAA,IAAA0J,GACAjH,EAAAgH,EAAAzJ,IACA2J,EAAA3J,EAOA,OAAAR,GAQA,QAAA0K,GACA1K,EACAF,EACA6K,EACAC,GAGA,mBAAAD,GAAA,CAGA,GAAAE,GAAA7K,EAAAF,EAEA,IAAAmD,EAAA4H,EAAAF,GAA2B,MAAAE,GAAAF,EAC3B,IAAAG,GAAAnB,GAAAgB,EACA,IAAA1H,EAAA4H,EAAAC,GAAoC,MAAAD,GAAAC,EACpC,IAAAC,GAAAC,GAAAF,EACA,IAAA7H,EAAA4H,EAAAE,GAAqC,MAAAF,GAAAE,EASrC,OAPAF,GAAAF,IAAAE,EAAAC,IAAAD,EAAAE,IAYA,QAAAE,GACAzK,EACA0K,EACAC,EACArF,GAEA,GAAAsF,GAAAF,EAAA1K,GACA6K,GAAApI,EAAAkI,EAAA3K,GACAU,EAAAiK,EAAA3K,EAUA,IARA8K,EAAAC,QAAAH,EAAAtL,QACAuL,IAAApI,EAAAmI,EAAA,WACAlK,GAAA,EACKoK,EAAAzJ,OAAAuJ,EAAAtL,OAAA,KAAAoB,OAAAsK,GAAAhL,KACLU,GAAA,QAIAL,KAAAK,EAAA,CACAA,EAAAuK,EAAA3F,EAAAsF,EAAA5K,EAGA,IAAAkL,GAAAlE,GAAAC,aACAD,IAAAC,eAAA,EACAN,EAAAjG,GACAsG,GAAAC,cAAAiE,EAKA,MAAAxK,GAMA,QAAAuK,GAAA3F,EAAAsF,EAAA5K,GAEA,GAAAyC,EAAAmI,EAAA,YAGA,GAAAjG,GAAAiG,EAAArL,OAYA,OAAA+F,MAAA6F,SAAAR,eACAtK,KAAAiF,EAAA6F,SAAAR,UAAA3K,QACAK,KAAAiF,EAAA8F,OAAApL,GAEAsF,EAAA8F,OAAApL,GAIA,kBAAA2E,IAAA,aAAA0G,EAAAT,EAAAtL,MACAqF,EAAA5D,KAAAuE,GACAX,GAiFA,QAAA0G,GAAAzI,GACA,GAAA0I,GAAA1I,KAAA3B,WAAAqK,MAAA,qBACA,OAAAA,KAAA,MAGA,QAAAR,GAAAxL,EAAAsD,GACA,IAAAY,MAAA2D,QAAAvE,GACA,MAAAyI,GAAAzI,KAAAyI,EAAA/L,EAEA,QAAA0C,GAAA,EAAAuJ,EAAA3I,EAAAX,OAAkCD,EAAAuJ,EAASvJ,IAC3C,GAAAqJ,EAAAzI,EAAAZ,MAAAqJ,EAAA/L,GACA,QAIA,UAsJA,QAAAkM,GAAAtK,GACA,UAAAuK,QAAApL,iBAAAgB,OAAAH,IAOA,QAAAwK,GAAAC,GACA,GAAAC,GAAA,GAAAH,IACAE,EAAAE,IACAF,EAAAG,KACAH,EAAAI,SACAJ,EAAAK,KACAL,EAAAM,IACAN,EAAAO,QACAP,EAAAQ,iBAOA,OALAP,GAAAQ,GAAAT,EAAAS,GACAR,EAAAS,SAAAV,EAAAU,SACAT,EAAA5L,IAAA2L,EAAA3L,IACA4L,EAAAU,UAAAX,EAAAW,UACAV,EAAAW,UAAA,EACAX,EAGA,QAAAY,GAAAC,GAGA,OAFAlB,GAAAkB,EAAAxK,OACA4B,EAAA,GAAAL,OAAA+H,GACAvJ,EAAA,EAAiBA,EAAAuJ,EAASvJ,IAC1B6B,EAAA7B,GAAA0J,EAAAe,EAAAzK,GAEA,OAAA6B,GAoBA,QAAA6I,GAAAC,GACA,QAAAC,KACA,GAAAC,GAAA3J,UAEAyJ,EAAAC,EAAAD,GACA,KAAAnJ,MAAA2D,QAAAwF,GAMA,MAAAA,GAAAxJ,MAAA,KAAAD,UALA,QAAAlB,GAAA,EAAqBA,EAAA2K,EAAA1K,OAAgBD,IACrC2K,EAAA3K,GAAAmB,MAAA,KAAA0J,GAQA,MADAD,GAAAD,MACAC,EAGA,QAAAE,GACAC,EACAC,EACAC,EACAC,EACA5H,GAEA,GAAA4D,GAAAiE,EAAAC,EAAAC,CACA,KAAAnE,IAAA6D,GACAI,EAAAJ,EAAA7D,GACAkE,EAAAJ,EAAA9D,GACAmE,EAAAC,GAAApE,GACA/I,EAAAgN,KAKKhN,EAAAiN,IACLjN,EAAAgN,EAAAR,OACAQ,EAAAJ,EAAA7D,GAAAwD,EAAAS,IAEAF,EAAAI,EAAAnE,KAAAiE,EAAAE,EAAAhJ,KAAAgJ,EAAAE,QAAAF,EAAAG,UACKL,IAAAC,IACLA,EAAAT,IAAAQ,EACAJ,EAAA7D,GAAAkE,GAGA,KAAAlE,IAAA8D,GACA7M,EAAA4M,EAAA7D,MACAmE,EAAAC,GAAApE,GACAgE,EAAAG,EAAAnE,KAAA8D,EAAA9D,GAAAmE,EAAAE,UAOA,QAAAE,IAAA9I,EAAA+I,EAAAC,GAIA,QAAAC,KACAD,EAAAxK,MAAAoB,KAAArB,WAGAf,EAAAyK,EAAAD,IAAAiB,GAPA,GAAAhB,GACAiB,EAAAlJ,EAAA+I,EASAvN,GAAA0N,GAEAjB,EAAAF,GAAAkB,IAGAtN,EAAAuN,EAAAlB,MAAApM,EAAAsN,EAAAC,SAEAlB,EAAAiB,EACAjB,EAAAD,IAAAvG,KAAAwH,IAGAhB,EAAAF,GAAAmB,EAAAD,IAIAhB,EAAAkB,QAAA,EACAnJ,EAAA+I,GAAAd,EAKA,QAAAmB,IACAjC,EACAhG,EACA+F,GAKA,GAAAnB,GAAA5E,EAAAtG,QAAAyJ,KACA,KAAA9I,EAAAuK,GAAA,CAGA,GAAA7G,MACAmK,EAAAlC,EAAAkC,MACA/E,EAAA6C,EAAA7C,KACA,IAAA3I,EAAA0N,IAAA1N,EAAA2I,GACA,OAAAjJ,KAAA0K,GAAA,CACA,GAAAuD,GAAAjD,GAAAhL,EAiBAkO,IAAArK,EAAAoF,EAAAjJ,EAAAiO,GAAA,IACAC,GAAArK,EAAAmK,EAAAhO,EAAAiO,GAAA,GAGA,MAAApK,IAGA,QAAAqK,IACArK,EACAsK,EACAnO,EACAiO,EACAG,GAEA,GAAA9N,EAAA6N,GAAA,CACA,GAAA1L,EAAA0L,EAAAnO,GAKA,MAJA6D,GAAA7D,GAAAmO,EAAAnO,GACAoO,SACAD,GAAAnO,IAEA,CACK,IAAAyC,EAAA0L,EAAAF,GAKL,MAJApK,GAAA7D,GAAAmO,EAAAF,GACAG,SACAD,GAAAF,IAEA,EAGA,SAiBA,QAAAI,IAAAtC,GACA,OAAA/J,GAAA,EAAiBA,EAAA+J,EAAA9J,OAAqBD,IACtC,GAAAwB,MAAA2D,QAAA4E,EAAA/J,IACA,MAAAwB,OAAA8K,UAAAxF,OAAA3F,SAAA4I,EAGA,OAAAA,GAOA,QAAAwC,IAAAxC,GACA,MAAAtL,GAAAsL,IACAP,EAAAO,IACAvI,MAAA2D,QAAA4E,GACAyC,GAAAzC,OACA1L,GAGA,QAAAoO,IAAAC,GACA,MAAApO,GAAAoO,IAAApO,EAAAoO,EAAA1C,OAAAxL,EAAAkO,EAAApC,WAGA,QAAAkC,IAAAzC,EAAA4C,GACA,GACA3M,GAAAyC,EAAAmK,EADA/K,IAEA,KAAA7B,EAAA,EAAaA,EAAA+J,EAAA9J,OAAqBD,IAClCyC,EAAAsH,EAAA/J,GACA7B,EAAAsE,IAAA,iBAAAA,KACAmK,EAAA/K,IAAA5B,OAAA,GAEAuB,MAAA2D,QAAA1C,GACAZ,EAAAuC,KAAAjD,MAAAU,EAAA2K,GAAA/J,GAAAkK,GAAA,QAAA3M,IACKvB,EAAAgE,GACLgK,GAAAG,GAIA,EAAA5C,MAAA3K,OAAAoD,GACO,KAAAA,GAEPZ,EAAAuC,KAAAoF,EAAA/G,IAGAgK,GAAAhK,IAAAgK,GAAAG,GAEA/K,IAAA5B,OAAA,GAAAuJ,EAAAoD,EAAA5C,KAAAvH,EAAAuH,OAGAzL,EAAAwL,EAAA8C,WACAvO,EAAAmE,EAAAoH,MACA1L,EAAAsE,EAAAzE,MACAM,EAAAqO,KACAlK,EAAAzE,IAAA,UAAA2O,EAAA,IAAA3M,EAAA,MAEA6B,EAAAuC,KAAA3B,IAIA,OAAAZ,GAKA,QAAAiL,IAAAC,EAAAC,GACA,MAAArO,GAAAoO,GACAC,EAAAvL,OAAAsL,GACAA,EAGA,QAAAE,IACAC,EACAC,EACAjD,GAEA,GAAA3L,EAAA2O,EAAAtJ,QAAAtF,EAAA4O,EAAAE,WACA,MAAAF,GAAAE,SAGA,IAAA9O,EAAA4O,EAAAG,UACA,MAAAH,GAAAG,QAGA,IAAA9O,EAAA2O,EAAAI,UAAAhP,EAAA4O,EAAAK,aACA,MAAAL,GAAAK,WAGA,KAAAjP,EAAA4O,EAAAM,UAGG,CACH,GAAAA,GAAAN,EAAAM,UAAAtD,GACAuD,GAAA,EAEAC,EAAA,WACA,OAAA1N,GAAA,EAAAiB,EAAAuM,EAAAvN,OAA0CD,EAAAiB,EAAOjB,IACjDwN,EAAAxN,GAAA2N,gBAIAC,EAAAvL,EAAA,SAAAR,GAEAqL,EAAAG,SAAAP,GAAAjL,EAAAsL,GAGAM,GACAC,MAIAG,EAAAxL,EAAA,SAAAyL,GAKAxP,EAAA4O,EAAAE,aACAF,EAAAtJ,OAAA,EACA8J,OAIA7L,EAAAqL,EAAAU,EAAAC,EA6CA,OA3CAlP,GAAAkD,KACA,kBAAAA,GAAAkM,KAEA5P,EAAA+O,EAAAG,WACAxL,EAAAkM,KAAAH,EAAAC,GAEOvP,EAAAuD,EAAAmM,YAAA,kBAAAnM,GAAAmM,UAAAD,OACPlM,EAAAmM,UAAAD,KAAAH,EAAAC,GAEAvP,EAAAuD,EAAA+B,SACAsJ,EAAAE,UAAAN,GAAAjL,EAAA+B,MAAAuJ,IAGA7O,EAAAuD,EAAAyL,WACAJ,EAAAK,YAAAT,GAAAjL,EAAAyL,QAAAH,GACA,IAAAtL,EAAAoM,MACAf,EAAAI,SAAA,EAEAY,WAAA,WACA/P,EAAA+O,EAAAG,WAAAlP,EAAA+O,EAAAtJ,SACAsJ,EAAAI,SAAA,EACAI,MAEa7L,EAAAoM,OAAA,MAIb3P,EAAAuD,EAAAsM,UACAD,WAAA,WACA/P,EAAA+O,EAAAG,WACAQ,EAGA,OAGWhM,EAAAsM,WAKXV,GAAA,EAEAP,EAAAI,QACAJ,EAAAK,YACAL,EAAAG,SA/EAH,EAAAM,SAAApJ,KAAA8F,GAqFA,QAAAkE,IAAArE,GACA,GAAAvI,MAAA2D,QAAA4E,GACA,OAAA/J,GAAA,EAAmBA,EAAA+J,EAAA9J,OAAqBD,IAAA,CACxC,GAAAyC,GAAAsH,EAAA/J,EACA,IAAA1B,EAAAmE,IAAAnE,EAAAmE,EAAA0H,kBACA,MAAA1H,IAUA,QAAA4L,IAAA/K,GACAA,EAAAgL,QAAA9R,OAAAqB,OAAA,MACAyF,EAAAiL,eAAA,CAEA,IAAAC,GAAAlL,EAAA6F,SAAAsF,gBACAD,IACAE,GAAApL,EAAAkL,GAMA,QAAAvD,IAAAI,EAAAzK,EAAA+N,GACAA,EACAzK,GAAA0K,MAAAvD,EAAAzK,GAEAsD,GAAA2K,IAAAxD,EAAAzK,GAIA,QAAAkO,IAAAzD,EAAAzK,GACAsD,GAAA6K,KAAA1D,EAAAzK,GAGA,QAAA8N,IACApL,EACAkL,EACAQ,GAEA9K,GAAAZ,EACAwH,EAAA0D,EAAAQ,MAA+C/D,GAAA6D,GAAAxL,GAwG/C,QAAA2L,IACAlF,EACAG,GAEA,GAAAgF,KACA,KAAAnF,EACA,MAAAmF,EAGA,QADAC,MACAnP,EAAA,EAAAiB,EAAA8I,EAAA9J,OAAsCD,EAAAiB,EAAOjB,IAAA,CAC7C,GAAA0H,GAAAqC,EAAA/J,EAGA,IAAA0H,EAAAwC,aAAAxC,EAAA0H,oBAAAlF,IACAxC,EAAAoC,MAAA,MAAApC,EAAAoC,KAAAuF,KAUAF,EAAA/K,KAAAsD,OATA,CACA,GAAAR,GAAAQ,EAAAoC,KAAAuF,KACAA,EAAAH,EAAAhI,KAAAgI,EAAAhI,MACA,cAAAQ,EAAAmC,IACAwF,EAAAjL,KAAAjD,MAAAkO,EAAA3H,EAAAqC,UAEAsF,EAAAjL,KAAAsD,IAUA,MAHAyH,GAAAG,MAAAC,MACAL,EAAA3R,QAAA4R,GAEAD,EAGA,QAAAK,IAAA7C,GACA,MAAAA,GAAApC,WAAA,MAAAoC,EAAA1C,KAGA,QAAAwF,IACA7E,EACA9I,GAEAA,OACA,QAAA7B,GAAA,EAAiBA,EAAA2K,EAAA1K,OAAgBD,IACjCwB,MAAA2D,QAAAwF,EAAA3K,IACAwP,GAAA7E,EAAA3K,GAAA6B,GAEAA,EAAA8I,EAAA3K,GAAAhC,KAAA2M,EAAA3K,GAAAY,EAGA,OAAAiB,GAOA,QAAA4N,IAAAnM,GACA,GAAA9F,GAAA8F,EAAA6F,SAGA1B,EAAAjK,EAAAiK,MACA,IAAAA,IAAAjK,EAAAkS,SAAA,CACA,KAAAjI,EAAA0B,SAAAuG,UAAAjI,EAAAkI,SACAlI,IAAAkI,OAEAlI,GAAAmI,UAAAxL,KAAAd,GAGAA,EAAAqM,QAAAlI,EACAnE,EAAAuM,MAAApI,IAAAoI,MAAAvM,EAEAA,EAAAsM,aACAtM,EAAAwM,SAEAxM,EAAAyM,SAAA,KACAzM,EAAA0M,UAAA,KACA1M,EAAA2M,iBAAA,EACA3M,EAAA4M,YAAA,EACA5M,EAAA6M,cAAA,EACA7M,EAAA8M,mBAAA,EA4FA,QAAAC,IACA/M,EACAgN,EACAC,GAEAjN,EAAAkN,IAAAF,EACAhN,EAAA6F,SAAA1L,SACA6F,EAAA6F,SAAA1L,OAAAgT,IAmBAC,GAAApN,EAAA,cAEA,IAAAqN,EAkCA,OAdAA,GAAA,WACArN,EAAAsN,QAAAtN,EAAAuN,UAAAN,IAIAjN,EAAAyM,SAAA,GAAAe,IAAAxN,EAAAqN,EAAA7O,GACAyO,GAAA,EAIA,MAAAjN,EAAAyN,SACAzN,EAAA4M,YAAA,EACAQ,GAAApN,EAAA,YAEAA,EAGA,QAAA0N,IACA1N,EACAqF,EACA6F,EACAyC,EACAC,GAIA,GAAAC,MACAD,GACA5N,EAAA6F,SAAAiI,iBACAH,EAAAnH,KAAAuH,aACA/N,EAAAgO,eAAAC,GAWA,IARAjO,EAAA6F,SAAAqI,aAAAP,EACA3N,EAAAyN,OAAAE,EACA3N,EAAAmO,SACAnO,EAAAmO,OAAAhK,OAAAwJ,GAEA3N,EAAA6F,SAAAiI,gBAAAF,EAGAvI,GAAArF,EAAA6F,SAAAlC,MAAA,CACAjC,GAAAC,eAAA,CAMA,QAFAgC,GAAA3D,EAAA8F,OACAsI,EAAApO,EAAA6F,SAAAwI,cACA3R,EAAA,EAAmBA,EAAA0R,EAAAzR,OAAqBD,IAAA,CACxC,GAAAhC,GAAA0T,EAAA1R,EACAiH,GAAAjJ,GAAAyK,EAAAzK,EAAAsF,EAAA6F,SAAAlC,MAAA0B,EAAArF,GAEA0B,GAAAC,eAAA,EAKA3B,EAAA6F,SAAAR,YAGA,GAAA6F,EAAA,CACA,GAAAQ,GAAA1L,EAAA6F,SAAAsF,gBACAnL,GAAA6F,SAAAsF,iBAAAD,EACAE,GAAApL,EAAAkL,EAAAQ,GAGAmC,IACA7N,EAAAsO,OAAA3C,GAAAiC,EAAAD,EAAA/G,SACA5G,EAAAqK,gBAIA,QAAAkE,IAAAvO,GACA,KAAAA,QAAAqM,UACA,GAAArM,EAAA0M,UAAuB,QAEvB,UAGA,QAAA8B,IAAAxO,EAAAyO,GACA,GAAAA,GAEA,GADAzO,EAAA2M,iBAAA,EACA4B,GAAAvO,GACA,WAEG,IAAAA,EAAA2M,gBACH,MAEA,IAAA3M,EAAA0M,WAAA,OAAA1M,EAAA0M,UAAA,CACA1M,EAAA0M,WAAA,CACA,QAAAhQ,GAAA,EAAmBA,EAAAsD,EAAAsM,UAAA3P,OAAyBD,IAC5C8R,GAAAxO,EAAAsM,UAAA5P,GAEA0Q,IAAApN,EAAA,cAIA,QAAA0O,IAAA1O,EAAAyO,GACA,KAAAA,IACAzO,EAAA2M,iBAAA,EACA4B,GAAAvO,KAIAA,EAAA0M,WAAA,CACA1M,EAAA0M,WAAA,CACA,QAAAhQ,GAAA,EAAmBA,EAAAsD,EAAAsM,UAAA3P,OAAyBD,IAC5CgS,GAAA1O,EAAAsM,UAAA5P,GAEA0Q,IAAApN,EAAA,gBAIA,QAAAoN,IAAApN,EAAAqI,GACA,GAAAsG,GAAA3O,EAAA6F,SAAAwC,EACA,IAAAsG,EACA,OAAAjS,GAAA,EAAAkS,EAAAD,EAAAhS,OAAwCD,EAAAkS,EAAOlS,IAC/C,IACAiS,EAAAjS,GAAAjB,KAAAuE,GACO,MAAAnB,GACPiB,EAAAjB,EAAAmB,EAAAqI,EAAA,SAIArI,EAAAiL,eACAjL,EAAA6O,MAAA,QAAAxG,GAoBA,QAAAyG,MACA9R,GAAA+R,GAAApS,OAAAqS,GAAArS,OAAA,EACAsS,MAIAC,GAAAC,IAAA,EAMA,QAAAC,MACAD,IAAA,CACA,IAAAE,GAAAxK,CAcA,KAJAkK,GAAAO,KAAA,SAAAjW,EAAAqF,GAA8B,MAAArF,GAAAwL,GAAAnG,EAAAmG,KAI9B7H,GAAA,EAAiBA,GAAA+R,GAAApS,OAAsBK,KACvCqS,EAAAN,GAAA/R,IACA6H,EAAAwK,EAAAxK,GACAoK,GAAApK,GAAA,KACAwK,EAAAE,KAmBA,IAAAC,GAAAR,GAAAS,QACAC,EAAAX,GAAAU,OAEAX,MAGAa,GAAAH,GACAI,GAAAF,GAIAG,IAAA3P,GAAA2P,UACAA,GAAAC,KAAA,SAIA,QAAAF,IAAAb,GAEA,IADA,GAAArS,GAAAqS,EAAApS,OACAD,KAAA,CACA,GAAA2S,GAAAN,EAAArS,GACAsD,EAAAqP,EAAArP,EACAA,GAAAyM,WAAA4C,GAAArP,EAAA4M,YACAQ,GAAApN,EAAA,YASA,QAAA+P,IAAA/P,GAGAA,EAAA0M,WAAA,EACAsC,GAAAlO,KAAAd,GAGA,QAAA2P,IAAAZ,GACA,OAAArS,GAAA,EAAiBA,EAAAqS,EAAApS,OAAkBD,IACnCqS,EAAArS,GAAAgQ,WAAA,EACA8B,GAAAO,EAAArS,IAAA,GASA,QAAAsT,IAAAX,GACA,GAAAxK,GAAAwK,EAAAxK,EACA,UAAAoK,GAAApK,GAAA,CAEA,GADAoK,GAAApK,IAAA,EACAsK,GAEK,CAIL,IADA,GAAAzS,GAAAqS,GAAApS,OAAA,EACAD,EAAAM,IAAA+R,GAAArS,GAAAmI,GAAAwK,EAAAxK,IACAnI,GAEAqS,IAAA7R,OAAAR,EAAA,IAAA2S,OARAN,IAAAjO,KAAAuO,EAWAH,MACAA,IAAA,EACAe,GAAAb,MA2NA,QAAAc,IAAAtU,GACAuU,GAAAC,QACAC,GAAAzU,EAAAuU,IAGA,QAAAE,IAAAzU,EAAA0U,GACA,GAAA5T,GAAAlC,EACA+V,EAAArS,MAAA2D,QAAAjG,EACA,KAAA2U,GAAAlV,EAAAO,KAAA1C,OAAA4I,aAAAlG,GAAA,CAGA,GAAAA,EAAA4F,OAAA,CACA,GAAAgP,GAAA5U,EAAA4F,OAAAW,IAAA0C,EACA,IAAAyL,EAAArB,IAAAuB,GACA,MAEAF,GAAA3I,IAAA6I,GAEA,GAAAD,EAEA,IADA7T,EAAAd,EAAAe,OACAD,KAAiB2T,GAAAzU,EAAAc,GAAA4T,OAIjB,KAFA9V,EAAAtB,OAAAsB,KAAAoB,GACAc,EAAAlC,EAAAmC,OACAD,KAAiB2T,GAAAzU,EAAApB,EAAAkC,IAAA4T,IAajB,QAAAG,IAAA7P,EAAA8P,EAAAhW,GACAiW,GAAAvX,IAAA,WACA,MAAA6F,MAAAyR,GAAAhW,IAEAiW,GAAAnO,IAAA,SAAA5G,GACAqD,KAAAyR,GAAAhW,GAAAkB,GAEA1C,OAAAC,eAAAyH,EAAAlG,EAAAiW,IAGA,QAAAC,IAAA5Q,GACAA,EAAA6Q,YACA,IAAAC,GAAA9Q,EAAA6F,QACAiL,GAAAnN,OAAmBoN,GAAA/Q,EAAA8Q,EAAAnN,OACnBmN,EAAAE,SAAqBC,GAAAjR,EAAA8Q,EAAAE,SACrBF,EAAAtK,KACA0K,GAAAlR,GAEAqB,EAAArB,EAAAmR,UAAyB,GAEzBL,EAAAxW,UAAsB8W,GAAApR,EAAA8Q,EAAAxW,UACtBwW,EAAAO,OAAmBC,GAAAtR,EAAA8Q,EAAAO,OASnB,QAAAN,IAAA/Q,EAAAuR,GACA,GAAAlM,GAAArF,EAAA6F,SAAAR,cACA1B,EAAA3D,EAAA8F,UAGAtL,EAAAwF,EAAA6F,SAAAwI,aACAmD,GAAAxR,EAAAqM,OAEA3K,IAAAC,cAAA6P,CAkCA,QAAA9W,KAAA6W,IAjCA,SAAA7W,GACAF,EAAAsG,KAAApG,EACA,IAAAU,GAAA+J,EAAAzK,EAAA6W,EAAAlM,EAAArF,EAqBAiC,GAAA0B,EAAAjJ,EAAAU,GAKAV,IAAAsF,IACAyQ,GAAAzQ,EAAA,SAAAtF,IAIAA,EACAgH,IAAAC,eAAA,EAGA,QAAAuP,IAAAlR,GACA,GAAAwG,GAAAxG,EAAA6F,SAAAW,IACAA,GAAAxG,EAAAmR,MAAA,kBAAA3K,GACAiL,GAAAjL,EAAAxG,GACAwG,MACAjL,EAAAiL,KACAA,KAWA,KAHA,GAAAhM,GAAAtB,OAAAsB,KAAAgM,GACA7C,EAAA3D,EAAA6F,SAAAlC,MACAjH,EAAAlC,EAAAmC,OACAD,KACAiH,GAAAxG,EAAAwG,EAAAnJ,EAAAkC,KAMKwC,EAAA1E,EAAAkC,KACL+T,GAAAzQ,EAAA,QAAAxF,EAAAkC,GAIA2E,GAAAmF,GAAA,GAGA,QAAAiL,IAAAjL,EAAAxG,GACA,IACA,MAAAwG,GAAA/K,KAAAuE,GACG,MAAAnB,GAEH,MADAiB,GAAAjB,EAAAmB,EAAA,cAOA,QAAAoR,IAAApR,EAAA1F,GACA,GAAAoX,GAAA1R,EAAA2R,kBAAAzY,OAAAqB,OAAA,KAEA,QAAAG,KAAAJ,GAAA,CACA,GAAAsX,GAAAtX,EAAAI,GACA4H,EAAA,kBAAAsP,OAAAxY,GAWAsY,GAAAhX,GAAA,GAAA8S,IAAAxN,EAAAsC,EAAA9D,EAAAqT,IAKAnX,IAAAsF,IACA8R,GAAA9R,EAAAtF,EAAAkX,IAWA,QAAAE,IAAAlR,EAAAlG,EAAAkX,GACA,kBAAAA,IACAjB,GAAAvX,IAAA2Y,GAAArX,GACAiW,GAAAnO,IAAAhE,IAEAmS,GAAAvX,IAAAwY,EAAAxY,KACA,IAAAwY,EAAArU,MACAwU,GAAArX,GACAkX,EAAAxY,IACAoF,EACAmS,GAAAnO,IAAAoP,EAAApP,IACAoP,EAAApP,IACAhE,GAEAtF,OAAAC,eAAAyH,EAAAlG,EAAAiW,IAGA,QAAAoB,IAAArX,GACA,kBACA,GAAA2U,GAAApQ,KAAA0S,mBAAA1S,KAAA0S,kBAAAjX,EACA,IAAA2U,EAOA,MANAA,GAAA2C,OACA3C,EAAA4C,WAEAtR,GAAAC,QACAyO,EAAA3M,SAEA2M,EAAAjU,OAKA,QAAA6V,IAAAjR,EAAAgR,GACAhR,EAAA6F,SAAAlC,KACA,QAAAjJ,KAAAsW,GACAhR,EAAAtF,GAAA,MAAAsW,EAAAtW,GAAA8D,EAAAhB,EAAAwT,EAAAtW,GAAAsF,GAmBA,QAAAsR,IAAAtR,EAAAqR,GACA,OAAA3W,KAAA2W,GAAA,CACA,GAAAa,GAAAb,EAAA3W,EACA,IAAAwD,MAAA2D,QAAAqQ,GACA,OAAAxV,GAAA,EAAqBA,EAAAwV,EAAAvV,OAAoBD,IACzCyV,GAAAnS,EAAAtF,EAAAwX,EAAAxV,QAGAyV,IAAAnS,EAAAtF,EAAAwX,IAKA,QAAAC,IAAAnS,EAAAtF,EAAAwX,GACA,GAAAhY,EACAqB,GAAA2W,KACAhY,EAAAgY,EACAA,aAEA,gBAAAA,KACAA,EAAAlS,EAAAkS,IAEAlS,EAAAoS,OAAA1X,EAAAwX,EAAAhY,GAiDA,QAAAmY,IAAArS,GACA,GAAAsS,GAAAtS,EAAA6F,SAAAyM,OACAA,KACAtS,EAAAuS,UAAA,kBAAAD,GACAA,EAAA7W,KAAAuE,GACAsS,GAIA,QAAAE,IAAAxS,GACA,GAAAyS,GAAAC,GAAA1S,EAAA6F,SAAA8M,OAAA3S,EACAyS,IACAvZ,OAAAsB,KAAAiY,GAAAhY,QAAA,SAAAC,GAYAuH,EAAAjC,EAAAtF,EAAA+X,EAAA/X,MAMA,QAAAgY,IAAAC,EAAA3S,GACA,GAAA2S,EAAA,CAWA,OARA9Q,GAAA3D,MAAA2D,QAAA8Q,GACAF,EAAAvZ,OAAAqB,OAAA,MACAC,EAAAqH,EACA8Q,EACAC,GACAC,QAAAC,QAAAH,GACAzZ,OAAAsB,KAAAmY,GAEAjW,EAAA,EAAmBA,EAAAlC,EAAAmC,OAAiBD,IAIpC,IAHA,GAAAhC,GAAAF,EAAAkC,GACAqW,EAAAlR,EAAAnH,EAAAiY,EAAAjY,GACAsY,EAAAhT,EACAgT,GAAA,CACA,GAAAA,EAAAT,WAAAQ,IAAAC,GAAAT,UAAA,CACAE,EAAA/X,GAAAsY,EAAAT,UAAAQ,EACA,OAEAC,IAAA3G,QAGA,MAAAoG,IAMA,QAAAQ,IACAzS,EACA6E,EACAmB,EACAI,EACAH,GAEA,GAAA9C,MACAyB,EAAA5E,EAAAtG,QAAAyJ,KACA,IAAA3I,EAAAoK,GACA,OAAA1K,KAAA0K,GACAzB,EAAAjJ,GAAAyK,EAAAzK,EAAA0K,EAAAC,WAGArK,GAAAwL,EAAAkC,QAA4BwK,GAAAvP,EAAA6C,EAAAkC,OAC5B1N,EAAAwL,EAAA7C,QAA4BuP,GAAAvP,EAAA6C,EAAA7C,MAI5B,IAAAwP,GAAAja,OAAAqB,OAAAqM,GACAwM,EAAA,SAAA/Z,EAAAqF,EAAAS,EAAAkU,GAAiC,MAAAC,IAAAH,EAAA9Z,EAAAqF,EAAAS,EAAAkU,GAAA,IACjChN,EAAA7F,EAAAtG,QAAAC,OAAAsB,KAAA,KAAA2X,GACA5M,OACA7C,QACA8C,WACAtC,OAAAyC,EACAsE,UAAA1E,EAAAiB,OACA8L,WAAAb,GAAAlS,EAAAtG,QAAAyY,OAAA/L,GACAgF,MAAA,WAAwB,MAAAD,IAAAlF,EAAAG,KASxB,OAPAP,aAAAF,MACAE,EAAAyF,kBAAAlF,EACAP,EAAAmN,kBAAAhT,EAAAtG,QACAsM,EAAAuF,QACA1F,EAAAG,OAAAH,EAAAG,UAAqCuF,KAAAvF,EAAAuF,OAGrC1F,EAGA,QAAA6M,IAAA9U,EAAA8E,GACA,OAAAxI,KAAAwI,GACA9E,EAAAyF,GAAAnJ,IAAAwI,EAAAxI,GA4EA,QAAA+Y,IACAjT,EACAgG,EACAI,EACAH,EACAF,GAEA,IAAA1L,EAAA2F,GAAA,CAIA,GAAAqJ,GAAAjD,EAAAf,SAAA6N,KASA,IANArY,EAAAmF,KACAA,EAAAqJ,EAAA1L,OAAAqC,IAKA,kBAAAA,MAQA3F,EAAA2F,EAAAmT,UAEA5Y,MADAyF,EAAAmJ,GAAAnJ,EAAAqJ,EAAAjD,KADA,CAWAgN,GAAApT,GAEAgG,QAGAxL,EAAAwL,EAAAqN,QACAC,GAAAtT,EAAAtG,QAAAsM,EAIA,IAAAnB,GAAAoD,GAAAjC,EAAAhG,EAAA+F,EAGA,IAAAtL,EAAAuF,EAAAtG,QAAA6Z,YACA,MAAAd,IAAAzS,EAAA6E,EAAAmB,EAAAI,EAAAH,EAKA,IAAAyE,GAAA1E,EAAAiB,EAEAjB,GAAAiB,GAAAjB,EAAAwN,SAEA/Y,EAAAuF,EAAAtG,QAAAkS,YAGA5F,MAIAyN,GAAAzN,EAGA,IAAA5C,GAAApD,EAAAtG,QAAA0J,MAAA2C,CAMA,OALA,IAAAJ,IACA,iBAAA3F,EAAA,KAAAoD,EAAA,IAAAA,EAAA,IACA4C,MAAAzL,iBAAA6L,GACKpG,OAAA6E,YAAA6F,YAAA3E,MAAAE,eAKL,QAAAyN,IACA7N,EACAlC,EACAgQ,EACAC,GAEA,GAAAC,GAAAhO,EAAAQ,iBACA3M,GACAoa,cAAA,EACAnQ,SACAkB,UAAAgP,EAAAhP,UACAkP,cAAAF,EAAA9N,IACA2H,aAAA7H,EACA8E,iBAAAkJ,EAAAnJ,UACA4C,gBAAAuG,EAAA5N,SACA+N,WAAAL,GAAA,KACAM,QAAAL,GAAA,MAGAM,EAAArO,EAAAG,KAAAkO,cAKA,OAJA1Z,GAAA0Z,KACAxa,EAAAC,OAAAua,EAAAva,OACAD,EAAAE,gBAAAsa,EAAAta,iBAEA,GAAAia,GAAA7T,KAAAtG,GAGA,QAAA+Z,IAAAzN,GACAA,EAAA6B,OACA7B,EAAA6B,QAEA,QAAA3L,GAAA,EAAiBA,EAAAiY,GAAAhY,OAAyBD,IAAA,CAC1C,GAAAhC,GAAAia,GAAAjY,GACAkY,EAAApO,EAAA6B,KAAA3N,GACAma,EAAAC,GAAApa,EACA8L,GAAA6B,KAAA3N,GAAAka,EAAAG,GAAAF,EAAAD,GAAAC,GAIA,QAAAE,IAAAC,EAAAC,GACA,gBAAA5b,EAAAqF,EAAAS,EAAAkU,GACA2B,EAAA3b,EAAAqF,EAAAS,EAAAkU,GACA4B,EAAA5b,EAAAqF,EAAAS,EAAAkU,IAMA,QAAAS,IAAA5Z,EAAAsM,GACA,GAAAlB,GAAApL,EAAA2Z,OAAA3Z,EAAA2Z,MAAAvO,MAAA,QACAyC,EAAA7N,EAAA2Z,OAAA3Z,EAAA2Z,MAAA9L,OAAA,SAAgEvB,EAAA7C,QAAA6C,EAAA7C,WAA+B2B,GAAAkB,EAAAqN,MAAAzY,KAC/F,IAAAqM,GAAAjB,EAAAiB,KAAAjB,EAAAiB,MACAzM,GAAAyM,EAAAM,IACAN,EAAAM,IAAAvB,EAAAqN,MAAAqB,UAAA1R,OAAAiE,EAAAM,IAEAN,EAAAM,GAAAvB,EAAAqN,MAAAqB,SAWA,QAAA5B,IACA1M,EACAL,EACAC,EACAC,EACA0O,EACAC,GAUA,OARAlX,MAAA2D,QAAA2E,IAAArL,EAAAqL,MACA2O,EAAA1O,EACAA,EAAAD,EACAA,MAAAzL,IAEAE,EAAAma,KACAD,EAAAE,IAEAC,GAAA1O,EAAAL,EAAAC,EAAAC,EAAA0O,GAGA,QAAAG,IACA1O,EACAL,EACAC,EACAC,EACA0O,GAEA,GAAAna,EAAAwL,IAAAxL,EAAA,EAAAwG,QAMA,MAAA2L,KAEA,KAAA5G,EAEA,MAAA4G,KAGAjP,OAAA2D,QAAA4E,IACA,kBAAAA,GAAA,KAEAD,QACAA,EAAAuH,aAAwB9T,QAAAwM,EAAA,IACxBA,EAAA9J,OAAA,GAEAwY,IAAAE,GACA5O,EAAAwC,GAAAxC,GACG0O,IAAAI,KACH9O,EAAAsC,GAAAtC,GAEA,IAAAJ,GAAAS,CACA,oBAAAP,GAAA,CACA,GAAA/F,EACAsG,GAAA5G,GAAAsV,gBAAAjP,GAGAF,EAFAnG,GAAAuV,cAAAlP,GAEA,GAAAJ,IACAjG,GAAAwV,qBAAAnP,GAAAC,EAAAC,MACA1L,UAAA6L,GAEK5L,EAAAwF,EAAAoE,EAAAgC,EAAAf,SAAA,aAAAU,IAELkN,GAAAjT,EAAAgG,EAAAI,EAAAH,EAAAF,GAKA,GAAAJ,IACAI,EAAAC,EAAAC,MACA1L,UAAA6L,OAKAP,GAAAoN,GAAAlN,EAAAC,EAAAI,EAAAH,EAEA,OAAAzL,GAAAqL,IACAS,GAAa6O,GAAAtP,EAAAS,GACbT,GAEA8G,KAIA,QAAAwI,IAAAtP,EAAAS,GAEA,GADAT,EAAAS,KACA,kBAAAT,EAAAE,KAIAvL,EAAAqL,EAAAI,UACA,OAAA/J,GAAA,EAAAiB,EAAA0I,EAAAI,SAAA9J,OAA8CD,EAAAiB,EAAOjB,IAAA,CACrD,GAAA0H,GAAAiC,EAAAI,SAAA/J,EACA1B,GAAAoJ,EAAAmC,MAAA1L,EAAAuJ,EAAA0C,KACA6O,GAAAvR,EAAA0C,IAWA,QAAA8O,IACAha,EACAzB,GAEA,GAAA8D,GAAAvB,EAAAiB,EAAAnD,EAAAE,CACA,IAAAwD,MAAA2D,QAAAjG,IAAA,gBAAAA,GAEA,IADAqC,EAAA,GAAAC,OAAAtC,EAAAe,QACAD,EAAA,EAAAiB,EAAA/B,EAAAe,OAA+BD,EAAAiB,EAAOjB,IACtCuB,EAAAvB,GAAAvC,EAAAyB,EAAAc,UAEG,oBAAAd,GAEH,IADAqC,EAAA,GAAAC,OAAAtC,GACAc,EAAA,EAAeA,EAAAd,EAASc,IACxBuB,EAAAvB,GAAAvC,EAAAuC,EAAA,EAAAA,OAEG,IAAArB,EAAAO,GAGH,IAFApB,EAAAtB,OAAAsB,KAAAoB,GACAqC,EAAA,GAAAC,OAAA1D,EAAAmC,QACAD,EAAA,EAAAiB,EAAAnD,EAAAmC,OAAgCD,EAAAiB,EAAOjB,IACvChC,EAAAF,EAAAkC,GACAuB,EAAAvB,GAAAvC,EAAAyB,EAAAlB,KAAAgC,EAMA,OAHA1B,GAAAiD,KACA,EAAAsL,UAAA,GAEAtL,EAQA,QAAA4X,IACAjS,EACAkS,EACAnS,EACAoS,GAEA,GAAAC,GAAA/W,KAAA+O,aAAApK,EACA,IAAAoS,EAKA,MAJArS,SACAoS,GACA5X,EAAAwF,EAAAoS,GAEAC,EAAArS,IAAAmS,CAEA,IAAAG,GAAAhX,KAAAqP,OAAA1K,EAUA,OAAAqS,IAAAH,EASA,QAAAI,IAAArR,GACA,MAAAD,GAAA3F,KAAA4G,SAAA,UAAAhB,GAAA,IAAAsR,GAQA,QAAAC,IACAC,EACA3b,EACA4b,GAEA,GAAAC,GAAArW,GAAAqW,SAAA7b,IAAA4b,CACA,OAAApY,OAAA2D,QAAA0U,IACA,IAAAA,EAAAtZ,QAAAoZ,GAEAE,IAAAF,EASA,QAAAG,IACAhQ,EACAD,EACAnL,EACAqb,GAEA,GAAArb,EACA,GAAAC,EAAAD,GAKK,CACL8C,MAAA2D,QAAAzG,KACAA,EAAAkD,EAAAlD,GAEA,IAAAyN,EACA,QAAAnO,KAAAU,GAAA,CACA,aAAAV,GAAA,UAAAA,EACAmO,EAAArC,MACS,CACT,GAAAxM,GAAAwM,EAAAkC,OAAAlC,EAAAkC,MAAA1O,IACA6O,GAAA4N,GAAAvW,GAAAwW,YAAAnQ,EAAAvM,EAAAU,GACA8L,EAAAmQ,WAAAnQ,EAAAmQ,aACAnQ,EAAAkC,QAAAlC,EAAAkC,UAEAhO,IAAAmO,KACAA,EAAAnO,GAAAU,EAAAV,UAKA,MAAA8L,GAQA,QAAAoQ,IACA5Z,EACA6Z,GAEA,GAAAC,GAAA7X,KAAA8X,aAAA/Z,EAGA,OAAA8Z,KAAAD,EACA3Y,MAAA2D,QAAAiV,GACA5P,EAAA4P,GACA1Q,EAAA0Q,IAGAA,EAAA7X,KAAA8X,aAAA/Z,GACAiC,KAAA4G,SAAAzL,gBAAA4C,GAAAvB,KAAAwD,KAAA+X,cACAC,GAAAH,EAAA,aAAA9Z,GAAA,GACA8Z,GAOA,QAAAI,IACAJ,EACA9Z,EACAtC,GAGA,MADAuc,IAAAH,EAAA,WAAA9Z,GAAAtC,EAAA,IAAAA,EAAA,QACAoc,EAGA,QAAAG,IACAH,EACApc,EACAyc,GAEA,GAAAjZ,MAAA2D,QAAAiV,GACA,OAAApa,GAAA,EAAmBA,EAAAoa,EAAAna,OAAiBD,IACpCoa,EAAApa,IAAA,gBAAAoa,GAAApa,IACA0a,GAAAN,EAAApa,GAAAhC,EAAA,IAAAgC,EAAAya,OAIAC,IAAAN,EAAApc,EAAAyc,GAIA,QAAAC,IAAAhO,EAAA1O,EAAAyc,GACA/N,EAAArC,UAAA,EACAqC,EAAA1O,MACA0O,EAAA+N,SAKA,QAAAE,IAAArX,GACAA,EAAAmO,OAAA,KACAnO,EAAA+W,aAAA,IACA,IAAApJ,GAAA3N,EAAAyN,OAAAzN,EAAA6F,SAAAqI,aACAoJ,EAAA3J,KAAA/G,OACA5G,GAAAsO,OAAA3C,GAAA3L,EAAA6F,SAAAiI,gBAAAwJ,GACAtX,EAAAgO,aAAAC,GAKAjO,EAAAuX,GAAA,SAAAle,EAAAqF,EAAAS,EAAAkU,GAAiC,MAAAC,IAAAtT,EAAA3G,EAAAqF,EAAAS,EAAAkU,GAAA,IAGjCrT,EAAAwX,eAAA,SAAAne,EAAAqF,EAAAS,EAAAkU,GAA6C,MAAAC,IAAAtT,EAAA3G,EAAAqF,EAAAS,EAAAkU,GAAA,IAiJ7C,QAAAoE,IAAAzX,EAAA9F,GACA,GAAA4W,GAAA9Q,EAAA6F,SAAA3M,OAAAqB,OAAAyF,EAAA0X,YAAAxd,QAEA4W,GAAA3M,OAAAjK,EAAAiK,OACA2M,EAAAzL,UAAAnL,EAAAmL,UACAyL,EAAA5C,aAAAhU,EAAAgU,aACA4C,EAAA3F,iBAAAjR,EAAAiR,iBACA2F,EAAAhD,gBAAA5T,EAAA4T,gBACAgD,EAAAyD,cAAAra,EAAAqa,cACAzD,EAAA0D,WAAAta,EAAAsa,WACA1D,EAAA2D,QAAAva,EAAAua,QACAva,EAAAC,SACA2W,EAAA3W,OAAAD,EAAAC,OACA2W,EAAA1W,gBAAAF,EAAAE,iBAIA,QAAAwZ,IAAApT,GACA,GAAAtG,GAAAsG,EAAAtG,OACA,IAAAsG,EAAAmX,MAAA,CACA,GAAAC,GAAAhE,GAAApT,EAAAmX,MAEA,IAAAC,IADApX,EAAAoX,aACA,CAGApX,EAAAoX,cAEA,IAAAC,GAAAC,GAAAtX,EAEAqX,IACA1Z,EAAAqC,EAAAuX,cAAAF,GAEA3d,EAAAsG,EAAAtG,QAAAgK,EAAA0T,EAAApX,EAAAuX,eACA7d,EAAA0J,OACA1J,EAAA8d,WAAA9d,EAAA0J,MAAApD,IAIA,MAAAtG,GAGA,QAAA4d,IAAAtX,GACA,GAAAyX,GACAC,EAAA1X,EAAAtG,QACAie,EAAA3X,EAAAuX,cACAK,EAAA5X,EAAA6X,aACA,QAAA3d,KAAAwd,GACAA,EAAAxd,KAAA0d,EAAA1d,KACAud,IAAsBA,MACtBA,EAAAvd,GAAA4d,GAAAJ,EAAAxd,GAAAyd,EAAAzd,GAAA0d,EAAA1d,IAGA,OAAAud,GAGA,QAAAK,IAAAJ,EAAAC,EAAAC,GAGA,GAAAla,MAAA2D,QAAAqW,GAAA,CACA,GAAA3Z,KACA6Z,GAAAla,MAAA2D,QAAAuW,SACAD,EAAAja,MAAA2D,QAAAsW,QACA,QAAAzb,GAAA,EAAmBA,EAAAwb,EAAAvb,OAAmBD,KAEtCyb,EAAAlb,QAAAib,EAAAxb,KAAA,GAAA0b,EAAAnb,QAAAib,EAAAxb,IAAA,IACA6B,EAAAuC,KAAAoX,EAAAxb,GAGA,OAAA6B,GAEA,MAAA2Z,GAIA,QAAAK,IAAAre,GAMA+E,KAAAuZ,MAAAte,GAWA,QAAAue,IAAAC,GACAA,EAAAC,IAAA,SAAAC,GAEA,GAAAA,EAAAC,UACA,MAAA5Z,KAGA,IAAA6Z,GAAA/a,EAAAH,UAAA,EAQA,OAPAkb,GAAAC,QAAA9Z,MACA,kBAAA2Z,GAAAI,QACAJ,EAAAI,QAAAnb,MAAA+a,EAAAE,GACK,kBAAAF,IACLA,EAAA/a,MAAA,KAAAib,GAEAF,EAAAC,WAAA,EACA5Z,MAMA,QAAAga,IAAAP,GACAA,EAAAQ,MAAA,SAAAA,GAEA,MADAja,MAAA/E,QAAAgK,EAAAjF,KAAA/E,QAAAgf,GACAja,MAMA,QAAAka,IAAAT,GAMAA,EAAA/E,IAAA,CACA,IAAAA,GAAA,CAKA+E,GAAAva,OAAA,SAAA4Z,GACAA,OACA,IAAAqB,GAAAna,KACAoa,EAAAD,EAAAzF,IACA2F,EAAAvB,EAAAwB,QAAAxB,EAAAwB,SACA,IAAAD,EAAAD,GACA,MAAAC,GAAAD,EAGA,IAAAzV,GAAAmU,EAAAnU,MAAAwV,EAAAlf,QAAA0J,KAWA4V,EAAA,SAAAtf,GACA+E,KAAAuZ,MAAAte,GA6CA,OA3CAsf,GAAAxQ,UAAA9P,OAAAqB,OAAA6e,EAAApQ,WACAwQ,EAAAxQ,UAAA0O,YAAA8B,EACAA,EAAA7F,QACA6F,EAAAtf,QAAAgK,EACAkV,EAAAlf,QACA6d,GAEAyB,EAAA,MAAAJ,EAKAI,EAAAtf,QAAAyJ,OACA8V,GAAAD,GAEAA,EAAAtf,QAAAI,UACAof,GAAAF,GAIAA,EAAArb,OAAAib,EAAAjb,OACAqb,EAAAN,MAAAE,EAAAF,MACAM,EAAAb,IAAAS,EAAAT,IAIAgB,GAAAlf,QAAA,SAAAT,GACAwf,EAAAxf,GAAAof,EAAApf,KAGA4J,IACA4V,EAAAtf,QAAA8d,WAAApU,GAAA4V,GAMAA,EAAA5B,aAAAwB,EAAAlf,QACAsf,EAAAzB,gBACAyB,EAAAnB,cAAAla,KAAiCqb,EAAAtf,SAGjCof,EAAAD,GAAAG,EACAA,GAIA,QAAAC,IAAAG,GACA,GAAAjW,GAAAiW,EAAA1f,QAAAyJ,KACA,QAAAjJ,KAAAiJ,GACA8M,GAAAmJ,EAAA5Q,UAAA,SAAAtO,GAIA,QAAAgf,IAAAE,GACA,GAAAtf,GAAAsf,EAAA1f,QAAAI,QACA,QAAAI,KAAAJ,GACAwX,GAAA8H,EAAA5Q,UAAAtO,EAAAJ,EAAAI,IAMA,QAAAmf,IAAAnB,GAIAiB,GAAAlf,QAAA,SAAAT,GACA0e,EAAA1e,GAAA,SACA6K,EACAiV,GAEA,MAAAA,IAYA,cAAA9f,GAAAuB,EAAAue,KACAA,EAAAlW,KAAAkW,EAAAlW,MAAAiB,EACAiV,EAAA7a,KAAA/E,QAAAwZ,MAAAvV,OAAA2b,IAEA,cAAA9f,GAAA,kBAAA8f,KACAA,GAAwBtc,KAAAsc,EAAA7V,OAAA6V,IAExB7a,KAAA/E,QAAAF,EAAA,KAAA6K,GAAAiV,EACAA,GAnBA7a,KAAA/E,QAAAF,EAAA,KAAA6K,MA6BA,QAAAkV,IAAAjJ,GACA,MAAAA,OAAAtQ,KAAAtG,QAAA0J,MAAAkN,EAAAvK,KAGA,QAAAyT,IAAAC,EAAArW,GACA,sBAAAqW,GACAA,EAAAxd,MAAA,KAAAQ,QAAA2G,IAAA,IACGlI,EAAAue,IACHA,EAAAra,KAAAgE,GAMA,QAAAsW,IAAA3c,EAAA4c,EAAAC,GACA,OAAA1f,KAAA6C,GAAA,CACA,GAAA8c,GAAA9c,EAAA7C,EACA,IAAA2f,EAAA,CACA,GAAAzW,GAAAmW,GAAAM,EAAAxT,iBACAjD,KAAAwW,EAAAxW,KACAyW,IAAAF,GACAG,GAAAD,GAEA9c,EAAA7C,GAAA,QAMA,QAAA4f,IAAAjU,GACAA,GACAA,EAAAkU,kBAAAC,WA2KA,QAAAC,IAAApU,GAIA,IAHA,GAAAG,GAAAH,EAAAG,KACAkU,EAAArU,EACAsU,EAAAtU,EACArL,EAAA2f,EAAAJ,oBACAI,IAAAJ,kBAAApM,OACAwM,EAAAnU,OACAA,EAAAoU,GAAAD,EAAAnU,QAGA,MAAAxL,EAAA0f,IAAAvW,SACAuW,EAAAlU,OACAA,EAAAoU,GAAApU,EAAAkU,EAAAlU,MAGA,OAAAqU,IAAArU,GAGA,QAAAoU,IAAAxW,EAAAD,GACA,OACA2W,YAAAtX,GAAAY,EAAA0W,YAAA3W,EAAA2W,aACAC,MAAA/f,EAAAoJ,EAAA2W,QACA3W,EAAA2W,MAAA5W,EAAA4W,OACA5W,EAAA4W,OAIA,QAAAF,IAAArU,GACA,GAAAwU,GAAAxU,EAAAuU,MACAD,EAAAtU,EAAAsU,WACA,OAAA9f,GAAA8f,IAAA9f,EAAAggB,GACAxX,GAAAsX,EAAAG,GAAAD,IAGA,GAGA,QAAAxX,IAAAnK,EAAAqF,GACA,MAAArF,GAAAqF,EAAArF,EAAA,IAAAqF,EAAArF,EAAAqF,GAAA,GAGA,QAAAuc,IAAA7f,GACA,GAAAP,EAAAO,GACA,QAEA,oBAAAA,GACA,MAAAA,EAEA,IAAAmD,GAAA,EACA,IAAAL,MAAA2D,QAAAzG,GAAA,CAEA,OADA8f,GACAxe,EAAA,EAAAiB,EAAAvC,EAAAuB,OAAqCD,EAAAiB,EAAOjB,IAC5C1B,EAAAI,EAAAsB,KACA1B,EAAAkgB,EAAAD,GAAA7f,EAAAsB,MAAA,KAAAwe,IACA3c,GAAA2c,EAAA,IAIA,OAAA3c,GAAAkR,MAAA,MAEA,GAAApU,EAAAD,GAAA,CACA,OAAAV,KAAAU,GACAA,EAAAV,KAAuB6D,GAAA7D,EAAA,IAEvB,OAAA6D,GAAAkR,MAAA,MAGA,MAAAlR,GAuCA,QAAAiX,IAAAjP,GACA,MAAA4U,IAAA5U,GACA,MAIA,SAAAA,EACA,WADA,GAMA,QAAA6U,IAAA7U,GAEA,IAAAnG,GACA,QAEA,IAAAqV,GAAAlP,GACA,QAIA,IAFAA,IAAA3J,cAEA,MAAAye,GAAA9U,GACA,MAAA8U,IAAA9U,EAEA,IAAAyG,GAAAsO,SAAAhI,cAAA/M,EACA,OAAAA,GAAAtJ,QAAA,QAEAoe,GAAA9U,GACAyG,EAAA0K,cAAA6D,OAAAC,oBACAxO,EAAA0K,cAAA6D,OAAAE,YAGAJ,GAAA9U,GAAA,qBAAA3G,KAAAoN,EAAArR,YASA,QAAA+f,IAAA1O,GACA,mBAAAA,GAAA,CACA,GAAA2O,GAAAL,SAAAM,cAAA5O,EACA,OAAA2O,IAIAL,SAAAhI,cAAA,OAIA,MAAAtG,GAMA,QAAA6O,IAAAC,EAAAzV,GACA,GAAAM,GAAA2U,SAAAhI,cAAAwI,EACA,kBAAAA,EACAnV,GAGAN,EAAAG,MAAAH,EAAAG,KAAAkC,WAAA3N,KAAAsL,EAAAG,KAAAkC,MAAAqT,UACApV,EAAAqV,aAAA,uBAEArV,GAGA,QAAAsV,IAAAC,EAAAJ,GACA,MAAAR,UAAAW,gBAAAE,GAAAD,GAAAJ,GAGA,QAAAM,IAAA1V,GACA,MAAA4U,UAAAc,eAAA1V,GAGA,QAAA2V,IAAA3V,GACA,MAAA4U,UAAAe,cAAA3V,GAGA,QAAA4V,IAAA5B,EAAA6B,EAAAC,GACA9B,EAAA4B,aAAAC,EAAAC,GAGA,QAAAC,IAAArT,EAAAhF,GACAgF,EAAAqT,YAAArY,GAGA,QAAAsY,IAAAtT,EAAAhF,GACAgF,EAAAsT,YAAAtY,GAGA,QAAAsW,IAAAtR,GACA,MAAAA,GAAAsR,WAGA,QAAAiC,IAAAvT,GACA,MAAAA,GAAAuT,YAGA,QAAAb,IAAA1S,GACA,MAAAA,GAAA0S,QAGA,QAAAc,IAAAxT,EAAA1C,GACA0C,EAAAyT,YAAAnW,EAGA,QAAAsV,IAAA5S,EAAA1O,EAAAkB,GACAwN,EAAA4S,aAAAthB,EAAAkB,GAoCA,QAAAkhB,IAAAzW,EAAA0W,GACA,GAAAriB,GAAA2L,EAAAG,KAAAwW,GACA,IAAAtiB,EAAA,CAEA,GAAAsF,GAAAqG,EAAAO,QACAoW,EAAA3W,EAAAkU,mBAAAlU,EAAAM,IACAsW,EAAAjd,EAAAwM,KACAuQ,GACA7e,MAAA2D,QAAAob,EAAAviB,IACAmC,EAAAogB,EAAAviB,GAAAsiB,GACKC,EAAAviB,KAAAsiB,IACLC,EAAAviB,OAAAK,IAGAsL,EAAAG,KAAA0W,SACAhf,MAAA2D,QAAAob,EAAAviB,KAAAuiB,EAAAviB,GAAAuC,QAAA+f,GAAA,EACAC,EAAAviB,GAAAoG,KAAAkc,GAEAC,EAAAviB,IAAAsiB,GAGAC,EAAAviB,GAAAsiB,GAuBA,QAAAG,IAAA9jB,EAAAqF,GACA,MACArF,GAAAqB,MAAAgE,EAAAhE,KACArB,EAAAkN,MAAA7H,EAAA6H,KACAlN,EAAA2N,YAAAtI,EAAAsI,WACAhM,EAAA3B,EAAAmN,QAAAxL,EAAA0D,EAAA8H,OACA4W,GAAA/jB,EAAAqF,GAMA,QAAA0e,IAAA/jB,EAAAqF,GACA,aAAArF,EAAAkN,IAA0B,QAC1B,IAAA7J,EAGA,QAFA1B,EAAA0B,EAAArD,EAAAmN,OAAAxL,EAAA0B,IAAAgM,QAAAhM,EAAA1C,SACAgB,EAAA0B,EAAAgC,EAAA8H,OAAAxL,EAAA0B,IAAAgM,QAAAhM,EAAA1C,MAIA,QAAAqjB,IAAA5W,EAAA6W,EAAAC,GACA,GAAA7gB,GAAAhC,EACA6B,IACA,KAAAG,EAAA4gB,EAAoB5gB,GAAA6gB,IAAa7gB,EACjChC,EAAA+L,EAAA/J,GAAAhC,IACAM,EAAAN,KAAqB6B,EAAA7B,GAAAgC,EAErB,OAAAH,GA8kBA,QAAAihB,IAAAC,EAAApX,IACAoX,EAAAjX,KAAAxC,YAAAqC,EAAAG,KAAAxC,aACAsJ,GAAAmQ,EAAApX,GAIA,QAAAiH,IAAAmQ,EAAApX,GACA,GAQA3L,GAAAgjB,EAAAC,EARAC,EAAAH,IAAAI,GACAC,EAAAzX,IAAAwX,GACAE,EAAAC,GAAAP,EAAAjX,KAAAxC,WAAAyZ,EAAA7W,SACAqX,EAAAD,GAAA3X,EAAAG,KAAAxC,WAAAqC,EAAAO,SAEAsX,KACAC,IAGA,KAAAzjB,IAAAujB,GACAP,EAAAK,EAAArjB,GACAijB,EAAAM,EAAAvjB,GACAgjB,GAQAC,EAAAS,SAAAV,EAAAtiB,MACAijB,GAAAV,EAAA,SAAAtX,EAAAoX,GACAE,EAAAte,KAAAse,EAAAte,IAAAif,kBACAH,EAAArd,KAAA6c,KATAU,GAAAV,EAAA,OAAAtX,EAAAoX,GACAE,EAAAte,KAAAse,EAAAte,IAAAkf,UACAL,EAAApd,KAAA6c,GAYA,IAAAO,EAAAvhB,OAAA,CACA,GAAA6hB,GAAA,WACA,OAAA9hB,GAAA,EAAqBA,EAAAwhB,EAAAvhB,OAA2BD,IAChD2hB,GAAAH,EAAAxhB,GAAA,WAAA2J,EAAAoX,GAGAG,GACAzV,GAAA9B,EAAAG,KAAA6B,OAAAhC,EAAAG,KAAA6B,SAA6D,SAAAmW,GAE7DA,IAYA,GARAL,EAAAxhB,QACAwL,GAAA9B,EAAAG,KAAA6B,OAAAhC,EAAAG,KAAA6B,SAA2D,uBAC3D,OAAA3L,GAAA,EAAqBA,EAAAyhB,EAAAxhB,OAA8BD,IACnD2hB,GAAAF,EAAAzhB,GAAA,mBAAA2J,EAAAoX,MAKAG,EACA,IAAAljB,IAAAqjB,GACAE,EAAAvjB,IAEA2jB,GAAAN,EAAArjB,GAAA,SAAA+iB,IAAAK,GAQA,QAAAE,IACAja,EACA/D,GAEA,GAAAzB,GAAArF,OAAAqB,OAAA,KACA,KAAAwJ,EACA,MAAAxF,EAEA,IAAA7B,GAAAihB,CACA,KAAAjhB,EAAA,EAAaA,EAAAqH,EAAApH,OAAiBD,IAC9BihB,EAAA5Z,EAAArH,GACAihB,EAAAc,YACAd,EAAAc,UAAAC,IAEAngB,EAAAogB,GAAAhB,MACAA,EAAAte,IAAAuF,EAAA5E,EAAA6F,SAAA,aAAA8X,EAAA/Z,MAAA,EAEA,OAAArF,GAGA,QAAAogB,IAAAhB,GACA,MAAAA,GAAAiB,SAAAjB,EAAA,SAAAzkB,OAAAsB,KAAAmjB,EAAAc,eAA4EI,KAAA,KAG5E,QAAAR,IAAAV,EAAAtV,EAAAhC,EAAAoX,EAAAK,GACA,GAAAxgB,GAAAqgB,EAAAte,KAAAse,EAAAte,IAAAgJ,EACA,IAAA/K,EACA,IACAA,EAAA+I,EAAAM,IAAAgX,EAAAtX,EAAAoX,EAAAK,GACK,MAAAjf,GACLiB,EAAAjB,EAAAwH,EAAAO,QAAA,aAAA+W,EAAA,SAAAtV,EAAA,UAYA,QAAAyW,IAAArB,EAAApX,GACA,IAAAxL,EAAA4iB,EAAAjX,KAAAkC,SAAA7N,EAAAwL,EAAAG,KAAAkC,OAAA,CAGA,GAAAhO,GAAAmN,EACAlB,EAAAN,EAAAM,IACAoY,EAAAtB,EAAAjX,KAAAkC,UACAA,EAAArC,EAAAG,KAAAkC,SAEA1N,GAAA0N,EAAAlH,UACAkH,EAAArC,EAAAG,KAAAkC,MAAAvK,KAAwCuK,GAGxC,KAAAhO,IAAAgO,GACAb,EAAAa,EAAAhO,GACAqkB,EAAArkB,KACAmN,GACAmX,GAAArY,EAAAjM,EAAAmN,EAKAoX,KAAAvW,EAAAtN,QAAA2jB,EAAA3jB,OACA4jB,GAAArY,EAAA,QAAA+B,EAAAtN,MAEA,KAAAV,IAAAqkB,GACAlkB,EAAA6N,EAAAhO,MACAwkB,GAAAxkB,GACAiM,EAAAwY,kBAAAC,GAAAC,GAAA3kB,IACO4kB,GAAA5kB,IACPiM,EAAA4Y,gBAAA7kB,KAMA,QAAAskB,IAAAhS,EAAAtS,EAAAU,GACAokB,GAAA9kB,GAGA+kB,GAAArkB,GACA4R,EAAAuS,gBAAA7kB,GAEAsS,EAAAgP,aAAAthB,KAEG4kB,GAAA5kB,GACHsS,EAAAgP,aAAAthB,EAAA+kB,GAAArkB,IAAA,UAAAA,EAAA,gBACG8jB,GAAAxkB,GACH+kB,GAAArkB,GACA4R,EAAAmS,kBAAAC,GAAAC,GAAA3kB,IAEAsS,EAAA0S,eAAAN,GAAA1kB,EAAAU,GAGAqkB,GAAArkB,GACA4R,EAAAuS,gBAAA7kB,GAEAsS,EAAAgP,aAAAthB,EAAAU,GAYA,QAAAukB,IAAAlC,EAAApX,GACA,GAAA2G,GAAA3G,EAAAM,IACAH,EAAAH,EAAAG,KACAoZ,EAAAnC,EAAAjX,IACA,MACA3L,EAAA2L,EAAAsU,cACAjgB,EAAA2L,EAAAuU,SACAlgB,EAAA+kB,IACA/kB,EAAA+kB,EAAA9E,cACAjgB,EAAA+kB,EAAA7E,SALA,CAYA,GAAA8E,GAAApF,GAAApU,GAGAyZ,EAAA9S,EAAA+S,kBACA/kB,GAAA8kB,KACAD,EAAArc,GAAAqc,EAAA5E,GAAA6E,KAIAD,IAAA7S,EAAAgT,aACAhT,EAAAgP,aAAA,QAAA6D,GACA7S,EAAAgT,WAAAH,IAaA,QAAAI,IAAAC,GAoEA,QAAAC,MACAC,WAAAtf,KAAAof,EAAAzQ,MAAA4Q,EAAA3jB,GAAA4jB,QACAD,EAAA3jB,EAAA,EArEA,GAQAyC,GAAAohB,EAAA7jB,EAAA8jB,EAAAJ,EARAK,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAV,EAAA,CAGA,KAAA3jB,EAAA,EAAaA,EAAAwjB,EAAAvjB,OAAgBD,IAG7B,GAFA6jB,EAAAphB,EACAA,EAAA+gB,EAAA9gB,WAAA1C,GACA+jB,EACA,KAAAthB,GAAA,KAAAohB,IAAwCE,GAAA,OACnC,IAAAC,EACL,KAAAvhB,GAAA,KAAAohB,IAAwCG,GAAA,OACnC,IAAAC,EACL,KAAAxhB,GAAA,KAAAohB,IAAwCI,GAAA,OACnC,IAAAC,EACL,KAAAzhB,GAAA,KAAAohB,IAAwCK,GAAA,OACnC,IACL,MAAAzhB,GACA,MAAA+gB,EAAA9gB,WAAA1C,EAAA,IACA,MAAAwjB,EAAA9gB,WAAA1C,EAAA,IACAmkB,GAAAC,GAAAC,EASK,CACL,OAAA5hB,GACA,QAAAuhB,GAAA,CAAmC,MACnC,SAAAD,GAAA,CAAmC,MACnC,SAAAE,GAAA,CAA2C,MAC3C,SAAAI,GAA2B,MAC3B,SAAAA,GAA2B,MAC3B,SAAAD,GAA4B,MAC5B,SAAAA,GAA4B,MAC5B,UAAAD,GAA2B,MAC3B,UAAAA,IAEA,QAAA1hB,EAAA,CAIA,IAHA,GAAAyP,GAAAlS,EAAA,EACAskB,MAAA,GAEcpS,GAAA,GAEd,OADAoS,EAAAd,EAAAe,OAAArS,IADsBA,KAItBoS,GAAAE,GAAAthB,KAAAohB,KACAJ,GAAA,aA5BA7lB,KAAAylB,GAEAH,EAAA3jB,EAAA,EACA8jB,EAAAN,EAAAzQ,MAAA,EAAA/S,GAAA4jB,QAEAH,GAwCA,QAXAplB,KAAAylB,EACAA,EAAAN,EAAAzQ,MAAA,EAAA/S,GAAA4jB,OACG,IAAAD,GACHF,IAQAC,EACA,IAAA1jB,EAAA,EAAeA,EAAA0jB,EAAAzjB,OAAoBD,IACnC8jB,EAAAW,GAAAX,EAAAJ,EAAA1jB,GAIA,OAAA8jB,GAGA,QAAAW,IAAAjB,EAAA9F,GACA,GAAA1d,GAAA0d,EAAAnd,QAAA,IACA,OAAAP,GAAA,EAEA,OAAA0d,EAAA,MAAA8F,EAAA,IAIA,OAFA9F,EAAA3K,MAAA,EAAA/S,GAEA,MAAAwjB,EAAA,IADA9F,EAAA3K,MAAA/S,EAAA,GAOA,QAAA0kB,IAAAC,GACAhhB,QAAAC,MAAA,mBAAA+gB,GAGA,QAAAC,IACAC,EACA7mB,GAEA,MAAA6mB,GACAA,EAAAhlB,IAAA,SAAAilB,GAAgC,MAAAA,GAAA9mB,KAAiB0f,OAAA,SAAAqH,GAAuB,MAAAA,QAIxE,QAAAC,IAAA1U,EAAApJ,EAAAxI,IACA4R,EAAArJ,QAAAqJ,EAAArJ,WAAA7C,MAAsC8C,OAAAxI,UAGtC,QAAAumB,IAAA3U,EAAApJ,EAAAxI,IACA4R,EAAAtE,QAAAsE,EAAAtE,WAAA5H,MAAsC8C,OAAAxI,UAGtC,QAAAwmB,IACA5U,EACApJ,EACAgb,EACAxjB,EACAymB,EACApD,IAEAzR,EAAAhJ,aAAAgJ,EAAAhJ,gBAAAlD,MAAgD8C,OAAAgb,UAAAxjB,QAAAymB,MAAApD,cAGhD,QAAAqD,IACA9U,EACApJ,EACAxI,EACAqjB,EACAsD,EACAC,GAcAvD,KAAAxW,gBACAwW,GAAAxW,QACArE,EAAA,IAAAA,GAEA6a,KAAA1f,aACA0f,GAAA1f,KACA6E,EAAA,IAAAA,GAGA6a,KAAAvW,gBACAuW,GAAAvW,QACAtE,EAAA,IAAAA,EAEA,IAAAqe,EACAxD,MAAAyD,cACAzD,GAAAyD,OACAD,EAAAjV,EAAAmV,eAAAnV,EAAAmV,kBAEAF,EAAAjV,EAAAiV,SAAAjV,EAAAiV,UAEA,IAAAG,IAAoBhnB,QAAAqjB,aACpB9P,EAAAsT,EAAAre,EAEA1F,OAAA2D,QAAA8M,GACAoT,EAAApT,EAAAoK,QAAAqJ,GAAAzT,EAAA7N,KAAAshB,GAEAH,EAAAre,GADG+K,EACHoT,GAAAK,EAAAzT,MAAAyT,GAEAA,EAIA,QAAAC,IACArV,EACApJ,EACA0e,GAEA,GAAAC,GACAC,GAAAxV,EAAA,IAAApJ,IACA4e,GAAAxV,EAAA,UAAApJ,EACA,UAAA2e,EACA,MAAAtC,IAAAsC,EACG,SAAAD,EAAA,CACH,GAAAG,GAAAD,GAAAxV,EAAApJ,EACA,UAAA6e,EACA,MAAA5mB,MAAAC,UAAA2mB,IAKA,QAAAD,IAAAxV,EAAApJ,GACA,GAAAhI,EACA,WAAAA,EAAAoR,EAAA0V,SAAA9e,IAEA,OADApH,GAAAwQ,EAAA2V,UACAjmB,EAAA,EAAAiB,EAAAnB,EAAAG,OAAoCD,EAAAiB,EAAOjB,IAC3C,GAAAF,EAAAE,GAAAkH,SAAA,CACApH,EAAAU,OAAAR,EAAA,EACA,OAIA,MAAAd,GAQA,QAAAgnB,IACA5V,EACA5R,EACAqjB,GAEA,GAAAzB,GAAAyB,MACAoE,EAAA7F,EAAA6F,OACAvC,EAAAtD,EAAAsD,KAGAwC,EADA,KAEAxC,KACAwC,EACA,8CAIAD,IACAC,EAAA,MAAAA,EAAA,IAEA,IAAAC,GAAAC,GAAA5nB,EAAA0nB,EAEA9V,GAAA6G,OACAzY,MAAA,IAAAA,EAAA,IACAolB,WAAA,IAAAplB,EAAA,IACA8Z,SAAA,mBAAwD6N,EAAA,KAOxD,QAAAC,IACA5nB,EACA2nB,GAEA,GAAAE,GAAAC,GAAA9nB,EACA,eAAA6nB,EAAAE,IACA/nB,EAAA,IAAA2nB,EAEA,eAAAE,EAAA,iBAAAA,EAAA,mCAEA7nB,EAAA,IAAA2nB,EAAA,gCACYA,EAAA,KAyBZ,QAAAG,IAAAtnB,GAKA,GAJAS,GAAAT,EACAqK,GAAA5J,GAAAM,OACAymB,GAAAC,GAAAC,GAAA,EAEA1nB,EAAAqB,QAAA,QAAArB,EAAA2nB,YAAA,KAAAtd,GAAA,EACA,OACAia,IAAAtkB,EACAunB,IAAA,KAIA,OAAAK,MACAC,GAAAC,KAEAC,GAAAF,IACAG,GAAAH,IACK,KAAAA,IACLI,GAAAJ,GAIA,QACAvD,IAAAtkB,EAAAkoB,UAAA,EAAAT,IACAF,IAAAvnB,EAAAkoB,UAAAT,GAAA,EAAAC,KAIA,QAAAI,MACA,MAAArnB,IAAA+C,aAAAgkB,IAGA,QAAAI,MACA,MAAAJ,KAAAnd,GAGA,QAAA0d,IAAAF,GACA,YAAAA,GAAA,KAAAA,EAGA,QAAAI,IAAAJ,GACA,GAAAM,GAAA,CAEA,KADAV,GAAAD,IACAI,MAEA,GADAC,EAAAC,KACAC,GAAAF,GACAG,GAAAH,OAKA,IAFA,KAAAA,GAAuBM,IACvB,KAAAN,GAAuBM,IACvB,IAAAA,EAAA,CACAT,GAAAF,EACA,QAKA,QAAAQ,IAAAH,GAEA,IADA,GAAAO,GAAAP,GACAD,OACAC,EAAAC,QACAM,KAeA,QAAAnQ,IACA7G,EACA2Q,EACAsG,GAEAC,GAAAD,CACA,IAAA7oB,GAAAuiB,EAAAviB,MACAqjB,EAAAd,EAAAc,UACAlY,EAAAyG,EAAAzG,IACAvM,EAAAgT,EAAA0V,SAAA1oB,IAoBA,eAAAuM,EACA4d,GAAAnX,EAAA5R,EAAAqjB,OACG,cAAAlY,GAAA,aAAAvM,EACHoqB,GAAApX,EAAA5R,EAAAqjB,OACG,cAAAlY,GAAA,UAAAvM,EACHqqB,GAAArX,EAAA5R,EAAAqjB,OACG,cAAAlY,GAAA,aAAAA,EACH+d,GAAAtX,EAAA5R,EAAAqjB,OACG,KAAAve,GAAAuV,cAAAlP,GAGH,MAFAqc,IAAA5V,EAAA5R,EAAAqjB,IAEA,CAWA,UAGA,QAAA2F,IACApX,EACA5R,EACAqjB,GAEA,GAAAoE,GAAApE,KAAAoE,OACA0B,EAAAlC,GAAArV,EAAA,iBACAwX,EAAAnC,GAAArV,EAAA,sBACAyX,EAAApC,GAAArV,EAAA,uBACA0U,IAAA1U,EAAA,UACA,iBAAA5R,EAAA,QACAA,EAAA,IAAAmpB,EAAA,QACA,SAAAC,EACA,KAAAppB,EAAA,IACA,OAAAA,EAAA,IAAAopB,EAAA,MAGA1C,GAAA9U,EAAA0X,GACA,WAAAtpB,EAAA,yCAEAopB,EAAA,MAAAC,EAAA,qCAEA5B,EAAA,MAAA0B,EAAA,IAAAA,GAAA,oCAEenpB,EAAA,mCACHA,EAAA,qDACD4nB,GAAA5nB,EAAA,WACX,SAIA,QAAAipB,IACArX,EACA5R,EACAqjB,GAEA,GAAAoE,GAAApE,KAAAoE,OACA0B,EAAAlC,GAAArV,EAAA,gBACAuX,GAAA1B,EAAA,MAAA0B,EAAA,IAAAA,EACA7C,GAAA1U,EAAA,gBAAA5R,EAAA,IAAAmpB,EAAA,KACAzC,GAAA9U,EAAA0X,GAAA1B,GAAA5nB,EAAAmpB,GAAA,SAGA,QAAAJ,IACAnX,EACA5R,EACAqjB,GAEA,GAAAoE,GAAApE,KAAAoE,OACA8B,EAAA,0JAGA9B,EAAA,sBAGA+B,EAAA,uBAAAD,EAAA,GACAC,KAAA,IAAA5B,GAAA5nB,EAFA,6DAGA0mB,GAAA9U,EAAA,SAAA4X,EAAA,SAGA,QAAAN,IACAtX,EACA5R,EACAqjB,GAEA,GAAAzkB,GAAAgT,EAAA0V,SAAA1oB,KACAgjB,EAAAyB,MACAoG,EAAA7H,EAAA6H,KACAhC,EAAA7F,EAAA6F,OACAvC,EAAAtD,EAAAsD,KACAwE,GAAAD,GAAA,UAAA7qB,EACA+N,EAAA8c,EACA,SACA,UAAA7qB,EACA+qB,GACA,QAEAjC,EAAA,qBACAxC,KACAwC,EAAA,8BAEAD,IACAC,EAAA,MAAAA,EAAA,IAGA,IAAA8B,GAAA5B,GAAA5nB,EAAA0nB,EACAgC,KACAF,EAAA,qCAA8CA,GAG9ClD,GAAA1U,EAAA,YAAA5R,EAAA,KACA0mB,GAAA9U,EAAAjF,EAAA6c,EAAA,UACAtE,GAAAuC,GAAA,WAAA7oB,IACA8nB,GAAA9U,EAAA,yBAUA,QAAAgY,IAAAvd,GACA,GAAAM,EAEA/M,GAAAyM,EAAAsd,OAEAhd,EAAAkd,GAAA,iBACAxd,EAAAM,MAAAvE,OAAAiE,EAAAsd,IAAAtd,EAAAM,cACAN,GAAAsd,KAEA/pB,EAAAyM,EAAAid,OAEA3c,EAAAmd,GAAA,iBACAzd,EAAAM,MAAAvE,OAAAiE,EAAAid,IAAAjd,EAAAM,cACAN,GAAAid,KAMA,QAAAS,IACApd,EACAmK,EACA7G,EACApD,EACAC,GAEA,GAAAmD,EAAA,CACA,GAAA+Z,GAAAlT,EACAxR,EAAA2kB,EACAnT,GAAA,SAAAoT,GAIA,QAHA,IAAA1nB,UAAAjB,OACAyoB,EAAAE,GACAF,EAAAvnB,MAAA,KAAAD,aAEA2nB,GAAAxd,EAAAmK,EAAAjK,EAAAvH,IAIA2kB,GAAAG,iBACAzd,EACAmK,EACAuT,IACSxd,UAAAC,WACTD,GAIA,QAAAsd,IACAxd,EACAmK,EACAjK,EACAvH,IAEAA,GAAA2kB,IAAAK,oBAAA3d,EAAAmK,EAAAjK,GAGA,QAAA0d,IAAAlI,EAAApX,GACA,IAAAxL,EAAA4iB,EAAAjX,KAAAiB,MAAA5M,EAAAwL,EAAAG,KAAAiB,IAAA,CAGA,GAAAA,GAAApB,EAAAG,KAAAiB,OACAC,EAAA+V,EAAAjX,KAAAiB,MACA4d,IAAAhf,EAAAM,IACAqe,GAAAvd,GACAD,EAAAC,EAAAC,EAAAyd,GAAAI,GAAAlf,EAAAO,UAUA,QAAAgf,IAAAnI,EAAApX,GACA,IAAAxL,EAAA4iB,EAAAjX,KAAAmQ,YAAA9b,EAAAwL,EAAAG,KAAAmQ,UAAA,CAGA,GAAAjc,GAAAmN,EACAlB,EAAAN,EAAAM,IACAkf,EAAApI,EAAAjX,KAAAmQ,aACAhT,EAAA0C,EAAAG,KAAAmQ,YAEA3b,GAAA2I,EAAAnC,UACAmC,EAAA0C,EAAAG,KAAAmQ,SAAAxY,KAA2CwF,GAG3C,KAAAjJ,IAAAmrB,GACAhrB,EAAA8I,EAAAjJ,MACAiM,EAAAjM,GAAA,GAGA,KAAAA,IAAAiJ,GAKA,GAJAkE,EAAAlE,EAAAjJ,GAIA,gBAAAA,GAAA,cAAAA,IACA2L,EAAAI,WAA2BJ,EAAAI,SAAA9J,OAAA,GAC3BkL,IAAAge,EAAAnrB,IAGA,aAAAA,EAAA,CAGAiM,EAAAmf,OAAAje,CAEA,IAAAke,GAAAlrB,EAAAgN,GAAA,GAAA9L,OAAA8L,EACAme,IAAArf,EAAAN,EAAA0f,KACApf,EAAAvL,MAAA2qB,OAGApf,GAAAjM,GAAAmN,GAQA,QAAAme,IACArf,EACAN,EACA4f,GAEA,OAAAtf,EAAAuf,YACA,WAAA7f,EAAAE,KACA4f,GAAAxf,EAAAsf,IACAG,GAAAzf,EAAAsf,IAIA,QAAAE,IAAAxf,EAAAsf,GAEA,MAAA3K,UAAA+K,gBAAA1f,KAAAvL,QAAA6qB,EAGA,QAAAG,IAAAzf,EAAA/D,GACA,GAAAxH,GAAAuL,EAAAvL,MACAqjB,EAAA9X,EAAA2f,WACA,OAAAtrB,GAAAyjB,MAAAoE,QAAA,WAAAlc,EAAA3M,KACAgC,EAAAZ,KAAAY,EAAA4G,GAEA5H,EAAAyjB,MAAA6B,KACAllB,EAAAklB,SAAA1d,EAAA0d,OAEAllB,IAAAwH,EAwBA,QAAA2jB,IAAA/f,GACA,GAAAggB,GAAAC,GAAAjgB,EAAAggB,MAGA,OAAAhgB,GAAAkgB,YACAvoB,EAAAqI,EAAAkgB,YAAAF,GACAA,EAIA,QAAAC,IAAAE,GACA,MAAAzoB,OAAA2D,QAAA8kB,GACAroB,EAAAqoB,GAEA,gBAAAA,GACAC,GAAAD,GAEAA,EAOA,QAAAE,IAAAxgB,EAAAygB,GACA,GACAC,GADAxoB,IAGA,IAAAuoB,EAEA,IADA,GAAAnM,GAAAtU,EACAsU,EAAAJ,mBACAI,IAAAJ,kBAAApM,OACAwM,EAAAnU,OAAAugB,EAAAR,GAAA5L,EAAAnU,QACArI,EAAAI,EAAAwoB,IAKAA,EAAAR,GAAAlgB,EAAAG,QACArI,EAAAI,EAAAwoB,EAIA,KADA,GAAArM,GAAArU,EACAqU,IAAAvW,QACAuW,EAAAlU,OAAAugB,EAAAR,GAAA7L,EAAAlU,QACArI,EAAAI,EAAAwoB,EAGA,OAAAxoB,GA8CA,QAAAyoB,IAAAvJ,EAAApX,GACA,GAAAG,GAAAH,EAAAG,KACAoZ,EAAAnC,EAAAjX,IAEA,MAAA3L,EAAA2L,EAAAkgB,cAAA7rB,EAAA2L,EAAAggB,QACA3rB,EAAA+kB,EAAA8G,cAAA7rB,EAAA+kB,EAAA4G,QADA,CAMA,GAAA3e,GAAAjE,EACAoJ,EAAA3G,EAAAM,IACAsgB,EAAArH,EAAA8G,YACAQ,EAAAtH,EAAAuH,iBAAAvH,EAAA4G,UAGAY,EAAAH,GAAAC,EAEAV,EAAAC,GAAApgB,EAAAG,KAAAggB,UAKAngB,GAAAG,KAAA2gB,gBAAAnsB,EAAAwrB,EAAAhlB,QACArD,KAAeqoB,GACfA,CAEA,IAAAa,GAAAR,GAAAxgB,GAAA,EAEA,KAAAzC,IAAAwjB,GACAvsB,EAAAwsB,EAAAzjB,KACA0jB,GAAAta,EAAApJ,EAAA,GAGA,KAAAA,IAAAyjB,IACAxf,EAAAwf,EAAAzjB,MACAwjB,EAAAxjB,IAEA0jB,GAAAta,EAAApJ,EAAA,MAAAiE,EAAA,GAAAA,IAgBA,QAAA0f,IAAAva,EAAA6S,GAEA,GAAAA,QAAAS,QAKA,GAAAtT,EAAAwa,UACA3H,EAAA5iB,QAAA,QACA4iB,EAAApjB,MAAA,OAAAhC,QAAA,SAAA0E,GAA6C,MAAA6N,GAAAwa,UAAA7f,IAAAxI,KAE7C6N,EAAAwa,UAAA7f,IAAAkY,OAEG,CACH,GAAAhY,GAAA,KAAAmF,EAAAya,aAAA,iBACA5f,GAAA5K,QAAA,IAAA4iB,EAAA,QACA7S,EAAAgP,aAAA,SAAAnU,EAAAgY,GAAAS,SASA,QAAAoH,IAAA1a,EAAA6S,GAEA,GAAAA,QAAAS,QAKA,GAAAtT,EAAAwa,UACA3H,EAAA5iB,QAAA,QACA4iB,EAAApjB,MAAA,OAAAhC,QAAA,SAAA0E,GAA6C,MAAA6N,GAAAwa,UAAA3qB,OAAAsC,KAE7C6N,EAAAwa,UAAA3qB,OAAAgjB,OAEG,CAGH,IAFA,GAAAhY,GAAA,KAAAmF,EAAAya,aAAA,kBACAE,EAAA,IAAA9H,EAAA,IACAhY,EAAA5K,QAAA0qB,IAAA,GACA9f,IAAA+f,QAAAD,EAAA,IAEA3a,GAAAgP,aAAA,QAAAnU,EAAAyY,SAMA,QAAAuH,IAAAC,GACA,GAAAA,EAAA,CAIA,mBAAAA,GAAA,CACA,GAAAvpB,KAKA,QAJA,IAAAupB,EAAAC,KACA5pB,EAAAI,EAAAypB,GAAAF,EAAAlkB,MAAA,MAEAzF,EAAAI,EAAAupB,GACAvpB,EACG,sBAAAupB,GACHE,GAAAF,OADG,IA8CH,QAAAG,IAAA3qB,GACA4qB,GAAA,WACAA,GAAA5qB,KAIA,QAAA6qB,IAAAnb,EAAA6S,IACA7S,EAAA+S,qBAAA/S,EAAA+S,wBAAAjf,KAAA+e,GACA0H,GAAAva,EAAA6S,GAGA,QAAAuI,IAAApb,EAAA6S,GACA7S,EAAA+S,oBACAljB,EAAAmQ,EAAA+S,mBAAAF,GAEA6H,GAAA1a,EAAA6S,GAGA,QAAAwI,IACArb,EACAsb,EACAC,GAEA,GAAAvL,GAAAwL,GAAAxb,EAAAsb,GACAtuB,EAAAgjB,EAAAhjB,KACA6Q,EAAAmS,EAAAnS,QACA4d,EAAAzL,EAAAyL,SACA,KAAAzuB,EAAc,MAAAuuB,IACd,IAAAxgB,GAAA/N,IAAA0uB,GAAAC,GAAAC,GACAC,EAAA,EACAC,EAAA,WACA9b,EAAA0Y,oBAAA3d,EAAAghB,GACAR,KAEAQ,EAAA,SAAAlqB,GACAA,EAAA+B,SAAAoM,KACA6b,GAAAJ,GACAK,IAIAle,YAAA,WACAie,EAAAJ,GACAK,KAEGje,EAAA,GACHmC,EAAAwY,iBAAAzd,EAAAghB,GAKA,QAAAP,IAAAxb,EAAAsb,GACA,GAQAtuB,GARAgvB,EAAAzN,OAAA0N,iBAAAjc,GACAkc,EAAAF,EAAAG,GAAA,SAAA1sB,MAAA,MACA2sB,EAAAJ,EAAAG,GAAA,YAAA1sB,MAAA,MACA4sB,EAAAC,GAAAJ,EAAAE,GACAG,EAAAP,EAAAQ,GAAA,SAAA/sB,MAAA,MACAgtB,EAAAT,EAAAQ,GAAA,YAAA/sB,MAAA,MACAitB,EAAAJ,GAAAC,EAAAE,GAGA5e,EAAA,EACA4d,EAAA,CA8BA,OA5BAH,KAAAI,GACAW,EAAA,IACArvB,EAAA0uB,GACA7d,EAAAwe,EACAZ,EAAAW,EAAAzsB,QAEG2rB,IAAAqB,GACHD,EAAA,IACA1vB,EAAA2vB,GACA9e,EAAA6e,EACAjB,EAAAgB,EAAA9sB,SAGAkO,EAAA/H,KAAAC,IAAAsmB,EAAAK,GACA1vB,EAAA6Q,EAAA,EACAwe,EAAAK,EACAhB,GACAiB,GACA,KACAlB,EAAAzuB,EACAA,IAAA0uB,GACAU,EAAAzsB,OACA8sB,EAAA9sB,OACA,IAMA3C,OACA6Q,UACA4d,YACAmB,aANA5vB,IAAA0uB,IACAmB,GAAAjqB,KAAAopB,EAAAG,GAAA,cASA,QAAAG,IAAAQ,EAAAC,GAEA,KAAAD,EAAAntB,OAAAotB,EAAAptB,QACAmtB,IAAAtmB,OAAAsmB,EAGA,OAAAhnB,MAAAC,IAAAlF,MAAA,KAAAksB,EAAAxtB,IAAA,SAAA8W,EAAA3W,GACA,MAAAstB,IAAA3W,GAAA2W,GAAAF,EAAAptB,OAIA,QAAAstB,IAAAC,GACA,WAAAC,OAAAD,EAAAxa,MAAA,OAKA,QAAA0a,IAAA9jB,EAAA+jB,GACA,GAAApd,GAAA3G,EAAAM,GAGA3L,GAAAgS,EAAAqd,YACArd,EAAAqd,SAAAC,WAAA,EACAtd,EAAAqd,WAGA,IAAA7jB,GAAAqhB,GAAAxhB,EAAAG,KAAA+jB,WACA,KAAA1vB,EAAA2L,KAKAxL,EAAAgS,EAAAwd,WAAA,IAAAxd,EAAAyd,SAAA,CA4BA,IAxBA,GAAA1C,GAAAvhB,EAAAuhB,IACA/tB,EAAAwM,EAAAxM,KACA0wB,EAAAlkB,EAAAkkB,WACAC,EAAAnkB,EAAAmkB,aACAC,EAAApkB,EAAAokB,iBACAC,EAAArkB,EAAAqkB,YACAC,EAAAtkB,EAAAskB,cACAC,EAAAvkB,EAAAukB,kBACAC,EAAAxkB,EAAAwkB,YACAb,EAAA3jB,EAAA2jB,MACAc,EAAAzkB,EAAAykB,WACAC,EAAA1kB,EAAA0kB,eACAC,EAAA3kB,EAAA2kB,aACAC,EAAA5kB,EAAA4kB,OACAC,EAAA7kB,EAAA6kB,YACAC,EAAA9kB,EAAA8kB,gBACAC,EAAA/kB,EAAA+kB,SAMA3kB,EAAA4kB,GACAC,EAAAD,GAAA/d,OACAge,KAAAtnB,QACAsnB,IAAAtnB,OACAyC,EAAA6kB,EAAA7kB,OAGA,IAAA8kB,IAAA9kB,EAAAgG,aAAAvG,EAAAslB,YAEA,KAAAD,GAAAN,GAAA,KAAAA,EAAA,CAIA,GAAAQ,GAAAF,GAAAb,EACAA,EACAH,EACAmB,EAAAH,GAAAX,EACAA,EACAH,EACAkB,EAAAJ,GAAAZ,EACAA,EACAH,EAEAoB,EAAAL,EACAP,GAAAH,EACAA,EACAgB,EAAAN,GACA,kBAAAN,KACAjB,EACA8B,EAAAP,EACAL,GAAAJ,EACAA,EACAiB,EAAAR,EACAJ,GAAAJ,EACAA,EAEAiB,EAAAnwB,EACAX,EAAAkwB,GACAA,EAAApB,MACAoB,GAOAa,GAAA,IAAArE,IAAA9I,GACAoN,EAAAC,GAAAN,GAEAzD,EAAAvb,EAAAwd,SAAAzrB,EAAA,WACAqtB,IACAhE,GAAApb,EAAA8e,GACA1D,GAAApb,EAAA6e,IAEAtD,EAAA+B,WACA8B,GACAhE,GAAApb,EAAA4e,GAEAM,KAAAlf,IAEAif,KAAAjf,GAEAA,EAAAwd,SAAA,MAGAnkB,GAAAG,KAAA+lB,MAEApkB,GAAA9B,EAAAG,KAAA6B,OAAAhC,EAAAG,KAAA6B,SAA2D,oBAC3D,GAAAlE,GAAA6I,EAAA0N,WACA8R,EAAAroB,KAAAsoB,UAAAtoB,EAAAsoB,SAAApmB,EAAA3L,IACA8xB,IACAA,EAAAjmB,MAAAF,EAAAE,KACAimB,EAAA7lB,IAAA0jB,UAEAmC,EAAA7lB,IAAA0jB,WAEA2B,KAAAhf,EAAAub,KAKAwD,KAAA/e,GACAof,IACAjE,GAAAnb,EAAA4e,GACAzD,GAAAnb,EAAA6e,GACA5D,GAAA,WACAE,GAAAnb,EAAA8e,GACA1D,GAAApb,EAAA4e,GACArD,EAAA+B,WAAA+B,IACAK,GAAAP,GACAvhB,WAAA2d,EAAA4D,GAEA9D,GAAArb,EAAAhT,EAAAuuB,OAMAliB,EAAAG,KAAA+lB,OACAnC,OACA4B,KAAAhf,EAAAub,IAGA6D,GAAAC,GACA9D,MAIA,QAAAoE,IAAAtmB,EAAAumB,GAsEA,QAAAC,KAEAtE,EAAA+B,YAIAjkB,EAAAG,KAAA+lB,QACAvf,EAAA0N,WAAA+R,WAAAzf,EAAA0N,WAAA+R,cAA6DpmB,EAAA,KAAAA,GAE7DymB,KAAA9f,GACAof,IACAjE,GAAAnb,EAAA+f,GACA5E,GAAAnb,EAAAggB,GACA/E,GAAA,WACAE,GAAAnb,EAAAigB,GACA7E,GAAApb,EAAA+f,GACAxE,EAAA+B,WAAA+B,IACAK,GAAAQ,GACAtiB,WAAA2d,EAAA2E,GAEA7E,GAAArb,EAAAhT,EAAAuuB,OAKAoE,KAAA3f,EAAAub,GACA6D,GAAAC,GACA9D,KAhGA,GAAAvb,GAAA3G,EAAAM,GAGA3L,GAAAgS,EAAAwd,YACAxd,EAAAwd,SAAAF,WAAA,EACAtd,EAAAwd,WAGA,IAAAhkB,GAAAqhB,GAAAxhB,EAAAG,KAAA+jB,WACA,IAAA1vB,EAAA2L,GACA,MAAAomB,IAIA,KAAA5xB,EAAAgS,EAAAqd,WAAA,IAAArd,EAAAyd,SAAA,CAIA,GAAA1C,GAAAvhB,EAAAuhB,IACA/tB,EAAAwM,EAAAxM,KACA+yB,EAAAvmB,EAAAumB,WACAE,EAAAzmB,EAAAymB,aACAD,EAAAxmB,EAAAwmB,iBACAF,EAAAtmB,EAAAsmB,YACAH,EAAAnmB,EAAAmmB,MACAQ,EAAA3mB,EAAA2mB,WACAC,EAAA5mB,EAAA4mB,eACAC,EAAA7mB,EAAA6mB,WACA9B,EAAA/kB,EAAA+kB,SAEAa,GAAA,IAAArE,IAAA9I,GACAoN,EAAAC,GAAAK,GAEAO,EAAAlxB,EACAX,EAAAkwB,GACAA,EAAAoB,MACApB,GAOAhD,EAAAvb,EAAAqd,SAAAtrB,EAAA,WACAiO,EAAA0N,YAAA1N,EAAA0N,WAAA+R,WACAzf,EAAA0N,WAAA+R,SAAApmB,EAAA3L,KAAA,MAEA0xB,IACAhE,GAAApb,EAAAigB,GACA7E,GAAApb,EAAAggB,IAEAzE,EAAA+B,WACA8B,GACAhE,GAAApb,EAAA+f,GAEAK,KAAApgB,KAEA4f,IACAO,KAAAngB,IAEAA,EAAAqd,SAAA,MAGAgD,GACAA,EAAAR,GAEAA,KAoDA,QAAAH,IAAA9wB,GACA,sBAAAA,KAAAO,MAAAP,GASA,QAAA0wB,IAAAhvB,GACA,GAAAzC,EAAAyC,GACA,QAEA,IAAAgwB,GAAAhwB,EAAA+J,GACA,OAAArM,GAAAsyB,GAEAhB,GACApuB,MAAA2D,QAAAyrB,GACAA,EAAA,GACAA,IAGAhwB,EAAAQ,SAAAR,EAAAX,QAAA,EAIA,QAAA4wB,IAAA9L,EAAApb,IACA,IAAAA,EAAAG,KAAA+lB,MACApC,GAAA9jB,GAiGA,QAAAmnB,IAAAxgB,EAAAygB,EAAAztB,GACA,GAAA5E,GAAAqyB,EAAAryB,MACAsyB,EAAA1gB,EAAA+O,QACA,KAAA2R,GAAAxvB,MAAA2D,QAAAzG,GAAA,CASA,OADAugB,GAAAgS,EACAjxB,EAAA,EAAAiB,EAAAqP,EAAA9S,QAAAyC,OAAwCD,EAAAiB,EAAOjB,IAE/C,GADAixB,EAAA3gB,EAAA9S,QAAAwC,GACAgxB,EACA/R,EAAA7c,EAAA1D,EAAAwyB,GAAAD,KAAA,EACAA,EAAAhS,eACAgS,EAAAhS,gBAGA,IAAAld,EAAAmvB,GAAAD,GAAAvyB,GAIA,YAHA4R,EAAA6gB,gBAAAnxB,IACAsQ,EAAA6gB,cAAAnxB,GAMAgxB,KACA1gB,EAAA6gB,eAAA,IAIA,QAAAC,IAAA1yB,EAAAlB,GACA,OAAAwC,GAAA,EAAAiB,EAAAzD,EAAAyC,OAAqCD,EAAAiB,EAAOjB,IAC5C,GAAA+B,EAAAmvB,GAAA1zB,EAAAwC,IAAAtB,GACA,QAGA,UAGA,QAAAwyB,IAAAD,GACA,gBAAAA,GACAA,EAAA7H,OACA6H,EAAAvyB,MAGA,QAAA2yB,IAAAlvB,GACAA,EAAA+B,OAAAslB,WAAA,EAGA,QAAA8H,IAAAnvB,GAEAA,EAAA+B,OAAAslB,YACArnB,EAAA+B,OAAAslB,WAAA,EACA+H,GAAApvB,EAAA+B,OAAA,UAGA,QAAAqtB,IAAAjhB,EAAAhT,GACA,GAAA6E,GAAAyc,SAAA4S,YAAA,aACArvB,GAAAsvB,UAAAn0B,GAAA,MACAgT,EAAAohB,cAAAvvB,GAMA,QAAAwvB,IAAAhoB,GACA,OAAAA,EAAAkU,mBAAAlU,EAAAG,MAAAH,EAAAG,KAAA+jB,WAEAlkB,EADAgoB,GAAAhoB,EAAAkU,kBAAApM,QAyFA,QAAAmgB,IAAAjoB,GACA,GAAAkoB,GAAAloB,KAAAQ,gBACA,OAAA0nB,MAAA/tB,KAAAtG,QAAAkS,SACAkiB,GAAAxjB,GAAAyjB,EAAA9nB,WAEAJ,EAIA,QAAAmoB,IAAA/kB,GACA,GAAAjD,MACAtM,EAAAuP,EAAA5D,QAEA,QAAAnL,KAAAR,GAAAmL,UACAmB,EAAA9L,GAAA+O,EAAA/O,EAIA,IAAAwQ,GAAAhR,EAAAiR,gBACA,QAAAsjB,KAAAvjB,GACA1E,EAAA3C,GAAA4qB,IAAAvjB,EAAAujB,EAEA,OAAAjoB,GAGA,QAAAkoB,IAAAtb,EAAAub,GACA,oBAAA/uB,KAAA+uB,EAAApoB,KACA,MAAA6M,GAAA,cACAzP,MAAAgrB,EAAA9nB,iBAAAxB,YAKA,QAAAupB,IAAAvoB,GACA,KAAAA,IAAAlC,QACA,GAAAkC,EAAAG,KAAA+jB,WACA,SAKA,QAAAsE,IAAAzqB,EAAA0qB,GACA,MAAAA,GAAAp0B,MAAA0J,EAAA1J,KAAAo0B,EAAAvoB,MAAAnC,EAAAmC,IAyPA,QAAAwoB,IAAA5vB,GAEAA,EAAAwH,IAAAqoB,SACA7vB,EAAAwH,IAAAqoB,UAGA7vB,EAAAwH,IAAA6jB,UACArrB,EAAAwH,IAAA6jB,WAIA,QAAAyE,IAAA9vB,GACAA,EAAAqH,KAAA0oB,OAAA/vB,EAAAwH,IAAAwoB,wBAGA,QAAAC,IAAAjwB,GACA,GAAAkwB,GAAAlwB,EAAAqH,KAAA8oB,IACAJ,EAAA/vB,EAAAqH,KAAA0oB,OACAK,EAAAF,EAAAG,KAAAN,EAAAM,KACAC,EAAAJ,EAAAK,IAAAR,EAAAQ,GACA,IAAAH,GAAAE,EAAA,CACAtwB,EAAAqH,KAAAmpB,OAAA,CACA,IAAA1F,GAAA9qB,EAAAwH,IAAA6f,KACAyD,GAAA2F,UAAA3F,EAAA4F,gBAAA,aAAAN,EAAA,MAAAE,EAAA,MACAxF,EAAA6F,mBAAA,MAmGA,QAAAC,IAAAC,GAGA,MAFAC,QAAA3U,SAAAhI,cAAA,OACA2c,GAAAC,UAAAF,EACAC,GAAApT,YA6DA,QAAAsT,IAAA/0B,EAAAg1B,GACA,GAAAC,GAAAD,EAAAE,GAAAC,EACA,OAAAn1B,GAAAwsB,QAAAyI,EAAA,SAAArqB,GAA6C,MAAAwqB,IAAAxqB,KAG7C,QAAAyqB,IAAAT,EAAA91B,GAqHA,QAAAw2B,GAAAz0B,GACAe,GAAAf,EACA+zB,IAAAlM,UAAA7nB,GAuEA,QAAA00B,GAAA7U,EAAA9d,EAAA8qB,GACA,GAAAwG,GAAAsB,CASA,IARA,MAAA5yB,IAAwBA,EAAAhB,GACxB,MAAA8rB,IAAsBA,EAAA9rB,GAEtB8e,IACA8U,EAAA9U,EAAAlf,eAIAkf,EACA,IAAAwT,EAAAuB,EAAAl0B,OAAA,EAAkC2yB,GAAA,GAClCuB,EAAAvB,GAAAwB,gBAAAF,EAD4CtB,SAO5CA,GAAA,CAGA,IAAAA,GAAA,GAEA,OAAA5yB,GAAAm0B,EAAAl0B,OAAA,EAAoCD,GAAA4yB,EAAU5yB,IAS9CxC,EAAA4uB,KACA5uB,EAAA4uB,IAAA+H,EAAAn0B,GAAA6J,IAAAvI,EAAA8qB,EAKA+H,GAAAl0B,OAAA2yB,EACAyB,EAAAzB,GAAAuB,EAAAvB,EAAA,GAAA/oB,QACK,OAAAqqB,EACL12B,EAAA8D,OACA9D,EAAA8D,MAAA8d,MAAA,EAAA9d,EAAA8qB,GAEK,MAAA8H,IACL12B,EAAA8D,OACA9D,EAAA8D,MAAA8d,MAAA,EAAA9d,EAAA8qB,GAEA5uB,EAAA4uB,KACA5uB,EAAA4uB,IAAAhN,EAAA9d,EAAA8qB,IAxOA,IANA,GAKAxf,GAAAynB,EALAF,KACAG,EAAA92B,EAAA82B,WACAC,EAAA/2B,EAAAg3B,YAAAC,GACAC,EAAAl3B,EAAAm3B,kBAAAF,GACAn0B,EAAA,EAEAgzB,GAAA,CAGA,GAFA1mB,EAAA0mB,EAEAe,GAAAO,GAAAP,GA0EK,CACL,GAAAQ,GAAAR,EAAAn0B,cACA40B,EAAAC,GAAAF,KAAAE,GAAAF,GAAA,GAAAG,QAAA,kBAAAH,EAAA,gBACAI,EAAA,EACAC,EAAA5B,EAAApI,QAAA4J,EAAA,SAAAK,EAAAnrB,EAAAorB,GAUA,MATAH,GAAAG,EAAAn1B,OACA20B,GAAAC,IAAA,aAAAA,IACA7qB,IACAkhB,QAAA,2BACAA,QAAA,mCAEA1tB,EAAA63B,OACA73B,EAAA63B,MAAArrB,GAEA,IAEA1J,IAAAgzB,EAAArzB,OAAAi1B,EAAAj1B,OACAqzB,EAAA4B,EACAjB,EAAAY,EAAAv0B,EAAA20B,EAAA30B,OA5FA,CACA,GAAAg1B,GAAAhC,EAAA/yB,QAAA,IACA,QAAA+0B,EAAA,CAEA,GAAAC,GAAAryB,KAAAowB,GAAA,CACA,GAAAkC,GAAAlC,EAAA/yB,QAAA,SAEA,IAAAi1B,GAAA,GACAxB,EAAAwB,EAAA,EACA,WAKA,GAAAC,GAAAvyB,KAAAowB,GAAA,CACA,GAAAoC,GAAApC,EAAA/yB,QAAA,KAEA,IAAAm1B,GAAA,GACA1B,EAAA0B,EAAA,EACA,WAKA,GAAAC,GAAArC,EAAAhqB,MAAAssB,GACA,IAAAD,EAAA,CACA3B,EAAA2B,EAAA,GAAA11B,OACA,UAIA,GAAA41B,GAAAvC,EAAAhqB,MAAA8rB,GACA,IAAAS,EAAA,CACA,GAAAC,GAAAx1B,CACA0zB,GAAA6B,EAAA,GAAA51B,QACAg0B,EAAA4B,EAAA,GAAAC,EAAAx1B,EACA,UAIA,GAAAy1B,GAwEA,WACA,GAAAz0B,GAAAgyB,EAAAhqB,MAAA0sB,GACA,IAAA10B,EAAA,CACA,GAAAgI,IACA8V,QAAA9d,EAAA,GACA0K,SACA1K,MAAAhB,EAEA0zB,GAAA1yB,EAAA,GAAArB,OAEA,KADA,GAAAmsB,GAAA6J,IACA7J,EAAAkH,EAAAhqB,MAAA4sB,OAAAD,EAAA3C,EAAAhqB,MAAA6sB,MACAnC,EAAAiC,EAAA,GAAAh2B,QACAqJ,EAAA0C,MAAA5H,KAAA6xB,EAEA,IAAA7J,EAIA,MAHA9iB,GAAA8sB,WAAAhK,EAAA,GACA4H,EAAA5H,EAAA,GAAAnsB,QACAqJ,EAAA8iB,IAAA9rB,EACAgJ,KAzFA,IAAAysB,EAAA,EA8FA,SAAAzsB,GACA,GAAA8V,GAAA9V,EAAA8V,QACAgX,EAAA9sB,EAAA8sB,UAEA9B,KACA,MAAAD,GAAAgC,GAAAjX,IACA6U,EAAAI,GAEAK,EAAAtV,IAAAiV,IAAAjV,GACA6U,EAAA7U,GAQA,QAJAkX,GAAA/B,EAAAnV,IAAA,SAAAA,GAAA,SAAAiV,KAAA+B,EAEAn1B,EAAAqI,EAAA0C,MAAA/L,OACA+L,EAAA,GAAAxK,OAAAP,GACAjB,EAAA,EAAmBA,EAAAiB,EAAOjB,IAAA,CAC1B,GAAAoc,GAAA9S,EAAA0C,MAAAhM,EAEAu2B,MAAA,IAAAna,EAAA,GAAA7b,QAAA,QACA,KAAA6b,EAAA,UAA6BA,GAAA,GAC7B,KAAAA,EAAA,UAA6BA,GAAA,GAC7B,KAAAA,EAAA,UAA6BA,GAAA,GAE7B,IAAA1d,GAAA0d,EAAA,IAAAA,EAAA,IAAAA,EAAA,MACApQ,GAAAhM,IACAkH,KAAAkV,EAAA,GACA1d,MAAA+0B,GACA/0B,EACAlB,EAAAk2B,uBAKA4C,IACAnC,EAAA/vB,MAAkByF,IAAAuV,EAAAgV,cAAAhV,EAAAlf,cAAA8L,UAClBqoB,EAAAjV,GAGA5hB,EAAA8D,OACA9D,EAAA8D,MAAA8d,EAAApT,EAAAsqB,EAAAhtB,EAAAhI,MAAAgI,EAAA8iB,MAtIA2J,EACA,WAIA,GAAA/rB,OAAA,GAAAwsB,MAAA,GAAAxP,MAAA,EACA,IAAAsO,GAAA,GAEA,IADAkB,EAAAlD,EAAAvgB,MAAAuiB,KAEAF,GAAAlyB,KAAAszB,IACAR,GAAA9yB,KAAAszB,IACAjB,GAAAryB,KAAAszB,IACAf,GAAAvyB,KAAAszB,KAGAxP,EAAAwP,EAAAj2B,QAAA,QACA,IACA+0B,GAAAtO,EACAwP,EAAAlD,EAAAvgB,MAAAuiB,EAEAtrB,GAAAspB,EAAAlM,UAAA,EAAAkO,GACAtB,EAAAsB,GAGAA,EAAA,IACAtrB,EAAAspB,EACAA,EAAA,IAGA91B,EAAA63B,OAAArrB,GACAxM,EAAA63B,MAAArrB,GAuBA,GAAAspB,IAAA1mB,EAAA,CACApP,EAAA63B,OAAA73B,EAAA63B,MAAA/B,EAIA,QAKAW,IA6IA,QAAAwC,IACAzsB,EACA0sB,GAEA,GAAAC,GAAAD,EAAAE,GAAAF,GAAAG,EACA,IAAAF,EAAAzzB,KAAA8G,GAAA,CAMA,IAHA,GAEAV,GAAAhJ,EAFAw2B,KACAC,EAAAJ,EAAAI,UAAA,EAEAztB,EAAAqtB,EAAAK,KAAAhtB,IAAA,CACA1J,EAAAgJ,EAAAhJ,MAEAA,EAAAy2B,GACAD,EAAA1yB,KAAAjF,KAAAC,UAAA4K,EAAA+I,MAAAgkB,EAAAz2B,IAGA,IAAAkjB,GAAAD,GAAAja,EAAA,GAAAsa,OACAkT,GAAA1yB,KAAA,MAAAof,EAAA,KACAuT,EAAAz2B,EAAAgJ,EAAA,GAAArJ,OAKA,MAHA82B,GAAA/sB,EAAA/J,QACA62B,EAAA1yB,KAAAjF,KAAAC,UAAA4K,EAAA+I,MAAAgkB,KAEAD,EAAA3U,KAAA,MA6BA,QAAA8U,IACAC,EACA15B,GA0BA,QAAA25B,GAAAC,GAEAA,EAAAC,MACAC,GAAA,GAEAC,GAAAH,EAAAvtB,OACA2tB,GAAA,GA9BAC,GAAAj6B,EAAA8nB,MAAAZ,GACAgT,GAAAl6B,EAAAsb,iBAAA2b,GACAkD,GAAAn6B,EAAAwc,aAAAya,GACA8C,GAAA/5B,EAAAo6B,UAAAnD,GACAoD,GAAAjT,GAAApnB,EAAAqnB,QAAA,oBACAiT,GAAAlT,GAAApnB,EAAAqnB,QAAA,iBACAkT,GAAAnT,GAAApnB,EAAAqnB,QAAA,qBACA6R,GAAAl5B,EAAAk5B,UAEA,IAEAsB,GACAC,EAHA9D,KACA+D,GAAA,IAAA16B,EAAA06B,mBAGAZ,GAAA,EACAE,GAAA,CAmNA,OA/LAzD,IAAAmD,GACA5R,KAAAmS,GACAnD,WAAA92B,EAAA82B,WACAE,WAAAh3B,EAAAg3B,WACAG,iBAAAn3B,EAAAm3B,iBACAjB,qBAAAl2B,EAAAk2B,qBACApyB,MAAA,SAAAuI,EAAAmC,EAAAsqB,GAGA,GAAAlsB,GAAA6tB,KAAA7tB,IAAAstB,GAAA7tB,EAIA0e,KAAA,QAAAne,IACA4B,EAAAmsB,GAAAnsB,GAGA,IAAAorB,IACA95B,KAAA,EACAuM,MACAoc,UAAAja,EACAga,SAAAoS,GAAApsB,GACAvE,OAAAwwB,EACAluB,YAEAK,KACAgtB,EAAAhtB,MAGAiuB,GAAAjB,KAAAlyB,OACAkyB,EAAAkB,WAAA,EASA,QAAAt4B,GAAA,EAAqBA,EAAA63B,GAAA53B,OAA0BD,IAC/C63B,GAAA73B,GAAAo3B,EAAA55B,EAYA,IATA85B,IACAiB,GAAAnB,GACAA,EAAAC,MACAC,GAAA,IAGAC,GAAAH,EAAAvtB,OACA2tB,GAAA,GAEAF,EACAkB,GAAApB,OACO,CACPqB,GAAArB,GACAsB,GAAAtB,GACAuB,GAAAvB,GACAwB,GAAAxB,GAIAA,EAAAyB,OAAAzB,EAAAp5B,MAAAgO,EAAA/L,OAEA64B,GAAA1B,GACA2B,GAAA3B,GACA4B,GAAA5B,EACA,QAAA6B,GAAA,EAAyBA,EAAAnB,GAAA73B,OAAyBg5B,IAClDnB,GAAAmB,GAAA7B,EAAA55B,EAEA07B,IAAA9B,GAwCA,GAnBAY,EAGO7D,EAAAl0B,QAEP+3B,EAAAmB,KAAA/B,EAAAgC,QAAAhC,EAAAiC,OAEAC,GAAAtB,GACAxU,IAAA4T,EAAAgC,OACAG,MAAAnC,IARAY,EAAAZ,EAkBAa,IAAAb,EAAAkB,UACA,GAAAlB,EAAAgC,QAAAhC,EAAAiC,KACAG,GAAApC,EAAAa,OACS,IAAAb,EAAAqC,UAAA,CACTxB,EAAAY,OAAA,CACA,IAAA3xB,GAAAkwB,EAAAsC,YAAA,aAAuDzB,EAAA5mB,cAAA4mB,EAAA5mB,iBAA6DnK,GAAAkwB,MAEpHa,GAAAluB,SAAA3F,KAAAgzB,GACAA,EAAA3vB,OAAAwwB,CAGA3B,GAIAa,EAAAC,IAHAa,EAAAb,EACAjD,EAAA/vB,KAAAgzB,GAKA,QAAAuC,GAAA,EAAuBA,EAAA5B,GAAA93B,OAA6B05B,IACpD5B,GAAA4B,GAAAvC,EAAA55B,IAIA4uB,IAAA,WAEA,GAAAgL,GAAAjD,IAAAl0B,OAAA,GACA25B,EAAAxC,EAAArtB,SAAAqtB,EAAArtB,SAAA9J,OAAA,EACA25B,IAAA,IAAAA,EAAAt8B,MAAA,MAAAs8B,EAAA5vB,OAAAwtB,GACAJ,EAAArtB,SAAAzF,MAGA6vB,EAAAl0B,QAAA,EACAg4B,EAAA9D,IAAAl0B,OAAA,GACAk3B,EAAAC,IAGA/B,MAAA,SAAArrB,GACA,GAAAiuB,KAgBA1P,IACA,aAAA0P,EAAApuB,KACAouB,EAAAjS,SAAAgM,cAAAhoB,GAFA,CAMA,GAAAD,GAAAkuB,EAAAluB,QAKA,IAJAC,EAAAwtB,GAAAxtB,EAAA4Z,OACAiW,GAAA5B,GAAAjuB,EAAA8vB,GAAA9vB,GAEAkuB,GAAAnuB,EAAA9J,OAAA,OACA,CACA,GAAA6jB,IACAwT,GAAA,MAAAttB,IAAA8Z,EAAA2S,GAAAzsB,EAAA0sB,KACA3sB,EAAA3F,MACA9G,KAAA,EACAwmB,aACA9Z,SAES,MAAAA,GAAAD,EAAA9J,QAAA,MAAA8J,IAAA9J,OAAA,GAAA+J,MACTD,EAAA3F,MACA9G,KAAA,EACA0M,cAMAguB,EAGA,QAAAO,IAAAjoB,GACA,MAAAwV,GAAAxV,EAAA,WACAA,EAAA+mB,KAAA,GAIA,QAAAmB,IAAAloB,GACA,GAAArP,GAAAqP,EAAA2V,UAAAhmB,MACA,IAAAgB,EAEA,OADA+K,GAAAsE,EAAAtE,MAAA,GAAAxK,OAAAP,GACAjB,EAAA,EAAmBA,EAAAiB,EAAOjB,IAC1BgM,EAAAhM,IACAkH,KAAAoJ,EAAA2V,UAAAjmB,GAAAkH,KACAxI,MAAAS,KAAAC,UAAAkR,EAAA2V,UAAAjmB,GAAAtB,YAGG4R,GAAA+mB,MAEH/mB,EAAAuoB,OAAA,GAIA,QAAAD,IAAAtoB,GACA,GAAAkT,GAAAmC,GAAArV,EAAA,MACAkT,KAIAlT,EAAAtS,IAAAwlB,GAIA,QAAAsV,IAAAxoB,GACA,GAAAgQ,GAAAqF,GAAArV,EAAA,MACAgQ,KACAhQ,EAAAgQ,MACAhQ,EAAAkQ,SAAAuZ,GAAAzpB,IAIA,QAAAmoB,IAAAnoB,GACA,GAAAkT,EACA,IAAAA,EAAAsC,GAAAxV,EAAA,UACA,GAAA0pB,GAAAxW,EAAAla,MAAA2wB,GACA,KAAAD,EAIA,MAEA1pB,GAAA4pB,IAAAF,EAAA,GAAApW,MACA,IAAAuW,GAAAH,EAAA,GAAApW,OACAwW,EAAAD,EAAA7wB,MAAA+wB,GACAD,IACA9pB,EAAA6pB,MAAAC,EAAA,GAAAxW,OACAtT,EAAAgqB,UAAAF,EAAA,GAAAxW,OACAwW,EAAA,KACA9pB,EAAAiqB,UAAAH,EAAA,GAAAxW,SAGAtT,EAAA6pB,SAKA,QAAAzB,IAAApoB,GACA,GAAAkT,GAAAsC,GAAAxV,EAAA,OACA,IAAAkT,EACAlT,EAAA6oB,GAAA3V,EACA8V,GAAAhpB,GACAkT,MACA+V,MAAAjpB,QAEG,CACH,MAAAwV,GAAAxV,EAAA,YACAA,EAAA+oB,MAAA,EAEA,IAAAD,GAAAtT,GAAAxV,EAAA,YACA8oB,KACA9oB,EAAA8oB,WAKA,QAAAI,IAAAlpB,EAAA7I,GACA,GAAAoc,GAAA2W,GAAA/yB,EAAAsC,SACA8Z,MAAAsV,IACAG,GAAAzV,GACAL,IAAAlT,EAAA8oB,OACAG,MAAAjpB,IAUA,QAAAkqB,IAAAzwB,GAEA,IADA,GAAA/J,GAAA+J,EAAA9J,OACAD,KAAA,CACA,OAAA+J,EAAA/J,GAAA1C,KACA,MAAAyM,GAAA/J,EAQA+J,GAAAzF,OAKA,QAAAg1B,IAAAhpB,EAAAmqB,GACAnqB,EAAAoqB,eACApqB,EAAAoqB,iBAEApqB,EAAAoqB,aAAAt2B,KAAAq2B,GAGA,QAAA9B,IAAAroB,GAEA,MADAwV,GAAAxV,EAAA,YAEAA,EAAAjO,MAAA,GAIA,QAAA02B,IAAAzoB,GACA,YAAAA,EAAAzG,IACAyG,EAAAqqB,SAAAhV,GAAArV,EAAA,YAQG,CACH,GAAAopB,GAAA/T,GAAArV,EAAA,OACAopB,KACAppB,EAAAopB,WAAA,OAAAA,EAAA,YAAAA,GAEA,aAAAppB,EAAAzG,MACAyG,EAAAmpB,UAAA3T,GAAAxV,EAAA,WAKA,QAAA0oB,IAAA1oB,GACA,GAAAygB,IACAA,EAAApL,GAAArV,EAAA,SACAA,EAAAtC,UAAA+iB,GAEA,MAAAjL,GAAAxV,EAAA,qBACAA,EAAA0H,gBAAA,GAIA,QAAAkhB,IAAA5oB,GACA,GACAtQ,GAAAiB,EAAAiG,EAAAgb,EAAAxjB,EAAAqjB,EAAA6Y,EADA96B,EAAAwQ,EAAA2V,SAEA,KAAAjmB,EAAA,EAAAiB,EAAAnB,EAAAG,OAA8BD,EAAAiB,EAAOjB,IAGrC,GAFAkH,EAAAgb,EAAApiB,EAAAE,GAAAkH,KACAxI,EAAAoB,EAAAE,GAAAtB,MACAm8B,GAAA33B,KAAAgE,GAQA,GANAoJ,EAAAwqB,aAAA,EAEA/Y,EAAAgZ,GAAA7zB,GACA6a,IACA7a,IAAAgkB,QAAA8P,GAAA,KAEAC,GAAA/3B,KAAAgE,GACAA,IAAAgkB,QAAA+P,GAAA,IACAv8B,EAAA6kB,GAAA7kB,GACAk8B,GAAA,EACA7Y,IACAA,EAAAnZ,OACAgyB,GAAA,EAEA,eADA1zB,EAAAC,GAAAD,MACuCA,EAAA,cAEvC6a,EAAAmZ,QACAh0B,EAAAC,GAAAD,IAEA6a,EAAAtU,MACA2X,GACA9U,EACA,UAAAnJ,GAAAD,GACAof,GAAA5nB,EAAA,YAIAk8B,GAAAjD,GAAArnB,EAAAzG,IAAAyG,EAAA0V,SAAA1oB,KAAA4J,GACA8d,GAAA1U,EAAApJ,EAAAxI,GAEAumB,GAAA3U,EAAApJ,EAAAxI,OAEO,IAAAy8B,GAAAj4B,KAAAgE,GACPA,IAAAgkB,QAAAiQ,GAAA,IACA/V,GAAA9U,EAAApJ,EAAAxI,EAAAqjB,GAAA,EAAA0V,QACO,CACPvwB,IAAAgkB,QAAA2P,GAAA,GAEA,IAAAO,GAAAl0B,EAAAoC,MAAA+xB,IACAlW,EAAAiW,KAAA,EACAjW,KACAje,IAAA6L,MAAA,IAAAoS,EAAAllB,OAAA,KAEAilB,GAAA5U,EAAApJ,EAAAgb,EAAAxjB,EAAAymB,EAAApD,OAKK,CAaLkD,GAAA3U,EAAApJ,EAAA/H,KAAAC,UAAAV,KAKA,QAAAq7B,IAAAzpB,GAEA,IADA,GAAA7I,GAAA6I,EACA7I,GAAA,CACA,OAAApJ,KAAAoJ,EAAAyyB,IACA,QAEAzyB,YAEA,SAGA,QAAAszB,IAAA7zB,GACA,GAAAoC,GAAApC,EAAAoC,MAAA0xB,GACA,IAAA1xB,EAAA,CACA,GAAA/H,KAEA,OADA+H,GAAAvL,QAAA,SAAA+mB,GAAgCvjB,EAAAujB,EAAA/R,MAAA,SAChCxR,GAIA,QAAA62B,IAAApsB,GAEA,OADAnM,MACAG,EAAA,EAAAiB,EAAA+K,EAAA/L,OAAmCD,EAAAiB,EAAOjB,IAO1CH,EAAAmM,EAAAhM,GAAAkH,MAAA8E,EAAAhM,GAAAtB,KAEA,OAAAmB,GAIA,QAAAg6B,IAAAvpB,GACA,iBAAAA,EAAAzG,KAAA,UAAAyG,EAAAzG,IAGA,QAAAwuB,IAAA/nB,GACA,MACA,UAAAA,EAAAzG,KACA,WAAAyG,EAAAzG,OACAyG,EAAA0V,SAAA1oB,MACA,oBAAAgT,EAAA0V,SAAA1oB,MASA,QAAA66B,IAAAnsB,GAEA,OADAnK,MACA7B,EAAA,EAAiBA,EAAAgM,EAAA/L,OAAkBD,IAAA,CACnC,GAAAi2B,GAAAjqB,EAAAhM,EACAs7B,IAAAp4B,KAAA+yB,EAAA/uB,QACA+uB,EAAA/uB,KAAA+uB,EAAA/uB,KAAAgkB,QAAAqQ,GAAA,IACA15B,EAAAuC,KAAA6xB,IAGA,MAAAp0B,GAqCA,QAAA25B,IAAAxD,EAAAx6B,GACAw6B,IACAyD,GAAAC,GAAAl+B,EAAAm+B,YAAA,IACAC,GAAAp+B,EAAAub,eAAA0b,GAEAoH,GAAA7D,GAEA8D,GAAA9D,GAAA,IAGA,QAAA+D,IAAAj+B,GACA,MAAA4B,GACA,2DACA5B,EAAA,IAAAA,EAAA,KAIA,QAAA+9B,IAAAnvB,GAEA,GADAA,EAAAsvB,OAAA3xB,GAAAqC,GACA,IAAAA,EAAApP,KAAA,CAIA,IACAs+B,GAAAlvB,EAAA7C,MACA,SAAA6C,EAAA7C,KACA,MAAA6C,EAAAsZ,SAAA,mBAEA,MAEA,QAAAhmB,GAAA,EAAAiB,EAAAyL,EAAA3C,SAAA9J,OAA6CD,EAAAiB,EAAOjB,IAAA,CACpD,GAAA0H,GAAAgF,EAAA3C,SAAA/J,EACA67B,IAAAn0B,GACAA,EAAAs0B,SACAtvB,EAAAsvB,QAAA,KAMA,QAAAF,IAAApvB,EAAAyN,GACA,OAAAzN,EAAApP,KAAA,CAOA,IANAoP,EAAAsvB,QAAAtvB,EAAArK,QACAqK,EAAAuvB,YAAA9hB,GAKAzN,EAAAsvB,QAAAtvB,EAAA3C,SAAA9J,SACA,IAAAyM,EAAA3C,SAAA9J,QACA,IAAAyM,EAAA3C,SAAA,GAAAzM,MAGA,YADAoP,EAAAwvB,YAAA,EAKA,IAFAxvB,EAAAwvB,YAAA,EAEAxvB,EAAA3C,SACA,OAAA/J,GAAA,EAAAiB,EAAAyL,EAAA3C,SAAA9J,OAA+CD,EAAAiB,EAAOjB,IACtD87B,GAAApvB,EAAA3C,SAAA/J,GAAAma,KAAAzN,EAAAwtB,IAGAxtB,GAAAguB,cACAyB,GAAAzvB,EAAAguB,aAAAvgB,IAKA,QAAAgiB,IAAAC,EAAAjiB,GACA,OAAAna,GAAA,EAAAuJ,EAAA6yB,EAAAn8B,OAA+CD,EAAAuJ,EAASvJ,IACxD87B,GAAAM,EAAAp8B,GAAAu5B,MAAApf,GAIA,QAAA9P,IAAAqC,GACA,WAAAA,EAAApP,OAGA,IAAAoP,EAAApP,SAGAoP,EAAA2qB,MACA3qB,EAAAouB,aACApuB,EAAAysB,IAAAzsB,EAAAwtB,KACAmC,GAAA3vB,EAAA7C,OACA+xB,GAAAlvB,EAAA7C,MACAyyB,GAAA5vB,KACAlQ,OAAAsB,KAAA4O,GAAA4C,MAAAmsB,OAIA,QAAAa,IAAA5vB,GACA,KAAAA,EAAAjF,QAAA,CAEA,GADAiF,IAAAjF,OACA,aAAAiF,EAAA7C,IACA,QAEA,IAAA6C,EAAAwtB,IACA,SAGA,SAuCA,QAAAqC,IACAhX,EACA1hB,EACAyhB,GAEA,GAAAzjB,GAAAgC,EAAA,aAAkC,MAClC,QAAAqD,KAAAqe,GAAA,CAYA1jB,GAAA,IAAAqF,EAAA,KAAAs1B,GAAAt1B,EAXAqe,EAAAre,IAWA,IAEA,MAAArF,GAAAkR,MAAA,UAGA,QAAAypB,IACAt1B,EACAsO,GAEA,IAAAA,EACA,oBAGA,IAAAhU,MAAA2D,QAAAqQ,GACA,UAAAA,EAAA3V,IAAA,SAAA2V,GAAmD,MAAAgnB,IAAAt1B,EAAAsO,KAAoC2M,KAAA,QAGvF,IAAAsa,GAAAC,GAAAx5B,KAAAsS,EAAA9W,OACAi+B,EAAAC,GAAA15B,KAAAsS,EAAA9W,MAEA,IAAA8W,EAAAuM,UAIG,CACH,GAAAmG,GAAA,GACA2U,EAAA,GACA/+B,IACA,QAAAE,KAAAwX,GAAAuM,UACA+a,GAAA9+B,IACA6+B,GAAAC,GAAA9+B,GAEA6b,GAAA7b,IACAF,EAAAsG,KAAApG,IAGAF,EAAAsG,KAAApG,EAGAF,GAAAmC,SACAioB,GAAA6U,GAAAj/B,IAGA++B,IACA3U,GAAA2U,EAOA,2BAA8B3U,GAL9BuU,EACAjnB,EAAA9W,MAAA,WACAi+B,EACA,IAAAnnB,EAAA,kBACAA,EAAA9W,OAC8B,IA9B9B,MAAA+9B,IAAAE,EACAnnB,EAAA9W,MACA,oBAA2B8W,EAAA,UAgC3B,QAAAunB,IAAAj/B,GACA,mCAAAA,EAAA+B,IAAAm9B,IAAA7a,KAAA,sBAGA,QAAA6a,IAAAh/B,GACA,GAAAi/B,GAAAC,SAAAl/B,EAAA,GACA,IAAAi/B,EACA,0BAAAA,CAEA,IAAA9C,GAAAtgB,GAAA7b,EACA,4BAAAmB,KAAAC,UAAApB,IAAAm8B,EAAA,IAAAh7B,KAAAC,UAAA+6B,GAAA,QAKA,QAAAgD,IAAA7sB,EAAA2Q,GACA3Q,EAAA8sB,SAAA,SAAAlV,GACA,YAAAA,EAAA,KAAA5X,EAAA,SAAA2Q,EAAA,OAAAA,EAAAc,WAAAd,EAAAc,UAAAnZ,KAAA,iBAuBA,QAAAy0B,IACAC,EACA9/B,GAGA,GAAA+/B,GAAA7/B,GACA8/B,EAAA9/B,MACA+/B,EAAAC,EACAA,IAAA,EACAC,GAAAngC,EACAogC,GAAApgC,EAAA8nB,MAAAZ,GACAmZ,GAAAjZ,GAAApnB,EAAAqnB,QAAA,iBACAiZ,GAAAlZ,GAAApnB,EAAAqnB,QAAA,WACAkZ,GAAAvgC,EAAA8J,eACA02B,GAAAxgC,EAAAub,eAAA0b,EACA,IAAAvM,GAAAoV,EAAAW,GAAAX,GAAA,WAGA,OAFA5/B,IAAA6/B,EACAG,GAAAD,GAEAhgC,OAAA,qBAAyByqB,EAAA,IACzBxqB,gBAAA8/B,GAIA,QAAAS,IAAA3tB,GACA,GAAAA,EAAA4rB,aAAA5rB,EAAA4tB,gBACA,MAAAC,IAAA7tB,EACG,IAAAA,EAAAjO,OAAAiO,EAAA8tB,cACH,MAAAC,IAAA/tB,EACG,IAAAA,EAAA4pB,MAAA5pB,EAAAguB,aACH,MAAAC,IAAAjuB,EACG,IAAAA,EAAA6oB,KAAA7oB,EAAAkuB,YACH,MAAAC,IAAAnuB,EACG,iBAAAA,EAAAzG,KAAAyG,EAAAopB,WAEA,aAAAppB,EAAAzG,IACH,MAAA60B,IAAApuB,EAGA,IAAA4X,EACA,IAAA5X,EAAAtC,UACAka,EAAAyW,GAAAruB,EAAAtC,UAAAsC,OACK,CACL,GAAAxG,GAAAwG,EAAAuoB,UAAAx6B,GAAAugC,GAAAtuB,GAEAvG,EAAAuG,EAAA0H,eAAA,KAAA6mB,GAAAvuB,GAAA,EACA4X,GAAA,OAAA5X,EAAA,SAAAxG,EAAA,IAAAA,EAAA,KAAAC,EAAA,IAAAA,EAAA,QAGA,OAAA/J,GAAA,EAAmBA,EAAA69B,GAAA59B,OAAyBD,IAC5CkoB,EAAA2V,GAAA79B,GAAAsQ,EAAA4X,EAEA,OAAAA,GAlBA,MAAA2W,IAAAvuB,IAAA,SAuBA,QAAA6tB,IAAA7tB,GAGA,MAFAA,GAAA4tB,iBAAA,EACAxgC,GAAA0G,KAAA,qBAAoC65B,GAAA3tB,GAAA,KACpC,OAAA5S,GAAAuC,OAAA,IAAAqQ,EAAA2rB,YAAA,gBAIA,QAAAoC,IAAA/tB,GAEA,GADAA,EAAA8tB,eAAA,EACA9tB,EAAA6oB,KAAA7oB,EAAAkuB,YACA,MAAAC,IAAAnuB,EACG,IAAAA,EAAA2rB,YAAA,CAGH,IAFA,GAAAj+B,GAAA,GACAyJ,EAAA6I,EAAA7I,OACAA,GAAA,CACA,GAAAA,EAAAyyB,IAAA,CACAl8B,EAAAyJ,EAAAzJ,GACA,OAEAyJ,WAEA,MAAAzJ,GAMA,MAAAigC,GAAA3tB,GAAA,IAAAotB,MAAA1/B,EAAA,IAAAA,EAAA,QAFAigC,GAAA3tB,GAIA,MAAA6tB,IAAA7tB,GAIA,QAAAmuB,IAAAnuB,GAEA,MADAA,GAAAkuB,aAAA,EACAM,GAAAxuB,EAAAoqB,aAAA3nB,SAGA,QAAA+rB,IAAAC,GAaA,QAAAC,GAAA1uB,GACA,MAAAA,GAAAjO,KAAAg8B,GAAA/tB,GAAA2tB,GAAA3tB,GAbA,IAAAyuB,EAAA9+B,OACA,YAGA,IAAAw6B,GAAAsE,EAAAE,OACA,OAAAxE,GAAAjX,IACA,IAAAiX,EAAA,SAAAuE,EAAAvE,EAAAlB,OAAA,IAAAuF,GAAAC,GAEA,GAAAC,EAAAvE,EAAAlB,OASA,QAAAgF,IAAAjuB,GACA,GAAAkT,GAAAlT,EAAA4pB,IACAC,EAAA7pB,EAAA6pB,MACAG,EAAAhqB,EAAAgqB,UAAA,IAAAhqB,EAAA,aACAiqB,EAAAjqB,EAAAiqB,UAAA,IAAAjqB,EAAA,YAeA,OADAA,GAAAguB,cAAA,EACA,OAAA9a,EAAA,cACA2W,EAAAG,EAAAC,EAAA,YACA0D,GAAA3tB,GACA,KAGA,QAAAsuB,IAAAtuB,GACA,GAAAxG,GAAA,IAIAzC,EAAA63B,GAAA5uB,EACAjJ,KAAayC,GAAAzC,EAAA,KAGbiJ,EAAAtS,MACA8L,GAAA,OAAAwG,EAAA,SAGAA,EAAAgQ,MACAxW,GAAA,OAAAwG,EAAA,SAEAA,EAAAkQ,WACA1W,GAAA,kBAGAwG,EAAA+mB,MACAvtB,GAAA,aAGAwG,EAAAtC,YACAlE,GAAA,QAAAwG,EAAA,SAGA,QAAAtQ,GAAA,EAAiBA,EAAA89B,GAAA79B,OAAuBD,IACxC8J,GAAAg0B,GAAA99B,GAAAsQ,EA8BA,IA3BAA,EAAAtE,QACAlC,GAAA,UAAoBq1B,GAAA7uB,EAAAtE,OAAA,MAGpBsE,EAAArJ,QACA6C,GAAA,aAAuBq1B,GAAA7uB,EAAArJ,OAAA,MAGvBqJ,EAAAiV,SACAzb,GAAAyyB,GAAAjsB,EAAAiV,QAAA,EAAAqY,IAAA,KAEAttB,EAAAmV,eACA3b,GAAAyyB,GAAAjsB,EAAAmV,cAAA,EAAAmY,IAAA,KAGAttB,EAAAopB,aACA5vB,GAAA,QAAAwG,EAAA,gBAGAA,EAAAe,cACAvH,GAAAs1B,GAAA9uB,EAAAe,aAAA,KAGAf,EAAA6G,QACArN,GAAA,gBAAoBwG,EAAA6G,MAAA,mBAAA7G,EAAA6G,MAAA,wBAAA7G,EAAA6G,MAAA,iBAGpB7G,EAAA0H,eAAA,CACA,GAAAA,GAAAqnB,GAAA/uB,EACA0H,KACAlO,GAAAkO,EAAA,KAQA,MALAlO,KAAAohB,QAAA,aAEA5a,EAAA8sB,WACAtzB,EAAAwG,EAAA8sB,SAAAtzB,IAEAA,EAGA,QAAAo1B,IAAA5uB,GACA,GAAAjJ,GAAAiJ,EAAAhJ,UACA,IAAAD,EAAA,CACA,GAEArH,GAAAiB,EAAAggB,EAAAqe,EAFAz9B,EAAA,eACA09B,GAAA,CAEA,KAAAv/B,EAAA,EAAAiB,EAAAoG,EAAApH,OAA8BD,EAAAiB,EAAOjB,IAAA,CACrCihB,EAAA5Z,EAAArH,GACAs/B,GAAA,CACA,IAAAE,GAAAzB,GAAA9c,EAAA/Z,OAAAu4B,GAAAxe,EAAA/Z,KACAs4B,KAGAF,IAAAE,EAAAlvB,EAAA2Q,EAAA2c,KAEA0B,IACAC,GAAA,EACA19B,GAAA,UAAeof,EAAA,mBAAAA,EAAA,aAAAA,EAAAviB,MAAA,WAAAuiB,EAAA,sBAAA9hB,KAAAC,UAAA6hB,EAAAviB,OAAA,KAAAuiB,EAAAkE,IAAA,SAAAlE,EAAA,aAAAA,EAAAc,UAAA,cAAA5iB,KAAAC,UAAA6hB,EAAAc,WAAA,UAGf,MAAAwd,GACA19B,EAAAkR,MAAA,cADA,IAKA,QAAAssB,IAAA/uB,GACA,GAAAgtB,GAAAhtB,EAAAvG,SAAA,EAMA,QAAAuzB,EAAAhgC,KAAA,CACA,GAAAoiC,GAAArC,GAAAC,EAAAK,GACA,4CAA+C+B,EAAA,6BAAiCA,EAAAhiC,gBAAAmC,IAAA,SAAAqoB,GAA4E,oBAAqBA,EAAA,MAAkB/F,KAAA,WAInM,QAAAid,IAAAlwB,GACA,yBAAA1S,OAAAsB,KAAAoR,GAAArP,IAAA,SAAA7B,GAAuE,MAAA2hC,IAAA3hC,EAAAkR,EAAAlR,MAAyCmkB,KAAA,UAGhH,QAAAwd,IAAA3hC,EAAAsS,GACA,MAAAA,GAAA4pB,MAAA5pB,EAAAguB,aACAsB,GAAA5hC,EAAAsS,GAEA,QAAWtS,EAAA,gBAAAqB,OAAAiR,EAAA0V,SAAA6Z,OAAA,aACX,aAAAvvB,EAAAzG,IACAg1B,GAAAvuB,IAAA,SACA2tB,GAAA3tB,IAAA,KAGA,QAAAsvB,IAAA5hC,EAAAsS,GACA,GAAAkT,GAAAlT,EAAA4pB,IACAC,EAAA7pB,EAAA6pB,MACAG,EAAAhqB,EAAAgqB,UAAA,IAAAhqB,EAAA,aACAiqB,EAAAjqB,EAAAiqB,UAAA,IAAAjqB,EAAA,YAEA,OADAA,GAAAguB,cAAA,EACA,OAAA9a,EAAA,cACA2W,EAAAG,EAAAC,EAAA,YACAoF,GAAA3hC,EAAAsS,GACA,KAGA,QAAAuuB,IAAAvuB,EAAAwvB,GACA,GAAA/1B,GAAAuG,EAAAvG,QACA,IAAAA,EAAA9J,OAAA,CACA,GAAA8/B,GAAAh2B,EAAA,EAEA,QAAAA,EAAA9J,QACA8/B,EAAA7F,KACA,aAAA6F,EAAAl2B,KACA,SAAAk2B,EAAAl2B,IAEA,MAAAo0B,IAAA8B,EAEA,IAAAtnB,GAAAqnB,EAAAE,GAAAj2B,GAAA,CACA,WAAAA,EAAAlK,IAAAogC,IAAA9d,KAAA,UAAA1J,EAAA,IAAAA,EAAA,KAQA,QAAAunB,IAAAj2B,GAEA,OADAlI,GAAA,EACA7B,EAAA,EAAiBA,EAAA+J,EAAA9J,OAAqBD,IAAA,CACtC,GAAAsQ,GAAAvG,EAAA/J,EACA,QAAAsQ,EAAAhT,KAAA,CAGA,GAAA4iC,GAAA5vB,IACAA,EAAAoqB,cAAApqB,EAAAoqB,aAAAyF,KAAA,SAAA19B,GAA+D,MAAAy9B,IAAAz9B,EAAA82B,SAAsC,CACrG13B,EAAA,CACA,QAEAu+B,GAAA9vB,IACAA,EAAAoqB,cAAApqB,EAAAoqB,aAAAyF,KAAA,SAAA19B,GAA+D,MAAA29B,IAAA39B,EAAA82B,YAC/D13B,EAAA,IAGA,MAAAA,GAGA,QAAAq+B,IAAA5vB,GACA,WAAAjS,KAAAiS,EAAA4pB,KAAA,aAAA5pB,EAAAzG,KAAA,SAAAyG,EAAAzG,IAGA,QAAAu2B,IAAA9vB,GACA,OAAA0tB,GAAA1tB,EAAAzG,KAGA,QAAAo2B,IAAAvzB,GACA,WAAAA,EAAApP,KACA2gC,GAAAvxB,GAEA2zB,GAAA3zB,GAIA,QAAA2zB,IAAAr2B,GACA,iBAAAA,EAAA1M,KACA0M,EAAA8Z,WACAwc,GAAAnhC,KAAAC,UAAA4K,UAAA,IAGA,QAAA00B,IAAApuB,GACA,GAAAqqB,GAAArqB,EAAAqqB,UAAA,YACA5wB,EAAA80B,GAAAvuB,GACAzO,EAAA,MAAA84B,GAAA5wB,EAAA,IAAAA,EAAA,IACAiC,EAAAsE,EAAAtE,OAAA,IAA6BsE,EAAAtE,MAAAnM,IAAA,SAAAlD,GAAgC,MAAAwK,IAAAxK,EAAAuK,MAAA,IAAAvK,EAAA,QAAiDwlB,KAAA,SAC9Goe,EAAAjwB,EAAA0V,SAAA,SAUA,QATAha,IAAAu0B,GAAAx2B,IACAlI,GAAA,SAEAmK,IACAnK,GAAA,IAAAmK,GAEAu0B,IACA1+B,IAAAmK,EAAA,gBAAAu0B,GAEA1+B,EAAA,IAIA,QAAA88B,IAAA6B,EAAAlwB,GACA,GAAAvG,GAAAuG,EAAA0H,eAAA,KAAA6mB,GAAAvuB,GAAA,EACA,aAAAkwB,EAAA,IAAA5B,GAAAtuB,IAAAvG,EAAA,IAAAA,EAAA,QAGA,QAAAo1B,IAAAl4B,GAEA,OADApF,GAAA,GACA7B,EAAA,EAAiBA,EAAAiH,EAAAhH,OAAkBD,IAAA,CACnC,GAAA4I,GAAA3B,EAAAjH,EACA6B,IAAA,IAAA+G,EAAA,UAAA03B,GAAA13B,EAAAlK,OAAA,IAEA,MAAAmD,GAAAkR,MAAA,MAIA,QAAAutB,IAAAt2B,GACA,MAAAA,GACAkhB,QAAA,qBACAA,QAAA,qBAsGA,QAAAuV,IACAvJ,EACA15B,GAEA,GAAA8/B,GAAArG,GAAAC,EAAAtT,OAAApmB,EACAg+B,IAAA8B,EAAA9/B,EACA,IAAA0qB,GAAAmV,GAAAC,EAAA9/B,EACA,QACA8/B,MACA7/B,OAAAyqB,EAAAzqB,OACAC,gBAAAwqB,EAAAxqB,iBAIA,QAAAgjC,IAAAxY,EAAAyY,GACA,IACA,UAAAC,UAAA1Y,GACG,MAAA7kB,GAEH,MADAs9B,GAAAv8B,MAAiBf,MAAA6kB,SACjBpmB,GAyIA,QAAA++B,IAAAvwB,EAAA9S,GACA,GACA4gB,IADA5gB,EAAA8nB,KACAQ,GAAAxV,EAAA,SAYA8N,KACA9N,EAAA8N,YAAAjf,KAAAC,UAAAgf,GAEA,IAAA0iB,GAAAnb,GAAArV,EAAA,WACAwwB,KACAxwB,EAAAwwB,gBAIA,QAAAC,IAAAzwB,GACA,GAAAxG,GAAA,EAOA,OANAwG,GAAA8N,cACAtU,GAAA,eAAAwG,EAAA,iBAEAA,EAAAwwB,eACAh3B,GAAA,SAAAwG,EAAA,kBAEAxG,EAWA,QAAAk3B,IAAA1wB,EAAA9S,GACA,GACAwsB,IADAxsB,EAAA8nB,KACAQ,GAAAxV,EAAA,SACA,IAAA0Z,EAAA,CAaA1Z,EAAA0Z,YAAA7qB,KAAAC,UAAA8qB,GAAAF,IAGA,GAAAiX,GAAAtb,GAAArV,EAAA,WACA2wB,KACA3wB,EAAA2wB,gBAIA,QAAAC,IAAA5wB,GACA,GAAAxG,GAAA,EAOA,OANAwG,GAAA0Z,cACAlgB,GAAA,eAAAwG,EAAA,iBAEAA,EAAA2wB,eACAn3B,GAAA,UAAAwG,EAAA,mBAEAxG,EAgBA,QAAAE,IAAAsG,EAAA2Q,GACAA,EAAAviB,OACAsmB,GAAA1U,EAAA,oBAAA2Q,EAAA,WAMA,QAAAqS,IAAAhjB,EAAA2Q,GACAA,EAAAviB,OACAsmB,GAAA1U,EAAA,kBAAA2Q,EAAA,WA0GA,QAAAkgB,IAAA7wB,GACA,GAAAA,EAAA8wB,UACA,MAAA9wB,GAAA8wB,SAEA,IAAAC,GAAAziB,SAAAhI,cAAA,MAEA,OADAyqB,GAAArhB,YAAA1P,EAAAgxB,WAAA,IACAD,EAAA7N,UAz6SA,GAAA10B,IAAAtC,OAAA8P,UAAArN,SAuDAo9B,GAAA38B,EAAA,qBAiBAgB,GAAAlE,OAAA8P,UAAA5L,eAoBAyG,GAAAxG,EAAA,SAAAhB,GACA,MAAAA,GAAAurB,QAFA,SAEA,SAAAnG,EAAAtiB,GAAkD,MAAAA,KAAA8+B,cAAA,OAMlD/4B,GAAA7H,EAAA,SAAAhB,GACA,MAAAA,GAAA4kB,OAAA,GAAAgd,cAAA5hC,EAAAoT,MAAA,KAOA/J,GAAArI,EAAA,SAAAhB,GACA,MAAAA,GACAurB,QAHA,iBAGA,SACAA,QAJA,iBAIA,SACAhrB,gBAgEAu0B,GAAA,WAAsB,UAKtBhb,GAAA,SAAAsL,GAA6B,MAAAA,IAoD7Byc,GAAA,uBAEAvkB,IACA,YACA,YACA,UAGAwkB,IACA,eACA,UACA,cACA,UACA,eACA,UACA,gBACA,YACA,YACA,eAKAj+B,IAIAk+B,sBAAAllC,OAAAqB,OAAA,MAKA8jC,QAAA,EAKAC,eAAA,EAKAzuB,UAAA,EAKA0uB,aAAA,EAKAp+B,aAAA,KAKAq+B,mBAKAjoB,SAAArd,OAAAqB,OAAA,MAMAkb,cAAA0b,GAMAsN,eAAAtN,GAMA/V,iBAAA+V,GAKA3b,gBAAAhX,EAKAkX,qBAAAS,GAMAO,YAAAya,GAKAuN,gBAAAP,IAKAlwB,GAAA/U,OAAAylC,WAyBAh/B,GAAA,UAiBAqiB,GAAAxjB,EAiHAogC,GAAA,gBAGAx+B,GAAA,mBAAAmb,QACAsjB,GAAAz+B,IAAAmb,OAAAujB,UAAAC,UAAAniC,cACAqoB,GAAA4Z,IAAA,eAAAj/B,KAAAi/B,IACA5f,GAAA4f,OAAA5hC,QAAA,cACA+hC,GAAAH,OAAA5hC,QAAA,WACAgiC,GAAAJ,OAAA5hC,QAAA,aACAiiC,GAAAL,IAAA,uBAAAj/B,KAAAi/B,IACA3Z,GAAA2Z,IAAA,cAAAj/B,KAAAi/B,MAAAG,GAEAvZ,IAAA,CACA,IAAArlB,GACA,IACA,GAAA0Q,MACA5X,QAAAC,eAAA2X,GAAA,WACA1X,IAAA,WAEAqsB,IAAA,KAGAlK,OAAAiK,iBAAA,oBAAA1U,IACG,MAAAjS,IAKH,GAAAsgC,IAiHAC,GAhHAx9B,GAAA,WAWA,WAVA7G,KAAAokC,KAOAA,IALA/+B,QAAA,KAAAxF,GAGA,WAAAA,EAAA,QAAAykC,IAAAC,SAKAH,IAIAtvB,GAAAzP,IAAAmb,OAAAgkB,6BAOA3sB,GACA,mBAAA4sB,SAAAj/B,EAAAi/B,SACA,mBAAA3sB,UAAAtS,EAAAsS,QAAAC,SAKA7C,GAAA,WAKA,QAAAwvB,KACAC,GAAA,CACA,IAAAC,GAAAC,EAAAnwB,MAAA,EACAmwB,GAAAjjC,OAAA,CACA,QAAAD,GAAA,EAAmBA,EAAAijC,EAAAhjC,OAAmBD,IACtCijC,EAAAjjC,KATA,GAEAmjC,GAFAD,KACAF,GAAA,CAmBA,uBAAAI,UAAAv/B,EAAAu/B,SAAA,CACA,GAAA9e,GAAA8e,QAAAx1B,UACAy1B,EAAA,SAAAhgC,GAAmCM,QAAAC,MAAAP,GACnC8/B,GAAA,WACA7e,EAAAvW,KAAAg1B,GAAAO,MAAAD,GAMAb,IAAkBt0B,WAAApM,QAEf,uBAAAyhC,oBACH1/B,EAAA0/B,mBAEA,yCAAAA,iBAAAtkC,WAiBAkkC,EAAA,WACAj1B,WAAA60B,EAAA,QAjBA,CAGA,GAAAS,GAAA,EACAC,EAAA,GAAAF,kBAAAR,GACAW,EAAA9kB,SAAAc,eAAArgB,OAAAmkC,GACAC,GAAA9+B,QAAA++B,GACAC,eAAA,IAEAR,EAAA,WACAK,KAAA,KACAE,EAAA55B,KAAAzK,OAAAmkC,IAUA,gBAAA3X,EAAA9qB,GACA,GAAA6iC,EAgBA,IAfAV,EAAA9+B,KAAA,WACA,GAAAynB,EACA,IACAA,EAAA9sB,KAAAgC,GACS,MAAAoB,GACTiB,EAAAjB,EAAApB,EAAA,gBAEO6iC,IACPA,EAAA7iC,KAGAiiC,IACAA,GAAA,EACAG,MAEAtX,GAAA,mBAAAuX,SACA,UAAAA,SAAA,SAAAx1B,EAAAC,GACA+1B,EAAAh2B,OAUA80B,IAFA,mBAAAmB,MAAAhgC,EAAAggC,KAEAA,IAGA,WACA,QAAAA,KACAthC,KAAAuD,IAAAtJ,OAAAqB,OAAA,MAYA,MAVAgmC,GAAAv3B,UAAAiG,IAAA,SAAAvU,GACA,WAAAuE,KAAAuD,IAAA9H,IAEA6lC,EAAAv3B,UAAArB,IAAA,SAAAjN,GACAuE,KAAAuD,IAAA9H,IAAA,GAEA6lC,EAAAv3B,UAAAoH,MAAA,WACAnR,KAAAuD,IAAAtJ,OAAAqB,OAAA,OAGAgmC,IAOA,IAAAC,IAAA,EAMA7/B,GAAA,WACA1B,KAAA4F,GAAA27B,KACAvhC,KAAAwhC,QAGA9/B,IAAAqI,UAAA03B,OAAA,SAAAC,GACA1hC,KAAAwhC,KAAA3/B,KAAA6/B,IAGAhgC,GAAAqI,UAAA43B,UAAA,SAAAD,GACA9jC,EAAAoC,KAAAwhC,KAAAE,IAGAhgC,GAAAqI,UAAAtG,OAAA,WACA/B,GAAAC,QACAD,GAAAC,OAAAigC,OAAA5hC,OAIA0B,GAAAqI,UAAAnG,OAAA,WAGA,OADA49B,GAAAxhC,KAAAwhC,KAAAhxB,QACA/S,EAAA,EAAAiB,EAAA8iC,EAAA9jC,OAAkCD,EAAAiB,EAAOjB,IACzC+jC,EAAA/jC,GAAAuH,UAOAtD,GAAAC,OAAA,IACA,IAAAC,OAgBAigC,GAAA5iC,MAAA8K,UACA+3B,GAAA7nC,OAAAqB,OAAAumC,KACA,OACA,MACA,QACA,UACA,SACA,OACA,WAEArmC,QAAA,SAAAumC,GAEA,GAAAC,GAAAH,GAAAE,EACA3hC,GAAA0hC,GAAAC,EAAA,WAOA,IANA,GAAAz5B,GAAA3J,UAIAlB,EAAAkB,UAAAjB,OACAmc,EAAA,GAAA5a,OAAAxB,GACAA,KACAoc,EAAApc,GAAA6K,EAAA7K,EAEA,IAEA6hB,GAFA9L,EAAAwuB,EAAApjC,MAAAoB,KAAA6Z,GACAvX,EAAAtC,KAAAuC,MAEA,QAAAw/B,GACA,WAGA,cACAziB,EAAAzF,CACA,MACA,cACAyF,EAAAzF,EAAArJ,MAAA,GAMA,MAHA8O,IAAmBhd,EAAA2/B,aAAA3iB,GAEnBhd,EAAAY,IAAAU,SACA4P,KAMA,IAAA0uB,IAAAjoC,OAAAkoC,oBAAAL,IAQAr/B,IACAC,eAAA,EACA0/B,gBAAA,GASA5/B,GAAA,SAAArG,GAKA,GAJA6D,KAAA7D,QACA6D,KAAAkD,IAAA,GAAAxB,IACA1B,KAAA+C,QAAA,EACA3C,EAAAjE,EAAA,SAAA6D,MACAf,MAAA2D,QAAAzG,GAAA,EACAwjC,GACA39B,EACAG,GACAhG,EAAA2lC,GAAAI,IACAliC,KAAAiiC,aAAA9lC,OAEA6D,MAAAqiC,KAAAlmC,GASAqG,IAAAuH,UAAAs4B,KAAA,SAAAhmC,GAEA,OADAd,GAAAtB,OAAAsB,KAAAc,GACAoB,EAAA,EAAiBA,EAAAlC,EAAAmC,OAAiBD,IAClCuF,EAAA3G,EAAAd,EAAAkC,GAAApB,EAAAd,EAAAkC,MAOA+E,GAAAuH,UAAAk4B,aAAA,SAAAK,GACA,OAAA7kC,GAAA,EAAAiB,EAAA4jC,EAAA5kC,OAAmCD,EAAAiB,EAAOjB,IAC1C2E,EAAAkgC,EAAA7kC,IAgMA,IAAA6H,IAAArE,GAAAk+B,qBAwCA75B,IAAAiC,KAAA,SACAlD,EACAC,EACAvD,GAEA,MAAAA,GA4BGsD,GAAAC,EACH,WAEA,GAAAi+B,GAAA,kBAAAj+B,GACAA,EAAA9H,KAAAuE,GACAuD,EACAk+B,EAAA,kBAAAn+B,GACAA,EAAA7H,KAAAuE,OACAjF,EACA,OAAAymC,GACAv+B,EAAAu+B,EAAAC,GAEAA,OAZG,GA1BHl+B,EAGA,kBAAAA,GAOAD,EAEAA,EAQA,WACA,MAAAL,GACAM,EAAA9H,KAAAwD,MACAqE,EAAA7H,KAAAwD,QAVAsE,EAZAD,GA2DA66B,GAAA1jC,QAAA,SAAA4N,GACA9D,GAAA8D,GAAAhF,IAiBAsW,GAAAlf,QAAA,SAAAT,GACAuK,GAAAvK,EAAA,KAAAyJ,IASAc,GAAA8M,MAAA,SAAA/N,EAAAC,GAEA,IAAAA,EAAkB,MAAArK,QAAAqB,OAAA+I,GAAA,KAClB,KAAAA,EAAmB,MAAAC,EACnB,IAAAtF,KACAE,GAAAF,EAAAqF,EACA,QAAA5I,KAAA6I,GAAA,CACA,GAAAY,GAAAlG,EAAAvD,GACA0J,EAAAb,EAAA7I,EACAyJ,KAAAjG,MAAA2D,QAAAsC,KACAA,OAEAlG,EAAAvD,GAAAyJ,EACAA,EAAAX,OAAAY,IACAA,GAEA,MAAAnG,IAMAsG,GAAAZ,MACAY,GAAAyM,QACAzM,GAAAjK,SAAA,SAAAgJ,EAAAC,GACA,IAAAA,EAAkB,MAAArK,QAAAqB,OAAA+I,GAAA,KAClB,KAAAA,EAAmB,MAAAC,EACnB,IAAAtF,GAAA/E,OAAAqB,OAAA,KAGA,OAFA4D,GAAAF,EAAAqF,GACAnF,EAAAF,EAAAsF,GACAtF,EAMA,IAAAuG,IAAA,SAAAlB,EAAAC,GACA,WAAAxI,KAAAwI,EACAD,EACAC,GAwZA4C,GAAA,SACAI,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA5H,KAAAsH,MACAtH,KAAAuH,OACAvH,KAAAwH,WACAxH,KAAAyH,OACAzH,KAAA0H,MACA1H,KAAA6H,OAAA/L,GACAkE,KAAA2H,UACA3H,KAAA6M,sBAAA/Q,GACAkE,KAAAvE,IAAA8L,KAAA9L,IACAuE,KAAA4H,mBACA5H,KAAAsb,sBAAAxf,GACAkE,KAAAkF,WAAApJ,GACAkE,KAAAyiC,KAAA,EACAziC,KAAA8H,UAAA,EACA9H,KAAA0sB,cAAA,EACA1sB,KAAA+H,WAAA,EACA/H,KAAAgI,UAAA,EACAhI,KAAAkY,QAAA,GAGAwqB,IAA0Bv9B,SAI1Bu9B,IAAAv9B,MAAAhL,IAAA,WACA,MAAA6F,MAAAsb,mBAGArhB,OAAA0oC,iBAAAz7B,GAAA6C,UAAA24B,GAEA,IA2aA/gC,IA3aAuM,GAAA,WACA,GAAA/D,GAAA,GAAAjD,GAGA,OAFAiD,GAAA1C,KAAA,GACA0C,EAAApC,WAAA,EACAoC,GAwCApB,GAAA3K,EAAA,SAAAuG,GACA,GAAAsE,GAAA,MAAAtE,EAAAqd,OAAA,EACArd,GAAAsE,EAAAtE,EAAA6L,MAAA,GAAA7L,CACA,IAAAyH,GAAA,MAAAzH,EAAAqd,OAAA,EACArd,GAAAyH,EAAAzH,EAAA6L,MAAA,GAAA7L,CACA,IAAAqE,GAAA,MAAArE,EAAAqd,OAAA,EAEA,OADArd,GAAAqE,EAAArE,EAAA6L,MAAA,GAAA7L,GAEAA,OACA7E,KAAAsM,EACApD,UACAC,aAuiBAsjB,GAAA,KA2SAzc,MACAC,MACAC,MAEAC,IAAA,EACAC,IAAA,EACAnS,GAAA,EAmIA6kC,GAAA,EAOAr0B,GAAA,SACAxN,EACA8hC,EACAvZ,EACAruB,GAEA+E,KAAAe,KACAA,EAAA6Q,UAAA/P,KAAA7B,MAEA/E,GACA+E,KAAA8iC,OAAA7nC,EAAA6nC,KACA9iC,KAAA+iC,OAAA9nC,EAAA8nC,KACA/iC,KAAA4lB,OAAA3qB,EAAA2qB,KACA5lB,KAAAkL,OAAAjQ,EAAAiQ,MAEAlL,KAAA8iC,KAAA9iC,KAAA+iC,KAAA/iC,KAAA4lB,KAAA5lB,KAAAkL,MAAA,EAEAlL,KAAAspB,KACAtpB,KAAA4F,KAAAg9B,GACA5iC,KAAAgjC,QAAA,EACAhjC,KAAA+S,MAAA/S,KAAA4lB,KACA5lB,KAAAijC,QACAjjC,KAAAkjC,WACAljC,KAAAmjC,OAAA,GAAAhD,IACAngC,KAAAojC,UAAA,GAAAjD,IACAngC,KAAAuhB,WAEA,GAEA,kBAAAshB,GACA7iC,KAAAqD,OAAAw/B,GAEA7iC,KAAAqD,OAAA7C,EAAAqiC,GACA7iC,KAAAqD,SACArD,KAAAqD,OAAA,eASArD,KAAA7D,MAAA6D,KAAA4lB,SACA9pB,GACAkE,KAAA7F,MAMAoU,IAAAxE,UAAA5P,IAAA,WACAqH,EAAAxB,KACA,IAAA7D,GACA4E,EAAAf,KAAAe,EACA,IAAAf,KAAA+iC,KACA,IACA5mC,EAAA6D,KAAAqD,OAAA7G,KAAAuE,KACK,MAAAnB,GACLiB,EAAAjB,EAAAmB,EAAA,uBAAAf,KAAA,oBAGA7D,GAAA6D,KAAAqD,OAAA7G,KAAAuE,IASA,OALAf,MAAA8iC,MACA7xB,GAAA9U,GAEA2F,IACA9B,KAAAqjC,cACAlnC,GAMAoS,GAAAxE,UAAA63B,OAAA,SAAA1+B,GACA,GAAA0C,GAAA1C,EAAA0C,EACA5F,MAAAojC,UAAApzB,IAAApK,KACA5F,KAAAojC,UAAA16B,IAAA9C,GACA5F,KAAAkjC,QAAArhC,KAAAqB,GACAlD,KAAAmjC,OAAAnzB,IAAApK,IACA1C,EAAAu+B,OAAAzhC,QAQAuO,GAAAxE,UAAAs5B,YAAA,WAIA,IAHA,GAAAC,GAAAtjC,KAEAvC,EAAAuC,KAAAijC,KAAAvlC,OACAD,KAAA,CACA,GAAAyF,GAAAogC,EAAAL,KAAAxlC,EACA6lC,GAAAF,UAAApzB,IAAA9M,EAAA0C,KACA1C,EAAAy+B,UAAA2B,GAGA,GAAAC,GAAAvjC,KAAAmjC,MACAnjC,MAAAmjC,OAAAnjC,KAAAojC,UACApjC,KAAAojC,UAAAG,EACAvjC,KAAAojC,UAAAjyB,QACAoyB,EAAAvjC,KAAAijC,KACAjjC,KAAAijC,KAAAjjC,KAAAkjC,QACAljC,KAAAkjC,QAAAK,EACAvjC,KAAAkjC,QAAAxlC,OAAA,GAOA6Q,GAAAxE,UAAA/E,OAAA,WAEAhF,KAAA4lB,KACA5lB,KAAA+S,OAAA,EACG/S,KAAAkL,KACHlL,KAAAsQ,MAEAS,GAAA/Q,OAQAuO,GAAAxE,UAAAuG,IAAA,WACA,GAAAtQ,KAAAgjC,OAAA,CACA,GAAA7mC,GAAA6D,KAAA7F,KACA,IACAgC,IAAA6D,KAAA7D,OAIAC,EAAAD,IACA6D,KAAA8iC,KACA,CAEA,GAAA3jB,GAAAnf,KAAA7D,KAEA,IADA6D,KAAA7D,QACA6D,KAAA+iC,KACA,IACA/iC,KAAAspB,GAAA9sB,KAAAwD,KAAAe,GAAA5E,EAAAgjB,GACS,MAAAvf,GACTiB,EAAAjB,EAAAI,KAAAe,GAAA,yBAAAf,KAAA,oBAGAA,MAAAspB,GAAA9sB,KAAAwD,KAAAe,GAAA5E,EAAAgjB,MAUA5Q,GAAAxE,UAAAiJ,SAAA,WACAhT,KAAA7D,MAAA6D,KAAA7F,MACA6F,KAAA+S,OAAA,GAMAxE,GAAAxE,UAAAtG,OAAA,WAIA,IAHA,GAAA6/B,GAAAtjC,KAEAvC,EAAAuC,KAAAijC,KAAAvlC,OACAD,KACA6lC,EAAAL,KAAAxlC,GAAAgG,UAOA8K,GAAAxE,UAAAy5B,SAAA,WACA,GAAAF,GAAAtjC,IAEA,IAAAA,KAAAgjC,OAAA,CAIAhjC,KAAAe,GAAA8M,mBACAjQ,EAAAoC,KAAAe,GAAA6Q,UAAA5R,KAGA,KADA,GAAAvC,GAAAuC,KAAAijC,KAAAvlC,OACAD,KACA6lC,EAAAL,KAAAxlC,GAAAkkC,UAAA2B,EAEAtjC,MAAAgjC,QAAA,GASA,IAAA9xB,IAAA,GAAAivB,IA+BAzuB,IACArR,YAAA,EACAE,cAAA,EACApG,IAAAoF,EACAgE,IAAAhE,GAwHAqT,IAA8BgT,MAAA,GA6Q9B/P,IACA4tB,KAAA,SACAr8B,EACA4G,EACAkH,EACAC,GAEA,IAAA/N,EAAAkU,mBAAAlU,EAAAkU,kBAAA1N,aAAA,EACAxG,EAAAkU,kBAAArG,GACA7N,EACAmlB,GACArX,EACAC,IAEAuuB,OAAA11B,EAAA5G,EAAAM,QAAA5L,GAAAkS,OACK,IAAA5G,EAAAG,KAAAo8B,UAAA,CAEL,GAAAC,GAAAx8B,CACAyO,IAAAguB,SAAAD,OAIAC,SAAA,SAAArlB,EAAApX,GACA,GAAAnM,GAAAmM,EAAAQ,gBAEA6G,IADArH,EAAAkU,kBAAAkD,EAAAlD,kBAGArgB,EAAAmL,UACAnL,EAAAgR,UACA7E,EACAnM,EAAAuM,WAIAs8B,OAAA,SAAA18B,GACA,GAAAO,GAAAP,EAAAO,QACA2T,EAAAlU,EAAAkU,iBACAA,GAAA3N,aACA2N,EAAA3N,YAAA,EACAQ,GAAAmN,EAAA,YAEAlU,EAAAG,KAAAo8B,YACAh8B,EAAAgG,WAMAmD,GAAAwK,GAEA/L,GAAA+L,GAAA,KAKAyoB,QAAA,SAAA38B,GACA,GAAAkU,GAAAlU,EAAAkU,iBACAA,GAAA1N,eACAxG,EAAAG,KAAAo8B,UAGAl0B,GAAA6L,GAAA,GAFAA,EAAAC,cAQA7F,GAAAzb,OAAAsB,KAAAsa,IAgJAS,GAAA,EACAF,GAAA,EA8YA4tB,GAAA,GAEA,SAAAvqB,GACAA,EAAA1P,UAAAwP,MAAA,SAAAte,GACA,GAAA8F,GAAAf,IAEAe,GAAAkjC,KAAAD,KAWAjjC,EAAA+B,QAAA,EAEA7H,KAAAoa,aAIAmD,GAAAzX,EAAA9F,GAEA8F,EAAA6F,SAAA3B,EACA0P,GAAA5T,EAAA0X,aACAxd,MACA8F,GAOAA,EAAAgX,aAAAhX,EAGAA,EAAAmjC,MAAAnjC,EACAmM,GAAAnM,GACA+K,GAAA/K,GACAqX,GAAArX,GACAoN,GAAApN,EAAA,gBACAwS,GAAAxS,GACA4Q,GAAA5Q,GACAqS,GAAArS,GACAoN,GAAApN,EAAA,WASAA,EAAA6F,SAAAmH,IACAhN,EAAA2iC,OAAA3iC,EAAA6F,SAAAmH,MAwFAuL,IA74BA,SAAAG,GAIA,GAAA0qB,KACAA,GAAAhqC,IAAA,WAA6B,MAAA6F,MAAAkS,MAC7B,IAAAkyB,KACAA,GAAAjqC,IAAA,WAA8B,MAAA6F,MAAA6G,QAa9B5M,OAAAC,eAAAuf,EAAA1P,UAAA,QAAAo6B,GACAlqC,OAAAC,eAAAuf,EAAA1P,UAAA,SAAAq6B,GAEA3qB,EAAA1P,UAAAs6B,KAAA9gC,EACAkW,EAAA1P,UAAAu6B,QAAAvgC,EAEA0V,EAAA1P,UAAAoJ,OAAA,SACA0vB,EACAvZ,EACAruB,GAEA,GAAA8F,GAAAf,IACA/E,SACAA,EAAA8nC,MAAA,CACA,IAAA3yB,GAAA,GAAA7B,IAAAxN,EAAA8hC,EAAAvZ,EAAAruB,EAIA,OAHAA,GAAAspC,WACAjb,EAAA9sB,KAAAuE,EAAAqP,EAAAjU,OAEA,WACAiU,EAAAozB,cAu2BAlqB,IA97DA,SAAAG,GACA,GAAA+qB,GAAA,QACA/qB,GAAA1P,UAAAuC,IAAA,SAAAxD,EAAAzK,GACA,GAAAilC,GAAAtjC,KAEAe,EAAAf,IACA,IAAAf,MAAA2D,QAAAkG,GACA,OAAArL,GAAA,EAAAiB,EAAAoK,EAAApL,OAAuCD,EAAAiB,EAAOjB,IAC9C6lC,EAAAh3B,IAAAxD,EAAArL,GAAAY,QAGA0C,EAAAgL,QAAAjD,KAAA/H,EAAAgL,QAAAjD,QAAAjH,KAAAxD,GAGAmmC,EAAA7jC,KAAAmI,KACA/H,EAAAiL,eAAA,EAGA,OAAAjL,IAGA0Y,EAAA1P,UAAAsC,MAAA,SAAAvD,EAAAzK,GAEA,QAAAmK,KACAzH,EAAAyL,KAAA1D,EAAAN,GACAnK,EAAAO,MAAAmC,EAAApC,WAHA,GAAAoC,GAAAf,IAOA,OAFAwI,GAAAnK,KACA0C,EAAAuL,IAAAxD,EAAAN,GACAzH,GAGA0Y,EAAA1P,UAAAyC,KAAA,SAAA1D,EAAAzK,GACA,GAAAilC,GAAAtjC,KAEAe,EAAAf,IAEA,KAAArB,UAAAjB,OAEA,MADAqD,GAAAgL,QAAA9R,OAAAqB,OAAA,MACAyF,CAGA,IAAA9B,MAAA2D,QAAAkG,GAAA,CACA,OAAA4tB,GAAA,EAAAh4B,EAAAoK,EAAApL,OAAyCg5B,EAAAh4B,EAASg4B,IAClD4M,EAAA92B,KAAA1D,EAAA4tB,GAAAr4B,EAEA,OAAA0C,GAGA,GAAA0jC,GAAA1jC,EAAAgL,QAAAjD,EACA,KAAA27B,EACA,MAAA1jC,EAEA,QAAApC,UAAAjB,OAEA,MADAqD,GAAAgL,QAAAjD,GAAA,KACA/H,CAKA,KAFA,GAAAuoB,GACA7rB,EAAAgnC,EAAA/mC,OACAD,KAEA,IADA6rB,EAAAmb,EAAAhnC,MACAY,GAAAirB,EAAAjrB,OAAA,CACAomC,EAAAxmC,OAAAR,EAAA,EACA,OAGA,MAAAsD,IAGA0Y,EAAA1P,UAAA6F,MAAA,SAAA9G,GACA,GAAA/H,GAAAf,KAaAykC,EAAA1jC,EAAAgL,QAAAjD,EACA,IAAA27B,EAAA,CACAA,IAAA/mC,OAAA,EAAAoB,EAAA2lC,IAEA,QADA5qB,GAAA/a,EAAAH,UAAA,GACAlB,EAAA,EAAAiB,EAAA+lC,EAAA/mC,OAAqCD,EAAAiB,EAAOjB,IAC5CgnC,EAAAhnC,GAAAmB,MAAAmC,EAAA8Y,GAGA,MAAA9Y,KAm2DAuY,IAvwDA,SAAAG,GACAA,EAAA1P,UAAAsE,QAAA,SAAAjH,EAAA4G,GACA,GAAAjN,GAAAf,IACAe,GAAA4M,YACAQ,GAAApN,EAAA,eAEA,IAAA2jC,GAAA3jC,EAAAkN,IACA02B,EAAA5jC,EAAAmO,OACA01B,EAAArY,EACAA,IAAAxrB,EACAA,EAAAmO,OAAA9H,EAYArG,EAAAkN,IATA02B,EASA5jC,EAAA8jC,UAAAF,EAAAv9B,GAPArG,EAAA8jC,UACA9jC,EAAAkN,IAAA7G,EAAA4G,GAAA,EACAjN,EAAA6F,SAAA2O,WACAxU,EAAA6F,SAAA4O,SAMA+W,GAAAqY,EAEAF,IACAA,EAAAI,QAAA,MAEA/jC,EAAAkN,MACAlN,EAAAkN,IAAA62B,QAAA/jC,GAGAA,EAAAyN,QAAAzN,EAAAqM,SAAArM,EAAAyN,SAAAzN,EAAAqM,QAAA8B,SACAnO,EAAAqM,QAAAa,IAAAlN,EAAAkN,MAMAwL,EAAA1P,UAAAqB,aAAA,WACA,GAAArK,GAAAf,IACAe,GAAAyM,UACAzM,EAAAyM,SAAAxI,UAIAyU,EAAA1P,UAAAwR,SAAA,WACA,GAAAxa,GAAAf,IACA,KAAAe,EAAA8M,kBAAA,CAGAM,GAAApN,EAAA,iBACAA,EAAA8M,mBAAA,CAEA,IAAA3I,GAAAnE,EAAAqM,SACAlI,KAAA2I,mBAAA9M,EAAA6F,SAAAuG,UACAvP,EAAAsH,EAAAmI,UAAAtM,GAGAA,EAAAyM,UACAzM,EAAAyM,SAAAg2B,UAGA,KADA,GAAA/lC,GAAAsD,EAAA6Q,UAAAlU,OACAD,KACAsD,EAAA6Q,UAAAnU,GAAA+lC,UAIAziC,GAAAmR,MAAA3P,QACAxB,EAAAmR,MAAA3P,OAAAQ,UAGAhC,EAAA6M,cAAA,EAEA7M,EAAA8jC,UAAA9jC,EAAAmO,OAAA,MAEAf,GAAApN,EAAA,aAEAA,EAAAyL,OAEAzL,EAAAkN,MACAlN,EAAAkN,IAAA62B,QAAA,MAGA/jC,EAAA6F,SAAA2O,WAAAxU,EAAA6F,SAAA4O,QAAA,QAmrDA8D,IApOA,SAAAG,GACAA,EAAA1P,UAAAg7B,UAAA,SAAA1mC,GACA,MAAA2S,IAAA3S,EAAA2B,OAGAyZ,EAAA1P,UAAAuE,QAAA,WACA,GAAAvN,GAAAf,KACA+d,EAAAhd,EAAA6F,SACA1L,EAAA6iB,EAAA7iB,OACAC,EAAA4iB,EAAA5iB,gBACA8T,EAAA8O,EAAA9O,YAEA,IAAAlO,EAAA4M,WAEA,OAAAlS,KAAAsF,GAAAsO,OACAtO,EAAAsO,OAAA5T,GAAAwM,EAAAlH,EAAAsO,OAAA5T,GAIAsF,GAAAgO,aAAAE,KAAA1H,KAAAuH,aAAAE,GAEA7T,IAAA4F,EAAA+W,eACA/W,EAAA+W,iBAIA/W,EAAAyN,OAAAS,CAEA,IAAA7H,EACA,KACAA,EAAAlM,EAAAsB,KAAAuE,EAAAgX,aAAAhX,EAAAwX,gBACK,MAAA3Y,GACLiB,EAAAjB,EAAAmB,EAAA,mBASAqG,EAAArG,EAAAmO,OAgBA,MAZA9H,aAAAF,MAQAE,EAAA8G,MAGA9G,EAAAlC,OAAA+J,EACA7H,GAMAqS,EAAA1P,UAAAi7B,GAAA/sB,GACAwB,EAAA1P,UAAAk7B,GAAAloC,EACA0c,EAAA1P,UAAAm7B,GAAAxoC,EACA+c,EAAA1P,UAAAo7B,GAAAxuB,GACA8C,EAAA1P,UAAAq7B,GAAAxuB,GACA6C,EAAA1P,UAAAs7B,GAAA7lC,EACAia,EAAA1P,UAAAu7B,GAAAzlC,EACA4Z,EAAA1P,UAAAw7B,GAAA5tB,GACA8B,EAAA1P,UAAAy7B,GAAAvuB,GACAwC,EAAA1P,UAAA07B,GAAAtuB,GACAsC,EAAA1P,UAAA27B,GAAAnuB,GACAkC,EAAA1P,UAAA47B,GAAA1+B,EACAwS,EAAA1P,UAAA67B,GAAA13B,GACAuL,EAAA1P,UAAA87B,GAAA54B,IAyJAqM,GAyKA,IAAAwsB,KAAAhpC,OAAA21B,QAqCAsT,IACAphC,KAAA,aACAwI,UAAA,EAEAzI,OACAshC,QAAAF,GACAG,QAAAH,IAGAI,QAAA,WACAlmC,KAAA1B,MAAArE,OAAAqB,OAAA,OAGA6qC,UAAA,WACA,GAAA7C,GAAAtjC,IAEA,QAAAvE,KAAA6nC,GAAAhlC,MACA+c,GAAAioB,EAAAhlC,MAAA7C,KAIA2W,OACA4zB,QAAA,SAAArpC,GACAse,GAAAjb,KAAA1B,MAAA0B,KAAAkP,OAAA,SAAAvK,GAA2D,MAAAoW,IAAApe,EAAAgI,MAE3DshC,QAAA,SAAAtpC,GACAse,GAAAjb,KAAA1B,MAAA0B,KAAAkP,OAAA,SAAAvK,GAA2D,OAAAoW,GAAApe,EAAAgI,OAI3DzJ,OAAA,WACA,GAAAkM,GAAAyE,GAAA7L,KAAAqP,OAAArU,SACA4M,EAAAR,KAAAQ,gBACA,IAAAA,EAAA,CAEA,GAAAjD,GAAAmW,GAAAlT,EACA,IAAAjD,IACA3E,KAAAgmC,UAAAjrB,GAAA/a,KAAAgmC,QAAArhC,IACA3E,KAAAimC,SAAAlrB,GAAA/a,KAAAimC,QAAAthC,IAEA,MAAAyC,EAEA,IAAA3L,GAAA,MAAA2L,EAAA3L,IAGAmM,EAAArG,KAAAmT,KAAA9M,EAAAN,IAAA,KAAAM,EAAA,QACAR,EAAA3L,GACAuE,MAAA1B,MAAA7C,GACA2L,EAAAkU,kBAAAtb,KAAA1B,MAAA7C,GAAA6f,kBAEAtb,KAAA1B,MAAA7C,GAAA2L,EAEAA,EAAAG,KAAAo8B,WAAA,EAEA,MAAAv8B,KAIAg/B,IACAL,eAKA,SAAAtsB,GAEA,GAAA4sB,KACAA,GAAAlsC,IAAA,WAA+B,MAAA8G,KAQ/BhH,OAAAC,eAAAuf,EAAA,SAAA4sB,GAKA5sB,EAAA6sB,MACAvjB,QACA7jB,SACA+F,eACAshC,eAAAvjC,GAGAyW,EAAAlW,MACAkW,EAAA+sB,OAAAziC,EACA0V,EAAAzI,YAEAyI,EAAAxe,QAAAhB,OAAAqB,OAAA,MACAof,GAAAlf,QAAA,SAAAT,GACA0e,EAAAxe,QAAAF,EAAA,KAAAd,OAAAqB,OAAA,QAKAme,EAAAxe,QAAAwZ,MAAAgF,EAEAva,EAAAua,EAAAxe,QAAA8d,WAAAqtB,IAEA5sB,GAAAC,GACAO,GAAAP,GACAS,GAAAT,GACAmB,GAAAnB,IAGAH,IAEArf,OAAAC,eAAAof,GAAAvP,UAAA,aACA5P,IAAAwI,KAGA1I,OAAAC,eAAAof,GAAAvP,UAAA,eACA5P,IAAA,WAEA,MAAA6F,MAAAwO,OAAAi4B,cAIAntB,GAAAhf,QAAA,OAMA,IA46CA0M,IACA5J,GACAonB,GACAL,GACAC,GACAC,GAwEAY,GAqLAmB,GAuOAsgB,GAr5DAlH,GAAAriC,EAAA,eAGAwpC,GAAAxpC,EAAA,gCACAsa,GAAA,SAAAnQ,EAAAvM,EAAA24B,GACA,MACA,UAAAA,GAAAiT,GAAAr/B,IAAA,WAAAvM,GACA,aAAA24B,GAAA,WAAApsB,GACA,YAAAosB,GAAA,UAAApsB,GACA,UAAAosB,GAAA,UAAApsB,GAIA+Y,GAAAljB,EAAA,wCAEAojB,GAAApjB,EACA,wYAQAgjB,GAAA,+BAEAF,GAAA,SAAAtb,GACA,YAAAA,EAAAqd,OAAA,cAAArd,EAAA6L,MAAA,MAGA4P,GAAA,SAAAzb,GACA,MAAAsb,IAAAtb,KAAA6L,MAAA,EAAA7L,EAAAjH,QAAA,IAGA8iB,GAAA,SAAA7jB,GACA,aAAAA,IAAA,IAAAA,GA6EAugB,IACA0pB,IAAA,6BACAC,KAAA,sCAGAC,GAAA3pC,EACA,slBAeA+e,GAAA/e,EACA,kNAGA,GAGAk4B,GAAA,SAAA/tB,GAA+B,cAAAA,GAE/BkP,GAAA,SAAAlP,GACA,MAAAw/B,IAAAx/B,IAAA4U,GAAA5U,IAcA8U,GAAAniB,OAAAqB,OAAA,MAyGAyrC,GAAA9sC,OAAAylC,QACArrB,cAAAuI,GACAI,mBACAG,kBACAC,iBACAC,gBACAG,eACAC,eACAhC,cACAiC,eACAb,WACAc,kBACAZ,kBAKAgB,IACAziB,OAAA,SAAAknB,EAAApb,GACAyW,GAAAzW,IAEApC,OAAA,SAAAwZ,EAAApX,GACAoX,EAAAjX,KAAAwW,MAAA3W,EAAAG,KAAAwW,MACAF,GAAAW,GAAA,GACAX,GAAAzW,KAGA28B,QAAA,SAAA38B,GACAyW,GAAAzW,GAAA,KA4CAwX,GAAA,GAAA1X,IAAA,UAEA8/B,IAAA,iDAmmBAjiC,IACAzJ,OAAAijB,GACAvZ,OAAAuZ,GACAwlB,QAAA,SAAA38B,GACAmX,GAAAnX,EAAAwX,MAsEAa,GAAAxlB,OAAAqB,OAAA,MAqCA2rC,IACAlpB,GACAhZ,IAmEA0E,IACAnO,OAAAukB,GACA7a,OAAA6a,IAoCAqnB,IACA5rC,OAAAolB,GACA1b,OAAA0b,IAKAuB,GAAA,gBAyWA6D,GAAA,MACAL,GAAA,MAkOAzC,IACA1nB,OAAAorB,GACA1hB,OAAA0hB,IAgFAhP,IACApc,OAAAqrB,GACA3hB,OAAA2hB,IAKAgB,GAAAvpB,EAAA,SAAA+oC,GACA,GAAA7nC,KASA,OANA6nC,GAAA3pC,MAFA,iBAEAhC,QAAA,SAAAsC,GACA,GAAAA,EAAA,CACA,GAAAylC,GAAAzlC,EAAAN,MAHA,QAIA+lC,GAAA7lC,OAAA,IAAA4B,EAAAikC,EAAA,GAAAliB,QAAAkiB,EAAA,GAAAliB,WAGA/hB,IAyDA8nC,GAAA,MACAC,GAAA,iBACAhf,GAAA,SAAAta,EAAApJ,EAAAhI,GAEA,GAAAyqC,GAAAzmC,KAAAgE,GACAoJ,EAAAwZ,MAAA+f,YAAA3iC,EAAAhI,OACG,IAAA0qC,GAAA1mC,KAAAhE,GACHoR,EAAAwZ,MAAA+f,YAAA3iC,EAAAhI,EAAAgsB,QAAA0e,GAAA,qBACG,CACH,GAAAE,GAAAC,GAAA7iC,EACA,IAAA1F,MAAA2D,QAAAjG,GAIA,OAAAc,GAAA,EAAAuJ,EAAArK,EAAAe,OAAuCD,EAAAuJ,EAASvJ,IAChDsQ,EAAAwZ,MAAAggB,GAAA5qC,EAAAc,OAGAsQ,GAAAwZ,MAAAggB,GAAA5qC,IAKA8qC,IAAA,qBAGAD,GAAAppC,EAAA,SAAAiI,GAGA,GAFAqgC,OAAArqB,SAAAhI,cAAA,OAEA,YADAhO,EAAAzB,GAAAyB,KACAA,IAAAqgC,IAAAnf,MACA,MAAAlhB,EAGA,QADAqhC,GAAArhC,EAAA2b,OAAA,GAAAgd,cAAA34B,EAAAmK,MAAA,GACA/S,EAAA,EAAiBA,EAAAgqC,GAAA/pC,OAAqBD,IAAA,CACtC,GAAAkqC,GAAAF,GAAAhqC,GAAAiqC,CACA,IAAAC,IAAAjB,IAAAnf,MACA,MAAAogB,MAgDApgB,IACAjsB,OAAAysB,GACA/iB,OAAA+iB,IA4EAgB,GAAA3qB,EAAA,SAAAuG,GACA,OACA8mB,WAAA9mB,EAAA,SACA+mB,aAAA/mB,EAAA,YACAgnB,iBAAAhnB,EAAA,gBACAmpB,WAAAnpB,EAAA,SACAqpB,aAAArpB,EAAA,YACAopB,iBAAAppB,EAAA,mBAIAijC,GAAAzmC,KAAA6e,GACAyJ,GAAA,aACAiB,GAAA,YAGAR,GAAA,aACAR,GAAA,gBACAa,GAAA,YACAZ,GAAA,cACAie,UAEA9rC,KAAAwgB,OAAAurB,qBACA/rC,KAAAwgB,OAAAwrB,wBAEA5d,GAAA,mBACAR,GAAA,2BAEA5tB,KAAAwgB,OAAAyrB,oBACAjsC,KAAAwgB,OAAA0rB,uBAEAzd,GAAA,kBACAZ,GAAA,sBAKA,IAAAV,IAAA9nB,IAAAmb,OAAA2rB,sBACA3rB,OAAA2rB,sBAAA1pC,KAAA+d,QACA3Q,WAmDAif,GAAA,yBAiXAU,GAAAnqB,IACA7F,OAAAgzB,GACA4Z,SAAA5Z,GACA1wB,OAAA,SAAAwJ,EAAAumB,IAEA,IAAAvmB,EAAAG,KAAA+lB,KACAI,GAAAtmB,EAAAumB,GAEAA,SAKAwa,IACA1+B,GACAy9B,GACAlkB,GACAtL,GACA6P,GACA+D,IAOAhJ,GAAA6lB,GAAA5jC,OAAA0iC,IAEAmB,GArpEA,SAAAC,GAgBA,QAAAC,GAAA5gC,GACA,UAAAR,IAAA6/B,EAAAlqB,QAAAnV,GAAA/J,wBAA2D7B,GAAA4L,GAG3D,QAAA6gC,GAAAC,EAAAv8B,GACA,QAAAtD,KACA,KAAAA,EAAAsD,WACAw8B,EAAAD,GAIA,MADA7/B,GAAAsD,YACAtD,EAGA,QAAA8/B,GAAA16B,GACA,GAAA7I,GAAA6hC,EAAAtrB,WAAA1N,EAEAhS,GAAAmJ,IACA6hC,EAAAvpB,YAAAtY,EAAA6I,GAKA,QAAA26B,GAAAthC,EAAAuhC,EAAAzzB,EAAAC,EAAAyzB,GAEA,GADAxhC,EAAAslB,cAAAkc,GACAp0B,EAAApN,EAAAuhC,EAAAzzB,EAAAC,GAAA,CAIA,GAAA5N,GAAAH,EAAAG,KACAC,EAAAJ,EAAAI,SACAF,EAAAF,EAAAE,GACAvL,GAAAuL,IAmBAF,EAAAM,IAAAN,EAAAS,GACAk/B,EAAA/pB,gBAAA5V,EAAAS,GAAAP,GACAy/B,EAAA1yB,cAAA/M,EAAAF,GACAyhC,EAAAzhC,GAIA0hC,EAAA1hC,EAAAI,EAAAmhC,GACA5sC,EAAAwL,IACAwhC,EAAA3hC,EAAAuhC,GAEA7E,EAAA5uB,EAAA9N,EAAAM,IAAAyN,IAMKnZ,EAAAoL,EAAAW,YACLX,EAAAM,IAAAq/B,EAAA3pB,cAAAhW,EAAAK,MACAq8B,EAAA5uB,EAAA9N,EAAAM,IAAAyN,KAEA/N,EAAAM,IAAAq/B,EAAA5pB,eAAA/V,EAAAK,MACAq8B,EAAA5uB,EAAA9N,EAAAM,IAAAyN,KAIA,QAAAX,GAAApN,EAAAuhC,EAAAzzB,EAAAC,GACA,GAAA1X,GAAA2J,EAAAG,IACA,IAAAxL,EAAA0B,GAAA,CACA,GAAAurC,GAAAjtC,EAAAqL,EAAAkU,oBAAA7d,EAAAkmC,SAQA,IAPA5nC,EAAA0B,IAAA2L,OAAArN,EAAA0B,IAAAgmC,OACAhmC,EAAA2J,GAAA,EAAA8N,EAAAC,GAMApZ,EAAAqL,EAAAkU,mBAKA,MAJA2tB,GAAA7hC,EAAAuhC,GACA3sC,EAAAgtC,IACAE,EAAA9hC,EAAAuhC,EAAAzzB,EAAAC,IAEA,GAKA,QAAA8zB,GAAA7hC,EAAAuhC,GACA5sC,EAAAqL,EAAAG,KAAA4hC,gBACAR,EAAA9mC,KAAAjD,MAAA+pC,EAAAvhC,EAAAG,KAAA4hC,eAEA/hC,EAAAM,IAAAN,EAAAkU,kBAAArN,IACAm7B,EAAAhiC,IACA2hC,EAAA3hC,EAAAuhC,GACAE,EAAAzhC,KAIAyW,GAAAzW,GAEAuhC,EAAA9mC,KAAAuF,IAIA,QAAA8hC,GAAA9hC,EAAAuhC,EAAAzzB,EAAAC,GAOA,IANA,GAAA1X,GAKA4rC,EAAAjiC,EACAiiC,EAAA/tB,mBAEA,GADA+tB,IAAA/tB,kBAAApM,OACAnT,EAAA0B,EAAA4rC,EAAA9hC,OAAAxL,EAAA0B,IAAA6tB,YAAA,CACA,IAAA7tB,EAAA,EAAmBA,EAAAgnC,EAAAyD,SAAAxqC,SAAyBD,EAC5CgnC,EAAAyD,SAAAzqC,GAAAmhB,GAAAyqB,EAEAV,GAAA9mC,KAAAwnC,EACA,OAKAvF,EAAA5uB,EAAA9N,EAAAM,IAAAyN,GAGA,QAAA2uB,GAAA5+B,EAAAwC,EAAAqW,GACAhiB,EAAAmJ,KACAnJ,EAAAgiB,GACAA,EAAAtC,aAAAvW,GACA6hC,EAAA1pB,aAAAnY,EAAAwC,EAAAqW,GAGAgpB,EAAAtpB,YAAAvY,EAAAwC,IAKA,QAAAohC,GAAA1hC,EAAAI,EAAAmhC,GACA,GAAA1pC,MAAA2D,QAAA4E,GACA,OAAA/J,GAAA,EAAqBA,EAAA+J,EAAA9J,SAAqBD,EAC1CirC,EAAAlhC,EAAA/J,GAAAkrC,EAAAvhC,EAAAM,IAAA,aAEKxL,GAAAkL,EAAAK,OACLs/B,EAAAtpB,YAAArW,EAAAM,IAAAq/B,EAAA5pB,eAAA/V,EAAAK,OAIA,QAAA2hC,GAAAhiC,GACA,KAAAA,EAAAkU,mBACAlU,IAAAkU,kBAAApM,MAEA,OAAAnT,GAAAqL,EAAAE,KAGA,QAAAyhC,GAAA3hC,EAAAuhC,GACA,OAAAjS,GAAA,EAAqBA,EAAA+N,EAAAnpC,OAAAoC,SAAyBg5B,EAC9C+N,EAAAnpC,OAAAo7B,GAAA9X,GAAAxX,EAEA3J,GAAA2J,EAAAG,KAAA6B,KACArN,EAAA0B,KACA1B,EAAA0B,EAAAnC,SAA4BmC,EAAAnC,OAAAsjB,GAAAxX,GAC5BrL,EAAA0B,EAAAqmC,SAA4B6E,EAAA9mC,KAAAuF,IAO5B,QAAAyhC,GAAAzhC,GAGA,IAFA,GAAA3J,GACA6rC,EAAAliC,EACAkiC,GACAvtC,EAAA0B,EAAA6rC,EAAA3hC,UAAA5L,EAAA0B,IAAAmJ,SAAAxL,WACA2rC,EAAAhqB,aAAA3V,EAAAM,IAAAjK,EAAA,IAEA6rC,IAAApkC,MAGAnJ,GAAA0B,EAAA8uB,KACA9uB,IAAA2J,EAAAO,SACA5L,EAAA0B,IAAAmJ,SAAAxL,WAEA2rC,EAAAhqB,aAAA3V,EAAAM,IAAAjK,EAAA,IAIA,QAAA8rC,GAAAr0B,EAAAC,EAAAjN,EAAAshC,EAAAlrB,EAAAqqB,GACA,KAAUa,GAAAlrB,IAAoBkrB,EAC9Bd,EAAAxgC,EAAAshC,GAAAb,EAAAzzB,EAAAC,GAIA,QAAAs0B,GAAAriC,GACA,GAAA3J,GAAAkS,EACApI,EAAAH,EAAAG,IACA,IAAAxL,EAAAwL,GAEA,IADAxL,EAAA0B,EAAA8J,EAAA6B,OAAArN,EAAA0B,IAAAsmC,UAAyDtmC,EAAA2J,GACzD3J,EAAA,EAAiBA,EAAAgnC,EAAAV,QAAArmC,SAAwBD,EAAOgnC,EAAAV,QAAAtmC,GAAA2J,EAEhD,IAAArL,EAAA0B,EAAA2J,EAAAI,UACA,IAAAmI,EAAA,EAAiBA,EAAAvI,EAAAI,SAAA9J,SAA2BiS,EAC5C85B,EAAAriC,EAAAI,SAAAmI,IAKA,QAAA+5B,GAAAx0B,EAAAhN,EAAAshC,EAAAlrB,GACA,KAAUkrB,GAAAlrB,IAAoBkrB,EAAA,CAC9B,GAAAG,GAAAzhC,EAAAshC,EACAztC,GAAA4tC,KACA5tC,EAAA4tC,EAAAriC,MACAsiC,EAAAD,GACAF,EAAAE,IAEAlB,EAAAkB,EAAAjiC,OAMA,QAAAkiC,GAAAxiC,EAAAumB,GACA,GAAA5xB,EAAA4xB,IAAA5xB,EAAAqL,EAAAG,MAAA,CACA,GAAA9J,GACAwO,EAAAw4B,EAAA7mC,OAAAF,OAAA,CAaA,KAZA3B,EAAA4xB,GAGAA,EAAA1hB,aAGA0hB,EAAA4a,EAAAnhC,EAAAM,IAAAuE,GAGAlQ,EAAA0B,EAAA2J,EAAAkU,oBAAAvf,EAAA0B,IAAAyR,SAAAnT,EAAA0B,EAAA8J,OACAqiC,EAAAnsC,EAAAkwB,GAEAlwB,EAAA,EAAiBA,EAAAgnC,EAAA7mC,OAAAF,SAAuBD,EACxCgnC,EAAA7mC,OAAAH,GAAA2J,EAAAumB,EAEA5xB,GAAA0B,EAAA2J,EAAAG,KAAA6B,OAAArN,EAAA0B,IAAAG,QACAH,EAAA2J,EAAAumB,GAEAA,QAGA8a,GAAArhC,EAAAM,KAIA,QAAAmiC,GAAA30B,EAAA40B,EAAAC,EAAApB,EAAAqB,GAgBA,IAfA,GAQAC,GAAAC,EAAAC,EAAAh1B,EARAi1B,EAAA,EACAC,EAAA,EACAC,EAAAR,EAAApsC,OAAA,EACA6sC,EAAAT,EAAA,GACAU,EAAAV,EAAAQ,GACAG,EAAAV,EAAArsC,OAAA,EACAgtC,EAAAX,EAAA,GACAY,EAAAZ,EAAAU,GAMAG,GAAAZ,EAEAI,GAAAE,GAAAD,GAAAI,GACA7uC,EAAA2uC,GACAA,EAAAT,IAAAM,GACOxuC,EAAA4uC,GACPA,EAAAV,IAAAQ,GACOpsB,GAAAqsB,EAAAG,IACPG,EAAAN,EAAAG,EAAA/B,GACA4B,EAAAT,IAAAM,GACAM,EAAAX,IAAAM,IACOnsB,GAAAssB,EAAAG,IACPE,EAAAL,EAAAG,EAAAhC,GACA6B,EAAAV,IAAAQ,GACAK,EAAAZ,IAAAU,IACOvsB,GAAAqsB,EAAAI,IACPE,EAAAN,EAAAI,EAAAhC,GACAiC,GAAA7D,EAAA1pB,aAAAnI,EAAAq1B,EAAA7iC,IAAAq/B,EAAArpB,YAAA8sB,EAAA9iC,MACA6iC,EAAAT,IAAAM,GACAO,EAAAZ,IAAAU,IACOvsB,GAAAssB,EAAAE,IACPG,EAAAL,EAAAE,EAAA/B,GACAiC,GAAA7D,EAAA1pB,aAAAnI,EAAAs1B,EAAA9iC,IAAA6iC,EAAA7iC,KACA8iC,EAAAV,IAAAQ,GACAI,EAAAX,IAAAM,KAEAzuC,EAAAquC,KAAmCA,EAAA7rB,GAAA0rB,EAAAM,EAAAE,IACnCJ,EAAAnuC,EAAA2uC,EAAAjvC,KAAAwuC,EAAAS,EAAAjvC,KAAA,KACAG,EAAAsuC,IACAxB,EAAAgC,EAAA/B,EAAAzzB,EAAAq1B,EAAA7iC,KACAgjC,EAAAX,IAAAM,KAEAF,EAAAL,EAAAI,GAQAhsB,GAAAisB,EAAAO,IACAG,EAAAV,EAAAO,EAAA/B,GACAmB,EAAAI,OAAApuC,GACA8uC,GAAA7D,EAAA1pB,aAAAnI,EAAAw1B,EAAAhjC,IAAA6iC,EAAA7iC,KACAgjC,EAAAX,IAAAM,KAGA3B,EAAAgC,EAAA/B,EAAAzzB,EAAAq1B,EAAA7iC,KACAgjC,EAAAX,IAAAM,KAKAD,GAAAE,GACAn1B,EAAAvZ,EAAAmuC,EAAAU,EAAA,SAAAV,EAAAU,EAAA,GAAA/iC,IACA6hC,EAAAr0B,EAAAC,EAAA40B,EAAAM,EAAAI,EAAA9B,IACK0B,EAAAI,GACLf,EAAAx0B,EAAA40B,EAAAM,EAAAE,GAIA,QAAAO,GAAArsB,EAAApX,EAAAuhC,EAAAqB,GACA,GAAAxrB,IAAApX,EAAA,CAOA,GAAApL,EAAAoL,EAAAU,WACA9L,EAAAwiB,EAAA1W,WACAV,EAAA3L,MAAA+iB,EAAA/iB,MACAO,EAAAoL,EAAAY,WAAAhM,EAAAoL,EAAA8Q,SAIA,MAFA9Q,GAAAM,IAAA8W,EAAA9W,SACAN,EAAAkU,kBAAAkD,EAAAlD,kBAGA,IAAA7d,GACA8J,EAAAH,EAAAG,IACAxL,GAAAwL,IAAAxL,EAAA0B,EAAA8J,EAAA6B,OAAArN,EAAA0B,IAAAomC,WACApmC,EAAA+gB,EAAApX,EAEA,IAAAM,GAAAN,EAAAM,IAAA8W,EAAA9W,IACAoiC,EAAAtrB,EAAAhX,SACAmiC,EAAAviC,EAAAI,QACA,IAAAzL,EAAAwL,IAAA6hC,EAAAhiC,GAAA,CACA,IAAA3J,EAAA,EAAiBA,EAAAgnC,EAAAz/B,OAAAtH,SAAuBD,EAAOgnC,EAAAz/B,OAAAvH,GAAA+gB,EAAApX,EAC/CrL,GAAA0B,EAAA8J,EAAA6B,OAAArN,EAAA0B,IAAAuH,SAAwDvH,EAAA+gB,EAAApX,GAExDxL,EAAAwL,EAAAK,MACA1L,EAAA+tC,IAAA/tC,EAAA4tC,GACAG,IAAAH,GAA2BE,EAAAniC,EAAAoiC,EAAAH,EAAAhB,EAAAqB,GACpBjuC,EAAA4tC,IACP5tC,EAAAyiB,EAAA/W,OAAmCs/B,EAAAppB,eAAAjW,EAAA,IACnC6hC,EAAA7hC,EAAA,KAAAiiC,EAAA,EAAAA,EAAAjsC,OAAA,EAAAirC,IACO5sC,EAAA+tC,GACPJ,EAAAhiC,EAAAoiC,EAAA,EAAAA,EAAApsC,OAAA,GACO3B,EAAAyiB,EAAA/W,OACPs/B,EAAAppB,eAAAjW,EAAA,IAEK8W,EAAA/W,OAAAL,EAAAK,MACLs/B,EAAAppB,eAAAjW,EAAAN,EAAAK,MAEA1L,EAAAwL,IACAxL,EAAA0B,EAAA8J,EAAA6B,OAAArN,EAAA0B,IAAAqtC,YAA2DrtC,EAAA+gB,EAAApX,IAI3D,QAAA2jC,GAAA3jC,EAAA0I,EAAAk7B,GAGA,GAAAhvC,EAAAgvC,IAAAjvC,EAAAqL,EAAAlC,QACAkC,EAAAlC,OAAAqC,KAAA4hC,cAAAr5B,MAEA,QAAArS,GAAA,EAAqBA,EAAAqS,EAAApS,SAAkBD,EACvCqS,EAAArS,GAAA8J,KAAA6B,KAAA06B,OAAAh0B,EAAArS,IAWA,QAAAwtC,GAAAvjC,EAAAN,EAAAuhC,GAMAvhC,EAAAM,KACA,IAAAJ,GAAAF,EAAAE,IACAC,EAAAH,EAAAG,KACAC,EAAAJ,EAAAI,QACA,IAAAzL,EAAAwL,KACAxL,EAAA0B,EAAA8J,EAAA6B,OAAArN,EAAA0B,IAAAgmC,OAAsDhmC,EAAA2J,GAAA,GACtDrL,EAAA0B,EAAA2J,EAAAkU,oBAGA,MADA2tB,GAAA7hC,EAAAuhC,IACA,CAGA,IAAA5sC,EAAAuL,GAAA,CACA,GAAAvL,EAAAyL,GAEA,GAAAE,EAAAwjC,gBAES,CAGT,OAFAC,IAAA,EACAzvB,EAAAhU,EAAA0jC,WACA1U,EAAA,EAA2BA,EAAAlvB,EAAA9J,OAAuBg5B,IAAA,CAClD,IAAAhb,IAAAuvB,EAAAvvB,EAAAlU,EAAAkvB,GAAAiS,GAAA,CACAwC,GAAA,CACA,OAEAzvB,IAAAgC,YAIA,IAAAytB,GAAAzvB,EASA,aAtBAotB,GAAA1hC,EAAAI,EAAAmhC,EA0BA,IAAA5sC,EAAAwL,GACA,OAAA9L,KAAA8L,GACA,IAAA8jC,EAAA5vC,GAAA,CACAstC,EAAA3hC,EAAAuhC,EACA,YAIKjhC,GAAAH,OAAAH,EAAAK,OACLC,EAAAH,KAAAH,EAAAK,KAEA,UA5dA,GAAAhK,GAAAkS,EACA80B,KAEAniB,EAAA+lB,EAAA/lB,QACAykB,EAAAsB,EAAAtB,OAEA,KAAAtpC,EAAA,EAAaA,EAAAupC,GAAAtpC,SAAkBD,EAE/B,IADAgnC,EAAAuC,GAAAvpC,OACAkS,EAAA,EAAeA,EAAA2S,EAAA5kB,SAAoBiS,EACnC5T,EAAAumB,EAAA3S,GAAAq3B,GAAAvpC,MACAgnC,EAAAuC,GAAAvpC,IAAAoE,KAAAygB,EAAA3S,GAAAq3B,GAAAvpC,IA2BA,IAyXA4tC,GAAAluC,EAAA,gDA4EA,iBAAAqhB,EAAApX,EAAA4G,EAAAg8B,EAAA90B,EAAAC,GACA,GAAAvZ,EAAAwL,GAEA,YADArL,EAAAyiB,IAA4BirB,EAAAjrB,GAI5B,IAAA8sB,IAAA,EACA3C,IAEA,IAAA/sC,EAAA4iB,GAEA8sB,GAAA,EACA5C,EAAAthC,EAAAuhC,EAAAzzB,EAAAC,OACK,CACL,GAAAo2B,GAAAxvC,EAAAyiB,EAAAgN,SACA,KAAA+f,GAAArtB,GAAAM,EAAApX,GAEAyjC,EAAArsB,EAAApX,EAAAuhC,EAAAqB,OACO,CACP,GAAAuB,EAAA,CAQA,GAJA,IAAA/sB,EAAAgN,UAAAhN,EAAAgtB,aAAAvM,MACAzgB,EAAA8B,gBAAA2e,IACAjxB,GAAA,GAEAhS,EAAAgS,IACAi9B,EAAAzsB,EAAApX,EAAAuhC,GAEA,MADAoC,GAAA3jC,EAAAuhC,GAAA,GACAnqB,CAaAA,GAAA8pB,EAAA9pB,GAGA,GAAAitB,GAAAjtB,EAAA9W,IACAgkC,EAAA3E,EAAAtrB,WAAAgwB,EAWA,IAVA/C,EACAthC,EACAuhC,EAIA8C,EAAArgB,SAAA,KAAAsgB,EACA3E,EAAArpB,YAAA+tB,IAGA1vC,EAAAqL,EAAAlC,QAAA,CAIA,IADA,GAAAokC,GAAAliC,EAAAlC,OACAokC,GACAA,EAAA5hC,IAAAN,EAAAM,IACA4hC,IAAApkC,MAEA,IAAAkkC,EAAAhiC,GACA,OAAA3J,GAAA,EAA2BA,EAAAgnC,EAAAnpC,OAAAoC,SAAuBD,EAClDgnC,EAAAnpC,OAAAmC,GAAAmhB,GAAAxX,EAAAlC,QAKAnJ,EAAA2vC,GACAhC,EAAAgC,GAAAltB,GAAA,KACSziB,EAAAyiB,EAAAlX,MACTmiC,EAAAjrB,IAMA,MADAusB,GAAA3jC,EAAAuhC,EAAA2C,GACAlkC,EAAAM,OAwlDiCq/B,WAAAzkB,YAQjCtC,KAEA3D,SAAAkK,iBAAA,6BACA,GAAAxY,GAAAsO,SAAA+K,aACArZ,MAAA49B,QACA3c,GAAAjhB,EAAA,UAKA,IAAA69B,KACAtsB,SAAA,SAAAvR,EAAAygB,EAAApnB,GACA,cAAAA,EAAAE,IAAA,CACA,GAAAgiB,GAAA,WACAiF,GAAAxgB,EAAAygB,EAAApnB,EAAAO,SAEA2hB,MAEAtD,IAAA+Z,KACAp0B,WAAA2d,EAAA,OAEK,aAAAliB,EAAAE,KAAA,SAAAyG,EAAAhT,MAAA,aAAAgT,EAAAhT,OACLgT,EAAAsZ,YAAAmH,EAAAhP,UACAgP,EAAAhP,UAAAoG,OAKA7X,EAAAwY,iBAAA,SAAAwI,IACAiR,KACAjyB,EAAAwY,iBAAA,mBAAAuI,IACA/gB,EAAAwY,iBAAA,iBAAAwI,KAGA/O,KACAjS,EAAA49B,QAAA,MAKAtsB,iBAAA,SAAAtR,EAAAygB,EAAApnB,GACA,cAAAA,EAAAE,IAAA,CACAinB,GAAAxgB,EAAAygB,EAAApnB,EAAAO,UAKAoG,EAAA+O,SACA0R,EAAAryB,MAAAyhC,KAAA,SAAA/hC,GAA2C,MAAAgzB,IAAAhzB,EAAAkS,EAAA9S,WAC3CuzB,EAAAryB,QAAAqyB,EAAArP,UAAA0P,GAAAL,EAAAryB,MAAA4R,EAAA9S,WAEA+zB,GAAAjhB,EAAA,aAgFAuf,IACA/uB,KAAA,SAAAwP,EAAAgQ,EAAA3W,GACA,GAAAjL,GAAA4hB,EAAA5hB,KAEAiL,GAAAgoB,GAAAhoB,EACA,IAAAkkB,GAAAlkB,EAAAG,MAAAH,EAAAG,KAAA+jB,WACAugB,EAAA99B,EAAA+9B,mBACA,SAAA/9B,EAAAwZ,MAAAwkB,QAAA,GAAAh+B,EAAAwZ,MAAAwkB,OACA5vC,IAAAmvB,IAAAtL,IACA5Y,EAAAG,KAAA+lB,MAAA,EACApC,GAAA9jB,EAAA,WACA2G,EAAAwZ,MAAAwkB,QAAAF,KAGA99B,EAAAwZ,MAAAwkB,QAAA5vC,EAAA0vC,EAAA,QAIA7mC,OAAA,SAAA+I,EAAAgQ,EAAA3W,GACA,GAAAjL,GAAA4hB,EAAA5hB,KAIAA,KAHA4hB,EAAAoB,WAIA/X,EAAAgoB,GAAAhoB,GACAA,EAAAG,MAAAH,EAAAG,KAAA+jB,aACAtL,IACA5Y,EAAAG,KAAA+lB,MAAA,EACAnxB,EACA+uB,GAAA9jB,EAAA,WACA2G,EAAAwZ,MAAAwkB,QAAAh+B,EAAA+9B,qBAGApe,GAAAtmB,EAAA,WACA2G,EAAAwZ,MAAAwkB,QAAA,UAIAh+B,EAAAwZ,MAAAwkB,QAAA5vC,EAAA4R,EAAA+9B,mBAAA,SAIAE,OAAA,SACAj+B,EACAygB,EACApnB,EACAoX,EACAK,GAEAA,IACA9Q,EAAAwZ,MAAAwkB,QAAAh+B,EAAA+9B,sBAKAG,IACAr3B,MAAAg3B,GACAte,SAQA4e,IACAvnC,KAAA7H,OACAqvB,OAAA3lB,QACAsiB,IAAAtiB,QACA2lC,KAAArvC,OACA/B,KAAA+B,OACA2uB,WAAA3uB,OACAgxB,WAAAhxB,OACA4uB,aAAA5uB,OACAkxB,aAAAlxB,OACA6uB,iBAAA7uB,OACAixB,iBAAAjxB,OACA8uB,YAAA9uB,OACAgvB,kBAAAhvB,OACA+uB,cAAA/uB,OACAwvB,UAAArB,OAAAnuB,OAAA7C,SAkDAmyC,IACAznC,KAAA,aACAD,MAAAwnC,GACA/+B,UAAA,EAEAjS,OAAA,SAAAiZ,GACA,GAAAmvB,GAAAtjC,KAEAwH,EAAAxH,KAAAqP,OAAArU,OACA,IAAAwM,IAKAA,IAAA2T,OAAA,SAAAjb,GAA6C,MAAAA,GAAAoH,MAE7CE,EAAA9J,QAAA,CAaA,GAAAyuC,GAAAnsC,KAAAmsC,KAYAzc,EAAAloB,EAAA,EAIA,IAAAmoB,GAAA3vB,KAAAwO,QACA,MAAAkhB,EAKA,IAAAvqB,GAAAkqB,GAAAK,EAEA,KAAAvqB,EACA,MAAAuqB,EAGA,IAAA1vB,KAAAqsC,SACA,MAAA5c,IAAAtb,EAAAub,EAMA,IAAA9pB,GAAA,gBAAA5F,KAAA,QACAmF,GAAA1J,IAAA,MAAA0J,EAAA1J,IACAmK,EAAAT,EAAAmC,IACApL,EAAAiJ,EAAA1J,KACA,IAAAqB,OAAAqI,EAAA1J,KAAAuC,QAAA4H,GAAAT,EAAA1J,IAAAmK,EAAAT,EAAA1J,IACA0J,EAAA1J,GAEA,IAAA8L,IAAApC,EAAAoC,OAAApC,EAAAoC,UAA8C+jB,WAAAiE,GAAAvvB,MAC9CssC,EAAAtsC,KAAAkP,OACA2gB,EAAAR,GAAAid,EAQA,IAJAnnC,EAAAoC,KAAAxC,YAAAI,EAAAoC,KAAAxC,WAAA64B,KAAA,SAAAxpB,GAA0E,eAAAA,EAAAzP,SAC1EQ,EAAAoC,KAAA+lB,MAAA,GAGAuC,KAAAtoB,OAAAqoB,GAAAzqB,EAAA0qB,GAAA,CAGA,GAAAlP,GAAAkP,MAAAtoB,KAAA+jB,WAAApsB,KAAqEqI,GAErE,eAAA4kC,EAOA,MALAnsC,MAAAqsC,UAAA,EACAnjC,GAAAyX,EAAA,wBACA2iB,EAAA+I,UAAA,EACA/I,EAAAl4B,iBAEAqkB,GAAAtb,EAAAub,EACO,eAAAyc,EAAA,CACP,GAAAI,GACA3e,EAAA,WAAwC2e,IACxCrjC,IAAA3B,EAAA,aAAAqmB,GACA1kB,GAAA3B,EAAA,iBAAAqmB,GACA1kB,GAAAyX,EAAA,sBAAA+M,GAAgE6e,EAAA7e,KAIhE,MAAAgC,MAiBAhrB,GAAAxF,GACAoI,IAAAxK,OACA0vC,UAAA1vC,QACCovC,UAEDxnC,IAAAynC,IAEA,IAAAM,KACA/nC,SAEAxJ,OAAA,SAAAiZ,GAQA,OAPA7M,GAAAtH,KAAAsH,KAAAtH,KAAAwO,OAAAjH,KAAAD,KAAA,OACAhK,EAAArD,OAAAqB,OAAA,MACAoxC,EAAA1sC,KAAA0sC,aAAA1sC,KAAAwH,SACAmlC,EAAA3sC,KAAAqP,OAAArU,YACAwM,EAAAxH,KAAAwH,YACAolC,EAAArd,GAAAvvB,MAEAvC,EAAA,EAAmBA,EAAAkvC,EAAAjvC,OAAwBD,IAAA,CAC3C,GAAAyC,GAAAysC,EAAAlvC,EACA,IAAAyC,EAAAoH,IACA,SAAApH,EAAAzE,KAAA,IAAAqB,OAAAoD,EAAAzE,KAAAuC,QAAA,WACAwJ,EAAA3F,KAAA3B,GACA5C,EAAA4C,EAAAzE,KAAAyE,GACWA,EAAAqH,OAAArH,EAAAqH,UAAuB+jB,WAAAshB,QASlC,GAAAF,EAAA,CAGA,OAFAG,MACAC,KACApW,EAAA,EAAuBA,EAAAgW,EAAAhvC,OAA2Bg5B,IAAA,CAClD,GAAAqW,GAAAL,EAAAhW,EACAqW,GAAAxlC,KAAA+jB,WAAAshB,EACAG,EAAAxlC,KAAA8oB,IAAA0c,EAAArlC,IAAAwoB,wBACA5yB,EAAAyvC,EAAAtxC,KACAoxC,EAAAhrC,KAAAkrC,GAEAD,EAAAjrC,KAAAkrC,GAGA/sC,KAAA6sC,KAAA14B,EAAA7M,EAAA,KAAAulC,GACA7sC,KAAA8sC,UAGA,MAAA34B,GAAA7M,EAAA,KAAAE,IAGAwlC,aAAA,WAEAhtC,KAAA6kC,UACA7kC,KAAAkP,OACAlP,KAAA6sC,MACA,GACA,GAEA7sC,KAAAkP,OAAAlP,KAAA6sC,MAGAI,QAAA,WACA,GAAAzlC,GAAAxH,KAAA0sC,aACAF,EAAAxsC,KAAAwsC,YAAAxsC,KAAA2E,MAAA,YACA,IAAA6C,EAAA9J,QAAAsC,KAAAktC,QAAA1lC,EAAA,GAAAE,IAAA8kC,GAAA,CAMAhlC,EAAAhM,QAAAs0B,IACAtoB,EAAAhM,QAAAw0B,IACAxoB,EAAAhM,QAAA20B,GAGA,IAAAgd,GAAA9wB,SAAA8wB,IACAA,GAAAC,YAEA5lC,GAAAhM,QAAA,SAAA0E,GACA,GAAAA,EAAAqH,KAAAmpB,MAAA,CACA,GAAA3iB,GAAA7N,EAAAwH,IACAsjB,EAAAjd,EAAAwZ,KACA2B,IAAAnb,EAAAy+B,GACAxhB,EAAA2F,UAAA3F,EAAA4F,gBAAA5F,EAAA6F,mBAAA,GACA9iB,EAAAwY,iBAAAmD,GAAA3b,EAAAgiB,QAAA,QAAAzG,GAAA1pB,GACAA,IAAA,aAAAe,KAAAf,EAAAytC,gBACAt/B,EAAA0Y,oBAAAiD,GAAAJ,GACAvb,EAAAgiB,QAAA,KACA5G,GAAApb,EAAAy+B,WAOAz6B,SACAm7B,QAAA,SAAAn/B,EAAAy+B,GAEA,IAAA5E,GACA,QAEA,UAAA5nC,KAAAstC,SACA,MAAAttC,MAAAstC,QAOA,IAAAC,GAAAx/B,EAAAgxB,WACAhxB,GAAA+S,oBACA/S,EAAA+S,mBAAAtlB,QAAA,SAAAolB,GAAsD6H,GAAA8kB,EAAA3sB,KAEtD0H,GAAAilB,EAAAf,GACAe,EAAAhmB,MAAAwkB,QAAA,OACA/rC,KAAAiO,IAAAwP,YAAA8vB,EACA,IAAAvsC,GAAAuoB,GAAAgkB,EAEA,OADAvtC,MAAAiO,IAAAuP,YAAA+vB,GACAvtC,KAAAstC,SAAAtsC,EAAA2pB,gBAiCA6iB,IACApB,cACAK,mBAMAnzB,IAAArY,OAAAwW,eACA6B,GAAArY,OAAAuV,iBACA8C,GAAArY,OAAAu+B,kBACAlmB,GAAArY,OAAAsV,mBACA+C,GAAArY,OAAAkb,oBAGAjd,EAAAoa,GAAAre,QAAA8J,WAAAknC,IACA/sC,EAAAoa,GAAAre,QAAA8d,WAAAy0B,IAGAl0B,GAAAvP,UAAA86B,UAAA1jC,GAAAinC,GAAA7oC,EAGA+Z,GAAAvP,UAAA25B,OAAA,SACA31B,EACAC,GAGA,MADAD,MAAA5M,GAAAsb,GAAA1O,OAAAjS,GACAgS,GAAA9N,KAAA+N,EAAAC,IAKArC,WAAA,WACA1K,GAAA2P,UACAA,IACAA,GAAAC,KAAA,OAAAyI,KAkBC,EAaD,IA2BA0X,IA3BAG,KAAAhwB,IARA,SAAAssC,EAAAC,GACA,GAAAC,GAAAtxB,SAAAhI,cAAA,MAEA,OADAs5B,GAAA1c,UAAA,WAAAwc,EAAA,KACAE,EAAA1c,UAAAjzB,QAAA0vC,GAAA,GAKA,cAIAzb,GAAA90B,EACA,6FAMAi1B,GAAAj1B,EACA,2DAKA22B,GAAA32B,EACA,mSA+BAywC,IAEA,aAAA75B,OAEA,aAAAA,OAEA,iBAAAA,QAEA6f,GAAA,GAAAnB,QACA,QAXA,kBAWA1e,OACA,WAXA,QAWAA,OAAA,WACA65B,GAAAhuB,KAAA,YAKAiuB,GAAA,wBACAC,GAAA,OAAAD,GAAA,QAAAA,GAAA,IACApa,GAAA,GAAAhB,QAAA,KAAAqb,IACAna,GAAA,aACAd,GAAA,GAAAJ,QAAA,QAAAqb,GAAA,UACAza,GAAA,qBACAL,GAAA,QACAE,GAAA,QAEAc,IAAA,CACA,KAAArL,QAAA,kBAAApG,EAAAwrB,GACA/Z,GAAA,KAAA+Z,GAIA,IA4TA7Y,IACAf,GACAoB,GACAD,GACAE,GACAR,GACAI,GACAD,GA2iBA+D,GACAG,GAmQAgC,GACAC,GACAC,GACAC,GACAC,GACAtgC,GACAggC,GACAC,GAznCA/I,GAAAl1B,EAAA,4BACAq1B,MAEAjB,IACAyc,OAAO,IACPC,OAAO,IACPC,SAAS,IACTC,QAAQ,IACRC,QAAQ,MAER9c,GAAA,wBACAD,GAAA,4BA8PAiD,GAAA,wBAGAD,GAAAj2B,EAAA,SAAA+1B,GACA,GAAAka,GAAAla,EAAA,GAAAxL,QAHA,yBAGA,QACA2lB,EAAAna,EAAA,GAAAxL,QAJA,yBAIA,OACA,WAAA8J,QAAA4b,EAAA,gBAAAC,EAAA,OAiCA1V,GAAA,YACAN,GAAA,YACAZ,GAAA,2BACAI,GAAA,6CAEAgB,GAAA,SACAJ,GAAA,cACAD,GAAA,WAEAlB,GAAAn5B,EAAA0yB,IAmhBAiI,GAAA,eACAC,GAAA,UAoCAG,GAAA/6B,EAAAo7B,IAuHAa,GAAA,+CACAF,GAAA,+FAGA7iB,IACAi3B,IAAA,GACAC,IAAA,EACAtjB,MAAA,GACAujB,MAAA,GACAC,GAAA,GACAne,KAAA,GACAoe,MAAA,GACAC,KAAA,GACApI,QAAA,OAMAqI,GAAA,SAAA3W,GAAqC,YAAAA,EAAA,iBAErCqC,IACAuU,KAAA,4BACAC,QAAA,2BACAC,KAAAH,GAAA,0CACAI,KAAAJ,GAAA,mBACAnS,MAAAmS,GAAA,oBACAK,IAAAL,GAAA,kBACAM,KAAAN,GAAA,mBACAte,KAAAse,GAAA,6CACAO,OAAAP,GAAA,6CACAF,MAAAE,GAAA,8CAmGA3R,IACA3+B,KAAAq8B,GACAyU,MAAA9vC,GA0qBA+vC,IA7RA,GAAA7c,QAAA,uMAIAj1B,MAAA,KAAAoiB,KAAA,kBAGA,GAAA6S,QAAA,2BAEAj1B,MAAA,KAAAoiB,KAAA,+CAqRAwZ,YAAA,eACAkF,iBACAjC,QAAAmC,KAyCA+Q,IACAnW,YAAA,eACAkF,cAAAG,GACApC,QAAAsC,IAGA6Q,IACAF,GACAC,IAmBAE,IACA76B,SACAnN,QACAspB,SAKA2e,IACA3d,YAAA,EACAzP,QAAAktB,GACAzqC,WAAA0qC,GACApa,YACApD,cACAxa,eACA2a,oBACA5b,iBACAD,mBACA6iB,WAtpSA,SAAA9W,GACA,MAAAA,GAAAqtB,OAAA,SAAAp0C,EAAAgnB,GACA,MAAAhnB,GAAAgJ,OAAAge,EAAA6W,qBACGxZ,KAAA,MAmpSH4vB,KAGAI,GAnQA,SAAAF,GAGA,QAAAG,GACAlb,EACA15B,GAEA,GAAA60C,GAAA71C,OAAAqB,OAAAo0C,GACAtR,KACA2R,IAKA,IAJAD,EAAA/sB,KAAA,SAAAX,EAAA4tB,IACAA,EAAAD,EAAA3R,GAAAv8B,KAAAugB,IAGAnnB,EAAA,CAEAA,EAAAqnB,UACAwtB,EAAAxtB,SAAAotB,EAAAptB,aAAA/d,OAAAtJ,EAAAqnB,UAGArnB,EAAA8J,aACA+qC,EAAA/qC,WAAA7F,EACAjF,OAAAqB,OAAAo0C,EAAA3qC,YACA9J,EAAA8J,YAIA,QAAAtJ,KAAAR,GACA,YAAAQ,GAAA,eAAAA,IACAq0C,EAAAr0C,GAAAR,EAAAQ,IAKA,GAAAw0C,GAAA/R,GAAAvJ,EAAAmb,EAMA,OAFAG,GAAA7R,SACA6R,EAAAF,OACAE,EAGA,QAAAC,GACAvb,EACA15B,EACA8F,GAEA9F,OAqBA,IAAAQ,GAAAR,EAAAk5B,WACAr3B,OAAA7B,EAAAk5B,YAAAQ,EACAA,CACA,IAAAwb,EAAA10C,GACA,MAAA00C,GAAA10C,EAIA,IAAAw0C,GAAAJ,EAAAlb,EAAA15B,GAiBAqE,KACA8wC,IACA9wC,GAAApE,OAAAijC,GAAA8R,EAAA/0C,OAAAk1C,EACA,IAAA1xC,GAAAuxC,EAAA90C,gBAAAuC,MACA4B,GAAAnE,gBAAA,GAAA8D,OAAAP,EACA,QAAAjB,GAAA,EAAmBA,EAAAiB,EAAOjB,IAC1B6B,EAAAnE,gBAAAsC,GAAA0gC,GAAA8R,EAAA90C,gBAAAsC,GAAA2yC,EAsBA,OAAAD,GAAA10C,GAAA6D,EAzHA,GAAA6wC,GAAAl2C,OAAAqB,OAAA,KA4HA,QACAu0C,UACAK,uBAoIAR,IACAQ,GAAAN,GAAAM,mBAIAG,GAAAjyC,EAAA,SAAAwH,GACA,GAAAmI,GAAA0O,GAAA7W,EACA,OAAAmI,MAAAkjB,YAGAqf,GAAAh3B,GAAAvP,UAAA25B,MACApqB,IAAAvP,UAAA25B,OAAA,SACA31B,EACAC,GAKA,IAHAD,KAAA0O,GAAA1O,MAGAsO,SAAA8wB,MAAAp/B,IAAAsO,SAAAk0B,gBAIA,MAAAvwC,KAGA,IAAA/E,GAAA+E,KAAA4G,QAEA,KAAA3L,EAAAC,OAAA,CACA,GAAAy5B,GAAA15B,EAAA05B,QACA,IAAAA,EACA,mBAAAA,GACA,MAAAA,EAAA3S,OAAA,KACA2S,EAAA0b,GAAA1b,QASO,KAAAA,EAAAnJ,SAMP,MAAAxrB,KALA20B,KAAA1D,cAOKljB,KACL4mB,EAAAiK,GAAA7wB,GAEA,IAAA4mB,EAAA,CAMA,GAAA5W,GAAAmyB,GAAAvb,GACAxD,wBACAgD,WAAAl5B,EAAAk5B,YACOn0B,MACP9E,EAAA6iB,EAAA7iB,OACAC,EAAA4iB,EAAA5iB,eACAF,GAAAC,SACAD,EAAAE,mBASA,MAAAm1C,IAAA9zC,KAAAwD,KAAA+N,EAAAC,IAiBAsL,GAAAu2B,QAAAK,GAEAx0C,EAAA,OLyE6Bc,KAAKd,EAAqB1B,EAAoB,MAIrE,SAAUF,EAAQC,GMpiTxBD,EAAAC,QAAA,SAAA06B,GACA,IACA,QAAAA,IACG,MAAA70B,GACH,YN4iTM,SAAU9F,EAAQC,GO/iTxB,GAAA4B,GAAA7B,EAAAC,QAAA,mBAAAuiB,gBAAAzY,WACAyY,OAAA,mBAAA0yB,YAAAnrC,WAAAmrC,KAAA3Q,SAAA,gBACA,iBAAAmS,WAAA70C,IPsjTM,SAAU7B,EAAQC,EAASC,GQzjTjC,GAAAy2C,GAAAz2C,EAAA,IACA02C,EAAA12C,EAAA,IACA22C,EAAA32C,EAAA,IACA42C,EAAA32C,OAAAC,cAEAH,GAAA82C,EAAA72C,EAAA,GAAAC,OAAAC,eAAA,SAAA42C,EAAAC,EAAAC,GAIA,GAHAP,EAAAK,GACAC,EAAAJ,EAAAI,GAAA,GACAN,EAAAO,GACAN,EAAA,IACA,MAAAE,GAAAE,EAAAC,EAAAC,GACG,MAAApxC,IACH,UAAAoxC,IAAA,OAAAA,GAAA,KAAAC,WAAA,2BAEA,OADA,SAAAD,KAAAF,EAAAC,GAAAC,EAAA70C,OACA20C,IR+jTO,CACA,CACC,CACA,CACA,CACA,CAEF,SAAUh3C,EAAQC,EAASC,GSplTjCF,EAAAC,SAAkBiB,QAAAhB,EAAA,IAAAk3C,YAAA,IT0lTZ,SAAUp3C,EAAQC,EAASC,GU1lTjCF,EAAAC,SAAkBiB,QAAAhB,EAAA,IAAAk3C,YAAA,IVgmTZ,SAAUp3C,EAAQC,EAASC,GAEjC,YWhmTAD,GAAAm3C,YAAA,EAEAn3C,EAAAiB,QAAA,SAAAm2C,EAAAC,GACA,KAAAD,YAAAC,IACA,SAAAH,WAAA,uCXymTM,SAAUn3C,EAAQC,EAASC,GAEjC,YY/mTAD,GAAAm3C,YAAA,CAEA,IAAAG,GAAAr3C,EAAA,IAEAs3C,EAEA,SAAAj1C,GAAsC,MAAAA,MAAA60C,WAAA70C,GAAuCrB,QAAAqB,IAF7Eg1C,EAIAt3C,GAAAiB,QAAA,WACA,QAAA2nC,GAAAhhC,EAAA+C,GACA,OAAAjH,GAAA,EAAmBA,EAAAiH,EAAAhH,OAAkBD,IAAA,CACrC,GAAA8zC,GAAA7sC,EAAAjH,EACA8zC,GAAAlxC,WAAAkxC,EAAAlxC,aAAA,EACAkxC,EAAAhxC,cAAA,EACA,SAAAgxC,OAAAjxC,UAAA,IACA,EAAAgxC,EAAAt2C,SAAA2G,EAAA4vC,EAAA91C,IAAA81C,IAIA,gBAAAH,EAAAI,EAAAC,GAGA,MAFAD,IAAA7O,EAAAyO,EAAArnC,UAAAynC,GACAC,GAAA9O,EAAAyO,EAAAK,GACAL,OZwnTM,SAAUt3C,EAAQC,EAASC,GahpTjC,GAAAK,GAAAL,EAAA,GACA03C,EAAAr3C,EAAAuC,OAAAvC,EAAAuC,MAAuCC,UAAAD,KAAAC,WACvC/C,GAAAC,QAAA,SAAAS,GACA,MAAAk3C,GAAA70C,UAAA+B,MAAA8yC,EAAA/yC,abupTM,SAAU7E,EAAQC,EAASC,Gc1pTjCA,EAAA,GACA,IAAA23C,GAAA33C,EAAA,GAAAC,MACAH,GAAAC,QAAA,SAAAS,EAAAiB,EAAAm2C,GACA,MAAAD,GAAAz3C,eAAAM,EAAAiB,EAAAm2C,KdiqTM,SAAU93C,EAAQC,GepqTxBD,EAAAC,QAAA,SAAAS,GACA,qBAAAA,GAAA,KAAAy2C,WAAAz2C,EAAA,sBACA,OAAAA,Kf2qTM,SAAUV,EAAQC,EAASC,GgB7qTjC,GAAAoC,GAAApC,EAAA,EACAF,GAAAC,QAAA,SAAAS,GACA,IAAA4B,EAAA5B,GAAA,KAAAy2C,WAAAz2C,EAAA,qBACA,OAAAA,KhBorTM,SAAUV,EAAQC,EAASC,GiBtrTjC,GAAA63C,GAAA73C,EAAA,GACAF,GAAAC,QAAA,SAAAsE,EAAAyzC,EAAAp0C,GAEA,GADAm0C,EAAAxzC,OACAvC,KAAAg2C,EAAA,MAAAzzC,EACA,QAAAX,GACA,uBAAAtD,GACA,MAAAiE,GAAA7B,KAAAs1C,EAAA13C,GAEA,wBAAAA,EAAAqF,GACA,MAAApB,GAAA7B,KAAAs1C,EAAA13C,EAAAqF,GAEA,wBAAArF,EAAAqF,EAAAS,GACA,MAAA7B,GAAA7B,KAAAs1C,EAAA13C,EAAAqF,EAAAS,IAGA,kBACA,MAAA7B,GAAAO,MAAAkzC,EAAAnzC,cjB+rTM,SAAU7E,EAAQC,EAASC,GkBhtTjC,GAAAoC,GAAApC,EAAA,GACAqiB,EAAAriB,EAAA,GAAAqiB,SAEA01B,EAAA31C,EAAAigB,IAAAjgB,EAAAigB,EAAAhI,cACAva,GAAAC,QAAA,SAAAS,GACA,MAAAu3C,GAAA11B,EAAAhI,cAAA7Z,QlButTM,SAAUV,EAAQC,EAASC,GmB5tTjC,GAAA2B,GAAA3B,EAAA,GACAK,EAAAL,EAAA,GACAwE,EAAAxE,EAAA,IACAg4C,EAAAh4C,EAAA,IAGAi4C,EAAA,SAAAl3C,EAAA4J,EAAAoP,GACA,GASAtY,GAAAy2C,EAAAC,EATAC,EAAAr3C,EAAAk3C,EAAAI,EACAC,EAAAv3C,EAAAk3C,EAAAM,EACAC,EAAAz3C,EAAAk3C,EAAAQ,EACAC,EAAA33C,EAAAk3C,EAAAlB,EACA4B,EAAA53C,EAAAk3C,EAAAW,EACAC,EAAA93C,EAAAk3C,EAAAa,EACA/4C,EAAAu4C,EAAAj4C,IAAAsK,KAAAtK,EAAAsK,OACAouC,EAAAh5C,EAAA,UACA4H,EAAA2wC,EAAA32C,EAAA62C,EAAA72C,EAAAgJ,IAAAhJ,EAAAgJ,QAAqF,SAErF2tC,KAAAv+B,EAAApP,EACA,KAAAlJ,IAAAsY,IAEAm+B,GAAAE,GAAAzwC,OAAA7F,KAAA6F,EAAAlG,KACAA,IAAA1B,KAEAo4C,EAAAD,EAAAvwC,EAAAlG,GAAAsY,EAAAtY,GAEA1B,EAAA0B,GAAA62C,GAAA,kBAAA3wC,GAAAlG,GAAAsY,EAAAtY,GAEAk3C,GAAAT,EAAA1zC,EAAA2zC,EAAAx2C,GAEAk3C,GAAAlxC,EAAAlG,IAAA02C,EAAA,SAAAa,GACA,GAAAX,GAAA,SAAAj4C,EAAAqF,EAAAS,GACA,GAAAF,eAAAgzC,GAAA,CACA,OAAAr0C,UAAAjB,QACA,iBAAAs1C,EACA,kBAAAA,GAAA54C,EACA,kBAAA44C,GAAA54C,EAAAqF,GACW,UAAAuzC,GAAA54C,EAAAqF,EAAAS,GACF,MAAA8yC,GAAAp0C,MAAAoB,KAAArB,WAGT,OADA0zC,GAAA,UAAAW,EAAA,UACAX,GAEKF,GAAAO,GAAA,kBAAAP,GAAA3zC,EAAA6/B,SAAA7hC,KAAA21C,KAELO,KACA34C,EAAAk5C,UAAAl5C,EAAAk5C,aAA+Cx3C,GAAA02C,EAE/Cp3C,EAAAk3C,EAAAiB,GAAAH,MAAAt3C,IAAAu2C,EAAAe,EAAAt3C,EAAA02C,KAKAF,GAAAI,EAAA,EACAJ,EAAAM,EAAA,EACAN,EAAAQ,EAAA,EACAR,EAAAlB,EAAA,EACAkB,EAAAW,EAAA,GACAX,EAAAa,EAAA,GACAb,EAAAkB,EAAA,GACAlB,EAAAiB,EAAA,IACAp5C,EAAAC,QAAAk4C,GnBkuTM,SAAUn4C,EAAQC,EAASC,GoB9xTjC,GAAA42C,GAAA52C,EAAA,GACAo5C,EAAAp5C,EAAA,GACAF,GAAAC,QAAAC,EAAA,YAAAq5C,EAAA53C,EAAAU,GACA,MAAAy0C,GAAAC,EAAAwC,EAAA53C,EAAA23C,EAAA,EAAAj3C,KACC,SAAAk3C,EAAA53C,EAAAU,GAED,MADAk3C,GAAA53C,GAAAU,EACAk3C,IpBqyTM,SAAUv5C,EAAQC,EAASC,GqB3yTjCF,EAAAC,SAAAC,EAAA,KAAAA,EAAA,cACA,MAAmG,IAAnGC,OAAAC,eAAAF,EAAA,gBAAsEG,IAAA,WAAgB,YAAaC,KrBkzT7F,SAAUN,EAAQC,GsBnzTxBD,EAAAC,QAAA,SAAAu5C,EAAAn3C,GACA,OACAkE,aAAA,EAAAizC,GACA/yC,eAAA,EAAA+yC,GACAhzC,WAAA,EAAAgzC,GACAn3C,WtB2zTM,SAAUrC,EAAQC,EAASC,GuB/zTjC,GAAAoC,GAAApC,EAAA,EAGAF,GAAAC,QAAA,SAAAS,EAAAi4C,GACA,IAAAr2C,EAAA5B,GAAA,MAAAA,EACA,IAAA6D,GAAA1B,CACA,IAAA81C,GAAA,mBAAAp0C,EAAA7D,EAAAkC,YAAAN,EAAAO,EAAA0B,EAAA7B,KAAAhC,IAAA,MAAAmC,EACA,uBAAA0B,EAAA7D,EAAA+4C,WAAAn3C,EAAAO,EAAA0B,EAAA7B,KAAAhC,IAAA,MAAAmC,EACA,KAAA81C,GAAA,mBAAAp0C,EAAA7D,EAAAkC,YAAAN,EAAAO,EAAA0B,EAAA7B,KAAAhC,IAAA,MAAAmC,EACA,MAAAs0C,WAAA,6CvBu0TM,SAAUn3C,EAAQC,EAASC,GwBj1TjC,GAAAi4C,GAAAj4C,EAAA,GAEAi4C,KAAAQ,EAAAR,EAAAI,GAAAr4C,EAAA,aAAuEE,eAAAF,EAAA,GAAA62C,KxBs1T/D,CACA,CACA,CAEF,SAAU/2C,EAAQC,EAASC,IyB3xTjC,eAIA,KAAA6J,KAAA2vC,MACA3vC,KAAA2vC,IAAA,SAAAC,GAAgC,UAAAA,EAAA,EAAAA,EAAA,QAGhC,IAAAC,IACAC,SAAA,SAAAC,EAAAC,GAA2C,OAASJ,EAAAG,EAAAH,EAAAI,EAAAJ,EAAAK,EAAAF,EAAAE,EAAAD,EAAAC,IACpDC,WAAA,SAAAH,EAAAC,GAA4C,MAAAD,GAAAH,EAAAI,EAAAJ,EAAAG,EAAAE,EAAAD,EAAAC,GAC5CjyB,OAAA,SAAAhmB,GAAmC,MAAAgI,MAAAmwC,KAAAn4C,EAAA43C,EAAA53C,EAAA43C,EAAA53C,EAAAi4C,EAAAj4C,EAAAi4C,IACnCG,MAAA,SAAAp4C,EAAAmvB,GAAqC,OAASyoB,EAAA53C,EAAA43C,EAAAzoB,EAAA8oB,EAAAj4C,EAAAi4C,EAAA9oB,KAI9CkpB,EAAArwC,KAAAswC,IAAA,OAYAC,EAAA,SAAAC,EAAAC,GAOA,OANAC,MACAC,EAAAC,EAAAJ,EAAAC,GACAI,EAAAJ,EAAA52C,OAAA,EAAAi3C,EAAA,EAAAD,EAAA,EACAE,EAAAC,EAAAL,EAAAG,EAAAJ,EAAA,GACA14C,EAAA63C,EAAAC,SAAAU,EAAAC,EAAA,IAAAQ,EAAApB,EAAA7xB,OAAAhmB,GAAAk5C,EAAA,EAEAt3C,EAAA,EAAuBA,EAAAm3C,EAAkBn3C,IAAA,CACzC5B,EAAA63C,EAAAC,SAAAU,EAAAW,EAAAV,EAAAI,EAAAH,EAAA92C,GAAA,WACA,IAAAw3C,GAAAvB,EAAA7xB,OAAAhmB,EACAo5C,GAAAH,IACAA,EAAAG,EACAF,EAAAR,EAAA92C,IASA,MANA5B,GAAA63C,EAAAC,SAAAU,EAAAC,EAAAI,IACAO,EAAAvB,EAAA7xB,OAAAhmB,GACAo5C,EAAAH,IACAA,EAAAG,EACAF,EAAA,IAEgBG,SAAAH,EAAAI,SAAAL,IAKhBM,EAAA,SAAAf,EAAAC,GACA,GAAAe,GAAAjB,EAAAC,EAAAC,EACA,QAAgBD,MAAAW,EAAAV,IAAA52C,OAAA,EAAA23C,EAAAH,SAAA,WAAAA,SAAAG,EAAAH,WAEhBT,EAAA,SAAAJ,EAAAC,GAKA,OAJAI,GAAAJ,EAAA52C,OAAA,EAAAi3C,EAAA,EAAAD,EAAA,EACAx0C,KAAAkU,KAAAkhC,KAAAd,KACAe,IAAA,wCAEA93C,EAAA,EAAuBA,GAAAi3C,EAAaj3C,IAAAyC,EAAAzC,GAAAi2C,EAAAC,SAAAW,EAAA72C,GAAA42C,EACpC,QAAA52C,GAAA,EAAuBA,GAAAi3C,EAAA,EAAiBj3C,IACxC2W,EAAA3W,GAAAi2C,EAAAC,SAAAW,EAAA72C,EAAA,GAAA62C,EAAA72C,IACA2W,EAAA3W,GAAAi2C,EAAAO,MAAA7/B,EAAA3W,GAAA,EAEA,QAAA+3C,GAAA,EAAyBA,GAAAd,EAAA,EAAmBc,IAC5C,OAAAC,GAAA,EAAgCA,GAAAf,EAAkBe,IAClDH,EAAAE,KAAAF,EAAAE,OACAF,EAAAE,GAAAC,GAAA/B,EAAAK,WAAA3/B,EAAAohC,GAAAt1C,EAAAu1C,GAGA,KAAAh4C,EAAA,EAAmBA,GAAAk3C,EAAmBl3C,IACtC+2C,EAAA/2C,KAAA+2C,EAAA/2C,OACA+2C,EAAA/2C,GAAAq2C,EAAA,EACAU,EAAA/2C,GAAAg2C,EAAAx2C,WAAAQ,GAAAk3C,CAGA,QADA33C,GAAA03C,EAAAnyB,EAAAmyB,EAAA,EACAgB,EAAA,EAAuBA,GAAA14C,EAAAulB,EAAYmzB,IAAA,CACnC,GAAAC,GAAA9xC,KAAAC,IAAA,EAAA4xC,EAAAnzB,GACAqzB,EAAA/xC,KAAAgyC,IAAAH,EAAA14C,EACA,KAAAS,EAAAk4C,EAAwBl4C,GAAAm4C,EAASn4C,IACjCkS,EAAA+lC,EAAAj4C,EACA+2C,EAAA/2C,EAAAkS,GAAAmkC,GAAAwB,EAAA3lC,GAAAlS,GAAA83C,EAAA5lC,GAAAlS,GAGA,MAAA+2C,IAKAK,EAAA,SAAAL,EAAAE,EAAAK,EAAAe,GACA,GACAC,GAAAC,EADAzlB,KAAAoe,KAEAsH,KAAAC,IAEA,QAAAC,EAAA3B,EAAAE,IACA,OACA,QAEA,QACA,GAAAoB,GAxFA,GA0FA,MADAf,GAAA,IAAAP,EAAA,GAAAf,EAAAe,EAAAE,GAAAjB,GAAA,EACA,CAEA,IAAA2C,EAAA5B,EAAAE,GAEA,MADAK,GAAA,GAAAsB,EAAA7B,EAAAE,GACA,EAKAM,EAAAR,EAAAE,EAAA,GAAAnkB,EAAAoe,GACAoH,EAAAlB,EAAAtkB,EAAAmkB,EAAAuB,EAAAH,EAAA,GACAE,EAAAnB,EAAAlG,EAAA+F,EAAAwB,EAAAJ,EAAA,EACA,QAAAr4C,GAAA,EAAuBA,EAAAs4C,EAAgBt4C,IAAAs3C,EAAAt3C,GAAAw4C,EAAAx4C,EACvC,QAAAA,GAAA,EAAuBA,EAAAu4C,EAAiBv4C,IAAAs3C,EAAAt3C,EAAAs4C,GAAAG,EAAAz4C,EACxC,OAAAs4C,GAAAC,GAEAG,EAAA,SAAA7B,EAAAI,GACA,GAAA4B,GAAAC,EAAAC,EAAA,CACAF,GAAAC,EAAA1yC,KAAA2vC,IAAAc,EAAA,GAAAR,EACA,QAAAr2C,GAAA,EAAuBA,GAAAi3C,EAAaj3C,IACpC64C,EAAAzyC,KAAA2vC,IAAAc,EAAA72C,GAAAq2C,GACAwC,GAAAC,GAAAC,IACAD,EAAAD,CAEA,OAAAE,IAEAJ,EAAA,SAAA9B,EAAAI,GACA,GAAArzC,GACAo1C,EAAAC,EAAAC,EAAAC,EACAx8C,EAAAqF,EAAAS,EAAA22C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CACAh9C,GAAAk6C,EAAA,GAAAR,EAAAQ,EAAAI,GAAAZ,EACAr0C,EAAA60C,EAAAI,GAAAjB,EAAAa,EAAA,GAAAb,EACAvzC,EAAAo0C,EAAA,GAAAb,EAAAa,EAAAI,GAAAZ,EAAAQ,EAAAI,GAAAjB,EAAAa,EAAA,GAAAR,CAIA,QAFAuD,GAAAC,mBAAA,EAEA75C,EAAA,EAAuBA,EAAAi3C,EAAYj3C,IAAA,CACnC,GAAAtB,GAAA/B,EAAAk6C,EAAA72C,GAAAg2C,EAAAh0C,EAAA60C,EAAA72C,GAAAq2C,EAAA5zC,CACA/D,GAAAk7C,EACAA,EAAAl7C,EACAA,EAAAm7C,qBACAA,mBAAAn7C,GAeA,MAZA46C,GAAA,EAAiBC,EAAA,EAAUC,EAAA,EAAUC,EAAA98C,EAAQ+8C,EAAA13C,EAC7C23C,EAAAl3C,EAAAm3C,EACAR,EAAAE,EAAAI,EAAAD,EAAAF,EACAF,EAAA,EAAAD,EACAJ,GAAAO,EAAAI,EAAAD,EAAAF,GAAAH,EACAI,EAAA98C,EAAe+8C,EAAA13C,EAAQ23C,EAAAl3C,EAAAo3C,mBACvBT,EAAAE,EAAAI,EAAAD,EAAAF,EACAF,EAAA,EAAAD,EACAH,GAAAM,EAAAI,EAAAD,EAAAF,GAAAH,EACAH,EAAA9yC,KAAAgyC,IAAAY,EAAAC,GACAE,EAAA/yC,KAAAC,IAAA2yC,EAAAC,GACAr1C,EAAAu1C,EAAAD,EACAt1C,EAAA6yC,EAAA,KAEAmC,EAAA,SAAA/B,EAAAI,GACA,GACA6C,GAAAjD,EAAAI,GAAAjB,EAAAa,EAAA,GAAAb,EAAA+D,EAAAlD,EAAAI,GAAAZ,EAAAQ,EAAA,GAAAR,EACA2D,EAAAnD,EAAA,GAAAb,EAAA,CAGA,WADA8D,GAFAjD,EAAA,GAAAR,EAAA,GAEA0D,EAAAC,IADA,GAHA,EAGAF,EAHA,EAGAC,IAHA,GAOAxC,EAAA,SAAAV,EAAAI,EAAAK,EAAAxkB,EAAAoe,GAEA,OADA+I,QACA/nC,EAAA,EAAsBA,GAAA+kC,EAAa/kC,IAAA+nC,EAAA,GAAA/nC,GAAA2kC,EAAA3kC,EACnC,QAAAlS,GAAA,EAAuBA,GAAAi3C,EAAaj3C,IACpC,OAAAkS,GAAA,EAA2BA,GAAA+kC,EAAAj3C,EAAiBkS,IAC5C+nC,EAAAj6C,KAAAi6C,EAAAj6C,OACAi6C,EAAAj6C,GAAAkS,KAAA+nC,EAAAj6C,GAAAkS,OACA+nC,EAAAj6C,GAAAkS,GAAA8jC,GAAA,EAAAsB,GAAA2C,EAAAj6C,EAAA,GAAAkS,GAAA8jC,EAAAsB,EAAA2C,EAAAj6C,EAAA,GAAAkS,EAAA,GAAA8jC,EACAiE,EAAAj6C,GAAAkS,GAAAmkC,GAAA,EAAAiB,GAAA2C,EAAAj6C,EAAA,GAAAkS,GAAAmkC,EAAAiB,EAAA2C,EAAAj6C,EAAA,GAAAkS,EAAA,GAAAmkC,CAGA,UAAAvjB,EACA,IAAA5gB,EAAA,EAAuBA,GAAA+kC,EAAa/kC,IAAA4gB,EAAA5gB,GAAA+nC,EAAA/nC,GAAA,EACpC,UAAAg/B,EACA,IAAAh/B,EAAA,EAAuBA,GAAA+kC,EAAa/kC,IAAAg/B,EAAAh/B,GAAA+nC,EAAAhD,EAAA/kC,KAEpC,OAAA+nC,GAAAhD,GAAA,IAGAiD,KACAC,EAAA,SAAAC,GACA,GAAAzvC,GAAAuvC,EAAAE,EACA,KAAAzvC,EAAA,CACAA,IACA,IAAA0vC,GAAA,WAAqC,gBAAA/C,GAAqB,MAAAlxC,MAAAswC,IAAAY,EAAA8C,KAC1DE,EAAA,WAAqC,gBAAAhD,GAAqB,MAAAlxC,MAAAswC,IAAA,EAAAY,EAAA8C,KAC1DG,EAAA,SAAA93C,GAAsC,gBAAA60C,GAAqB,MAAA70C,KAC3D+3C,EAAA,WAAqC,gBAAAlD,GAAqB,MAAAA,KAC1DmD,EAAA,WAA+C,gBAAAnD,GAAqB,SAAAA,IACpEoD,EAAA,SAAAC,GACA,gBAAArD,GAEA,OADAhzB,GAAA,EACAtkB,EAAA,EAAuCA,EAAA26C,EAAA16C,OAAkBD,IAAAskB,GAAAq2B,EAAA36C,GAAAs3C,EACzD,OAAAhzB,IAIA3Z,GAAAvG,KAAA,GAAAi2C,GACA,QAAAr6C,GAAA,EAA2BA,EAAAo6C,EAAWp6C,IAAA,CAEtC,OADA26C,IAAA,GAAAJ,GAAAH,IACAloC,EAAA,EAAgCA,EAAAkoC,EAAAp6C,EAAiBkS,IAAAyoC,EAAAv2C,KAAA,GAAAo2C,GACjD,QAAAtoC,GAAA,EAAgCA,EAAAlS,EAAOkS,IAAAyoC,EAAAv2C,KAAA,GAAAq2C,GACvC9vC,GAAAvG,KAAA,GAAAs2C,GAAAC,IAEAhwC,EAAAvG,KAAA,GAAAk2C,IAEAJ,EAAAE,GAAAzvC,EAGA,MAAAA,IASAiwC,EAAA,SAAA/D,EAAAY,GAGA,OAFAoD,GAAAV,EAAAtD,EAAA52C,OAAA,GACA66C,EAAA,EAAAC,EAAA,EACA/6C,EAAA,EAAuBA,EAAA62C,EAAA52C,OAAmBD,IAC1C86C,GAAAjE,EAAA72C,GAAAg2C,EAAA6E,EAAA76C,GAAAy3C,GACAsD,GAAAlE,EAAA72C,GAAAq2C,EAAAwE,EAAA76C,GAAAy3C,EAGA,QAAgBzB,EAAA8E,EAAAzE,EAAA0E,IAGhBC,EAAA,SAAAC,EAAAC,GACA,MAAA90C,MAAAmwC,KAAAnwC,KAAAswC,IAAAuE,EAAAjF,EAAAkF,EAAAlF,EAAA,GAAA5vC,KAAAswC,IAAAuE,EAAA5E,EAAA6E,EAAA7E,EAAA,KAGA8E,EAAA,SAAAtE,GACA,MAAAA,GAAA,GAAAb,GAAAa,EAAA,GAAAb,GAAAa,EAAA,GAAAR,GAAAQ,EAAA,GAAAR,GAQA+E,EAAA,SAAAvE,EAAAY,EAAAC,GAEA,GAAAyD,EAAAtE,GACA,OACAD,MAAAC,EAAA,GACAY,WAUA,KANA,GAAA5zB,GAAA+2B,EAAA/D,EAAAY,GACA4D,EAAA,EACAC,EAAA7D,EACA8D,EAAA7D,EAAA,OACAvsC,EAAA,KAEAkwC,EAAAj1C,KAAAo1C,IAAA9D,IACA4D,GAAA,KAAAC,EACApwC,EAAAyvC,EAAA/D,EAAAyE,GACAD,GAAAL,EAAA7vC,EAAA0Y,GACAA,EAAA1Y,CAEA,QAAgByrC,MAAAzrC,EAAAssC,SAAA6D,IAGhBl6C,EAAA,SAAAy1C,GACA,GAAAsE,EAAAtE,GAAA,QAQA,KANA,GAAAhzB,GAAA+2B,EAAA/D,EAAA,GACAwE,EAAA,EACAC,EAAA,EAEAnwC,EAAA,KAEAmwC,EAAA,GACAA,GAAA,KACAnwC,EAAAyvC,EAAA/D,EAAAyE,GACAD,GAAAL,EAAA7vC,EAAA0Y,GACAA,EAAA1Y,CAEA,OAAAkwC,IAMAI,EAAA,SAAA5E,EAAAY,EAAAC,GACA,MAAA0D,GAAAvE,EAAAY,EAAAC,GAAAd,OAMA8E,EAAA,SAAA7E,EAAAY,EAAAC,GACA,MAAA0D,GAAAvE,EAAAY,EAAAC,GAAAD,UAQAkE,EAAA,SAAA9E,EAAAY,GACA,GAAAwD,GAAAL,EAAA/D,EAAAY,GACAyD,EAAAN,EAAA/D,EAAA9jC,MAAA,EAAA8jC,EAAA52C,OAAA,GAAAw3C,GACA1kB,EAAAmoB,EAAA7E,EAAA4E,EAAA5E,EAAAxjB,EAAAqoB,EAAAlF,EAAAiF,EAAAjF,CACA,WAAAjjB,EAAA6oB,IAAAx1C,KAAAy1C,KAAA9oB,EAAAF,IAQAipB,EAAA,SAAAjF,EAAAY,EAAAC,GACA,GAAApzB,GAAA82B,EAAAvE,EAAAY,EAAAC,EAGA,OAFApzB,GAAAmzB,SAAA,IAAAnzB,EAAAmzB,SAAA,GACAnzB,EAAAmzB,SAAA,IAAAnzB,EAAAmzB,SAAA,GACAkE,EAAA9E,EAAAvyB,EAAAmzB,WAOAsE,EAAA,SAAAlF,EAAAY,EAAAx3C,EAAAy3C,GACAA,EAAA,MAAAA,EAAA,EAAAA,CACA,IAAApzB,GAAA82B,EAAAvE,EAAAY,EAAAC,GACA5yB,EAAA62B,EAAA9E,EAAAvyB,EAAAmzB,UACAuE,EAAA51C,KAAAy1C,MAAA,EAAA/2B,GACAuxB,EAAAp2C,EAAA,EAAAmG,KAAA61C,IAAAD,GACAhG,EAAA/1C,EAAA,EAAAmG,KAAA81C,IAAAF,EACA,SAAiBhG,EAAA1xB,EAAAsyB,MAAAZ,IAAAK,EAAA/xB,EAAAsyB,MAAAP,MAAoCL,EAAA1xB,EAAAsyB,MAAAZ,IAAAK,EAAA/xB,EAAAsyB,MAAAP,OAGrD8F,EAAA55C,KAAA45C,UACAC,kBAAAzF,EACA0F,gBAAAV,EACAW,8BAAAR,EACAS,oBAAA5E,EACA6E,aAAA5B,EACA6B,oBAAAhB,EACAiB,uBAAAX,EACAY,uBAAAjB,EACAkB,UAAAx7C,EACAvE,QAAA,QAIAP,GAAA6/C,aAGCp9C,KAAA,mBAAA8f,eAAAtc,MA+BA,WAED,YACA,IAAAy1B,GAAAz1B,KAEAs6C,EAAA7kB,EAAA6kB,SACAhgD,QAAA,QAIAP,GAAAugD,SAGA,IAAAC,GAAA,SAAAngD,GAA4B,yBAAAH,OAAA8P,UAAArN,SAAAF,KAAApC,IAC5BogD,EAAA,SAAA9B,EAAAC,EAAAt6C,GAGA,MAFAq6C,GAAA6B,EAAA7B,QAAAjF,EAAAiF,EAAA5E,GACA6E,EAAA4B,EAAA5B,QAAAlF,EAAAkF,EAAA7E,GACAz1C,EAAAq6C,EAAAC,IAUA8B,EAAAH,EAAAI,SAAA,SAAAhC,EAAAC,GACA,MAAA6B,GAAA9B,EAAAC,EAAA,SAAAgC,EAAAC,GACA,MAAAA,GAAA,IAAAD,EAAA,GACAC,EAAA,GAAAD,EAAA,GAAAtB,SACAuB,EAAA,IAAAD,EAAA,GACAC,EAAA,GAAAD,EAAA,SAEAC,EAAA,GAAAD,EAAA,KAAAC,EAAA,GAAAD,EAAA,OAmCAE,GAxBAP,EAAAQ,OAAA,SAAApC,EAAAC,GACA,SAAA8B,EAAA/B,EAAAC,IAUA2B,EAAAS,WAAA,SAAArC,EAAAC,GACA,MAAA6B,GAAA9B,EAAAC,EAAA,SAAAgC,EAAAC,GACA,MAAA/2C,MAAAmwC,KAAAnwC,KAAAswC,IAAAyG,EAAA,GAAAD,EAAA,MAAA92C,KAAAswC,IAAAyG,EAAA,GAAAD,EAAA,UAWAL,EAAAU,SAAA,SAAAtC,EAAAC,GACA,MAAA6B,GAAA9B,EAAAC,EAAA,SAAAgC,EAAAC,GACA,MAAAA,GAAA,GAAAD,EAAA,GACAC,EAAA,GAAAD,EAAA,OAEAC,EAAA,IAAAD,EAAA,GACAC,EAAA,GAAAD,EAAA,OAGAC,EAAA,GAAAD,EAAA,WA4DAM,GAhDAX,EAAAY,MAAA,SAAAxC,EAAAC,GACA,MAAA6B,GAAA9B,EAAAC,EAAA,SAAAgC,EAAAC,GACA,GAAAr4B,GAAAk4B,EAAAE,EAAAC,GACA7F,EAAAlxC,KAAAy1C,KAAA/2B,GACAyI,EAAA6vB,EAAAF,EAAAC,EAIA,OAHA,IAAA5vB,GAAA,GAAAA,IAAA+pB,GAAAlxC,KAAAs3C,IACApG,EAAA,IAAAA,GAAA,EAAAlxC,KAAAs3C,IAEApG,KAWAuF,EAAAc,WAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAA5H,EAAA+H,EAAAH,EAAA5H,EAAA4H,EAAA7G,EAAAiH,EAAAJ,EAAAvH,EAAA4H,EAAAL,EAAAvH,EAAAuH,EAAAlnC,EACA4iC,EAAAuE,EAAA7H,EAAAyD,EAAAoE,EAAA7H,EAAA6H,EAAA9G,EAAAwC,EAAAsE,EAAAxH,EAAAqD,EAAAmE,EAAAxH,EAAAwH,EAAAnnC,CAEA,OAAAonC,IAAAxE,MAAAyE,GAAAC,GAAAzE,MAAA0E,GACAH,GAAArE,MAAAsE,GAAAC,GAAAzE,MAAA0E,GACAH,GAAAxE,MAAAyE,GAAAC,GAAAtE,MAAAuE,GACAH,GAAArE,GAAAH,GAAAyE,GAAAC,GAAAtE,MAAAuE,GACA3E,GAAAwE,MAAArE,GAAAF,GAAAyE,MAAAtE,GACAJ,GAAAyE,MAAAtE,GAAAF,GAAAyE,MAAAtE,GACAJ,GAAAwE,MAAArE,GAAAF,GAAA0E,MAAAvE,GACAJ,GAAAyE,GAAAD,GAAArE,GAAAF,GAAA0E,MAAAvE,GAWAmD,EAAAqB,SAAA,SAAAN,EAAAC,EAAAM,GACA,GAAAL,GAAAF,EAAA5H,EAAA+H,EAAAH,EAAA5H,EAAA4H,EAAA7G,EAAAiH,EAAAJ,EAAAvH,EAAA4H,EAAAL,EAAAvH,EAAAuH,EAAAlnC,EACA4iC,EAAAuE,EAAA7H,EAAAyD,EAAAoE,EAAA7H,EAAA6H,EAAA9G,EAAAwC,EAAAsE,EAAAxH,EAAAqD,EAAAmE,EAAAxH,EAAAwH,EAAAnnC,EACAjU,EAAA,SAAA0zC,EAAAC,EAAAgI,EAAAC,GAA8C,MAAAF,GAAAhI,GAAAC,GAAAgI,GAAAC,EAAAlI,EAAAC,GAAAgI,EAAAC,EAE9C,OAAA57C,GAAAq7C,EAAAxE,EAAAyE,EAAAtE,IAAAh3C,EAAAu7C,EAAAzE,EAAA0E,EAAAvE,KAEA,mCACA4E,GAAA,iCASAzB,GAAA0B,YAAA,SAAAC,EAAAC,EAAA/G,GACA,GAAA5yB,GAAAk4B,EAAAwB,EAAAC,GACAlxB,EAAA6vB,EAAAoB,EAAAC,GACAC,EAAAhH,EAAA,EAAA8F,EAAAjwB,GAAA+wB,EAAA/wB,GACAkwB,EAAAr3C,KAAAy1C,KAAA/2B,GACAuxB,EAAAjwC,KAAAo1C,IAAA9D,EAAAtxC,KAAA61C,IAAAwB,IAAAiB,EAAA,GACA1I,EAAA5vC,KAAAo1C,IAAA9D,EAAAtxC,KAAA81C,IAAAuB,IAAAiB,EAAA,EACA,QAAoB1I,EAAAwI,EAAAxI,IAAAK,EAAAmI,EAAAnI,MAUpBwG,EAAA8B,oBAAA,SAAAH,EAAAC,EAAAx+C,GACA,GAAA6kB,GAAAk4B,EAAAwB,EAAAC,GACAG,EAAAx4C,KAAAy1C,MAAA,EAAA/2B,GACAuxB,EAAAp2C,EAAA,EAAAmG,KAAA61C,IAAA2C,GACA5I,EAAA/1C,EAAA,EAAAmG,KAAA81C,IAAA0C,EACA,SAAqB5I,EAAAyI,EAAAzI,IAAAK,EAAAoI,EAAApI,MAAoCL,EAAAyI,EAAAzI,IAAAK,EAAAoI,EAAApI,QAExDt3C,KAAA,mBAAA8f,eAAAtc,MAED,WAEA,YAEA,IAAAy1B,GAAAz1B,KACAs8C,GACAC,QAAA1c,UAAAC,UAAAniC,cAAAK,QAAA,eAEAw+C,EAAA,SAAAzuC,EAAA0uC,EAAAj+C,GACAA,KAAAuP,EAAA0N,UAEA,QADAihC,GAAAl+C,EAAAm+C,iBAAAF,GACAh/C,EAAA,EAA2BA,EAAAi/C,EAAAh/C,OAAsBD,IACjD,GAAAi/C,EAAAj/C,KAAAsQ,EACA,QAGA,WAEA6uC,EAAA,SAAA7uC,GACA,sBAAAA,MAAA0K,cAAA3b,OAAAuf,SAAAwgC,eAAA9uC,MAEAq3B,EAAA,SAAAxlC,GACA,MAAAA,GAAAk9C,YAAAl9C,EAAA+B,QAMAo7C,EAAA,SAAAn9C,EAAA+B,EAAAtF,EAAA2gD,GACA,GAAAA,EACA,aAAAp9C,EAAAa,MAAAb,EAAAa,KAAAzC,QACA,OAAwByC,KAAAb,EAAAa,KAAAopB,IAAAjqB,EAAAa,KAAAzC,QAAA3B,GAExB,IAAA81C,IAA2B1xC,QAAAopB,KAAA,GAAkBozB,EAAA,SAAAlvC,GAC7CokC,EAAA1xC,KAAAoB,KAAAkM,GACAA,IAAA1R,EACA81C,EAAAtoB,IAAAsoB,EAAA1xC,KAAA/C,OAAA,EAEA,MAAAqQ,EAAA0N,YACAwhC,EAAAlvC,EAAA0N,YAIA,OADAwhC,GAAAt7C,GACAwwC,EAdA,OAAoC1xC,MAAAkB,GAAAkoB,IAAA,IAiBpCqzB,EAAA,SAAAx+C,EAAAL,GACA,OAAAZ,GAAA,EAAAkS,EAAAjR,EAAAhB,OAAyCD,EAAAkS,GACzCjR,EAAAjB,IAAAY,EADgDZ,KAGhDA,EAAAiB,EAAAhB,QAAAgB,EAAAT,OAAAR,EAAA,IAEA0/C,EAAA,EAMAC,EAAA,SAAA/gD,EAAAyM,EAAAzK,GACA,GAAA0vC,GAAAoP,GAOA,OANA9gD,GAAAghD,KAAAhhD,EAAAghD,SACAhhD,EAAAghD,KAAAv0C,GAAAzM,EAAAghD,KAAAv0C,OAEAzM,EAAAghD,KAAAv0C,GAAAilC,GAAA1vC,EAEAA,EAAAi/C,QAAAvP,EACAA,GAEAwP,EAAA,SAAAlhD,EAAAyM,EAAAzK,GAGA,GAFAhC,EAAAghD,MAAAhhD,EAAAghD,KAAAv0C,UAAAzM,GAAAghD,KAAAv0C,GAAAzK,EAAAi/C,SAEAj/C,EAAAm/C,UAAA,CACA,OAAA//C,GAAA,EAA+BA,EAAAY,EAAAm/C,UAAA9/C,OAAyBD,IACxDggD,EAAAphD,EAAAgC,EAAAm/C,UAAA//C,GAAA,GAAAY,EAAAm/C,UAAA//C,GAAA,GAEAY,GAAAm/C,UAAA9/C,OAAA,EAGAW,EAAAq/C,aAAAr/C,EAAAq/C,eAEAC,EAAA,SAAAn2C,EAAAnL,EAAAgC,EAAAu/C,GACA,SAAAp2C,EAAA,MAAAnJ,EAEA,IAAA6B,GAAAsH,EAAAhK,MAAA,KACAqgD,EAAA,SAAAj+C,GACAi+C,EAAAP,QAAAj/C,EAAAi/C,OACA,IAAAvI,GAAA3P,EAAAxlC,GAAA+B,EAAAozC,EAEA+I,EAAAf,EAAAn9C,EAAAm1C,EAAA14C,EAAA,MAAAmL,EACA,QAAAs2C,EAAAj0B,IACA,OAAA9H,GAAA,EAA2CA,EAAA+7B,EAAAj0B,IAAkB9H,IAAA,CAC7DpgB,EAAAm8C,EAAAr9C,KAAAshB,EACA,QAAAtkB,GAAA,EAA+CA,EAAAyC,EAAAxC,OAAcD,IAC7D++C,EAAA76C,EAAAzB,EAAAzC,GAAApB,IACAgC,EAAAO,MAAA+C,EAAAhD,YAOA,OADAo/C,GAAA1/C,EAAAu/C,EAAAC,GACAA,GAOAE,EAAA,SAAA1/C,EAAAu/C,EAAAI,GACA3/C,EAAAm/C,UAAAn/C,EAAAm/C,cACAn/C,EAAAm/C,UAAA37C,MAAA+7C,EAAAI,KAEAC,EAAA,SAAA5hD,EAAAuhD,EAAAv/C,EAAAmJ,GACA,GAAA02C,GAAAC,EAAAP,GAAA,CACA,GAAAQ,GAAAT,EAAAn2C,EAAAnL,EAAAgC,EAAA8/C,EAAAP,GACAS,GAAAhiD,EAAA8hD,EAAAP,GAAAQ,EAAA//C,GAEA,UAAAu/C,GAAA,MAAAvhD,EAAAmsB,aAAA,aACAnsB,EAAA0gB,aAAA,gBAEAshC,EAAAhiD,EAAAuhD,EAAAD,EAAAn2C,EAAAnL,EAAAgC,EAAAu/C,GAAAv/C,IAEAigD,EAAA,SAAAjiD,EAAAuhD,EAAAv/C,EAAAmJ,GACA,SAAAnL,EAAAkiD,gBAAA,CACA,GAAA3P,GAAA,SAAAhvC,GACAvD,EAAAmiD,MAAAC,EAAA7+C,IAEA8uC,EAAA,SAAA9uC,GACAvD,EAAAqiD,MAAAD,EAAA7+C,IAEA++C,EAAA,SAAA/+C,GACA,GAAAvD,EAAAmiD,OAAAniD,EAAAqiD,OAAAriD,EAAAmiD,MAAA,KAAAniD,EAAAqiD,MAAA,IAAAriD,EAAAmiD,MAAA,KAAAniD,EAAAqiD,MAAA,GACA,OAAAjhD,GAAA,EAA2CA,EAAApB,EAAAkiD,gBAAA7gD,OAAgCD,IAC3EpB,EAAAkiD,gBAAA9gD,GAAAmB,MAAAwmC,EAAAxlC,QAGAq+C,GAAA5hD,EAAA,YAAAuyC,EAAApnC,GACAy2C,EAAA5hD,EAAA,UAAAqyC,EAAAlnC,GACAy2C,EAAA5hD,EAAA,QAAAsiD,EAAAn3C,GACAnL,EAAAkiD,mBAIAliD,EAAAkiD,gBAAA18C,KAAAxD,GAEAA,EAAAq/C,YAAA,WACAR,EAAA7gD,EAAAkiD,gBAAAlgD,KAGAugD,GACAC,KAAoBC,QAAA,EAAAC,KAAA,GACpBC,QAAuBF,QAAA,EAAAC,KAAA,GACvBE,aAA4BH,QAAA,EAAAC,KAAA,IAE5BG,EAAA,SAAAC,EAAAC,GACA,gBAAA/iD,EAAAuhD,EAAAv/C,EAAAmJ,GAGA,kBAAAo2C,GAAAyB,EACApB,EAAA5hD,EAAAuhD,EAAAv/C,EAAAmJ,OACA,CAMA,SAAAnL,EAAAijD,eAAA,CACA,GAAAC,GAAAljD,EAAAijD,gBACAT,OACAG,UACAC,eACArQ,MAAA,EACAmQ,KAAA,EACAS,kBAEA5Q,EAAA,SAAAhvC,GAEA,OADA+B,GAAAyjC,EAAAxlC,GAAAk+C,EAAAf,EAAAn9C,EAAA+B,EAAAtF,EAAA,MAAAmL,GAAAi4C,GAAA,EACA19B,EAAA,EAA+CA,EAAA+7B,EAAAj0B,IAAkB9H,IAAA,CACjE,GAAA09B,EAAA,MACA99C,GAAAm8C,EAAAr9C,KAAAshB,EACA,QAAAtkB,GAAA,EAAmDA,EAAA8hD,EAAAC,cAAA9hD,OAA6BD,IAChF,SAAA8hD,EAAAC,cAAA/hD,IAAA++C,EAAA76C,EAAA49C,EAAAC,cAAA/hD,GAAApB,GAAA,CACAkjD,EAAA3Q,MAAA,EACAjjC,WAAA+zC,EAAAP,GACAxzC,WAAAg0C,EAAAP,GACAK,GAAA,CACA,UAKA/Q,EAAA,SAAA9uC,GACA,GAAA2/C,EAAA3Q,KAAA,CACA,GAAAgR,GAAA9B,EAAAn8C,EAAAyjC,EAAAxlC,EACA2/C,GAAAR,MACA,IAAAc,GAAAC,EAAAlgD,EACA,QAAAmgD,KAAAnB,GACA,GAAAA,EAAAzgD,eAAA4hD,GAAA,CACA,GAAAh+B,GAAA68B,EAAAmB,EACA,IAAAh+B,EAAA+8B,UAAAe,IAAA,IAAA99B,EAAAg9B,MAAAh9B,EAAAg9B,OAAAQ,EAAAR,MACA,OAAAthD,GAAA,EAA+DA,EAAA8hD,EAAAQ,GAAAriD,OAAwBD,IAAA,CACvFqgD,EAAAf,EAAAn9C,EAAA+B,EAAAtF,EAAA,MAAAkjD,EAAAQ,GAAAtiD,GAAA,GACA,QAAAuiD,GAAA,EAAuEA,EAAAlC,EAAAj0B,IAAsBm2B,IAG7F,GAFAJ,EAAA9B,EAAAr9C,KAAAu/C,GAEA,MAAAT,EAAAQ,GAAAtiD,GAAA,IAAA++C,EAAAoD,EAAAL,EAAAQ,GAAAtiD,GAAA,GAAApB,GAAA,CACAkjD,EAAAQ,GAAAtiD,GAAA,GAAAmB,MAAAghD,GAAAhgD,GACA,YASA8/C,EAAA,WACAH,EAAA3Q,MAAA,GAEA+Q,EAAA,WACAJ,EAAAR,KAAA,EAGAd,GAAA5hD,EAAA,YAAAuyC,GACAqP,EAAA5hD,EAAA,UAAAqyC,GAGAryC,EAAAijD,eAAAE,cAAA39C,KAAA2F,GAEAnL,EAAAijD,eAAA1B,GAAA/7C,MAAAxD,EAAAmJ,IAEAnJ,EAAAq/C,YAAA,WACAR,EAAA7gD,EAAAijD,eAAA1B,GAAAv/C,OAKA4hD,EAAA,SAAAllD,EAAA6iD,EAAAvhD,EAAAsF,GACA,OAAAlE,KAAApB,GAAA6jD,QAAAnlD,GACAsB,EAAA6jD,QAAAnlD,GAAAoD,eAAAV,IACApB,EAAA6jD,QAAAnlD,GAAA0C,GAAAmB,MAAA+C,GAAAi8C,KAIAuC,EAAA,WACA,GAAAC,KACA,iBAAA/jD,EAAAuhD,EAAAv/C,EAAAmJ,GACA,IAAAnL,EAAA6jD,QAAA,CAGA7jD,EAAA6jD,SAAmCG,MAAA,EAAAC,cAAAC,aAEnC,IAAAF,GAAA,SAAAzgD,GACA,GAAAm1C,GAAA3P,EAAAxlC,IACA,MAAA4H,GAAAutC,GAAA14C,MAAA6jD,QAAAG,MAAA7D,EAAAzH,EAAAvtC,EAAAnL,KAAA,MAAA04C,EAAAmL,UAAAnL,EAAAmL,QAAAG,SACAJ,EAAA,aAAArgD,EAAAvD,EAAA04C,GACAA,EAAAmL,QAAAnL,EAAAmL,YACAnL,EAAAmL,QAAAG,MAAA,EACAD,EAAAv+C,KAAAkzC,KAGA5C,EAAA,SAAAvyC,GAIA,OAHAm1C,GAAA3P,EAAAxlC,GAGAnC,EAAA,EAA2CA,EAAA2iD,EAAA1iD,OAA2BD,IACtEs3C,GAAAqL,EAAA3iD,IAAA++C,EAAA58C,EAAA4gD,eAAA5gD,EAAA6gD,UAAA,IAAA1L,KACAA,EAAAmL,QAAAG,MAAA,EACAD,EAAAniD,OAAAR,EAAA,GACAwiD,EAAA,YAAArgD,EAAAvD,EAAA04C,IAKAsJ,GAAAhiD,EAAA,YAAAshD,EAAAn2C,EAAAnL,EAAAgkD,EAAA,aAAAA,GACAhC,EAAAhiD,EAAA,WAAAshD,EAAAn2C,EAAAnL,EAAA81C,EAAA,YAAAA,GAGA9zC,EAAAq/C,YAAA,iBACArhD,GAAA6jD,QAAAtC,GAAAv/C,EAAAi/C,UAGAF,EAAA/gD,EAAAuhD,EAAAv/C,GACAhC,EAAA6jD,QAAAtC,GAAAv/C,EAAAi/C,SAAAj/C,IAGA6/C,EAAA,gBAAA7hC,UAAAk0B,gBACA8O,EAAA,eAAAhjC,UAAAk0B,gBACA4N,GAAoBuC,UAAA,aAAAC,QAAA,WAAAC,UAAA,aAEpBC,EAAA,WACA,GAAAC,IAAA,CACA,mCAAAjhB,UAAAkhB,QAAA,CACA,GAAAC,GAAAnhB,UAAAC,SAEA,OADA,GAAArN,QAAA,8BACAgC,KAAAusB,KACAF,EAAA7jD,WAAAw1B,OAAAwuB,KAEA,MAAAH,MAEAI,EAAAL,GAAA,GAAAA,EAAA,EACAM,EAAA,SAAAvhD,EAAAwhD,GACA,SAAAxhD,EAAA,WACA,IAAAyhD,GAAAC,EAAA1hD,GAAAm1C,EAAAwM,EAAAF,EAAA,EACA,QAAAtM,EAAAqM,EAAA,KAAArM,EAAAqM,EAAA,OAEA3C,EAAA,SAAA7+C,GACA,aAAAA,GAAA,KACAshD,GACAthD,EAAA4hD,QAAAnlC,SAAAk0B,gBAAAkR,WAAA7hD,EAAA8hD,QAAArlC,SAAAk0B,gBAAAoR,WAGAR,EAAAvhD,EAAA,SAGAgiD,EAAA,SAAAhiD,GACA,MAAAuhD,GAAAvhD,EAAA,WAEAiiD,EAAA,SAAAjiD,GACA,MAAAuhD,GAAAvhD,EAAA,WAEA2hD,EAAA,SAAAzC,EAAA56B,GACA,MAAA46B,GAAAhhD,KAAAghD,EAAAhhD,KAAAomB,GAAA46B,EAAA56B,IAEAo9B,EAAA,SAAA1hD,GACA,MAAAA,GAAAk/C,SAAAl/C,EAAAk/C,QAAAphD,OAAA,EAAAkC,EAAAk/C,QACAl/C,EAAAkiD,gBAAAliD,EAAAkiD,eAAApkD,OAAA,EAAAkC,EAAAkiD,eACAliD,EAAAmiD,eAAAniD,EAAAmiD,cAAArkD,OAAA,EAAAkC,EAAAmiD,eACAniD,IAEAkgD,EAAA,SAAAlgD,GACA,MAAA0hD,GAAA1hD,GAAAlC,QAGA2gD,EAAA,SAAAhiD,EAAAtB,EAAAsD,EAAA2jD,GAGA,GAFA5E,EAAA/gD,EAAAtB,EAAAsD,GACA2jD,EAAA1E,QAAAj/C,EAAAi/C,QACAjhD,EAAAkqB,iBACAlqB,EAAAkqB,iBAAAxrB,EAAAsD,GAAA,OACA,IAAAhC,EAAA4lD,YAAA,CACA,GAAAxmD,GAAAV,EAAAsD,EAAAi/C,OACAjhD,GAAA,IAAAZ,GAAA4C,EAEAhC,EAAAZ,GAAA,WACAY,EAAA,IAAAZ,IAAAY,EAAA,IAAAZ,GAAA6gB,OAAAxT,QAEAzM,EAAA4lD,YAAA,KAAAlnD,EAAAsB,EAAAZ,MAGAgiD,EAAA,SAAAphD,EAAAtB,EAAAsD,GACA,MAAAA,GACA6jD,EAAA7lD,EAAA,WACA,GAAA8lD,GAAAvF,EAAA58C,KAGA,IAFAu9C,EAAA4E,EAAApnD,EAAAsD,GAEA,MAAAA,EAAAi/C,QACA,GAAA6E,EAAA17B,oBACA07B,EAAA17B,oBAAA1rB,EAAAsD,GAAA,GACA6/C,GAAAC,EAAApjD,IAAAonD,EAAA17B,oBAAA03B,EAAApjD,GAAAsD,GAAA,OAEA,IAAA2B,KAAAoiD,YAAA,CACA,GAAA3mD,GAAAV,EAAAsD,EAAAi/C,OACA6E,GAAA1mD,IAAA0mD,EAAAC,YAAA,KAAArnD,EAAAonD,EAAA1mD,IACA0mD,EAAA1mD,GAAA,KACA0mD,EAAA,IAAA1mD,GAAA,KAKA4C,EAAAgkD,gBACA5E,EAAAphD,EAAAgC,EAAAgkD,eAAA,GAAAhkD,EAAAgkD,eAAA,OAIAH,EAAA,SAAA7lD,EAAAgC,GACA,SAAAhC,EAAA,CAKAA,EAAA,mBAAAimD,SAAA,iBAAAjmD,GAAAo0B,KAAAp0B,KAAAo0B,KAAAp0B,GACA,gBAAAA,IAAA,MAAAA,EAAAwgB,SAAA,MAAAxgB,EAAAqB,OAAArB,EACA,gBAAAA,GAAAggB,SAAAsgC,iBAAAtgD,IACAA,EAEA,QAAAoB,GAAA,EAA2BA,EAAApB,EAAAqB,OAAgBD,IAC3CY,EAAAO,MAAAvC,EAAAoB,KAgBAg4B,GAAA8sB,OAAA,SAAAC,GACAA,OACA,IAAArD,GAAAqD,EAAArD,gBAAA,IACAC,EAAAoD,EAAApD,mBAAA,IACAqD,EAAA,GAAAtC,GACAuC,EAAA,GAAAxD,GAAAC,EAAAC,GACAuD,EAAAH,EAAAI,YACAC,EAAA,SAAAxmD,EAAAuhD,EAAAv/C,EAAAmJ,GACA,MAAAnJ,GACA6jD,EAAA7lD,EAAA,WACA,GAAA8lD,GAAAvF,EAAA58C,KACA2iD,IAAA,UAAA/E,EACAU,EAAA6D,EAAAvE,EAAAv/C,EAAAmJ,GACA,QAAAo2C,GAAA,WAAAA,GAAA,gBAAAA,EACA8E,EAAAP,EAAAvE,EAAAv/C,EAAAmJ,GAEA,eAAAo2C,GAAA,aAAAA,EACA6E,EAAAN,EAAAvE,EAAAv/C,EAAAmJ,GAEAy2C,EAAAkE,EAAAvE,EAAAv/C,EAAAmJ,KAWAxH,MAAApC,OAAA,SAAAmQ,GAeA,MAdAm0C,GAAAn0C,EAAA,WACA,GAAAo0C,GAAAvF,EAAA58C,KACA,IAAAmiD,EAAA9E,KACA,OAAAO,KAAAuE,GAAA9E,KACA,GAAA8E,EAAA9E,KAAAl/C,eAAAy/C,GACA,OAAAzpC,KAAAguC,GAAA9E,KAAAO,GACAuE,EAAA9E,KAAAO,GAAAz/C,eAAAgW,IACAspC,EAAA0E,EAAAvE,EAAAuE,EAAA9E,KAAAO,GAAAzpC,GAKAguC,GAAA1mC,YAAA0mC,EAAA1mC,WAAA+B,YAAA2kC,KAEAniD,MAcAA,KAAAwI,GAAA,SAAAuF,EAAAjF,EAAAtB,EAAAnJ,GACA,GAAA8jD,GAAAxjD,UAAA,GACA2Z,EAAA,GAAA3Z,UAAAjB,OAAAiB,UAAA,QACAinC,EAAAjnC,UAAA,GACA6mC,EAAA7mC,oBAAAjB,OAAA,EAGA,OADAmlD,GAAAV,EAAAvc,EAAAJ,EAAAltB,GACAtY,MAaAA,KAAA8iD,IAAA,SAAA/0C,EAAAjF,EAAAzK,GAEA,MADAo/C,GAAA1vC,EAAAjF,EAAAzK,GACA2B,MAaAA,KAAAgvB,QAAA,SAAAjhB,EAAAjF,EAAAi6C,EAAAC,GAEA,GAAAC,GAAA5D,IAAA,mBAAA6D,aAAA,MAAAH,KAAAtqC,cAAAyqC,YAEAC,EAAAjF,IAAAmB,GAAAlB,EAAAr1C,GAAAq1C,EAAAr1C,KACAs6C,IAAAlF,IAAAmB,GAAAlB,EAAAr1C,IAEAu6C,EAAA5E,EAAAsE,GAAAO,EAAA1B,EAAAmB,GAAAQ,EAAA1B,EAAAkB,EAoEA,OAnEAb,GAAAn0C,EAAA,WACA,GAAA6vC,GAAAuE,EAAAvF,EAAA58C,KACA+iD,OACAS,QAAAF,EAAA,GACAG,QAAAH,EAAA,GACA9B,QAAA+B,EAAA,GACA7B,QAAA6B,EAAA,GAGA,IAAAG,GAAA,SAAAC,GACAX,IAAAW,EAAAX,YAGAY,GACAC,WAAA,SAAAjG,GACA,GAAAkG,GAAAznC,SAAA0nC,YAAAznC,OAAA6lC,EAAA,EAAAkB,EAAA,GAAAA,EAAA,GACAC,EAAA,GAAAA,EAAA,GACAC,EAAA,GAAAA,EAAA,GACA,SAGAzE,EAAAziC,SAAA2nC,gBAAAF,GACA/B,EAAA1lC,SAAA2nC,gBAAAF,GACAhC,EAAAzlC,SAAA2nC,gBAAAF,EACAlG,GAAAqG,eAAAd,GAAA,KAAA7mC,OAAA,KAAAgnC,EAAA,GAAAA,EAAA,GACAC,EAAA,GAAAA,EAAA,eACAzE,EAAAiD,EAAAD,EAAA,MAEAoC,YAAA,SAAAtG,GAMA,GALAA,EAAAuG,eAAAhB,GAAA,KAAA7mC,OAAA,EACAgnC,EAAA,GAAAA,EAAA,GACAC,EAAA,GAAAA,EAAA,IACA,aAAApB,GAEA7F,EAAAC,QAAA,CAEA,GAAAxH,GAAA14B,SAAA0nC,YAAAznC,OAAA6lC,EAAA,EAAAkB,EAAA,GAAAA,EAAA,GACAC,EAAA,GAAAA,EAAA,GACAC,EAAA,GAAAA,EAAA,GACA,QAEA3F,GAAAkB,QAAAlB,EAAAmE,cAAAnE,EAAAkE,eAAAzlC,SAAA2nC,gBAAAjP,KAKA,IAAA14B,SAAA4S,YAAA,CAEA,GAAAm1B,IAAAhB,IAAAH,GAAA/E,GAAAC,EAAAr1C,KAAAwzC,EAAAC,QACA8H,EAAAD,EAAA,0BAEAxG,GAAAvhC,SAAA4S,YAAAo1B,GACAT,EAAAS,GAAAzG,GACA8F,EAAA9F,GACAuE,EAAAhzB,cAAAyuB,OAEAvhC,UAAAioC,oBACA1G,EAAAvhC,SAAAioC,oBACA1G,EAAA2G,UAAA3G,EAAA4G,UAAArB,EACAvF,EAAA4F,QAAAF,EAAA,GACA1F,EAAA6F,QAAAH,EAAA,GACA1F,EAAA4D,QAAA+B,EAAA,GACA3F,EAAA8D,QAAA6B,EAAA,GACAG,EAAA9F,GACAuE,EAAAsC,UAAA,KAAAtB,EAAAvF,MAGA59C,OAWAy1B,EAAA8sB,OAAAmC,QAAA,SAAA9kD,EAAA+kD,GACA/kD,EAAAglD,gBACAhlD,EAAAglD,kBAEAhlD,EAAAilD,aAAA,GAEAF,GAAA/kD,EAAAklD,gBACAllD,EAAAklD,kBASArvB,EAAA8sB,OAAAwC,aAAAtG,EAQAhpB,EAAA8sB,OAAAyC,oBAAA,SAAA7oD,GACA+hD,EAAA/hD,GASAs5B,EAAA8sB,OAAA0C,oBAAA,SAAA9oD,GACAkjD,EAAAljD,GAGAs5B,EAAA8sB,OAAAjoD,QAAA,QAGAP,EAAAwoD,OAAA9sB,EAAA8sB,QAGC/lD,KAAA,mBAAA8f,QAAAtc,KAAAsc,QA8BA,WAED,YACA,IAAAmZ,GAAAz1B,KAEAklD,EAAA,SAAA3nD,EAAAO,EAAAqnD,GACA,WAAA5nD,EAAAS,QAAAF,KACAqnD,EAAA5nD,EAAAuc,QAAAhc,GAAAP,EAAAsE,KAAA/D,IACA,IAKAsnD,EAAA,SAAA7nD,EAAAO,GACA,GAAAomB,GAAA3mB,EAAAS,QAAAF,IACA,GAAAomB,GAAA3mB,EAAAU,OAAAimB,EAAA,IAGAmhC,EAAA,SAAAC,EAAAC,GAEA,OADAnxC,MACA3W,EAAA,EAAuBA,EAAA6nD,EAAA5nD,OAAeD,KACtC,GAAA8nD,EAAAvnD,QAAAsnD,EAAA7nD,KACA2W,EAAAvS,KAAAyjD,EAAA7nD,GAEA,OAAA2W,IAGAoxC,EAAA,SAAA3U,GACA,aAAAA,IAAA,gBAAAA,MAAAp4B,aAAA3b,SAGA2oD,EAAA,SAAAC,GAEA,GAAAC,GAAAD,EAAAx1B,wBACAid,EAAA9wB,SAAA8wB,KACAyY,EAAAvpC,SAAAk0B,gBAEAoR,EAAArlC,OAAAupC,aAAAD,EAAAjE,WAAAxU,EAAAwU,UACAF,EAAAnlC,OAAAwpC,aAAAF,EAAAnE,YAAAtU,EAAAsU,WAEAsE,EAAAH,EAAAG,WAAA5Y,EAAA4Y,WAAA,EACAC,EAAAJ,EAAAI,YAAA7Y,EAAA6Y,YAAA,EAEAv1B,EAAAk1B,EAAAl1B,IAAAkxB,EAAAoE,EACAx1B,EAAAo1B,EAAAp1B,KAAAkxB,EAAAuE,CAEA,QAAgBv1B,IAAA5sB,KAAAoiD,MAAAx1B,GAAAF,KAAA1sB,KAAAoiD,MAAA11B,KAGhBisB,EAAA,SAAAzuC,EAAA0uC,EAAAj+C,GACAA,KAAAuP,EAAA0N,UAEA,QADAihC,GAAAl+C,EAAAm+C,iBAAAF,GACAh/C,EAAA,EAAuBA,EAAAi/C,EAAAh/C,OAAsBD,IAC7C,GAAAi/C,EAAAj/C,KAAAsQ,EACA,QAEA,WAGA8yC,EAAA,WACA,GAAAC,IAAA,CACA,mCAAAjhB,UAAAkhB,QAAA,CACA,GAAAC,GAAAnhB,UAAAC,SAEA,OADA,GAAArN,QAAA,8BACAgC,KAAAusB,KACAF,EAAA7jD,WAAAw1B,OAAAwuB,KAEA,MAAAH,MAIAI,EAAAL,GAAA,GAAAA,EAAA,EACA7gC,EAAA,GAAA6gC,EACAqF,EAAA,SAAAtmD,GACA,GAAAshD,EACA,OAAAthD,EAAA4hD,QAAAnlC,SAAAk0B,gBAAAkR,WAAA7hD,EAAA8hD,QAAArlC,SAAAk0B,gBAAAoR,UAGA,IAAAN,GAAAC,EAAA1hD,GAAAm1C,EAAAwM,EAAAF,EAAA,EAGA,OAAArhC,IAAA+0B,EAAAoR,OAAApR,EAAAyM,QAAAzM,EAAAqR,OAAArR,EAAA2M,UAAA3M,EAAAoR,MAAApR,EAAAqR,QAGA7E,EAAA,SAAAzC,EAAA56B,GAA4C,MAAA46B,GAAAhhD,KAAAghD,EAAAhhD,KAAAomB,GAAA46B,EAAA56B,IAC5Co9B,EAAA,SAAA1hD,GACA,MAAAA,GAAAk/C,SAAAl/C,EAAAk/C,QAAAphD,OAAA,EAAAkC,EAAAk/C,QACAl/C,EAAAkiD,gBAAAliD,EAAAkiD,eAAApkD,OAAA,EAAAkC,EAAAkiD,eACAliD,EAAAmiD,eAAAniD,EAAAmiD,cAAArkD,OAAA,EAAAkC,EAAAmiD,eACAniD,IAEAymD,GACAC,UAAA,sBACAC,UAAA,sBACAC,KAAA,iBACA9pC,SAAA,0BACAsmB,OAAA,wBACAyjB,MAAA,uBACAC,SAAA,2BACAC,WAAA,yBAGA56C,GAAA,yDACA66C,EAAA,aACAC,EAAA,WAA4B,UAC5BC,EAAA,SAAApoD,EAAAL,EAAA4F,GACA,OAAAxG,GAAA,EAA2BA,EAAAiB,EAAAhB,OAAcD,IACzCiB,EAAAjB,IAAAwG,GACA5F,EAAAK,EAAAjB,KAGAspD,EAAA,SAAAC,EAAArqD,EAAAsqD,EAAAT,GACAM,EAAAE,EAAA,SAAApnD,GACAA,EAAAsnD,UAAAvqD,GACAA,GAAAiD,EAAAunD,iBACAF,GAAArnD,EAAAwnD,SAAAZ,EAAA7pD,MAGAulD,EAAA,SAAA7lD,EAAAgC,GACA,SAAAhC,EAAA,CACAA,EAAAmpD,EAAAnpD,IAAA,MAAAA,EAAAwgB,SAAA,MAAAxgB,EAAAqB,QAAArB,IACA,QAAAoB,GAAA,EAA2BA,EAAApB,EAAAqB,OAAgBD,IAC3CY,EAAAO,MAAAvC,EAAAoB,IAAApB,EAAAoB,OAEA4pD,EAAA,SAAAznD,GACAA,EAAAglD,iBACAhlD,EAAAglD,kBACAhlD,EAAAklD,kBAGAllD,EAAAilD,aAAA,GAMAyC,EAAA,SAAA1nD,EAAAmO,EAAAw5C,GACA,GAAAxS,GAAAn1C,EAAAk9C,YAAAl9C,EAAA+B,MACA,QAAA66C,EAAAzH,EAAAwS,EAAAC,yBAAAz5C,IAGAoM,EAAA,SAAApM,EAAAy0C,EAAA15B,EAAAwU,GACAt9B,KAAAwiD,aACAxiD,KAAA+N,KACA/N,KAAAwiD,OAAAl6B,SAAAtoB,KAAA+N,GAAA/N,KAAAynD,QACAznD,KAAA0nD,KAAAC,GACA,IAAAC,IAAA,CAiCA,OAhCA5nD,MAAA6nD,WAAA,SAAAjoD,GAAuCgoD,EAAAhoD,GACvCI,KAAA8nD,UAAA,WAAqC,MAAAF,IACrC5nD,KAAA+nD,cAAA,WAAyCH,MACzC5nD,KAAA6oC,SAAA,SAAAmf,GACAhoD,KAAAgoD,WAAAxqD,MAAA,QAAA8/B,IAEAt9B,KAAAioD,SAAA,SAAAD,GACA,GAAAzlC,KACA2/B,GAAAliD,KAAAgoD,OAAA,SAAAh9B,GAA4CzI,EAAAyI,IAAA,IAC5Ck3B,EAAA8F,IAAAxqD,MAAA,mBAAAwtB,GAAkEzI,EAAAyI,IAAA,IAClEhrB,KAAAgoD,SACA,QAAAvqD,KAAA8kB,GAAAviB,KAAAgoD,OAAAnmD,KAAApE,IAEAuC,KAAAkoD,YAAA,SAAAF,GACA,GAAAzlC,KACA2/B,GAAAliD,KAAAgoD,OAAA,SAAAh9B,GAA4CzI,EAAAyI,IAAA,IAC5Ck3B,EAAA8F,IAAAxqD,MAAA,mBAAAwtB,SAAkEzI,GAAAyI,KAClEhrB,KAAAgoD,SACA,QAAAvqD,KAAA8kB,GAAAviB,KAAAgoD,OAAAnmD,KAAApE,IAEAuC,KAAAmoD,YAAA,SAAAH,GACA,GAAAzlC,KACA2/B,GAAAliD,KAAAgoD,OAAA,SAAAh9B,GAA4CzI,EAAAyI,IAAA,IAC5Ck3B,EAAA8F,IAAAxqD,MAAA,mBAAAwtB,GACAzI,EAAAyI,SAAAzI,GAAAyI,GACAzI,EAAAyI,IAAA,IAEAhrB,KAAAgoD,SACA,QAAAvqD,KAAA8kB,GAAAviB,KAAAgoD,OAAAnmD,KAAApE,IAEAuC,KAAA6oC,SAAA2Z,EAAAllB,OACAt9B,KAAA01C,EAAA8M,EAAA4F,UACA5F,EAAA4F,WAGAC,EAAA,WAA2B,UAC3BC,EAAA,WAA4B,UAE5BC,EAAA,SAAAx6C,EAAAy0C,EAAA15B,EAAAwU,GACAt9B,KAAAynD,OAAA3+B,EAAAw9B,SACA,IAAA5Q,GAAAv7B,EAAAvb,MAAAoB,KAAArB,UACAqB,MAAAwoD,mBAAAxoD,KAAAwiD,OAAAgG,kBACA,IAAAC,IAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,GAAA,KAAAC,GAAA,EACAC,GAAA,IAAA9oD,KAAAwiD,OAAAsG,kBACAC,EAAA/oD,KAAA+N,GACAw/B,EAAAvtC,KAAAwiD,OAAAjV,MAEAyb,GADAhpD,KAAAwiD,OAAAyG,QACA,IAAAzG,EAAA0G,cACAC,GAAA,EACAC,GAAA,IAAA5G,EAAAmE,WAAA0B,EAAA7F,EAAAmE,YAAA,kBAAAnE,GAAAmE,WAAAnE,EAAAmE,WAAA2B,EACA3B,EAAA,SAAA54C,GAAuC,MAAAA,GAAAgxB,WAAA,IAEvCsqB,EAAA7G,EAAA6G,eAAA,EACAC,EAAA,SAAAj5B,EAAAojB,EAAAK,EAAAyV,EAAAC,GACAD,KAAAF,EACAG,KAAAH,CACA,IAAAI,GAAA5lD,KAAA6lD,MAAAr5B,EAAA,GAAAojB,GACAkW,EAAAlW,EAAAgW,EACAG,EAAAD,EAAAlW,EACA8E,EAAA10C,KAAAo1C,IAAA5oB,EAAA,GAAAs5B,IAAAJ,EAAAI,EAAA9lD,KAAAo1C,IAAA2Q,EAAAv5B,EAAA,KAAAk5B,EAAAK,EAAAv5B,EAAA,GAEAw5B,EAAAhmD,KAAA6lD,MAAAr5B,EAAA,GAAAyjB,GACAgW,EAAAhW,EAAA+V,EACAE,EAAAD,EAAAhW,CAGA,QAAAyE,EAFA10C,KAAAo1C,IAAA5oB,EAAA,GAAAy5B,IAAAN,EAAAM,EAAAjmD,KAAAo1C,IAAA8Q,EAAA15B,EAAA,KAAAm5B,EAAAO,EAAA15B,EAAA,IAKArwB,MAAAgqD,UACAhqD,KAAAiqD,cAEAjqD,KAAAkqD,OAAA,SAAA75B,GACA,aAAArwB,KAAAwiD,OAAA2H,KACA95B,EAGAi5B,EAAAj5B,EAAArwB,KAAAwiD,OAAA2H,KAAA,GAAAnqD,KAAAwiD,OAAA2H,KAAA,KAIAnqD,KAAAoqD,KAAA,SAAA3W,EAAAK,GACA,SAAAiV,EAAA,CACAtV,MAAAzzC,KAAAwiD,OAAA2H,KAAAnqD,KAAAwiD,OAAA2H,KAAA,GAjKA,IAkKArW,MAAA9zC,KAAAwiD,OAAA2H,KAAAnqD,KAAAwiD,OAAA2H,KAAA,GAjKA,GAkKA,IAAApoC,GAAA/hB,KAAAwiD,OAAA6H,YAAAtB,EACA/oD,MAAAwiD,OAAA8H,YAAAvB,EAAAO,EAAAvnC,EAAA0xB,EAAAK,EAAAL,EAAAK,MAGA9zC,KAAAuqD,iBAAA,SAAA5tD,GACAysD,EAAAzsD,EAAA0rD,EAAAC,EAGA,IAAAkC,GACAC,EAAA,SAAAp6B,GACA,WAAAmyB,EAAAkI,eAAA7mD,KAAAC,IAAA,EAAAusB,EAAA,IAAAxsB,KAAAC,IAAA,EAAAusB,EAAA,KAAAA,GAGAs6B,EAAA,SAAAxuD,GACAquD,EAAA,kBAAAruD,OAAA,SAAAk0B,GACA,MAAAo6B,IACA5mD,KAAAC,IAAA,EAAAD,KAAAgyC,IAAA+U,EAAApW,EAAAx0C,KAAA6qD,KAAA,GAAAx6B,EAAA,KACAxsB,KAAAC,IAAA,EAAAD,KAAAgyC,IAAA+U,EAAAz2C,EAAAnU,KAAA6qD,KAAA,GAAAx6B,EAAA,QAEa9xB,KAAAyB,MAAA,SAAAqwB,GAA6B,MAAAo6B,GAAAp6B,KACjC9xB,KAAAyB,KAET2qD,GAAA,kBAAA3qD,MAAAwiD,OAAAgI,UAAAxqD,KAAAwiD,OAAAgI,UAAAxqD,KAAAwiD,OAAAgI,WAAAxqD,KAAAwiD,OAAAsI,aAQA9qD,KAAA+qD,aAAA,SAAA5uD,GACAwuD,EAAAxuD,GAGA,IAAA6uD,EAMAhrD,MAAAirD,UAAA,SAAA5sD,GACA2sD,EAAA3sD,EAGA,IAAA6sD,GAAA,SAAA7uD,GACA,wBAAAA,IACAA,EAAA8uD,aAAAxD,IACAtrD,EAAA8uD,cAEA9uD,GAIA+uD,KACAC,EAAA,SAAAzrD,GACA,OAAAnE,KAAA2vD,GAAA,CACA,GAAAva,GAAAua,EAAA3vD,GACAqlD,EAAAjQ,EAAA,GAAAjxC,EAEA,IADAixC,EAAA,KAAAiQ,OACAA,EAAA,SAEA,UAEAwK,EAAAtrD,KAAAurD,UAAA,SAAA1a,EAAA2a,GACA,GAAA3a,EAAA,CACA,GAAAp1C,GAAAyvD,EAAAra,EACAua,GAAA3vD,IACA,SAAAmE,GACA,GAAA2iB,GAAAwyB,EAAAn1C,EAAAk9C,YAAAl9C,EAAA+B,MAOA,OANA6jD,GAAA3U,GACAtuB,EAAAi6B,EAAAzH,EAAAlE,EAAA9iC,GAEA,kBAAA8iC,KACAtuB,EAAAsuB,EAAAjxC,EAAAmO,IAEAwU,IAEA,IAAAipC,IAKAxrD,MAAAyrD,UAAAH,EACAtrD,KAAA0rD,aAAA,SAAA7a,GACA,GAAAp1C,GAAA,kBAAAo1C,KAAAsa,aAAAta,QACAua,GAAA3vD,GAGAuE,MAAA2rD,gBAAA,WACAP,MAGAprD,KAAA4rD,QAAA5rD,KAAAwiD,OAAAoJ,SAAA/E,CAEA,IAAA+D,GACAiB,KAAAC,IAEA9rD,MAAA+rD,aAAA,SAAAnsD,GAEA,IADAI,KAAAwoD,oBAAA,IAAA5oD,EAAAosD,OAAA,IAAApsD,EAAAqsD,SACAjsD,KAAA8nD,aAAA9nD,KAAA4rD,UAEA,GADAP,EAAAzrD,IAAA0nD,EAAA1nD,EAAAI,KAAA+N,GAAA/N,KAAA01C,GACA,CACA,GAAAnI,EAEA,CACAwb,EAAA/oD,KAAA+N,GAAAgxB,WAAA,GACAgqB,EAAAhsC,aAAA,WACAgsC,EAAAxhC,MAAA2kC,SAAA,UAGA,IAAAzsD,GAAAgmD,EAAAzlD,KAAA+N,GACAg7C,GAAAxhC,MAAAgJ,KAAA9wB,EAAA8wB,KAAA,KACAw4B,EAAAxhC,MAAAkJ,IAAAhxB,EAAAgxB,IAAA,KACApU,SAAA8wB,KAAA1vB,YAAAsrC,OAVAA,GAAA/oD,KAAA+N,EAYA+6C,IAAAzB,EAAAznD,GACA6oD,EAAAvC,EAAAtmD,GAEAI,KAAAwiD,OAAAjkD,KAAA8d,SAAA,YAAArc,KAAAmsD,cACAnsD,KAAAwiD,OAAAjkD,KAAA8d,SAAA,UAAArc,KAAAosD,YACA1W,EAAA2W,cAAArsD,MACA01C,EAAA4W,WAAAtsD,MACAA,KAAAwiD,OAAAl6B,SAAAjM,SAAA8wB,KAAArkB,EAAA49B,UACA6F,EAAA,eAA8Cx+C,GAAA/N,KAAA+N,GAAAsiB,IAAAq4B,EAAA9oD,IAAA4mD,KAAAxmD,WAE9CA,MAAAwiD,OAAAgK,uBACAnF,EAAAznD,IAGSrB,KAAAyB,MAETA,KAAAmsD,aAAA,SAAAvsD,GACA,GAAA6oD,EAAA,CACA,IAAAI,EAAA,CAEA,QADA0D,EAAA,SAAwDx+C,GAAA/N,KAAA+N,GAAAsiB,IAAAq4B,EAAA9oD,IAAA4mD,KAAAxmD,OACxD,CACA,IAAAyoD,EAAA,MACAzoD,MAAAysD,MAAA,GACA5D,GAAA,GAMA,GAAAJ,EAAA,CACAqD,EAAApuD,OAAA,CACA,IAAA2yB,GAAA61B,EAAAtmD,GAAA0wB,EAAAD,EAAA,GAAAo4B,EAAA,GAAAj4B,EAAAH,EAAA,GAAAo4B,EAAA,GACAlT,EAAAv1C,KAAAwiD,OAAAkK,WAAA,EAAAhX,EAAAiX,SACAr8B,IAAAilB,EACA/kB,GAAA+kB,EACAv1C,KAAA4sD,OAAAt8B,EAAAE,EAAA5wB,GACA81C,EAAAmX,gBAAAv8B,EAAAE,EAAAxwB,MACA01C,EAAAoX,aAAAx8B,EAAAE,EAAAxwB,SAGSzB,KAAAyB,MAETA,KAAAosD,WAAA,SAAAxsD,GACA6oD,IACAA,EAAA,KACAzoD,KAAAwiD,OAAAxW,OAAA3vB,SAAA,YAAArc,KAAAmsD,cACAnsD,KAAAwiD,OAAAxW,OAAA3vB,SAAA,UAAArc,KAAAosD,YACApsD,KAAAwiD,OAAA/5B,YAAApM,SAAA8wB,KAAArkB,EAAA49B,UACA1mD,KAAA+sD,OAAAntD,GACA81C,EAAAsX,gBAAAhtD,KAAAJ,GACA81C,EAAAuX,aAAAjtD,KAAAJ,GACAI,KAAA8uC,KAAAlvC,GACA81C,EAAAwX,wBAAAltD,KAAAJ,GACA81C,EAAAyX,oBAAAntD,KAAAJ,GACAipD,GAAA,EACAtb,IACAwb,KAAAttC,YAAAstC,EAAAttC,WAAA+B,YAAAurC,GACAA,EAAA,MAGA+C,EAAApuD,OAAA,EAEAstD,IAAA,IAAAA,EAAAhrD,KAAA+N,GAAA/N,KAAAwiD,OAAA6H,YAAArqD,KAAA+N,OACA/N,KAAAwiD,OAAA8H,YAAAtqD,KAAA+N,GAAA26C,GACA6D,EAAA,SAAAvsD,KAAA+N,OAGSxP,KAAAyB,MAETA,KAAAotD,WAAA,WAAsC,MAAAhC,IAEtCprD,KAAAqtD,MAAA,WACA,MAAA5E,GACAzoD,KAAAosD,cAGApsD,KAAAstD,eAAA,WACA,MAAAvE,IAAA/oD,KAAA+N,GAGA,IAAA9B,IAAyBlN,SAAAynD,QAAA1X,QAAAuR,QAAAlO,OAAAob,eAAAC,UACzBhL,GAAAx/B,OAAAjkB,OAAAkN,EAAAlN,MAAA8C,KAAA2gD,EAAAx/B,OAAAjkB,OACAyjD,EAAAx/B,OAAAuqC,aAAAthD,EAAAshD,YAAA1rD,KAAA2gD,EAAAx/B,OAAAuqC,aACA/K,EAAAx/B,OAAA8rB,MAAA7iC,EAAA6iC,KAAAjtC,KAAA2gD,EAAAx/B,OAAA8rB,MACA0T,EAAAx/B,OAAAwjC,MAAAv6C,EAAAu6C,KAAA3kD,KAAA2gD,EAAAx/B,OAAAwjC,MACAhE,EAAAx/B,OAAAwqC,QAAAvhD,EAAAuhD,OAAA3rD,KAAA2gD,EAAAx/B,OAAAwqC,QAEAxtD,KAAAwI,GAAA,SAAAo1C,EAAAv/C,GACA4N,EAAA2xC,IAAA3xC,EAAA2xC,GAAA/7C,KAAAxD,IAGA2B,KAAA8iD,IAAA,SAAAlF,EAAAv/C,GACA,GAAA4N,EAAA2xC,GAAA,CAEA,OADAl/C,MACAjB,EAAA,EAA+BA,EAAAwO,EAAA2xC,GAAAlgD,OAA2BD,IAC1DwO,EAAA2xC,GAAAngD,KAAAY,GAAAK,EAAAmD,KAAAoK,EAAA2xC,GAAAngD,GAEAwO,GAAA2xC,GAAAl/C,GAIA,IAAA6tD,GAAA,SAAA3O,EAAAzhD,GACA,GAAA8P,EAAA2xC,GACA,OAAAngD,GAAA,EAA+BA,EAAAwO,EAAA2xC,GAAAlgD,OAA2BD,IAC1D,IACAwO,EAAA2xC,GAAAngD,GAAAtB,GAEA,MAAAyD,KAKAI,MAAAytD,YAAA,SAAA7tD,GACA2sD,EAAA,SAAgCx+C,GAAA/N,KAAA+N,GAAAsiB,IAAArwB,KAAAwiD,OAAA6H,YAAAtB,GAAAnpD,IAAA4mD,KAAAxmD,QAGhCA,KAAA8uC,KAAA,SAAAlvC,EAAA8tD,GACA,GAAAA,GAAA7E,EAAA,CACA,GAAA8E,MACAC,EAAAlY,EAAAmY,eACAC,EAAA9tD,KAAAwiD,OAAA6H,YAAAtB,EAEA,IAAA6E,EAAAlwD,OAAA,EACA,OAAAD,GAAA,EAAmCA,EAAAmwD,EAAAlwD,OAAgBD,IAAA,CACnD,GAAAskB,GAAA/hB,KAAAwiD,OAAA6H,YAAAuD,EAAAnwD,GAAAsQ,GACA4/C,GAAA9rD,MAAA+rD,EAAAnwD,GAAAsQ,IAAqDwiB,KAAAxO,EAAA,GAAA0O,IAAA1O,EAAA,IAAwB6rC,EAAAnwD,SAI7EkwD,GAAA9rD,MAAAknD,GAA8Cx4B,KAAAu9B,EAAA,GAAAr9B,IAAAq9B,EAAA,IAA0B9tD,MAGxEusD,GAAA,QACAx+C,GAAAg7C,EACA14B,IAAA09B,GAAAD,EACAE,SAAAF,EACAluD,IACA4mD,KAAAxmD,KACAiuD,UAAAN,MAKA3tD,KAAAysD,KAAA,SAAAyB,GACAxF,EAAA1oD,KAAAwiD,OAAA6H,YAAAtB,GACAJ,EAAA3oD,KAAAwiD,OAAA6H,YAAAtB,GAAA,GACAH,GAAAD,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,IACA1oD,KAAA6qD,KAAA7qD,KAAAwiD,OAAA2L,QAAApF,GACA8C,EAAAnW,EAAA0Y,sBAAApuD,MACA+mD,EAAA8E,GAAA,KAAA7rD,MACAA,KAAAwiD,OAAAl6B,SAAAygC,EAAA/oD,KAAAwiD,OAAA6L,WAAAvlC,EAAA09B,KAEA,IAAA8H,GAAAtuD,KAAAwiD,OAAA2L,QAAApF,EAAAttC,WACAmvC,IAA6BpW,EAAA8Z,EAAA,GAAAn6C,EAAAm6C,EAAA,IAE7BJ,GACAxY,EAAA6Y,yBAAAvuD,MAGA,IAAA+tD,EACA/tD,MAAA+sD,OAAA,SAAAntD,EAAA4uD,GAgBA,GAfAzH,EAAA8E,GAAA,KAAA7rD,MAGAmpD,GAAAC,EAAAppD,KAAA+N,KACAggD,GAAAhF,EAAA0F,WAAA1F,EAAA2F,WACA1uD,KAAA+N,GAAA0N,WAAA+B,YAAAurC,GACAA,EAAA/oD,KAAA+N,IAGAggD,EAAA,KAGA/tD,KAAAwiD,OAAA/5B,YAAAsgC,EAAA/oD,KAAAwiD,OAAA6L,WAAAvlC,EAAA09B,MACAqF,EAAAnuD,OAAA,EACAyrD,GAAA,GACAqF,EAAA,CACA1C,EAAApuD,OAAA,GAAAqwD,GACAvL,EAAA8H,YAAAtqD,KAAA+N,GAAAggD,GAEAjC,EAAAz7C,KAAAs+C,EACA,QAAAlxD,GAAA,EAA+BA,EAAAquD,EAAApuD,OAAmCD,IAAA,CAElE,QADAquD,EAAAruD,GAAAmxD,KAAA5uD,KAAAJ,GACA,SAIAI,KAAA4sD,OAAA,SAAAt8B,EAAAE,EAAA5wB,GACAksD,EAAApuD,OAAA,CACA,IAAAmxD,GAAA7uD,KAAAkqD,QAAAxB,EAAA,GAAAp4B,EAAAo4B,EAAA,GAAAl4B,IACAs+B,EAAAtE,EAAAqE,EAAA9F,EAEA,IAAAK,EAAAppD,KAAA+N,IACA,GAAA8gD,EAAA,IAAAC,EAAA,IAAAD,EAAA,IAAAC,EAAA,IACA,IAAA3F,EAAA,CACA,GAAA4F,GAAApI,EAAA3mD,KAAA+N,GACAy0C,GAAAl6B,SAAAymC,EAAA1I,EAAAM,YACA3mD,KAAA+N,GAAA0N,WAAAgC,YAAAsxC,GACAhG,EAAAgG,EACA5F,GAAA,EAEA2F,EAAAD,MAGA1F,KACAnpD,KAAA+N,GAAA0N,WAAA+B,YAAAurC,GACAA,EAAA/oD,KAAA+N,GACAo7C,GAAA,EAKA,IAAA6F,IAAwBvb,EAAAqb,EAAA,GAAAhb,EAAAgb,EAAA,GAAAta,EAAAx0C,KAAA6qD,KAAA,GAAA12C,EAAAnU,KAAA6qD,KAAA,IACxBoE,GAA4Bxb,EAAAub,EAAAvb,EAAAmV,EAAA,GAAA9U,EAAAkb,EAAAlb,EAAA8U,EAAA,GAAApU,EAAAwa,EAAAxa,EAAArgC,EAAA66C,EAAA76C,GAC5B+6C,EAAA,IAIAlvD,MAAAwiD,OAAA8H,YAAAvB,EAAA+F,EACA,QAAArxD,GAAA,EAA2BA,EAAAouD,EAAAnuD,OAA+BD,IAAA,CAC1D,GAAA69C,IAA0B7H,EAAAoY,EAAApuD,GAAA0xD,aAAA,GAAArb,EAAA+X,EAAApuD,GAAA0xD,aAAA,GAAA3a,EAAAqX,EAAApuD,GAAAotD,KAAA,GAAA12C,EAAA03C,EAAApuD,GAAAotD,KAAA,GAC1B7qD,MAAAwiD,OAAApH,WAAA6T,EAAA3T,KAAA0N,GAAA,MAAAkG,MAAArD,EAAApuD,GAAAsQ,KAAA89C,EAAApuD,GAAA2xD,QAAApvD,OACAkvD,MAAArD,EAAApuD,GAAAsQ,IACA+9C,EAAAjqD,KAAAgqD,EAAApuD,IACAouD,EAAApuD,GAAA2pD,SAAApnD,MAAA,EAAAJ,IAEAisD,EAAApuD,GAAA4xD,WACAxD,EAAApuD,GAAA2pD,SAAApnD,MAAA,EAAAJ,GAIA2sD,EAAA,QAA+Bx+C,GAAA/N,KAAA+N,GAAAsiB,IAAAy+B,EAAAlvD,IAAA4mD,KAAAxmD,QAQ/BA,KAAA+jC,QAAA,WACA/jC,KAAAwiD,OAAAxW,OAAAhsC,KAAA+N,GAAA,YAAA/N,KAAA+rD,cACA/rD,KAAAwiD,OAAAxW,OAAA3vB,SAAA,YAAArc,KAAAmsD,cACAnsD,KAAAwiD,OAAAxW,OAAA3vB,SAAA,UAAArc,KAAAosD,YACApsD,KAAA+rD,aAAA,KACA/rD,KAAAosD,WAAA,KACApsD,KAAAmsD,aAAA,MAIAnsD,KAAAwiD,OAAAjkD,KAAAyB,KAAA+N,GAAA,YAAA/N,KAAA+rD,cAKA/rD,KAAAwiD,OAAA8M,OACAhE,EAAAtrD,KAAAwiD,OAAA8M,QAAA,GAEAhE,EAAAtrD,KAAAwiD,OAAArnC,OAAAnb,KAAAwiD,OAAA+M,gBAGAC,EAAA,SAAAzhD,EAAAy0C,EAAA15B,EAAAwU,GACAt9B,KAAAynD,OAAA3+B,EAAAy9B,UACAvmD,KAAAwiD,aACAxiD,KAAAyvD,KAAAjN,EAAAiN,MAAA,EACAzvD,KAAA0vD,aAAA1vD,KAAAwiD,OAAA51B,aAAA9D,EAAAka,OACAhjC,KAAA2vD,YAAA3vD,KAAAwiD,OAAAoN,YAAA9mC,EAAA29B,MACAtsC,EAAAvb,MAAAoB,KAAArB,UACA,IAAA8nD,IAAA,CACAzmD,MAAA6vD,eAAA,IAAA7vD,KAAAwiD,OAAAqN,cAEA7vD,KAAAknD,UAAA,SAAAvqD,GACAqD,KAAAwiD,OAAA7lD,EAAA,0BAAAqD,KAAA+N,GAAA/N,KAAA0vD,eAGA1vD,KAAAmnD,eAAA,WACAnnD,KAAAksD,SAAAlsD,KAAAwiD,OAAA6H,YAAArqD,KAAA+N,IACA/N,KAAAmvD,aAAAnvD,KAAAwiD,OAAA6H,YAAArqD,KAAA+N,IAAA,GACA/N,KAAA6qD,KAAA7qD,KAAAwiD,OAAA2L,QAAAnuD,KAAA+N,KAGA/N,KAAAovD,QAAApvD,KAAAwiD,OAAA4M,SAAA,SAAA5I,GACA,UAGAxmD,KAAAqvD,QAAA,WAAmC,MAAA5I,IAEnCzmD,KAAAonD,SAAA,SAAAZ,EAAA7pD,EAAAiD,IAEAjD,GAAA,MAAAqD,KAAA+N,GAAA+hD,qBAAA9vD,KAAA+N,GAAA+hD,qBAAAtJ,EAAAz4C,GAAAw5C,cACAvnD,KAAAwiD,OAAA7lD,EAAA,0BAAAqD,KAAA+N,GAAA/N,KAAA2vD,aAEA3vD,KAAA+N,GAAA+hD,oBAAAnzD,EAAA6pD,EAAAz4C,GAAAw5C,WAAA,KACAd,IAAA9pD,GACAqD,KAAAwiD,OAAAx/B,OAAArmB,EAAA,eAA8DoR,GAAA/N,KAAA+N,GAAAnO,IAAA4mD,OAAAoI,KAAA5uD,OAC9DymD,EAAA9pD,IAIAqD,KAAA4uD,KAAA,SAAApI,EAAA19C,GACA,MAAA9I,MAAAwiD,OAAAx/B,OAAA,MAA+CwjC,OAAA5mD,EAAAkJ,EAAA8lD,KAAA5uD,QAG/CA,KAAA+jC,QAAA,WACA/jC,KAAAynD,OAAA,KACAznD,KAAA0vD,aAAA,KACA1vD,KAAA2vD,YAAA,KAEAlJ,EAAA,OAKAkB,EAAA,WACA,6CAAAh/B,QAAA,iBAAAzoB,GACA,GAAA6vD,GAAA,GAAAlsD,KAAAmsD,SAAA,CACA,QADA,KAAA9vD,EAAA6vD,EAAA,EAAAA,EAAA,GACArzD,SAAA,OAIAiyD,EAAA,SAAAv0D,EAAAqF,GACA,MAAArF,GAAAq1D,KAAAhwD,EAAAgwD,KAAA,EAAAr1D,EAAAq1D,KAAAhwD,EAAAgwD,MAAA,KAGA7S,EAAA,SAAA7uC,GACA,aAAAA,EAAA,KAEA,OADAA,EAAA,gBAAAA,MAAA0K,aAAA3b,OAAAuf,SAAAwgC,eAAA9uC,MACA,MACAA,EAAAw5C,WAAAx5C,EAAAw5C,YAAAI,IACA55C,GAGA0nB,GAAAw6B,UAAA,SAAAC,GAEA,GAAAC,MACAC,IAEApwD,MAAAqwD,iBACArwD,KAAAswD,gBACA,IAAAC,GAAA,EACAC,EAAA,SAAAn0D,EAAAiB,GACA4kD,EAAA7lD,EAAA,SAAAo0D,GACA,OAAAhzD,GAAA,EAAkCA,EAAAgzD,EAAAzI,OAAAtqD,OAAwBD,IAC1DH,EAAAmzD,EAAAzI,OAAAvqD,IAAAH,EAAAmzD,EAAAzI,OAAAvqD,QACAH,EAAAmzD,EAAAzI,OAAAvqD,IAAAoE,KAAA4uD,MAIAC,EAAA,SAAAr0D,EAAAiB,GACA,GAAA4C,GAAA,CAaA,OAZAgiD,GAAA7lD,EAAA,SAAAo0D,GACA,OAAAhzD,GAAA,EAAkCA,EAAAgzD,EAAAzI,OAAAtqD,OAAwBD,IAC1D,GAAAH,EAAAmzD,EAAAzI,OAAAvqD,IAAA,CACA,GAAAymB,GAAAgsC,EAAAlyD,QAAAV,EAAAmzD,EAAAzI,OAAAvqD,IAAAgzD,IACA,GAAAvsC,IACA5mB,EAAAmzD,EAAAzI,OAAAvqD,IAAAQ,OAAAimB,EAAA,GACAhkB,QAMAA,EAAA,GAkBAywD,GAhBA3wD,KAAAouD,sBAAA,SAAA5H,GAEA,OADAQ,MAAAzhB,KACA9nC,EAAA,EAA+BA,EAAA+oD,EAAAwB,OAAAtqD,OAAwBD,IAAA,CACvD,GAAAmzD,GAAA5wD,KAAAswD,cAAA9J,EAAAwB,OAAAvqD,GACA,IAAAmzD,EACA,OAAAjhD,GAAA,EAAuCA,EAAAihD,EAAAlzD,OAAgBiS,KACvDihD,EAAAjhD,GAAAy/C,QAAA5I,IAAAjhB,EAAAqrB,EAAAjhD,GAAA+3C,QAAAkJ,EAAAjhD,GAAAkgD,eAAAe,EAAAjhD,GAAA5B,KAAAy4C,EAAAz4C,KACAw3B,EAAAqrB,EAAAjhD,GAAA+3C,OAAA,EACAV,EAAAnlD,KAAA+uD,EAAAjhD,KAMA,MADAq3C,GAAA32C,KAAAs+C,GACA3H,GAEA,SAAAjlC,GACAA,OACA,IAEiBtkB,GAFjBozD,GACA7tC,UAEA,KAAAvlB,IAAAyyD,GAAAW,EAAApzD,GAAAyyD,EAAAzyD,EACA,KAAAA,IAAAskB,GAAA8uC,EAAApzD,GAAAskB,EAAAtkB,EAGA,KAAAA,EAAA,EAA2BA,EAAAsO,EAAArO,OAAoBD,IAC/CozD,EAAA7tC,OAAAjX,EAAAtO,IAAAskB,EAAAhW,EAAAtO,KAAAmpD,CAGA,OADAiK,GAAAzI,UAAApoD,KACA6wD,GACatyD,KAAAyB,OACb8wD,EAAA,SAAAC,EAAAvO,GACA,OAAA/kD,GAAA,EAA+BA,EAAAsO,EAAArO,OAAoBD,IACnD+kD,EAAAz2C,EAAAtO,KACAszD,EAAAvoD,GAAAuD,EAAAtO,GAAA+kD,EAAAz2C,EAAAtO,MAGac,KAAAyB,MACbgxD,KACAC,EAAAf,EAAApnC,QACAooC,EAAAhB,EAAA5yB,OAzoBA,sBA4oBA,QAAA7/B,KAAA4oD,GAAA2K,EAAAvzD,GAAA4oD,EAAA5oD,EACA,QAAAA,KAAAwzD,GAAAD,EAAAvzD,GAAAwzD,EAAAxzD,EAEA,IAAA0zD,GAAAjB,EAAAiB,qBA/mBA,qCAqnBAnxD,MAAAwnD,uBAAA,WAAkD,MAAA2J,IAQlDnxD,KAAAoxD,uBAAA,SAAA3U,GAEA,MADA0U,GAAA1U,EACAz8C,MAGAA,KAAAsmD,UAAA,SAAAv4C,EAAAy0C,GACA,GAAA6O,KAgBA,OAfAnP,GAAAn0C,EAAA,SAAAo0C,GAEA,UADAA,EAAAvF,EAAAuF,IAEA,SAAAA,EAAAmP,eAAA,CACA,GAAAvvC,GAAA4uC,EAAAnO,EACAL,GAAAmP,eAAA,GAAA/I,GAAApG,EAAApgC,EAAAivC,EAAAE,GACAV,EAAArO,EAAAmP,eAAAtxD,KAAAqwD,eACAgB,EAAAxvD,KAAAsgD,EAAAmP,gBACApB,EAAA5nC,SAAA65B,EAAA6O,EAAA1K,eAGAwK,GAAA3O,EAAAmP,eAAA9O,IAGajkD,KAAAyB,OACbqxD,GAIArxD,KAAAumD,UAAA,SAAAx4C,EAAAy0C,GACA,GAAA6O,KAYA,OAXAnP,GAAAn0C,EAAA,SAAAo0C,GAEA,UADAA,EAAAvF,EAAAuF,IACA,CACA,GAAAyM,GAAA,GAAAY,GAAArN,EAAAwO,EAAAnO,GAAAwO,EAAAE,EACA/O,GAAAoP,eAAApP,EAAAoP,mBACApP,EAAAoP,eAAA1vD,KAAA+sD,GACA4B,EAAA5B,EAAA5uD,KAAAswD,eACAe,EAAAxvD,KAAA+sD,GACAsB,EAAA5nC,SAAA65B,EAAA6O,EAAAzK,aAEahoD,KAAAyB,OACbqxD,GASArxD,KAAAwxD,OAAA,SAAAzjD,GAWA,MAVAm0C,GAAAn0C,EAAA,WACA,GAAAo0C,GAAAvF,EAAA58C,KACAmiD,MAAAmP,iBACAlB,EAAAjO,EAAAoF,cACA4I,EAAAtuD,KAAAsgD,EAAAmP,gBACAlB,EAAAjO,EAAAoF,aAAApF,EAAAgO,EAAAzyD,OAAA,GACAwyD,EAAA5nC,SAAA65B,EAAA6O,EAAAt0C,cAIA1c,MASAA,KAAAyxD,SAAA,SAAA1jD,GAeA,MAdAm0C,GAAAn0C,EAAA,WACA,GAAAo0C,GAAAvF,EAAA58C,KACA,IAAAmiD,KAAAoF,WAAA,CAEA,GADA6I,EAAAjO,EAAAoF,YACA,CAEA,OADAriB,MACAznC,EAAA,EAAuCA,EAAA0yD,EAAAzyD,OAAuBD,IAC9D0yD,EAAA1yD,GAAAsQ,KAAAo0C,GAAAjd,EAAArjC,KAAAsuD,EAAA1yD,GACA0yD,GAAAjrB,QACAkrB,GAAAjO,EAAAoF,YACA2I,EAAAznC,YAAA05B,EAAA6O,EAAAt0C,cAIA1c,MAGAA,KAAA0xD,YAAA,WACA,OAAAj0D,KAAA2yD,GAAA,CACA,GAAAh8C,GAAAg8C,EAAA3yD,EACAyyD,GAAAznC,YAAArU,EAAA,GAAA48C,EAAAt0C,UAGAyzC,EAAAzyD,OAAA,EACA0yD,MAGApwD,KAAAqsD,cAAA,SAAA7F,GACAM,EAAAqJ,EAAA,SAAAvwD,GAA8CA,EAAA6sD,QAAYjG,IAG1DxmD,KAAAssD,WAAA,SAAA9F,GACAA,EAAAwD,QACA9H,EAAAsE,EAAAwD,OAAA,SAAAjoC,GACAykC,EAAAyD,WAAAloC,IAAA4vC,EAAA5vC,IACA+kC,EAAA6K,EAAA5vC,GAAA6vC,QAAA,SAAAx9C,GACAA,EAAAq4C,QACyBjG,MAMzBxmD,KAAAgtD,gBAAA,SAAAxG,EAAA19C,GACAg+C,EAAAqJ,EAAA,SAAAvwD,GAA8CA,EAAAmtD,OAAAjkD,IAAmB09C,IAGjExmD,KAAAitD,aAAA,SAAAzG,EAAA19C,GACA09C,EAAAwD,QACA9H,EAAAsE,EAAAwD,OAAA,SAAAjoC,GACAykC,EAAAyD,WAAAloC,IAAA4vC,EAAA5vC,IACA+kC,EAAA6K,EAAA5vC,GAAA6vC,QAAA,SAAAx9C,GACAA,EAAA24C,OAAAjkD,GAAA,IACyB09C,MAMzBxmD,KAAA6tD,aAAA,WAAwC,MAAAsC,GAAA3/C,MAAA,IAExCxQ,KAAA6sD,gBAAA,SAAAv8B,EAAAE,EAAAg2B,GACAM,EAAAqJ,EAAA,SAAAvwD,GAA8CA,EAAAgtD,OAAAt8B,EAAAE,IAAoBg2B,GAGlE,IAAAqL,GAAA,SAAAxzD,EAAAmoD,GACAA,EAAAwD,QACA9H,EAAAsE,EAAAwD,OAAA,SAAAjoC,GACAykC,EAAAyD,WAAAloC,IAAA4vC,EAAA5vC,IACA+kC,EAAA6K,EAAA5vC,GAAA6vC,QAAA,SAAAhyD,GACAvB,EAAAuB,IACyB4mD,KAMzBxmD,MAAA8sD,aAAA,SAAAx8B,EAAAE,EAAAg2B,GACAqL,EAAA,SAAAjyD,GAAsCA,EAAAgtD,OAAAt8B,EAAAE,IAAoBg2B,IAG1DxmD,KAAAmtD,oBAAA,SAAA3G,EAAA5I,GACAiU,EAAA,SAAAjyD,GAAsCA,EAAAkvC,KAAA8O,GAAA,IAAqB4I,IAG3DxmD,KAAAktD,wBAAA,SAAA1G,EAAA5I,GACAkJ,EAAAqJ,EAAA,SAAAvwD,GAA8CA,EAAAkvC,KAAA8O,GAAA,IAAqB4I,IAGnExmD,KAAAuuD,yBAAA,SAAA/H,EAAA5I,GACAkJ,EAAAqJ,EAAA,SAAAvwD,GAA8CA,EAAA6tD,YAAA7P,IAAqB4I,IAGnExmD,KAAA8xD,QAAA,SAAAvc,GAAoCgb,EAAAhb,GACpCv1C,KAAA2sD,QAAA,WAAmC,MAAA4D,GAGnC,IAAAwB,GAAA,SAAAC,EAAAhK,EAAA1qD,EAAAe,GACA6jD,EAAA8P,EAAA,SAAAC,GACAvB,EAAAuB,EAAA30D,GACA20D,EAAA5zD,GAAA2pD,GACAwI,EAAAyB,EAAA30D,KAIA4kD,IAAA,wCAAArmD,GACAmE,KAAAnE,EAAA,kBAAAkS,EAAAi6C,GACA+J,EAAAhkD,EAAAujD,eAAAtJ,EAAAhoD,KAAAqwD,cAAAx0D,EAAA,SACAk2D,EAAAhkD,EAAAwjD,eAAAvJ,EAAAhoD,KAAAswD,cAAAz0D,EAAA,UACa0C,KAAAyB,MACbA,KAAAnE,EAAA,sBAAAkS,EAAAi6C,GACA+J,EAAAhkD,EAAA0K,cAAA8vC,EAAAx6C,IAAAujD,eAAAtJ,EAAAhoD,KAAAqwD,cAAAx0D,EAAA,UACa0C,KAAAyB,MACbA,KAAAnE,EAAA,sBAAAkS,EAAAi6C,GACA+J,EAAAhkD,EAAA0K,cAAA+2C,EAAAzhD,IAAAwjD,eAAAvJ,EAAAhoD,KAAAswD,cAAAz0D,EAAA,UACa0C,KAAAyB,OACJzB,KAAAyB,OAETA,KAAAkyD,WAAA,SAAAze,EAAAK,GACA,OAAA9oB,KAAAhrB,MAAAqwD,cACAvJ,EAAA9mD,KAAAqwD,cAAArlC,GAAA,SAAA5W,GAA6DA,EAAAg2C,KAAA3W,EAAAK,MAI7D9zC,KAAAmyD,iBAAA,SAAAnnC,GAA6C,MAAAhrB,MAAAqwD,cAAArlC,IAC7ChrB,KAAAoyD,iBAAA,SAAApnC,GAA6C,MAAAhrB,MAAAswD,cAAAtlC,GAE7C,IAAAqnC,GAAA,SAAAtkD,EAAAhT,EAAAuC,GAEA,GADAyQ,EAAA6uC,EAAA7uC,GACAA,EAAAhT,GAAA,CAGA,GAAAu3D,GAAAnC,EAAAnyD,QAAA+P,EAAAhT,GACAu3D,IAAA,GACAnC,EAAAlyD,OAAAq0D,EAAA,GAGA5B,EAAA3iD,EAAAhT,GAAAuC,IACA4kD,EAAAn0C,EAAAhT,GAAA,SAAAi3D,GAAoDA,EAAAjuB,kBAGpDh2B,GAAAhT,IAIAiF,MAAAuyD,eAAA,SAAAxkD,GACA/N,KAAAwyD,iBAAAzkD,GACA/N,KAAAyyD,iBAAA1kD,IAGA/N,KAAAwyD,iBAAA,SAAAzkD,GACAskD,EAAAtkD,EAAA,iBAAA/N,KAAAqwD,gBAGArwD,KAAAyyD,iBAAA,SAAA1kD,GACAskD,EAAAtkD,EAAA,iBAAA/N,KAAAswD,gBAGAtwD,KAAA0yD,MAAA,WACA1yD,KAAAqwD,iBACArwD,KAAAswD,iBACAH,KACAC,KACAuB,KAIA,IAAAA,MAEAgB,EAAA,SAAA5kD,EAAA6kD,EAAAC,GACA,GAAAC,GAAAtN,EAAAoN,OAAAhtD,GACAo9B,IAAAwiB,EAAAoN,KAAA,IAAAA,EAAA5vB,OACA+vB,EAAApB,EAAAmB,IAAA,WACA,GAAA/kB,IAAyBppC,KAAAmuD,EAAAlB,WAEzB,OADAD,GAAAmB,GAAA/kB,EACAA,IAYA,OAVAmU,GAAAn0C,EAAA,SAAAo0C,GACA,GAAAA,EAAAmP,eAAA,CAEA,GAAAuB,GAAA,MAAA1Q,EAAAmP,eAAArH,WAAA8I,EAAApuD,MAAA,MAEAugD,GAAA6N,EAAAnB,QAAAzP,EAAAmP,gBACApM,EAAA/C,EAAAmP,eAAAtH,OAAA+I,EAAApuD,MACAw9C,EAAAmP,eAAArH,WAAA8I,EAAApuD,MAAAq+B,KAGA+vB,EAaA/yD,MAAAgzD,WAAA,SAAAjlD,EAAAklD,GAIA,OAFAjJ,MAEAvsD,EAAA,EAA2BA,EAAAkB,UAAAjB,OAAsBD,IACjDusD,EAAAnoD,KAAA8wD,EAAA5kD,EAAApP,UAAAlB,IAGA,WAAAusD,EAAAtsD,OAAAssD,EAAA,GAAAA,GAeAhqD,KAAAkzD,SAAA,SAAAnlD,EAAAklD,GAIA,OAFAjJ,MAEAvsD,EAAA,EAA2BA,EAAAkB,UAAAjB,OAAsBD,IACjDusD,EAAAnoD,KAAA8wD,EAAA5kD,EAAApP,UAAAlB,IAAA,GAAAkH,KAcA,OAXAu9C,GAAAn0C,EAAA,SAAAo0C,GACA,GAAAA,EAAAmP,eAAA,CACA,GAAA6B,GAAA9N,EAAAlD,EAAAmP,eAAAtH,UACAjoC,IACA9iB,OAAA8K,UAAAlI,KAAAjD,MAAAmjB,EAAAogC,EAAAmP,eAAAtH,OACA,QAAAvsD,GAAA,EAAmCA,EAAA01D,EAAAz1D,OAAiBD,IACpDuC,KAAAozD,gBAAAjR,EAAAgR,EAAA11D,MAGac,KAAAyB,OAEb,GAAAgqD,EAAAtsD,OAAAssD,EAAA,GAAAA,GASAhqD,KAAAozD,gBAAA,SAAArlD,EAAA+kD,GACA,GAAAn0D,UAAAjB,OAAA,WAAAuzC,WAAA,4CACA,QAAAxzC,GAAA,EAA0BA,EAAAkB,UAAAjB,OAAsBD,IAChDq1D,EAAAn0D,UAAAlB,GACAykD,EAAAn0C,EAAA,SAAAo0C,GACA,GAAAA,EAAAmP,gBAAAnP,EAAAmP,eAAAtH,OAAA,CACA,GAAA51C,GAAA+tC,EAAAmP,cACApP,GAAA4Q,EAAA,SAAA/wC,GACAqjC,EAAAuM,EAAA5vC,GAAA6vC,QAAAx9C,GACAgxC,EAAAhxC,EAAA41C,OAAAjoC,SACA3N,GAAA61C,WAAAloC,SAYA/hB,KAAAqzD,oBAAA,SAAAtlD,GACAm0C,EAAAn0C,EAAA,SAAAo0C,GACA,GAAAA,EAAAmP,gBAAAnP,EAAAmP,eAAAtH,OAAA,CACA,GAAA51C,GAAA+tC,EAAAmP,cACApP,GAAA9tC,EAAA41C,OAAA,SAAAjoC,GACAqjC,EAAAuM,EAAA5vC,GAAA6vC,QAAAx9C,KAEAA,EAAA41C,OAAAtsD,OAAA,EACA0W,EAAA61C,kBAWAjqD,KAAAszD,cAAA,SAAAvlD,EAAA+kD,EAAAS,GACA,GAAAR,GAAApB,EAAAmB,EACAC,IACA7Q,EAAAn0C,EAAA,SAAAo0C,GACAA,EAAAmP,gBAAAnP,EAAAmP,eAAAtH,SACA7H,EAAAmP,eAAArH,WAAA8I,EAAApuD,MAAA4uD,OAQA99B,EAAAw6B,UAAA31D,QAAA,SAGAP,EAAAk2D,UAAAx6B,EAAAw6B,WAGCzzD,KAAA,mBAAA8f,eAAAtc,MAoBD,WAEA,GAAAu6C,GAAA,SAAAngD,GACA,yBAAAH,OAAA8P,UAAArN,SAAAF,KAAApC,IAEAo5D,EAAA,SAAAx2D,GACA,0BAAA/C,OAAA8P,UAAArN,SAAAF,KAAAQ,IAEAy2D,EAAA,SAAAzoC,GACA,sBAAAA,IAEA0oC,EAAA,SAAA1oC,GACA,uBAAAA,IAEA2oC,EAAA,SAAA3oC,GACA,aAAAA,GAEA4oC,EAAA,SAAAvC,GACA,aAAAA,GAAA,oBAAAp3D,OAAA8P,UAAArN,SAAAF,KAAA60D,IAEAwC,EAAA,SAAAxC,GACA,wBAAAp3D,OAAA8P,UAAArN,SAAAF,KAAA60D,IAEAyC,EAAA,SAAAzC,GACA,4BAAAp3D,OAAA8P,UAAArN,SAAAF,KAAA60D,IAKA0C,EAAA,SAAA1C,GACA,OAAA5zD,KAAA4zD,GACA,GAAAA,EAAAlzD,eAAAV,GAAA,QAEA,WAGAg4B,EAAAz1B,IACAy1B,GAAAu+B,aACApxD,QAAA23C,EACA0Z,SAAAR,EACAS,UAAAR,EACAS,OAAAR,EACAv3D,SAAAw3D,EACAQ,OAAAP,EACAQ,WAAAP,EACAQ,QAAAP,EACAQ,SAAAf,EACAjmB,MAAA,SAAAnzC,GACA,GAAAq5D,EAAAr5D,GAAA,SAAAA,CACA,IAAAs5D,EAAAt5D,GAAA,QAAAA,CACA,IAAAy5D,EAAAz5D,GAAA,UAAAo6D,MAAAp6D,EAAAq6D,UACA,IAAAX,EAAA15D,GAAA,MAAAA,EACA,IAAAmgD,EAAAngD,GAAA,CAEA,OADAqF,MACAhC,EAAA,EAA+BA,EAAArD,EAAAsD,OAAcD,IAC7CgC,EAAAoC,KAAA7B,KAAAutC,MAAAnzC,EAAAqD,IACA,OAAAgC,GAEA,GAAAm0D,EAAAx5D,GAAA,CACA,GAAA8F,KACA,QAAAyP,KAAAvV,GACA8F,EAAAyP,GAAA3P,KAAAutC,MAAAnzC,EAAAuV,GACA,OAAAzP,GAEA,MAAA9F,IAEAs6D,MAAA,SAAAt6D,EAAAqF,EAAAk1D,GAEA,GAAyBC,GAAAn3D,EAAzBo3D,IAEA,KADAF,QACAl3D,EAAA,EAAuBA,EAAAk3D,EAAAj3D,OAAuBD,IAC9Co3D,EAAAF,EAAAl3D,KAAA,CAEA,IAAAyC,GAAAF,KAAAutC,MAAAnzC,EACA,KAAAqD,IAAAgC,GACA,SAAAS,EAAAzC,GACAyC,EAAAzC,GAAAgC,EAAAhC,OAEA,IAAAg2D,EAAAh0D,EAAAhC,KAAAi2D,EAAAj0D,EAAAhC,IACAo3D,EAAAp3D,IAIAm3D,KAEAA,EAAA/yD,KAAAjD,MAAAg2D,EAAAra,EAAAr6C,EAAAzC,IAAAyC,EAAAzC,IAAAyC,EAAAzC,KACAm3D,EAAA/yD,KAAAjD,MAAAg2D,EAAAra,EAAA96C,EAAAhC,IAAAgC,EAAAhC,IAAAgC,EAAAhC,KACAyC,EAAAzC,GAAAm3D,GAPA10D,EAAAzC,GAAAgC,EAAAhC,OAWA,IAAA88C,EAAA96C,EAAAhC,IACAm3D,KAEAra,EAAAr6C,EAAAzC,KAAAm3D,EAAA/yD,KAAAjD,MAAAg2D,EAAA10D,EAAAzC,IACAm3D,EAAA/yD,KAAAjD,MAAAg2D,EAAAn1D,EAAAhC,IACAyC,EAAAzC,GAAAm3D,MAEA,IAAAhB,EAAAn0D,EAAAhC,IAAA,CAEAm2D,EAAA1zD,EAAAzC,MACAyC,EAAAzC,MACA,QAAAkS,KAAAlQ,GAAAhC,GACAyC,EAAAzC,GAAAkS,GAAAlQ,EAAAhC,GAAAkS,GAMA,MAAAzP,IAEAyoB,QAAA,SAAAmsC,EAAAr0D,EAAAtE,GACA,SAAA24D,EAAA,CACA,GAAAC,GAAAD,EAAA/f,EAAAggB,CAmCA,OAlCAt0D,GAAAkoB,QAAA,qBAAAqsC,EAAAC,EAAA5kC,EAAAjzB,GACA,GAAA83D,GAAAF,EAAAjuD,MAAA,8BACAsD,EAAAgmB,EAAA2kC,EAAAt3D,QAAAN,EAAAM,OACAy3D,EAAA,WACA,MAAApgB,GAAAmgB,EAAA,gBAEA,MADAngB,GAAAmgB,EAAA,OACAngB,EAAAmgB,EAAA,OAIA,IAAA7qD,EAEA6qD,EACAC,IAAAD,EAAA,IAAA/4D,EAEA44C,EAAAigB,GAAA74D,MAIA,IAAA+4D,EAAA,CACA,GAAA96D,GAAA+6D,GACApgB,GAAA36C,EAAA86D,EAAA,gBAEA,MADA96D,GAAA86D,EAAA,OACA96D,EAAA86D,EAAA,WAIAngB,KAAAigB,IAAA,WAEA,MADAjgB,GAAAigB,MACAjgB,EAAAigB,QAKAF,IAMAM,cAAA,SAAAC,EAAAC,EAAAltD,GACA,OAAA3K,GAAA,EAA2BA,EAAA2K,EAAA1K,OAAgBD,IAAA,CAC3C,GAAA4zD,GAAAjpD,EAAA3K,GAAA,GAAA2K,EAAA3K,GAAA,IAAAmB,MAAAwJ,EAAA3K,GAAA,GAAA2K,EAAA3K,GAAA,GACA,IAAA4zD,IAAAiE,EACA,MAAAjE,GAGA,MAAAgE,IAOAE,SAAA,SAAA3gD,EAAA4gD,EAAAC,GAEA,GAAA9mC,GAAA,SAAA+mC,GACA,GAAA36C,GAAA26C,EAAA3uD,MAAA,aACA,UAAAgU,EACA,OAAAtd,GAAA,EAAuCA,EAAAsd,EAAArd,OAAoBD,IAAA,CAC3D,GAAAd,GAAA64D,EAAAz6C,EAAAtd,GAAAonB,UAAA,EAAA9J,EAAAtd,GAAAC,OAAA,OACA,OAAAf,IACA+4D,IAAA/sC,QAAA5N,EAAAtd,GAAAd,IAIA,MAAA+4D,IAGAzY,EAAA,SAAA7oC,GACA,SAAAA,EAAA,CACA,GAAAq/C,EAAAr/C,GACA,MAAAua,GAAAva,EAEA,KAAA0/C,EAAA1/C,IAAA,MAAAqhD,GAAA,KAAArhD,EAAAzP,MAAA,IAAA3G,QAAAy3D,GAGA,IAAAlb,EAAAnmC,GAAA,CAEA,OADA27C,MACAtyD,EAAA,EAA2CA,EAAA2W,EAAA1W,OAAcD,IACzDsyD,EAAAluD,KAAAo7C,EAAA7oC,EAAA3W,IACA,OAAAsyD,GAEA,GAAA6D,EAAAx/C,GAAA,CACA,GAAA4W,KACA,QAAArb,KAAAyE,GACA4W,EAAArb,GAAAstC,EAAA7oC,EAAAzE,GAEA,OAAAqb,GAGA,MAAA5W,GAhBA,MAAAA,GAAAohD,IAqBA,OAAAvY,GAAAroC,IAEA+gD,iBAAA,SAAAv7D,EAAAy2C,GACA,GAAAz2C,EACA,OAAAqD,GAAA,EAA+BA,EAAArD,EAAAsD,OAAcD,IAAA,GAAAozC,EAAAz2C,EAAAqD,IAAA,MAAAA,EAC7C,WAEAm4D,mBAAA,SAAAx7D,EAAAy2C,GACA,GAAA3sB,GAAAuR,EAAAu+B,YAAA2B,iBAAAv7D,EAAAy2C,EAEA,OADA3sB,IAAA,GAAA9pB,EAAA6D,OAAAimB,EAAA,IACA,GAAAA,GAEAtmB,OAAA,SAAAc,EAAA7C,GACA,GAAAqoB,GAAAxlB,EAAAV,QAAAnC,EAEA,OADAqoB,IAAA,GAAAxlB,EAAAT,OAAAimB,EAAA,IACA,GAAAA,GAGA2xC,gBAAA,SAAAt4D,EAAAO,EAAAg4D,IACA,GAAArgC,EAAAu+B,YAAA2B,iBAAAp4D,EAAAu4D,IAAAv4D,EAAAsE,KAAA/D,IAEAi4D,UAAA,SAAAz4D,EAAA7B,EAAAU,EAAA65D,GACA,GAAAt3D,GAAApB,EAAA7B,EAMA,OALA,OAAAiD,IACAA,KACApB,EAAA7B,GAAAiD,GAEAA,EAAAs3D,EAAA,kBAAA75D,GACAuC,GAEAu3D,QAAA,SAAA14D,EAAAO,EAAAo4D,GACA,WAAA34D,EAAAS,QAAAF,KACAo4D,EACA34D,EAAAuc,QAAAhc,GAEAP,EAAAsE,KAAA/D,IAEA,IAQAoB,OAAA,SAAAiG,EAAAD,EAAAixD,GACA,GAAA14D,EAGA,KAFAyH,EAAAq1C,EAAAr1C,SAEAzH,EAAA,EAAuBA,EAAAyH,EAAAxH,OAAmBD,IAC1C,OAAAkS,KAAAzK,GAAAzH,GAAAsM,UACA7E,EAAAzH,GAAAsM,UAAA5L,eAAAwR,KACAxK,EAAA4E,UAAA4F,GAAAzK,EAAAzH,GAAAsM,UAAA4F,GAKA,IAAAymD,GAAA,SAAAzxD,EAAA0xD,GACA,kBACA,IAAA54D,EAAA,EAA+BA,EAAAyH,EAAAxH,OAAmBD,IAClDyH,EAAAzH,GAAAsM,UAAApF,IACAO,EAAAzH,GAAAsM,UAAApF,GAAA/F,MAAAoB,KAAArB,UAEA,OAAA03D,GAAAz3D,MAAAoB,KAAArB,YAUA,IAAAA,UAAAjB,OAAA,EACA,IAAAD,EAAA,EAA2BA,EAAAkB,UAAAjB,OAAsBD,KAPjD,SAAA2K,GACA,OAAAstC,KAAAttC,GACAjD,EAAA4E,UAAA2rC,GAAA0gB,EAAA1gB,EAAAttC,EAAAstC,KAMA/2C,UAAAlB,GAGA,OAAA0H,IAEAuiD,KAAA,WACA,6CAAA/+B,QAAA,iBAAAzoB,GACA,GAAA6vD,GAAA,GAAAlsD,KAAAmsD,SAAA,CACA,QADA,KAAA9vD,EAAA6vD,EAAA,EAAAA,EAAA,GACArzD,SAAA,OAGA45D,YAAA,EACAC,IAAA,WACA,GAAA9gC,EAAAu+B,YAAAsC,YAAA,mBAAAl1D,SACA,IACA,GAAAghB,GAAAzjB,oBAAAjB,OAAA,EACA0D,SAAAm1D,IAAAn0C,GAEA,MAAAxiB,MAkBA42D,KAAA,SAAAC,EAAAC,EAAAC,GAKA,MAJAF,MAAA,aAEAC,KAAA,aAEA,WACA,GAAA3G,GAAA,IACA,KACAA,EAAA2G,EAAA93D,MAAAoB,KAAArB,WACiB,MAAAiB,GACjB61B,EAAAu+B,YAAAuC,IAAA,6BAAA32D,GAEA,SAAA+2D,GAAA5G,IAAA4G,EACA,IACA5G,EAAA0G,EAAA73D,MAAAoB,KAAArB,WACqB,MAAAiB,GACrB61B,EAAAu+B,YAAAuC,IAAA,6BAAA32D,GAGA,MAAAmwD,MAKAt6B,EAAAu+B,YAAA4C,eAAA,WACA,GAAAC,MACAC,GAAA,EAEAC,GAA6BC,OAAA,EAE7Bh3D,MAAAzB,KAAA,SAAAuK,EAAAmuD,EAAAjB,GACA,GAAA/Y,GAAA,SAAAW,GACAnoB,EAAAu+B,YAAA+B,UAAAc,EAAAjZ,EAAAqZ,EAAAjB,GACAiB,EAAAC,UAAAD,EAAAC,cACAD,EAAAC,UAAAzhC,EAAAu+B,YAAAtM,QAAA9J,EAGA,oBAAA90C,GAAAm0C,EAAAn0C,OACA,UAAAA,EAAApL,OACA,OAAAD,GAAA,EAA+BA,EAAAqL,EAAApL,OAAkBD,IACjDw/C,EAAAn0C,EAAArL,GAIA,OAAAuC,OAGAA,KAAAm3D,KAAA,SAAAruD,EAAA3M,EAAA4mD,GACA,IAAA+T,GAAAD,EAAA/tD,GAAA,CACA,GAAApK,GAAAm4D,EAAA/tD,GAAApL,OAAAD,EAAA,EAAA25D,GAAA,EAAAp4D,EAAA,IACA,KAAAgB,KAAAq3D,iBAAAr3D,KAAAq3D,gBAAAvuD,EAAA3M,EAAA4mD,GACA,MAAAqU,GAAA35D,EAAAiB,IAAA,IAAAM,GAAA,CAGA,GAAA+3D,EAAAjuD,GACA+tD,EAAA/tD,GAAArL,GAAAmB,MAAAoB,MAAA7D,EAAA4mD,QAEA,KACA/jD,EAAA63D,EAAA/tD,GAAArL,GAAAmB,MAAAoB,MAAA7D,EAAA4mD,IAC6B,MAAAnjD,GAC7B61B,EAAAu+B,YAAAuC,IAAA,kCAAAztD,EAAA,MAAAlJ,GAGAnC,IACA,MAAAo5D,GAAA,MAAAA,EAAA/tD,KACAsuD,GAAA,IAIA,MAAAp3D,OAGAA,KAAAgsC,OAAA,SAAAsrB,EAAAL,GAEA,OAAAt4D,UAAAjB,OACAm5D,SAEA,QAAAl4D,UAAAjB,QACA,mBAAA45D,SACAT,GAAAS,OACA,IAAAA,EAAAJ,UAAA,CACA,GAAAtZ,EACA,QAAAngD,KAAA65D,GAAAJ,UACAtZ,EAAA0Z,EAAAJ,UAAAz5D,GACAg4B,EAAAu+B,YAAAp2D,OAAAi5D,EAAAjZ,OAAA0Z,QAIA,KAAA34D,UAAAjB,QACA+3B,EAAAu+B,YAAAp2D,OAAAi5D,EAAAS,OAAAL,EAGA,OAAAj3D,OAGAA,KAAAu3D,YAAA,SAAAC,GACA,MAAAX,GAAAW,IAEAx3D,KAAAy3D,iBAAA,SAAA96D,GACAm6D,EAAAn6D,GAEAqD,KAAA03D,gBAAA,WACA,MAAAZ,IAEA92D,KAAA23D,SAAA,SAAAt5D,GACA2B,KAAAy3D,kBAAA,EACA,KACAp5D,IAEA,MAAAuB,GACA61B,EAAAu+B,YAAAuC,IAAA,kCAAA32D,GAEAI,KAAAy3D,kBAAA,IAEAz3D,KAAA43D,iBAAA,WACA,OAAAn6D,KAAAo5D,GACAA,EAAAp5D,GAAA,OAKAg4B,EAAAu+B,YAAA4C,eAAA7sD,WACA8tD,QAAA,WACA73D,KAAA43D,qBAKA79D,EAAAi6D,YAAAv+B,EAAAu+B,aAGCx3D,KAAA,mBAAA8f,eAAAtc,MAkBC,WAEF,YAEA,IAAAy1B,GAAAz1B,IAEAy1B,GAAAu+B,YAAAxX,gBAAA,SAAAzuC,EAAA0uC,EAAAj+C,GACAA,KAAAuP,EAAA0N,UAEA,QADAihC,GAAAl+C,EAAAm+C,iBAAAF,GACAh/C,EAAA,EAAsBA,EAAAi/C,EAAAh/C,OAAsBD,IAC5C,GAAAi/C,EAAAj/C,KAAAsQ,EACA,QAEA,WAGA0nB,EAAAu+B,YAAAtP,QAAA,SAAA9kD,EAAA+kD,GACA/kD,EAAAglD,gBACAhlD,EAAAglD,kBAEAhlD,EAAAilD,aAAA,GAEAF,GAAA/kD,EAAAklD,gBACAllD,EAAAklD,kBAeArvB,EAAAu+B,YAAA8D,YAAA,SAAA/pD,EAAA0lC,EAAAK,EAAAU,EAAArgC,GACApG,IACAA,EAAAwZ,MAAAwwC,OAAA5jD,EAAA,KACApG,EAAAgqD,OAAA5jD,EACApG,EAAAwZ,MAAAywC,MAAAxjB,EAAA,KACAzmC,EAAAiqD,MAAAxjB,EACAzmC,EAAAwZ,MAAAgJ,KAAAkjB,EAAA,KACA1lC,EAAAwZ,MAAAkJ,IAAAqjB,EAAA,QAIEt3C,KAAA,mBAAA8f,eAAAtc,MAkBF,WAEA,YAEA,IACAi4D,GADAxiC,EAAAz1B,KACAk4D,KAEAC,EAAA1iC,EAAAu+B,YAKAoE,EAAA,WACA,aAAA5D,OAAAC,WAMA4D,EAAA,SAAA5sD,GACA,GAAAA,EAAA6sD,SAAAC,YAAA9sD,EAAA6sD,SAAAE,gBAAA,CACA,GAAAC,KACAC,GAAAx5D,OAAAu5D,EAAAhtD,EAAA6sD,SAAAC,YACAG,EAAAx5D,OAAAu5D,EAAAhtD,EAAA6sD,SAAAE,uBACA/sD,GAAA6sD,SAAAE,gBAEAC,EAAA/d,UAAAjvC,EAAA6sD,SAAAC,WAAAI,YACAF,GAAA/d,SACAjvC,EAAA6sD,SAAAE,gBAAAC,IAGAz1C,GAAA,0GAEA41C,EAAA,SAAAntD,EAAA8nD,EAAAsF,EAAAC,GACA,GAAAC,GAAAttD,EAAAutD,qBACA,IAAAD,EACA,OAAAt7D,GAAA,EAAAkS,EAAAopD,EAAAr7D,OAA4DD,EAAAkS,EAAOlS,IACnEq7D,MAAAC,EAAAt7D,IACAs7D,EAAAt7D,GAAA2pD,SAAAmM,GAAA,EAAAsF,IAIAI,EAAA,SAAAlkB,GACA,aAAAA,EAAA,KAAAA,EAAAv3C,MAAA,MAEA07D,EAAA,SAAA57D,EAAAjB,EAAA88D,GACA,OAAA17D,KAAApB,GACAiB,EAAAG,GAAA07D,GAEAjX,EAAA,SAAA7jD,EAAAhC,GACAA,EAAA87D,EAAAv1D,QAAAvG,IAAA,MAAAA,EAAAqB,SAAAy6D,EAAAlE,SAAA53D,QACA,QAAAoB,GAAA,EAA2BA,EAAApB,EAAAqB,OAAgBD,IAC3C,IACAY,EAAAO,MAAAvC,EAAAoB,IAAApB,EAAAoB,KAEA,MAAAmC,GACAu4D,EAAA5B,IAAA,4BAAA32D,KAIAw5D,EAAA,SAAA3tD,EAAA+2C,EAAA6W,GACA,GAAA5tD,EAAA6tD,eAAA,CACA,GAAAjkB,GAAA5pC,EAAA8tD,oBAAAj8D,KACAk8D,EAAA/tD,EAAA6tD,iBACAjI,EAAA8G,EAAAzD,SAAoC8E,EACpCN,GAAA57D,EAAAk8D,EAAA,YACA,QAAA/7D,GAAA,EAAAkS,EAAAlE,EAAA6sD,SAAAmB,MAAA/7D,OAAoED,EAAAkS,EAAOlS,IAAA,CAC3E,GAAAi8D,GAAAjuD,EAAA6sD,SAAAmB,MAAAh8D,EACA,kBAAAi8D,EAAA,CACA,GAAAt0B,GAAA35B,EAAA6sD,SAAAnnB,SAAArqC,QAAA4yD,EAAArkB,EACA,OAAAjQ,IACAisB,EAAA8G,EAAAzD,MAAArD,EAAAjsB,GAAA,aACA8zB,EAAA57D,EAAA8nC,EAAAs0B,KAKAlX,IACA6O,EAAA8G,EAAA5C,SAAAlE,EAAA7O,EAAA,MAGA/2C,EAAAkuD,UAAAtI,EAAAgI,EAAA/7D,GACA+7D,GAAA5tD,EAAAmuD,YAMAC,EAAApkC,EAAAokC,mBAAA,SAAArX,GAEA2V,EAAAvB,eAAAh4D,MAAAoB,KAAArB,UAEA,IAAAqwC,GAAAhvC,KACA5F,EAAAuE,UACAm7D,EAAA9qB,EAAA8qB,SACAl0D,EAAAk0D,GAAA,GAAAtF,OAAAC,SAEAz0D,MAAAs4D,UACAnnB,SAAAqR,EAAA8V,SACAyB,WAAAvX,EAAAuX,eACAxB,WAAA,KACAC,gBAAA,KACAwB,gBAAA,KACAvT,OAAA,EACAwT,aAAAzX,EAAAyX,aACAC,WAAA1X,EAAA0X,WACAC,qBACAvK,WAAApN,EAAAoN,YAAApN,EAAA8V,SAAA8B,SAAAC,WACAZ,SACAa,cAGAt6D,KAAAu6D,cAAA,SAAA9+D,EAAAqC,EAAAq7D,GACAn5D,KAAAs4D,SAAAgC,UAAAnB,GAAAn5D,KAAAs4D,SAAAgC,UAAAnB,OACAn5D,KAAAs4D,SAAAgC,UAAAnB,GAAA19D,GAAAqC,GAEAkC,KAAAw6D,kBAAA,SAAA/+D,EAAA09D,GACA,MAAAn5D,MAAAs4D,SAAAgC,UAAAnB,GAAAn5D,KAAAs4D,SAAAgC,UAAAnB,GAAA19D,GAAA,MAGAuE,KAAAy6D,MAAA,WACA,MAAA70D,GAMA,IAAAyrD,GAAA7O,EAAAkY,aAAAC,IACA,IAAA36D,KAAA46D,mBAAA,CACA,OAAAn9D,GAAA,EAA+BA,EAAAuC,KAAA46D,mBAAAl9D,OAAoCD,IACnEwB,MAAA8K,UAAAlI,KAAAjD,MAAAyyD,EAAArxD,KAAAs4D,SAAAnnB,SAAAipB,SAAAp6D,KAAA46D,mBAAAn9D,QAEA,KAAAA,EAAA,EAA2BA,EAAA4zD,EAAA3zD,OAAcD,IAAA,CAGzC,GAAAo9D,GAAAnC,EAAAoC,yBAAAzJ,EAAA5zD,GACAk9D,GAAAE,EAAA,GAAAj1D,IAAAi1D,GAIA,GAAAE,IACAL,SAAAC,EACAZ,WAAAvX,EAAAuX,eACAz8B,MAAAklB,EAAAllB,OAAAt9B,KAAAs4D,SAAAnnB,SAAA6pB,kBAaA,IAXAh7D,KAAAs5D,eAAA,WACA,MAAAyB,IAEA/6D,KAAAi7D,oBAAA,SAAA5+D,GACA,OAAAoB,KAAApB,GAAA0+D,EAAAt9D,GAAApB,EAAAoB,IAOA+kD,EAAAx/B,OACA,IAAAvlB,IAAA+kD,GAAAx/B,OACAgsB,EAAAzwC,KAAAd,EAAA+kD,EAAAx/B,OAAAvlB,GASAuC,MAAAutC,MAAA,WACA,GAAA8jB,GAAAp3D,OAAAqB,OAAA0E,KAAAyY,YAAA1O,UAEA,OADA/J,MAAAyY,YAAA7Z,MAAAyyD,EAAAj3D,GACAi3D,GACa9yD,KAAAyB,MAIbA,KAAAk7D,gBAAA,SAAAC,GACA,GAAApL,IAAA,CACA,IAAA/vD,KAAAs4D,SAAA2B,aACA,IACAlK,EAAA/vD,KAAAs4D,SAAA2B,aAAAkB,GAEA,MAAAv7D,GACAu4D,EAAA5B,IAAA,wCAAA32D,GAGA,MAAAmwD,IAKA/vD,KAAAo7D,cAAA,SAAAC,EAAAC,EAAAh+B,EAAA69B,EAAAI,EAAAxnD,EAAApS,GACA,GAAAouD,GAAA/vD,KAAAs4D,SAAAnnB,SAAAqqB,eAAA,cACAH,WACAC,WACAh+B,QACA69B,aACAI,eACAxnD,SAAApS,UAEA,IAAA3B,KAAAs4D,SAAA4B,WACA,IACAnK,EAAA/vD,KAAAs4D,SAAA4B,YACAmB,WACAC,WACAh+B,QACA69B,aACAI,eACAxnD,SAAApS,WAGA,MAAA/B,GACAu4D,EAAA5B,IAAA,sCAAA32D,GAGA,MAAAmwD,GAGA,IAAA0L,KAKAz7D,MAAA07D,qBAAA,SAAAx7D,GACA,OAAAzC,GAAA,EAA+BA,EAAAg+D,EAAA/9D,OAAyBD,IACxDg+D,EAAAh+D,GAAA,GAAAyC,IAMAy7D,EAAA,SAAAlwD,EAAAmwD,GACA,GAAAzC,GAAA1tD,EAAA6sD,SAAAmB,MAAAmC,GACA7gE,EAAA0Q,EAAA6sD,SAAAnnB,SAAArqC,QAAAqyD,EAAA1tD,EAAA8tD,oBAEA,OAAAx+D,GAEAA,EAAA8gE,UAAApwD,EAAAqwD,QACArwD,EAAA6sD,SAAAnnB,SAAA1oB,YAAAhd,EAAAqwD,OAAA/gE,EAAA8gE,UAIA1D,GAAAj5D,OAAAu2B,EAAAokC,mBAAA1B,EAAAvB,gBAEAmF,aAAA,SAAAp3D,GACA,MAAA3E,MAAAs4D,SAAAyB,WAAAp1D,IAGAq3D,aAAA,SAAAr3D,EAAAxI,GACA6D,KAAAs4D,SAAAyB,WAAAp1D,GAAAxI,GAGA8/D,cAAA,WACA,MAAAj8D,MAAAs4D,SAAAyB,YAGAmC,cAAA,SAAAn6C,GACA/hB,KAAAs4D,SAAAyB,WAAAh4C,GAGAo6C,SAAA,WACA,MAAAzD,GAAAyD,SAAAn8D,KAAA87D,SAGAM,SAAA,SAAAC,GACA,MAAA3D,GAAA0D,SAAAp8D,KAAA87D,OAAAO,IAGA/zC,SAAA,SAAA+zC,GACA3D,EAAApwC,SAAAtoB,KAAA87D,OAAAO,IAGA5zC,YAAA,SAAA4zC,GACA3D,EAAAjwC,YAAAzoB,KAAA87D,OAAAO,IAGAC,cAAA,SAAAC,EAAAC,GACA9D,EAAA4D,cAAAt8D,KAAA87D,OAAAS,EAAAC,IAGAC,QAAA,SAAAtD,EAAA3W,EAAA6W,GACAr5D,KAAA08D,aACA18D,KAAAs4D,SAAAmB,MAAAR,EAAAE,OACAC,EAAAp5D,KAAAwiD,EAAA6W,IAGAvyD,QAAA,WACA,MAAA9G,MAAAs4D,SAAAmB,OAGAkD,aAAA,SAAAna,EAAA6W,GACAD,EAAAp5D,KAAAwiD,EAAA6W,IAGAuD,QAAA,SAAAzD,GACA,UAAAn5D,KAAAs4D,SAAAmB,MAAAz7D,QAAAm7D,IAGA0D,QAAA,SAAA1D,EAAA3W,EAAA6W,GACA,GAAAtkB,GAAAkkB,EAAAE,GAAA2D,GAAA,CACA,UAAA/nB,EAAA,CACA,OAAAt3C,GAAA,EAAAkS,EAAAolC,EAAAr3C,OAA6CD,EAAAkS,EAAOlS,IACpDuC,KAAA48D,QAAA7nB,EAAAt3C,MACAuC,KAAAs4D,SAAAmB,MAAA53D,KAAAkzC,EAAAt3C,IACAq/D,GAAA,EAGAA,IAAA1D,EAAAp5D,KAAAwiD,EAAA6W,KAIA0D,WAAA,SAAA5D,EAAA3W,EAAA6W,GACA,GAAAtkB,GAAAkkB,EAAAE,GAAA2D,GAAA,EAAA7f,EAAA,SAAAsC,GACA,GAAAr7B,GAAAlkB,KAAAs4D,SAAAmB,MAAAz7D,QAAAuhD,EACA,WAAAr7B,IAEAy3C,EAAA37D,KAAAkkB,GACAlkB,KAAAs4D,SAAAmB,MAAAx7D,OAAAimB,EAAA,IACA,IAGa3lB,KAAAyB,KAEb,UAAA+0C,EAAA,CACA,OAAAt3C,GAAA,EAAAkS,EAAAolC,EAAAr3C,OAA6CD,EAAAkS,EAAOlS,IACpDq/D,EAAA7f,EAAAlI,EAAAt3C,KAAAq/D,CAEAA,IAAA1D,EAAAp5D,KAAAwiD,EAAA6W,KAGAqD,WAAA,SAAAla,EAAA6W,GAEA,OADA57D,GAAAuC,KAAAs4D,SAAAmB,MAAA/7D,OACAiS,EAAA,EAA2BA,EAAAlS,EAAOkS,IAClCgsD,EAAA37D,KAAA,GACAA,KAAAs4D,SAAAmB,MAAAx7D,OAAA,IAEAm7D,GAAAp5D,KAAAwiD,EAAA6W,IAGA2D,WAAA,SAAA7D,EAAA3W,EAAA6W,GACA,GAAAtkB,GAAAkkB,EAAAE,EACA,UAAApkB,EAAA,CACA,OAAAt3C,GAAA,EAAAkS,EAAAolC,EAAAr3C,OAA6CD,EAAAkS,EAAOlS,IAAA,CACpD,GAAAymB,GAAAlkB,KAAAs4D,SAAAmB,MAAAz7D,QAAA+2C,EAAAt3C,KACA,GAAAymB,GACAy3C,EAAA37D,KAAAkkB,GACAlkB,KAAAs4D,SAAAmB,MAAAx7D,OAAAimB,EAAA,IAGAlkB,KAAAs4D,SAAAmB,MAAA53D,KAAAkzC,EAAAt3C,IAGA27D,EAAAp5D,KAAAwiD,EAAA6W,KAGAM,UAAA,SAAA5kB,EAAAskB,GAGA,GAFAr5D,KAAAi9D,cAAAloB,EAAAwjB,WAAAc,GACAr5D,KAAAk9D,mBAAAnoB,EAAAyjB,gBAAAa,GACAtkB,EAAAglB,WACA,OAAAt8D,KAAAs3C,GAAAglB,WACA/5D,KAAAg8D,aAAAv+D,EAAAs3C,EAAAglB,WAAAt8D,GAEAuC,MAAAs4D,SAAA0B,gBAAAh6D,KAAAm9D,iBAEAF,cAAA,SAAA11C,EAAA8xC,GAGAr5D,KAAAs4D,SAAAC,WAAAhxC,EACAvnB,KAAAs4D,SAAA0B,gBAAAh6D,KAAAs4D,SAAAC,WACAF,EAAAr4D,MACAq5D,GAAAr5D,KAAA45D,WAEAuD,cAAA,WACA,MAAAn9D,MAAAs4D,SAAAC,YAEA2E,mBAAA,SAAA31C,EAAA8xC,GAGAr5D,KAAAs4D,SAAAE,gBAAAjxC,EACA8wC,EAAAr4D,MACAq5D,GAAAr5D,KAAA45D,WAEAwD,mBAAA,WACA,MAAAp9D,MAAAs4D,SAAAE,iBAEAz0B,QAAA,SAAA2pB,IACAA,GAAA,MAAA1tD,KAAAm5D,UACAn5D,KAAA43D,mBACA53D,KAAAutC,MAAA,KACAvtC,KAAAs4D,SAAA,OAIAjJ,QAAA,WACA,MAAArvD,MAAAs4D,SAAA7R,OAGAW,SAAA,SAAAX,EAAA4W,EAAAxE,GAGA,GAAA74D,KAAAs4D,WAAAt4D,KAAAs4D,SAAAnnB,SAAAmsB,oBAAAt9D,KAAAs4D,SAAAnnB,SAAAosB,mBAAA,CAIA,GAFAv9D,KAAAs4D,SAAA7R,QAEA,MAAAzmD,KAAA87D,OAAA,CACA,SAAA97D,KAAAs4D,SAAAnnB,SAAAye,WAAA,CACA,GAAA7tB,GAAA0kB,EAAA,wBACAzmD,MAAAs4D,SAAAnnB,SAAApP,GAAA/hC,KAAA87D,OAAA97D,KAAAs4D,SAAAnnB,SAAAye,YAEA,MAAA5vD,KAAAs4D,SAAA1I,YACA5vD,KAAAs4D,SAAAnnB,SAAApP,GAAA/hC,KAAA87D,OAAA97D,KAAAs4D,SAAA1I,YAGA,MAAA5vD,KAAAs4D,SAAAE,kBACAx4D,KAAAs4D,SAAA0B,gBAAAvT,EAAAzmD,KAAAs4D,SAAAE,gBAAAx4D,KAAAs4D,SAAAC,WACAv4D,KAAAs4D,SAAAnnB,SAAAqsB,qBACA3E,KAAAT,IACAp4D,KAAA45D,SAAsCf,YAAA4E,QAAA,MAKtCz9D,KAAAg5D,sBAAAqE,GACAzE,EAAA54D,KAAAymD,EAAA2R,IAAAp4D,SAOA,IAAA09D,GAAA,EACAC,EAAA,WACA,GAAAlgE,GAAAigE,EAAA,CAEA,OADAA,KACAjgE,GAGAmgE,EAAAnoC,EAAAmoC,gBAAA,SAAAC,GAEA79D,KAAA1F,QAAA,QAEAujE,GAAAnF,EAAAx5D,OAAAc,KAAAo6D,SAAAyD,GAEA79D,KAAAs2D,WAAAt2D,KAAAo6D,SAAA0D,WACA99D,KAAA+9D,oBACA/9D,KAAAg+D,kBAEA7F,EAAAvB,eAAAh4D,MAAAoB,KAEA,IAAAi+D,GAAAj+D,KACAk+D,EAAAP,IACAQ,EAAAF,EAAA1/D,KACA6/D,KACA7N,EAAA,EACA8N,EAAA,SAAAtwD,GACA,SAAAA,EAAA,WACA,OAAAA,EAAAyd,UAAA,GAAAzd,EAAAyd,SACA,OAA4Bzd,KAAAtG,MAAA,EAG5B,IAAA06C,GAAA8b,EAAAK,WAAAvwD,EACA,QAA4BA,GAAAo0C,EAAAv8C,GAAAuyD,EAAAlE,SAAAlmD,IAAA,MAAAo0C,EAAAp0C,EAAAwwD,EAAApc,IAI5BniD,MAAA29D,iBAAA,WACA,MAAAO,IAGAl+D,KAAA8xD,QAAA,SAAAvc,EAAAipB,GAIA,MAHAjO,GAAAhb,EACA0oB,EAAA9G,KAAA,OAAA5G,GACAiO,GAAAP,EAAAO,qBACA,GAEAx+D,KAAA2sD,QAAA,WACA,MAAA4D,GAGA,QAAA9yD,KAAAuC,MAAAo6D,SACAgE,EAAA3gE,GAAAuC,KAAAo6D,SAAA38D,EAEA,IAAAghE,GAAAC,IACA1+D,MAAA2+D,gBAAA,WACA,SAAAF,GAAAC,EAAAhhE,OAAA,EACA,OAAAD,GAAA,EAA+BA,EAAAihE,EAAAhhE,OAAkCD,IACjEwgE,EAAAnb,IAAA2b,EAAAC,EAAAjhE,GAAA,GAAAihE,EAAAjhE,GAAA,KAIAuC,KAAA4+D,aAAA,SAAA1+D,GAEAF,KAAA2+D,kBAGAz+D,EAAAF,KAAAs+D,WAAAp+D,GAEAF,KAAAwxD,SAAAqN,KAAA,SAAAC,GACAA,EAAAC,WAAA7+D,KAEAF,KAAAg/D,kBAAAH,KAAA,SAAAI,GACAA,EAAAF,WAAA7+D,IAIA,IAAAg/D,GAAAT,CACAA,GAAAv+D,EACAw+D,EAAAhhE,OAAA,CAyCA,QAxCAyhE,IACAC,cAAA,gBACAC,iBAAA,oBAGAC,EAAA,SAAA15D,EAAAhG,EAAA2/D,GACA,GAAAxqB,GAAAn1C,EAAAk9C,YAAAl9C,EAAA+B,OACA69D,GAAAzqB,KAAAt5B,WAAAs5B,EAAAt5B,WAAA68C,SAAA,QAAAvjB,IAAAujB,SAAA,QAAAvjB,KAAAt5B,YAAAs5B,EAAAt5B,sBAAAs5B,EAAAt5B,sBAAA68C,SAAA,KACA,IAAAkH,EAAA,CACAA,EAAArI,KAAAvxD,EAAA45D,EAAA5/D,EACA,IAAAg4B,GAAA2nC,EAAAJ,EAAAI,EAAA35D,OAEAq4D,GAAA9G,KAAAv/B,EAAA4nC,EAAA/zD,WAAA+zD,EAAA5/D,KAIA6/D,EAAA,SAAA1f,EAAAtD,EAAAp+C,GACAqgE,EAAA78D,MAAAk+C,EAAA1hD,IACA4/D,EAAAz1D,GAAAi2D,EAAA1e,EAAAtD,EAAAp+C,IAsBAZ,EAAA,EAA2BA,EAAAulB,EAAAtlB,OAAmBD,KAf9C,SAAAmI,GAEA65D,EAAA75D,EAAA,0BAAAhG,GACA0/D,EAAA15D,EAAAhG,KAGA6/D,EAAA75D,EAAA,yBAAAhG,GACA0/D,EAAA15D,EAAAhG,EAAA,cAGA6/D,EAAA75D,EAAA,wBAAAhG,GACA0/D,EAAA15D,EAAAhG,MAKAojB,EAAAvlB,GAGA,QAAAiiE,KAAAC,GAAA,CACA,GAAA5xD,GAAA4xD,EAAAD,GAAA3xD,EACAA,GAAA0N,aAAAyjD,IACAA,EAAA1hD,YAAAzP,GACA0wD,EAAAhhD,YAAA1P,MAKA/N,KAAA4/D,aAAA,WACA,MAAAnB,IAGAz+D,KAAAzB,KAAA,SAAAuK,EAAAzK,GACA,UAAAyK,GAAA+2D,EAAAxhE,IACA8/D,EAAAv/D,MAAAq/D,GAAAn1D,EAAAzK,KAGA4/D,EAAA6B,eAAA,SAAA1rD,GACA,OAAA3W,KAAA2W,GACA6pD,EAAA7D,SAAA38D,GAAA2W,EAAA3W,EAKA,OAHA2W,GAAA2rD,WACA9B,EAAAW,aAAAxqD,EAAA2rD,WAEA9B,GAGAA,EAAA+B,gBAAA,WAEA,MADA/B,GAAA7D,SAAA1B,EAAAx5D,UAAyDk/D,GACzDH,EAGA,IAAA1H,GAAA,KACAsJ,GAAA,EAEAI,KAIAC,KACAC,KACAR,KACAS,KACAC,KACAC,KACAC,GAAA,EACAC,KACAC,GAAA,EACAC,EAAA,KACAC,EAAA3gE,KAAAo6D,SAAAwG,MACAC,EAAA,EACAC,EAAA,WACA,SAAAD,KAWAE,EAAA,SAAAhzD,EAAA7I,GACAu5D,EACAA,EAAAhhD,YAAA1P,GACA7I,EAGAlF,KAAAs+D,WAAAp5D,GAAAuY,YAAA1P,GAFA/N,KAAAghE,aAAAjzD,IAGaxP,KAAAyB,MAWbihE,EAAA,SAAApsC,EAAAqsC,EAAArI,EAAAsI,GAEA,IAAAV,EAAA,CACA,GACAW,GADAx7D,EAAA24D,EAAA1pC,GAEAwsC,EAAApD,EAAAqD,gBAEAD,KAAAD,EAAAC,EAAAE,wBAAA37D,IAEA,MAAAizD,MAAAT,IAGA,IAAA/G,GAAAmQ,IAA2C9B,KAAA95D,EAAA67D,OAAAP,EAAAzD,QAAA,EAAA5E,aAE3C,IAAAuI,GAAA/P,OACA,OAAA5zD,KAAA2jE,GACAI,IACA9B,KAAA0B,EAAA3jE,GAAAmI,GACA67D,QACAlxC,KAAA8gC,IAAA9gC,KAAA6wC,EAAA3jE,GAAAgkE,OAAAlxC,KACAE,IAAA4gC,IAAA5gC,IAAA2wC,EAAA3jE,GAAAgkE,OAAAhxC,KAEAgtC,QAAA,EACA5E,aAOA,IAFAoF,EAAAyD,cAAAC,OAAA/7D,EAAAs7D,EAAArI,EAAA,KAAAsI,GAEAC,EACA,OAAAzxD,KAAAyxD,GACAnD,EAAAyD,cAAAC,OAAAP,EAAAzxD,GAAA/J,GAAAs7D,EAAArI,EAAAuI,EAAAzxD,GAAA8xD,OAAAN,GAAA,KASAS,EAAA,SAAAla,GACA,MAAAyY,GAAAzY,IAQAma,EAAA,SAAAhtC,EAAAitC,EAAAC,EAAAn8D,EAAA6+C,GAEA,IAAAiU,EAAAsJ,SAAA,CAEA,GADA,MAAAF,MAEApJ,EAAAuJ,gBAAAptC,EAAAopC,GAAA,CACA,GAAAhjE,GAAA8mE,GAAA9D,EAAA7D,SAAA8H,WAEA,IADAjnE,EAAAy9D,EAAAx5D,UAAuDjE,GACvDy9D,EAAAyJ,mBAAAttC,EAAAopC,GAgEA8D,EAAArU,OACAuQ,EAAAmE,cAAAvtC,EAAA55B,OAjEA,CACA,GAAAonE,GAAA3J,EAAA4J,WAAA9b,KACA+b,EAAA7J,EAAA4J,WAAAxzB,KACA0zB,EAAA9J,EAAA4J,WAAAvjE,MACA0jE,GAAA,CAEAC,IAAA98D,EAAAivB,GAEA55B,EAAAunE,GAAArK,EAAA3B,KAAAv7D,EAAAunE,GAAA,WAKA,GAJAvE,EAAA0E,mBAAA,GACA1E,EAAAzM,QAA6Dz9C,OAAA8gB,IAAgBvM,SAAA21C,EAAA2E,qBAAA,IAAA3E,EAAA4E,4BAAA,GAC7E5E,EAAAzM,QAA6D7vD,OAAAkzB,IAAgBvM,SAAA21C,EAAA2E,qBAAA,IAAA3E,EAAA6E,4BAAA,GAC7E7E,EAAA8E,2BAAA,GACA9nE,EAAA2wD,QAAA,MAAAmW,GAAAnW,YACiC,GAEjC3wD,EAAAonE,GAAAlK,EAAA3B,KAAAv7D,EAAAonE,GAAA,WAIA,GAAAnB,GAAAjD,EAAA+E,cAAArkE,UAAAs/D,EAAAtR,UACA,OAAAuU,IACAD,EAAApsC,EAAAqsC,EAAA,SACAuB,GAAAxE,EAAA31C,SAAAuM,EAAA,eACA4tC,GAAA,KAGAxnE,EAAAsnE,GAAApK,EAAA3B,KAAAv7D,EAAAsnE,GAAA,WAmBA,OAlBAU,GAAAC,EAAAvkE,UAAA,GAAAsvD,UAkBAxwD,EAAA,EAAmDA,EAAAylE,EAAAxlE,OAAqBD,KAhBxE,SAAAmoC,GACA,MAAAA,EAAA,KAGAq9B,EAAAhF,EAAA+E,gBACAj1D,GAAA63B,EAAA,GAAA73B,GACAsiB,KAAAuV,EAAA,GAAArV,KAAAqV,EAAA,GAAAnV,QAEAwwC,EAAAr7B,EAAA,GAAA73B,GAAAk1D,IAEAhF,EAAAx1C,YAAAmd,EAAA,kBACAq4B,EAAAzM,QAAiEz9C,OAAA6xB,EAAA,GAAA73B,KAAiB0a,YAAAw1C,EAAA2E,qBAAA,IAAA3E,EAAA4E,4BAAA,GAClF5E,EAAAzM,QAAiE7vD,OAAAikC,EAAA,GAAA73B,KAAiB0a,YAAAw1C,EAAA2E,qBAAA,IAAA3E,EAAA6E,4BAAA,GAClF7E,EAAAqD,iBAAA6B,UAAAv9B,EAAA,GAAA73B,KAIAm1D,EAAAzlE,GAGAglE,IAAA,EACAxE,EAAA0E,mBAAA,GACA1E,EAAA8E,2BAAA,IAEA,IAAArD,GAAAnB,EAAA1pC,EACAyrC,GAAAZ,IAAA,CACA,IAAApZ,GAAAga,EAAAZ,EACAzkE,GAAAmoE,SAAA,MAAA9c,MACA2X,EAAAmE,cAAAvtC,EAAA55B,GACAgjE,EAAAqD,iBAAA+B,SAAAxuC,GACA4vB,GAAAwZ,EAAA9G,KAAA,oBAA0FppD,GAAA8mB,EAAA55B,gBAa1FqoE,EAAA,SAAAC,EAAAC,GAEA,OADAC,GAAAF,EAAAjmC,MAAA9/B,MAAA,MAAAkmE,EAAAF,EAAAlmC,MAAA9/B,MAAA,MACAC,EAAA,EAA+BA,EAAAgmE,EAAA/lE,OAAeD,IAC9C,OAAAkS,GAAA,EAAmCA,EAAA+zD,EAAAhmE,OAAeiS,IAClD,GAAA+zD,EAAA/zD,IAAA8zD,EAAAhmE,GAAA,QAEA,WAMAkmE,EAAA,SAAAnhB,EAAAohB,GACA,GAAA/S,GAAA6H,EAAAx5D,UAA2CsjD,EAyB3C,IAxBAohB,GAAAlL,EAAAx5D,OAAA2xD,EAAA+S,GAGA/S,EAAA98C,SACA88C,EAAA98C,OAAA8vD,SACAhT,EAAAiT,eAAAjT,EAAA98C,OAEA88C,EAAA98C,OAAAkqD,EAAAK,WAAAzN,EAAA98C,SAEA88C,EAAAlvD,SACAkvD,EAAAlvD,OAAAkiE,SACAhT,EAAAkT,eAAAlT,EAAAlvD,OAEAkvD,EAAAlvD,OAAAs8D,EAAAK,WAAAzN,EAAAlvD,SAIA6gD,EAAAwhB,QACAnT,EAAAiT,eAAAlC,EAAApf,EAAAwhB,MAAA,IACAnT,EAAAkT,eAAAnC,EAAApf,EAAAwhB,MAAA,KAKAnT,EAAAiT,gBAAAjT,EAAAiT,eAAAG,SAEA,WADA9L,GAAA5B,IAAA0H,EAAA,oDAKA,IAAApN,EAAAkT,gBAAAlT,EAAAkT,eAAAE,SAEA,WADA9L,GAAA5B,IAAA0H,EAAA,oDAUA,KALApN,EAAA91D,MAAA81D,EAAAiT,iBACAjT,EAAA91D,KAAA81D,EAAAiT,eAAAI,gBAIArT,EAAAiT,gBAAAjT,EAAAiT,eAAAK,kBAAA,CACAtT,EAAA6J,SAAA7J,EAAA6J,YACA,QAAAj9D,GAAA,EAAAkS,EAAAkhD,EAAAiT,eAAAK,kBAAAzmE,OAAmFD,EAAAkS,EAAOlS,IAC1FozD,EAAA6J,SAAA74D,KAAAgvD,EAAAiT,eAAAK,kBAAA1mE,IAKAozD,EAAAiT,gBAAAjT,EAAAiT,eAAAxmC,QACAuzB,EAAAvzB,MAAAuzB,EAAAiT,eAAAxmC,QAIAuzB,EAAA,mBAAAA,EAAAiT,gBAAAjT,EAAAiT,eAAAM,yBACAvT,EAAA,kBAAAA,EAAAiT,eAAAM,uBAEA,IAAAC,GAAA,SAAAjkE,EAAAo1D,GACA,GAAAjzC,GAAAm2C,EAAAx5D,UAA6CkB,EAC7C,QAAA3C,KAAA+3D,GACAA,EAAA/3D,KAAA8kB,EAAA9kB,GAAA+3D,EAAA/3D,GAEA,OAAA8kB,IAGA+hD,EAAA,SAAAv2D,EAAA3N,EAAA8jB,GACA,MAAA+5C,GAAAsG,YAAAx2D,EAAAs2D,EAAAjkE,GACAokE,OAAA3T,EAAA4T,QAAA5T,EAAA4T,QAAAvgD,GAAA2sC,EAAA2T,OACAX,SAAAhT,EAAA6T,UAAA7T,EAAA6T,UAAAxgD,GAAA2sC,EAAAgT,SACAtL,WAAA1H,EAAA8T,eAAA9T,EAAA8T,eAAAzgD,GAAA2sC,EAAA+T,cACApM,gBAAA3H,EAAAgU,oBAAAhU,EAAAgU,oBAAA3gD,GAAA2sC,EAAAiU,uBAMAC,EAAA,SAAAhqE,EAAAmpB,EAAA8gD,EAAAC,GACA,GAAApU,EAAA91D,KAAA81D,EAAA91D,GAAA8oE,WAAAhT,EAAA91D,EAAA,cAAA81D,EAAAqU,cAAA,CACA,GAAAxL,GAAA6E,EAAA1N,EAAA91D,IAAAoqE,EAAAH,EAAAtL,EAIA,IAFAyL,MAAAF,GAAA,KAEA,CAEA,IAAAE,EAAAvd,QAAA,QACA,IAAAwd,GAAA,MAAAD,EAAAtB,UAAAsB,EAAAtB,SAAAvL,SAAA6M,EAAAtB,SAAAS,EAAAzT,EAAA91D,GAAAoqE,EAAA/kE,IAAA8jB,EACA,IAAAkhD,EAAAnB,SAAA,QACApT,GAAA91D,EAAA,YAAAqqE,GACAvU,EAAAvzB,OAAA6nC,EAAA/kE,IAAAk9B,QAAAuzB,EAAAvzB,MAAA6nC,EAAA/kE,IAAAk9B,OACA8nC,EAAAC,kBAAA,GACAF,EAAAG,iBACAH,EAAAtB,SAKAuB,EAAAG,cAAAJ,EAAAtB,UAJAsB,EAAAtB,SAAAuB,EACAA,EAAAC,kBAAA,OASA,YAAAN,EAAA,WAAA/kE,KAAAwlE,0BAAA3U,EAAA91D,MAAA,aACA,IAAAgqE,EAAA,WAAA/kE,KAAAylE,0BAAA5U,EAAA91D,MAAA,YAGA81D,EAAAiT,gBAAAjT,EAAAkT,iBACAT,EAAAzS,EAAAiT,eAAAjT,EAAAkT,kBAAAlT,EAAA,OAEAA,OAPA,IAQatyD,KAAA0/D,GAEbyH,EAAA,SAAAljB,GACA,GAAAmjB,GAAA1H,EAAA7D,SAAAwL,gBAAA3H,EAAA4H,0BAEArjB,GAAA8V,SAAA2F,EACAzb,EAAA0iB,cAAAQ,EACAljB,EAAA4iB,YAAAU,EACAtjB,EAAA2d,kBACA3d,EAAA0d,qBACA1d,EAAAujB,mBAAAC,EACAxjB,EAAA58C,GAAA,OAAAk7D,GACA,IAAAmF,GAAA,GAAAN,GAAAnjB,EASA,OALAyjB,GAAAC,iBACAD,EAAAvB,UAAA,GAAAtC,cAAA,kBACA6D,EAAAvB,UAAA,GAAAtC,cAAA,mBAGA6D,GAMAD,EAAA/H,EAAA8H,mBAAA,SAAAI,EAAA3jB,EAAAO,EAAAqjB,GAsBA,GArBA5jB,QAEA2jB,EAAAE,mBACApG,EAAAp+D,KAAAskE,GAEAA,EAAA1lC,QAAA,KAGA0lC,EAAAzB,UAAA,GAAA4B,mBAAA,GAMA,IAAAF,GACAnI,EAAAyD,cAAAwD,cAAAiB,GAGAlF,EAAAkF,EAAApyD,SAGAyuC,EAAA+jB,2BAAA,IAAA/jB,EAAAiC,UAAA,CAEA,GAAA+hB,IACArL,WAAAgL,EACApyD,OAAAoyD,EAAApyD,OAAApS,OAAAwkE,EAAAxkE,OACA05D,SAAA8K,EAAA9K,SAAAC,SAAA6K,EAAA7K,SACAwI,eAAAqC,EAAAzB,UAAA,GAAAX,eAAAoC,EAAAzB,UAAA,GAGAzG,GAAA9G,KAAA,aAAAqP,EAAAzjB,KAQA+iB,EAAA,SAAAtjB,EAAA58C,GACA,GAAA6gE,GAAAxI,EAAA7D,SAAAsM,cAAAhO,EAAAiO,SACA9V,EAAA6H,EAAAx5D,UAA0CsjD,EAC1CqO,GAAAyH,SAAA2F,EACApN,EAAAqU,cAAAQ,EACA7U,EAAAuU,YAAAU,EACAjV,EAAAsP,kBACAtP,EAAAqP,qBACArP,EAAA+V,mBACA/V,EAAAgW,UAAAjhE,GAAA24D,EAAA1N,EAAA98C,OACA,IAAAkrD,GAAA,GAAAwH,GAAA5V,EAOA,OANAoO,GAAAr5D,GAAA,MAAAk7D,IACA4B,GAAA7R,EAAAgW,UAAAhW,EAAA98C,QAEA2kD,EAAAsJ,UACA/D,EAAAqD,iBAAAwF,cAAAjW,EAAA98C,OAAAnO,GAEAq5D,GAUA8H,EAAA,SAAArH,EAAAsH,EAAAP,GACA,GAAA/B,GAAAxE,EAAAR,EACA,IAAAgF,KAAAhnE,OACA,OAAAD,GAAA,EAAAwpE,EAAAvC,EAAAhnE,OAA0DD,EAAAwpE,EAAQxpE,IAAA,CAClE,OAAAkS,GAAA,EAAAu3D,EAAAxC,EAAAjnE,GAAAwiE,YAAAviE,OAA6EiS,EAAAu3D,EAAQv3D,IAAA,CACrF,GAAAw3D,GAAAH,EAAAtC,EAAAjnE,GAAAwiE,YAAAtwD,GAGA,IAAAw3D,EAAA,OAEAV,KAAA/B,EAAAjnE,MAKA2pE,EAAA,SAAAvyC,EAAAyxB,GACA,MAAAoS,GAAAmG,KAAAhqC,EAAA,SAAA9mB,GACAkwD,EAAAgE,gBAAAl0D,KACAuyD,EAAArC,EAAAz1C,aAAAza,EAAA,OAAAu4C,EACA2X,EAAAoJ,oBAAAt5D,EAAAu4C,OAcAghB,EAAA,SAAAv5D,EAAAwlD,EAAAgU,GACAhU,EAAA,UAAAA,CACA,IAAAkT,GAAA,IACAc,KACAd,EAAA,SAAAxH,GACAA,EAAAuI,WAAAjU,GAAA,OAGA,IAAAvyD,GAAAq9D,EAAAtwD,EACAg5D,GAAA/lE,EAAA4E,GAAA,SAAAugE,GACA,GAAA5S,GAAAgU,EAAA,CAGA,GAAAE,GAAAtB,EAAA9K,WAAAr6D,EAAA4E,GAAA,GACAugE,GAAAzB,UAAA+C,GAAAC,aAAAvB,EAAAqB,YAAA,OAGArB,GAAAqB,WAAAjU,IACiBkT,IAMjBkB,EAAA,SAAA55D,GACA,GAAAwlD,EASA,OARAmF,GAAAmG,KAAA9wD,EAAA,SAAAA,GACA,GAAA2xD,GAAAzB,EAAAz1C,aAAAza,EAAA,KAKA,OAJAwlD,GAAA,MAAA+M,EAAAZ,IAAAY,EAAAZ,GACAnM,KACA+M,EAAAZ,GAAAnM,EACA0K,EAAA2J,aAAA75D,EAAAwlD,GACAA,GACiBh1D,KAAAyB,OACjBuzD,GAKAsU,EAAA,SAAAnI,EAAAoI,GACA,GAAArB,GAAA,IACAqB,KACArB,EAAA,SAAAxH,GACA,GAAA1L,GAAA0L,EAAAyI,WACAzI,GAAAuI,YAAAjU,KAGAwT,EAAArH,EAAA,SAAAyG,GACA,GAAA5S,GAAA4S,EAAAuB,WACAvB,GAAAqB,YAAAjU,IACiBkT,IAIjBsB,EAAA,SAAArI,GACA,GAAArO,GAAA+O,EAAAV,EACA,OAAArO,IAG4BA,IAAArmC,EAAAw1C,EAAAd,IAF5B8B,IAA0C9B,UAe1CnB,EAAA,SAAA1pC,EAAA6yB,EAAAsgB,GACA,GAAA7P,EAAAlE,SAAAp/B,GAAA,MAAAA,EACA,UAAAA,EAAA,WACA,IAAAjvB,GAAAq4D,EAAAz1C,aAAAqM,EAAA,KAUA,OATAjvB,IAAA,cAAAA,IAEA,GAAAjH,UAAAjB,YAAA5B,KAAA6C,UAAA,GACAiH,EAAA8hD,GACA,GAAA/oD,UAAAjB,QAAA,GAAAiB,UAAAjB,SAAAiB,UAAA,MACAiH,EAAA,WAAAs4D,EAAA,IAAA4C,KAEAkH,GAAA/J,EAAAlhD,aAAA8X,EAAA,KAAAjvB,IAEAA,EAGA5F,MAAA+iE,0BAAA,SAAAlnE,GACA0kE,EAAA1kE,GAEAmE,KAAAioE,yBAAA,WACA,MAAA1H,IAOAvgE,KAAAkoE,mBAAA,WACA,MAAAvI,IAGA3/D,KAAAmoE,eAAA,gBACAnoE,KAAAooE,sBAAA,wBACApoE,KAAAqoE,uBAAA,yBACAroE,KAAAsoE,eAAA,gBACAtoE,KAAA4vD,WAAA,YACA5vD,KAAAuoE,cAAA,eACAvoE,KAAAwoE,uBAAA,yBACAxoE,KAAAyoE,kBAAA,oBACAzoE,KAAA0oE,yBAAA,4BACA1oE,KAAA2oE,2BAAA,8BACA3oE,KAAA4oE,aAAA,cACA5oE,KAAA6oE,cAAA,eACA7oE,KAAA4iE,qBAAA,uBACA5iE,KAAA6iE,2BAAA,8BACA7iE,KAAA8iE,2BAAA,8BACA9iE,KAAA8oE,0BAAA,sBACA9oE,KAAA+oE,iBAAA,mBACA/oE,KAAAgpE,iBAAA,mBACAhpE,KAAAipE,gBAAA,kBAEAjpE,KAAAkpE,WACAlpE,KAAAmpE,YAA2BviC,QAC3B5mC,KAAAopE,WAA0BxiC,QAC1B5mC,KAAAqpE,UAAyBziC,QACzB5mC,KAAAspE,sBACAtpE,KAAAupE,IAAA,MAKAvpE,KAAAukE,YAAA,SAAAx2D,EAAAy0C,EAAAohB,GACAA,OACA,IAAA7hD,GAAA22C,EAAAx5D,UAAqC0kE,EACrClL,GAAAx5D,OAAA6iB,EAAAygC,GACAzgC,EAAA8hD,SAAA9hD,EAAA8hD,UAAA5F,EAAA7D,SAAAuM,SACA5kD,EAAAw2C,WAAAx2C,EAAAw2C,YAAA0F,EAAA7D,SAAAoP,aAKA,QAHAC,MACAC,EAAAvR,EAAAv1D,QAAAmL,IAAA,MAAAA,EAAArQ,SAAAy6D,EAAAlE,SAAAlmD,SAEAtQ,EAAA,EAAAkS,EAAA+5D,EAAAhsE,OAA8CD,EAAAkS,EAAOlS,IAAA,CACrDskB,EAAAhO,OAAAkqD,EAAAK,WAAAoL,EAAAjsE,IACAksE,GAAA5nD,EAAAhO,OAEA,IAAAnO,GAAA24D,EAAAx8C,EAAAhO,QAAAnU,EAAAkmE,EAAA/jD,EAAAnc,GAGAgkE,EAAAlH,GAAA98D,EAAAmc,EAAAhO,QAAA/S,KAAAqwD,CACA8G,GAAApC,UAAAmK,EAAAt6D,EAAAhG,GAEA6gE,GACA7gE,EAAAiqE,OACAC,UAAAlqE,EAAA4kE,OAAAuF,SAAqDC,IAAAJ,EAAAr5C,KAAAq5C,EAAAn5C,KAAAw5C,GAAAzJ,EAAA56D,GAAAivB,QAAAj1B,EAAAi5D,UAAA6H,IACrD7H,UAAA6H,IAIA+I,EAAA5nE,KAAAjC,GAGA,UAAA6pE,EAAA/rE,OAAA+rE,EAAA,GAAAA,GAGAzpE,KAAAkqE,aAAA,SAAAn8D,EAAA22D,EAAAd,GAEA,OADA6F,MACAhsE,EAAA,EAAAkS,EAAA+0D,EAAAhnE,OAAiDD,EAAAkS,EAAOlS,IAAA,CACxD,GAAAmC,GAAAq+D,EAAAsG,YAAAx2D,EAAA22D,EAAAjnE,GAAAmmE,EACAzL,GAAAv1D,QAAAhD,GACAX,MAAA8K,UAAAlI,KAAAjD,MAAA6qE,EAAA7pE,GACA6pE,EAAA5nE,KAAAjC,GAEA,MAAA6pE,IAGAzpE,KAAAmqE,QAAA,SAAAp8D,EAAAq8D,EAAAnvE,GACA,IAAA+E,KAAAqqE,mBAAA,QAEApvE,QACA,IAAA8I,GAAAk6D,EAAAK,WAAAvwD,GACAnI,EAAA24D,EAAAx6D,GACAumE,EAAA5R,EAAA6R,WAAAC,KACAC,EAAA/R,EAAA6R,WAAAG,QAEAzvE,GAAAqvE,GAAAnS,EAAA3B,KAAAv7D,EAAAqvE,GAAA,WACArM,EAAA0M,WAAA/kE,KAIA3K,EAAAwvE,GAAAtS,EAAA3B,KAAAv7D,EAAAwvE,GAAA,WACAxM,EAAA0M,WAAA/kE,KAGAq4D,EAAA2M,UAAA7mE,EAAAqmE,EAAAnvE,IAUA+E,KAAAw7D,eAAA,SAAAqP,EAAAhxD,GACA,GAAAnb,GAAAu/D,EAAA1G,YAAAsT,GACA9a,GAAA,CAEA,IAAArxD,KAAAhB,OAAA,GACA,GAAA83D,GAAAv2D,MAAA8K,UAAAyG,MAAAhU,KAAAmC,UAAA,EACA,KACA,OAAAlB,GAAA,EAAAkS,EAAAjR,EAAAhB,OAAiDD,EAAAkS,EAAOlS,IACxDsyD,KAAArxD,EAAAjB,GAAAmB,MAAAF,EAAAjB,GAAA+3D,GAGA,MAAA51D,GACAu4D,EAAA5B,IAAA0H,EAAA,2BAAA4M,EAAA,IAAAjrE,IAGA,MAAAmwD,IAGA/vD,KAAA8qE,QAAA,SAAAtoB,EAAAohB,GAEA,GAAAuC,GAAAtV,EAAA8S,EAAAnhB,EAAAohB,EAIA,IAAA/S,EAAA,CACA,SAAAA,EAAA98C,QAAA,MAAA88C,EAAAiT,eAEA,WADA3L,GAAA5B,IAAA,sDAGA,UAAA1F,EAAAlvD,QAAA,MAAAkvD,EAAAkT,eAEA,WADA5L,GAAA5B,IAAA,sDAGAoT,IAAA9Y,EAAA98C,QAEAoyD,EAAAT,EAAA7U,GAEAmV,EAAAG,EAAAtV,GAEA,MAAAsV,GAGA,IAAA4E,KACah9D,GAAA,SAAA2xD,KAAA,WAAAsL,OAAA,8BACAj9D,GAAA,SAAA2xD,KAAA,WAAAsL,OAAA,8BAGbC,EAAA,SAAA/qE,EAAA6N,EAAAmW,EAAAm1C,GACA,GAAA4F,GAAAiM,EAAAC,EAAAC,EAAAL,EAAA7mD,GAAAmnD,EAAAnrE,EAAAkrE,EAAA1L,MACA4L,GADAprE,EAAAkrE,EAAAr9D,IACA7N,EAAAwkE,UAAAxgD,IAEAqnD,GACAxtE,MAAAmmB,EACAsnD,iBAAA,IAAAtnD,EAAAmnD,EAAAnrE,EAAAm7D,SACAoQ,YAAAvrE,EAAAm7D,SACAqQ,iBAAA,GAAAxnD,EAAAmnD,EAAAnrE,EAAAo7D,SACAqQ,YAAAzrE,EAAAo7D,SACAH,WAAAj7D,EAGA,IAAA6N,EAAA0K,aAAAigD,EAAAiO,SACA1H,EAAAlxD,EACAkxD,EAAA2M,cAAA1rE,GACA6N,EAAAkxD,EAAApqC,YAMA,IAHAq2C,EAAA3M,EAAAxwD,GACAo9D,EAAAnrE,KAAAorE,EAAAJ,QAAAE,GAEAA,IAAAhrE,EAAAkrE,EAAA1L,MACAT,EAAA,SACA,IAAAkM,EACA,OAAAp2B,KAAAo2B,GAAA,CACA,IAAAA,EAAAp2B,GAAA6S,QAAA,MACAqX,GAAA,MAAAkM,EAAAp2B,GAAA8uB,UAAAsH,EAAAp2B,GAAA8uB,SAAAvL,SAAA6S,EAAAp2B,GAAA8uB,SAAA7jE,KAAAukE,YAAAx2D,EAAAo9D,EAAAp2B,GAAA30C,KACA+qE,EAAAp2B,GAAAuwB,iBACA6F,EAAAp2B,GAAA8uB,SAAA5E,GAEAA,EAAA2M,cAAA1rE,OAIA++D,GAAA/+D,EAAA2rE,aAAA,IAAA3nD,EAAAnW,EAAAm9D,EAmBA,OAfA,OAAAjM,IACAqM,EAAAQ,qBAAA5rE,GACAA,EAAAwkE,UAAAxgD,GAAA+6C,EACA/+D,EAAAkrE,EAAAr9D,IAAAkxD,EAAApqC,QACA30B,EAAAkrE,EAAA1L,MAAAT,EAAA4H,UACA0E,EAAA,IAAArnD,EAAA,6BAAA+6C,EAAA4H,UAEAkF,GAAAR,GAEAlS,GACAn5D,EAAA05D,WAIA2R,EAAA12C,QAAA9mB,EACAw9D,GAEShtE,KAAAyB,KAETA,MAAAgsE,UAAA,SAAA7Q,EAAAptD,EAAAsrD,GACA,GAAAt3C,GAAAkpD,EAAA9P,EAAAptD,EAAA,EAAAsrD,EACAr5D,MAAA0hE,cAAAuK,cAAAlqD,EAAAypD,iBAAAzpD,EAAA0pD,YAAAtQ,EAAAp5C,EAAAhU,KAEA/N,KAAAksE,UAAA,SAAA/Q,EAAAptD,EAAAsrD,GACA,GAAAt3C,GAAAkpD,EAAA9P,EAAAptD,EAAA,EAAAsrD,EACAr5D,MAAA0hE,cAAAyK,oBAAApqD,EAAAypD,iBAAAzpD,EAAA2pD,iBAAA3pD,EAAA4pD,YAAAxQ,IAGAn7D,KAAAosE,eAAA,SAAA/4B,EAAAg5B,EAAAC,GACA,GAAAzI,GAAA,gBAAAxwB,GAAA8sB,EAAA9sB,IAIA,OAHAwwB,IACA5F,EAAAsO,cAA+C1I,WAAAwI,kBAAAC,0BAE/CrO,GAGAj+D,KAAAwsE,oBAAA,WACA,GAAAC,GAAAxO,EAAAyO,mBAAA,EACA,QAAA9mE,KAAAs6D,GAAA,CACA,GAAAwE,GAAAxE,EAAAt6D,EACA,IAAA8+D,KAAAhnE,OACA,OAAAD,GAAA,EAAAkS,EAAA+0D,EAAAhnE,OAAyDD,EAAAkS,EAAOlS,IAChEwgE,EAAAmO,eAAA1H,EAAAjnE,IAAA,GAIAyiE,KACAP,KACAQ,KACAC,KACAC,KACApC,EAAAyD,cAAAhP,OACA,IAAA2O,GAAApD,EAAAqD,gBAOA,OANAD,IACAA,EAAA3O,QAEA+Z,GACAxO,EAAAyO,mBAAA,GAEAzO,EAGA,IAAA2I,IAAA,SAAAT,EAAAwG,EAAA5pB,GAEA,GAAA6pB,GAAA3O,EAAA7D,SAAAwL,gBAAA3H,EAAA4H,2BACAgH,EAAA1G,EAAA1tD,aAAAm0D,EACApqB,EAAAqqB,GACA1R,WAAAgL,EACApyD,OAAAoyD,EAAApyD,OAAApS,OAAAwkE,EAAAxkE,OACA05D,SAAA8K,EAAA9K,SAAAC,SAAA6K,EAAA7K,SACAwI,eAAAqC,EAAAzB,UAAA,GAAAX,eAAAoC,EAAAzB,UAAA,IACiByB,CAEjBwG,IACA1O,EAAA9G,KAAA,qBAAA3U,EAAAO,GAIAkb,EAAA9G,KAAA,8BAAA3U,EAAAO,GAEAkb,EAAAyD,cAAAoL,mBAAAtqB,IAGAupB,GAAA9N,EAAA8N,cAAA,SAAAvpB,EAAA5E,GACAqgB,EAAA9G,KAAA,kBAAA3U,EAAA5E,GAGA59C,MAAA+sE,mBAAA,SAAAlJ,GACAA,EAAAvL,SAAA5Q,OACAyY,EAAA0D,EAAAvL,SAAA5Q,MAAA,MAEAuW,EAAAyD,cAAA0K,eAAAvI,EAEA,QAAAjkE,KAAAsgE,GAAA,CACA,GAAAwE,GAAAxE,EAAAtgE,EACA,IAAA8kE,EAAA,CAEA,OADAsI,MACAvvE,EAAA,EAAAkS,EAAA+0D,EAAAhnE,OAAyDD,EAAAkS,EAAOlS,IAChEinE,EAAAjnE,IAAAomE,GAAAmJ,EAAAnrE,KAAA6iE,EAAAjnE,GAEAyiE,GAAAtgE,GAAAotE,EAEA9M,EAAAtgE,GAAAlC,OAAA,SACAwiE,GAAAtgE,IAkBAI,MAAAitE,iBAAA,SAAA9R,EAAA3Y,GAEA,cAAA2Y,IACA3Y,SAEAA,EAAAkL,QAAAyK,EAAA/C,eAAA,OACA+F,EAAAuJ,UAAA,GAnBA,mBAmBAvJ,KACAA,EAAAuJ,UAAA,GApBA,mBAoBAvJ,KACAA,EArBA,mBAqBAA,KACA8C,EApBA,kBADA,eAqBA9C,UAGAA,EAAA/T,UAAA,GACAwf,GAAAzL,KAAA16B,UAAA,IAAA+hB,EAAAiC,UAAAjC,EAAAO,eAEAoY,EAAAuJ,UAAA,GAAAoH,qBAAA3Q,GACAA,EAAAuJ,UAAA,GAAAoH,qBAAA3Q,GACAhD,EAAAvC,mBAAAqK,EAAA,SAAA3nD,GACA,MAAA6iD,GAAAv1D,IAAA0S,EAAA1S,KAGAu1D,EAAAtD,UACAsD,EAAAp3B,WACA,IAcA/jC,KAAAktE,sBAAA,SAAA1qB,GACAA,OACA,IAAA2qB,GAAAlN,EAAAviE,OAAA0vE,EAAA,CAMA,OALAnP,GAAAoP,MAAA,WACA,OAAA5vE,GAAA,EAA+BA,EAAA0vE,EAAW1vE,IAC1C2vE,GAAAnP,EAAAgP,iBAAAhN,EAAA,GAAAzd,GAAA,MAGA4qB,GAYAptE,KAAAstE,4BAAA,SAAAv/D,EAAAy0C,GACAA,QACAz0C,EAAAkwD,EAAAK,WAAAvwD,EACA,IAAAnI,GAAA24D,EAAAxwD,GAAA22D,EAAAxE,EAAAt6D,EACA,IAAA8+D,KAAAhnE,OACA,OAAAD,GAAA,EAAAkS,EAAA+0D,EAAAhnE,OAAqDD,EAAAkS,EAAOlS,IAC5DinE,EAAAjnE,GAAAyvE,sBAAA1qB,EAGA,OAAAyb,IAIAj+D,KAAAusE,aAAA,SAAA/pB,GACA,GAAAhvC,IACAkxD,aACAzE,eACAsN,cAAA,EACAC,gBAAA,GAEAlB,GAAA,IAAA9pB,EAAA8pB,sBAEAmB,EAAA,SAAAtS,GACA,SAAAA,GAAA,MAAA3nD,EAAAysD,YAAA9E,EAAAv1D,MACA48C,EAAA6pB,iBAAA,MAAAlR,EAAA7C,UAAA6C,EAAA/T,UAAA,GACA5zC,EAAAysD,YAAA9E,EAAAv1D,IAAAu1D,EACA3nD,EAAAg6D,kBACAlB,GACA,OAAA38D,GAAA,EAAuCA,EAAAwrD,EAAAuJ,UAAAhnE,OAAiCiS,MAsBxE6yC,GAAA2Y,WACAsS,EAAAjrB,EAAA2Y,YAhBA,SAAA0I,GACA,SAAAA,GAAA,MAAArwD,EAAAkxD,UAAAb,EAAAj+D,MACA48C,EAAA6pB,iBAAA,MAAAxI,EAAAvL,UAAAuL,EAAAzc,UAAA,GACA5zC,EAAAkxD,UAAAb,EAAAj+D,IAAAi+D,EACArwD,EAAA+5D,gBAEAjB,GACA,OAAA7uE,GAAA,EAAuCA,EAAAomE,EAAA5D,YAAAviE,OAAiCD,IAAA,CACxE,GAAAyC,GAAA2jE,EAAA5D,YAAAxiE,EACAgwE,GAAAvtE,KAQAsiD,EAAAqhB,SAGA,QAAApmE,KAAA+V,GAAAysD,YAAA,CACA,GAAA//D,GAAAsT,EAAAysD,YAAAxiE,EACA,IAAAyC,EAAAo4D,SAAA,CACAH,EAAAvC,mBAAAqK,EAAA,SAAA3nD,GACA,MAAApY,GAAA0F,IAAA0S,EAAA1S,KAGAghE,GAAA1mE,GAAA,IAAAsiD,EAAAiC,YAAAvkD,EAAAugC,QAAA+hB,EAAAO,cACA,IAAA2qB,GAAA,MAAAlrB,EAAA8pB,sBAAA,MAAA9pB,EAAA8pB,qBAEApsE,GAAAwkE,UAAA,GAAAoH,qBAAA5rE,EAAA,KAAAwtE,GACAxtE,EAAAwkE,UAAA,GAAAoH,qBAAA5rE,EAAA,KAAAwtE,GAEAxtE,EAAA23D,SAAA,GACA33D,EAAA6jC,SAAA,IAKA,OAAAp0B,KAAA6D,GAAAkxD,UAAA,CACA,GAAA9kE,GAAA4T,EAAAkxD,UAAA/0D,EACA/P,GAAA04D,WACA2F,EAAA8O,mBAAAntE,GAEAA,EAAAi4D,SAAA,GACAj4D,EAAAmkC,SAAA,IAIA,MAAAvwB,IAGAxT,KAAAsmD,UAAA,SAAAv4C,EAAA9S,GACA,GAAA+F,EAKA,OAJAkhD,GAAA,SAAAC,GACAnhD,EAAAq9D,EAAAlc,GACAnhD,EAAA+M,IAAA8zD,EAAA7gE,EAAA+M,IAAA,EAAA9S,EAAA+F,EAAA4E,IAAA,IACamI,GACbkwD,GAGAj+D,KAAAumD,UAAA,SAAAx4C,EAAA9S,GACA,GAAA+F,EAOA,OANA/F,SACAA,EAAA40D,eAAA,EACA3N,EAAA,SAAAC,GACAnhD,EAAAq9D,EAAAlc,GACAnhD,EAAA+M,IAAAkwD,EAAA0P,cAAA3sE,EAAA+M,GAAA9S,IACa8S,GACbkwD,EAIA,IAAA2P,IAAA,SAAArwE,EAAAypE,EAAAntD,EAAA4iC,GACA,OAAAh/C,GAAA,EAAAkS,EAAApS,EAAAG,OAAgDD,EAAAkS,EAAOlS,IACvDF,EAAAE,GAAAupE,GAAApoE,MAAArB,EAAAE,GAAAoc,EAEA,OAAA4iC,GAAAl/C,IAEAswE,GAAA,SAAAtwE,EAAAypE,EAAAntD,GAEA,OADAs4B,MACA10C,EAAA,EAAAkS,EAAApS,EAAAG,OAAgDD,EAAAkS,EAAOlS,IACvD00C,EAAAtwC,MAAAtE,EAAAE,GAAAupE,GAAApoE,MAAArB,EAAAE,GAAAoc,GAAAtc,EAAAE,IAEA,OAAA00C,IAEA7uC,GAAA,SAAA/F,EAAAypE,EAAAvqB,GACA,kBACA,MAAAmxB,IAAArwE,EAAAypE,EAAAroE,UAAA89C,KAGAp5C,GAAA,SAAA9F,EAAAypE,GACA,kBACA,MAAA6G,IAAAtwE,EAAAypE,EAAAroE,aAGAmvE,GAAA,SAAAC,EAAAC,GACA,GAAAje,KACA,IAAAge,EACA,mBAAAA,GAAA,CACA,SAAAA,EAAA,MAAAA,EACAhe,GAAAluD,KAAAksE,OAGA,IAAAC,EAAAje,EAAAge,MAEA,IAAAA,EAAArwE,OACA,OAAAD,GAAA,EAAAkS,EAAAo+D,EAAArwE,OAAiED,EAAAkS,EAAOlS,IACxEsyD,EAAAluD,KAAAw8D,EAAA0P,EAAAtwE,IAAAmI,QAGAmqD,GAAAluD,KAAAw8D,EAAA0P,GAAAnoE,GAIA,OAAAmqD,IAEAke,GAAA,SAAA1wE,EAAApB,EAAA+xE,GACA,YAAA3wE,IACAA,EAAAG,OAAA,MAAAH,EAAAS,QAAA7B,IAAA+xE,GAIAluE,MAAAmuE,eAAA,SAAAlzE,EAAAmzE,GACAnzE,EAEaA,EAAAwd,aAAA3b,SACb7B,GAA2BqiC,MAAAriC,IAF3BA,IAmBA,QAfAqiC,GAAAriC,EAAAqiC,OAAA2gC,EAAAjD,kBACAhT,EAAA8lB,GAAAxwC,GAAA,GACA+wC,EAAAP,GAAA7yE,EAAA8Y,QACAu6D,EAAAR,GAAA7yE,EAAA0G,QACA8nE,GAAA2E,GAAApmB,EAAAtqD,OAAA,QAWAiS,EAAA,EAAAu3D,EAAAjH,EAAAviE,OAAoDiS,EAAAu3D,EAAQv3D,IAAA,CAC5D,GAAAzP,GAAA+/D,EAAAtwD,GACA0rD,EAAAn7D,EAAAquE,SAAAruE,EAAAquE,QAAA,GAAAruE,EAAAquE,QAAA,GAAAC,WAAA3H,UAAA3mE,EAAAm7D,SACAC,EAAAp7D,EAAAquE,SAAAruE,EAAAquE,QAAA,GAAAruE,EAAAquE,QAAA,GAAAC,WAAA3H,UAAA3mE,EAAAo7D,QAEA2S,IAAAjmB,EAAA9nD,EAAAo9B,QAAA2wC,GAAAI,EAAAhT,IAAA4S,GAAAK,EAAAhT,IAfA,SAAAh+B,EAAAjhC,GACA,IAAA+xE,GAAApmB,EAAAtqD,OAAA,GACA,GAAA+wE,GAAAhF,EAAAnsC,EACA,OAAAmxC,IACAA,EAAAhF,EAAAnsC,OAEAmxC,EAAA5sE,KAAAxF,OACqBotE,GAAA5nE,KAAAxF,IASrB6D,EAAAo9B,MAAAp9B,GAGA,MAAAupE,GAGA,IAAAiF,IAAA,SAAAnxE,EAAAoxE,GACA,gBAAA99B,GACA,OAAApzC,GAAA,EAAAwpE,EAAA1pE,EAAAG,OAAqDD,EAAAwpE,EAAQxpE,IAC7DozC,EAAAtzC,EAAAE,GAEA,OAAAkxE,GAAApxE,KAGAqxE,GAAA,SAAArxE,GACA,gBAAA2mB,GACA,MAAA3mB,GAAA2mB,KAIA2qD,GAAA,SAAAtxE,EAAAoxE,GACA,GAYAlxE,GAAAwpE,EAZA90B,GACAz0C,OAAAH,EAAAG,OACAmhE,KAAA6P,GAAAnxE,EAAAoxE,GACAx0E,IAAAy0E,GAAArxE,IAEAuxE,GAAA,kFACA,2FACA,oFACA,uFAEAC,GAAA,iFACA,uEAGA,KAAAtxE,EAAA,EAAAwpE,EAAA6H,EAAApxE,OAA4CD,EAAAwpE,EAAQxpE,IACpD00C,EAAA28B,EAAArxE,IAAA6F,GAAA/F,EAAAuxE,EAAArxE,GAAAkxE,EAEA,KAAAlxE,EAAA,EAAAwpE,EAAA8H,EAAArxE,OAA4CD,EAAAwpE,EAAQxpE,IACpD00C,EAAA48B,EAAAtxE,IAAA4F,GAAA9F,EAAAwxE,EAAAtxE,GAEA,OAAA00C,IAGA68B,GAAA,SAAAzxE,GACA,GAAA0xE,GAAAJ,GAAAtxE,EAAAyxE,GACA,OAAAtW,GAAAx5D,OAAA+vE,GAEAC,cAAA5rE,GAAA/F,EAAA,gBAAAyxE,IACAG,YAAA7rE,GAAA/F,EAAA,cAAAyxE,IACAI,aAAA9rE,GAAA/F,EAAA,eAAAyxE,IACAxoC,OAAA,WACA,OAAA/oC,GAAA,EAAAwpE,EAAA1pE,EAAAG,OAAqDD,EAAAwpE,EAAQxpE,IAC7DwgE,EAAAgP,iBAAA1vE,EAAAE,KAGAyoE,aAAA7iE,GAAA9F,EAAA,gBACA8xE,WAAAhsE,GAAA9F,EAAA,iBAIA+xE,GAAA,SAAA/xE,GACA,GAAA0xE,GAAAJ,GAAAtxE,EAAA+xE,GACA,OAAA5W,GAAAx5D,OAAA+vE,GACApnB,WAAAvkD,GAAA/F,EAAA,aAAA+xE,IACAC,UAAAjsE,GAAA/F,EAAA,YAAA+xE,IACAxnB,UAAAzkD,GAAA9F,EAAA,aACA2vE,sBAAA,WACA,OAAAzvE,GAAA,EAAAwpE,EAAA1pE,EAAAG,OAAqDD,EAAAwpE,EAAQxpE,IAC7DF,EAAAE,GAAAyvE,yBAEA1mC,OAAA,WACA,OAAA/oC,GAAA,EAAAwpE,EAAA1pE,EAAAG,OAAqDD,EAAAwpE,EAAQxpE,IAC7DwgE,EAAAmO,eAAA7uE,EAAAE,OAKAuC,MAAAwxD,OAAA,SAAAhP,GAGA,MAFAA,SACAA,EAAAllB,MAAAklB,EAAAllB,OAAA,IACA0xC,GAAAxsB,EAAAyd,aAAAhC,EAAAkQ,eAAA3rB,GAAA,KAGAxiD,KAAAg/D,gBAAA,SAAAxc,GACAA,QACAA,EAAAllB,MAAAklB,EAAAllB,OAAA,GACA,IAAAkyC,IAAAhtB,EAAA3tB,UAAA2tB,EAAAzuC,SAAAyuC,EAAA7gD,OACAuhE,EAAAsM,EAAA,IAAA1B,GAAAtrB,EAAA3tB,SACAw5C,EAAAmB,EAAA,IAAA1B,GAAAtrB,EAAAzuC,QACAu6D,EAAAkB,EAAA,IAAA1B,GAAAtrB,EAAA7gD,QACAqmD,EAAA8lB,GAAAtrB,EAAAllB,OAAA,GAEA2hC,IAEA,QAAAlxD,KAAAmyD,GAAA,CACA,GAAAuP,GAAAxB,GAAA/K,EAAAn1D,GAAA,GACAgG,EAAAk6D,GAAAI,EAAAtgE,GAAA,GACA2hE,EAAA,KAAArB,EACA1sE,EAAAssE,GAAAK,EAAAvgE,GAAA,GACA4hE,EAAA,KAAArB,CAGA,IAAAmB,GAAA17D,GAAApS,EACAiuE,EACA,OAAAnyE,GAAA,EAAAwpE,EAAA/G,EAAAnyD,GAAArQ,OAA2ED,EAAAwpE,EAAQxpE,IAAA,CACnF,GAAAoyE,GAAA3P,EAAAnyD,GAAAtQ,EACA,IAAAwwE,GAAAjmB,EAAA6nB,EAAAvyC,OAAA,IAEA,GAAAwyC,GAAAJ,GAAArB,EAAA3wE,OAAA,IAAAmyE,EAAAE,SACAC,EAAAL,GAAArB,EAAA5wE,OAAA,IAAAmyE,EAAAI,QAEA,IAAAH,GAAAE,EACA,QAAAJ,EAEA3Q,GAAAp9D,KAAAguE,KAMA,MAAAP,IAAArQ,IAIAj/D,KAAAkwE,kBAAA,WACA,MAAAjQ,IAEAjgE,KAAAg7D,gBAAA,WACA,MAAA2F,IAGA3gE,KAAAmwE,YAAAvO,EAOA5hE,KAAAowE,aAAA,SAAAriE,GACA,MAAAmyD,GAAA7B,EAAAtwD,GAAAnI,SAGA5F,KAAAqwE,uBAAA,WACA,MAAA3X,GAAAiO,UAGA3mE,KAAA6lE,yBAAA,WACA,MAAAnN,GAAA4X,YAQAtwE,KAAAy6D,MAAA8D,EAEAv+D,KAAAuwE,cAAAxP,CAEA,IAAAyP,KAAA,CACAxwE,MAAAu9D,iBAAA,WACA,MAAAiT,KAEAxwE,KAAA2iE,kBAAA,SAAA33C,GACAwlD,GAAAxlD,GAIAhrB,KAAAgyC,KAAA,SAAAjkC,EAAA+5D,GAEA,MADAR,GAAAv5D,EAAA,OAAA+5D,GACA7J,GAIAj+D,KAAAywE,QAAA3P,EAEA9gE,KAAA0wE,uBAAA,EACA1wE,KAAA2wE,sBAAA,SAAAC,EAAAjsE,GACAuzD,EAAAr2D,MAAA+uE,EAAAjsE,IASA,IAAAglE,IAAA,SAAAkH,GACA,IAAApS,GAAAoS,EAAA,CACA,GAAAC,GAAA7S,EAAAK,WAAAuS,EACAC,GAAAC,cAAA9S,EAAAW,aAAAkS,EAAAC,gBAIAC,GAAA,WACA/S,EAAA7D,SAAA2F,WACA9B,EAAAW,aAAAX,EAAA7D,SAAA2F,YAKA2C,GAAAzE,EAAAgT,OAAA,SAAArrE,EAAAivB,EAAAq8C,GAcA,MAbAvR,GAAA/5D,KACA+5D,EAAA/5D,IACAmI,GAAA8mB,EACA6vC,aACAzE,gBAGAN,EAAA/5D,GAAA5E,KAAAwgE,IAA0D9B,KAAA95D,EAAAizD,UAAA6H,IAC1DwQ,GACAjT,EAAA9G,KAAA,iBAA4DvxD,KAAA5E,KAAA2+D,EAAA/5D,GAAA5E,KAAA+M,GAAA8mB,KAI5D8qC,EAAA/5D,IAgBA47D,GAAAxhE,KAAAmxE,aAAA,SAAA3uB,GAEA,GAAAx3B,GAAA6tC,EAAArW,EAAAqW,UAAA4E,EAAAjb,EAAAib,OAAAgE,EAAAjf,EAAAif,OAAA/B,EAAAld,EAAAkd,IAEA,OADAe,KAAA5H,MAAA6H,IACAjD,GACA5E,OAAAwH,EAAAX,IAC4BrO,EAAA7O,EAAAif,QAAArB,EAAAV,GAAA10C,EAAAw1C,EAAAd,KAG5BjC,IAAAgE,GAAA,MAAArB,EAAAV,GAIA,OADA10C,EAAA20C,EAAAD,GAAAC,EAAAD,GAAA3xD,GAAA,QAEAyyD,EAAAd,GAAAzB,EAAA9P,QAAAnjC,GACAo1C,EAAAV,GAAAzB,EAAAmT,UAAApmD,GACAq1C,EAAAX,GAAA7G,IAGAuH,EAAAV,GAAA+B,GAAArB,EAAAV,GACA,MAAAc,EAAAd,IAEA,OADA10C,EAAA20C,EAAAD,GAAA3xD,MACAyyD,EAAAd,GAAAzB,EAAA9P,QAAAnjC,IAEAq1C,EAAAX,GAAA7G,GAGAuH,EAAAV,KAAAU,EAAAV,GAAA/wB,QACAyxB,EAAAV,GAAA/wB,MAAAyxB,EAAAV,GAAAnvC,KAAAiwC,EAAAd,GAAA,GACAU,EAAAV,GAAA2R,OAAAjR,EAAAV,GAAAjvC,IAAA+vC,EAAAd,GAAA,GACAU,EAAAV,GAAA1H,MAAAwI,EAAAd,GAAA,GACAU,EAAAV,GAAA3H,OAAAyI,EAAAd,GAAA,GACAU,EAAAV,GAAA4R,QAAAlR,EAAAV,GAAAnvC,KAAA6vC,EAAAV,GAAA1H,MAAA,EACAoI,EAAAV,GAAA6R,QAAAnR,EAAAV,GAAAjvC,IAAA2vC,EAAAV,GAAA3H,OAAA,IAGoB1G,EAAA+O,EAAAV,GAAA10C,EAAAw1C,EAAAd,KAOpB1/D,MAAAyjC,KAAA,WACAw0B,EAAAxiC,EAAAijC,QAAA8Y,gBAUA,KAAA/7C,EAAAijC,QAAAgY,sBAAA,CACA,OAAAjzE,GAAA,EAA+BA,EAAAy6D,EAAAx6D,OAA2BD,IAC1D,OAAAkS,GAAA,EAAmCA,EAAAsoD,EAAAv6D,OAA0BiS,KAV7D,SAAA8hE,EAAA9sE,EAAAtG,GACAo3B,EAAAijC,QAAAyQ,WAAAsI,GAAA9sE,GAAA,WACAtG,EAAAO,MAAAoB,KAAArB,WACA82B,EAAAijC,QAAA4Q,mBAAAmI,GAAA7yE,MAAAoB,KAAArB,YAEAw5D,EAAAj5D,OAAAu2B,EAAAijC,QAAAyQ,WAAAsI,GAAA9sE,IAAAtG,EAAAo3B,EAAAijC,QAAA4Q,mBAAAmI,MAMAxZ,EAAAtoD,GAAAuoD,EAAAz6D,GAAA,GAAAy6D,EAAAz6D,GAAA,GAIAg4B,GAAAijC,QAAAgY,uBAAA,EAGA7Q,IACAmR,KACA/S,EAAAyD,cAAA,GAAAjsC,GAAAijC,QAAAgZ,eAAiF9T,gBAAAK,IACjF4B,GAAA,EACA5B,EAAA9G,KAAA,QAAA8G,KAES1/D,KAAAyB,MAETA,KAAAu2D,MACAv2D,KAAA65D,qBASA75D,KAAA2xE,WAAA,WACA,GAAAC,GAAAC,EAAA,SAAA98B,EAAAhzB,GACA,GAAA0T,EAAAijC,QAAAwQ,QAAAn0B,GAAA,UAAAtf,GAAAijC,QAAAwQ,QAAAn0B,GAAAhzB,EACA,KAAAk8C,EAAA7D,SAAA0X,iBACA,MAA2B1vD,IAAA,iCAAA2yB,EAAA,KAE3B,QAAAp2C,UAAAjB,OAAA,WACA,IAAAq0E,GAAApzE,UAAA,GAAAkoE,EAAAloE,UAAA,GAAAqzE,GAAArzE,UAAA,QAEA,IAAAozE,EAAAhI,SAAAgI,EAAAE,eAAA,MAAAF,EAEA,oBAAAA,GACAC,EAAAH,EAAAlzE,UAAA,IAA8CkoE,YAAAjJ,gBAAAK,QAM9C,IAAA9F,EAAAv1D,QAAAmvE,GACA,GAAA5Z,EAAAv1D,QAAAmvE,EAAA,KAAA5Z,EAAAlE,SAAA8d,EAAA,IAEA,GAAAA,EAAAr0E,QAAAy6D,EAAA/7D,SAAA21E,EAAA,IAEA5Z,EAAAlE,SAAA8d,EAAA,KACAH,EAAAn8C,EAAAijC,QAAAx5D,QAAsD2nE,YAAAjJ,gBAAAK,GAAwD8T,EAAA,IAC9GC,EAAAH,EAAAE,EAAA,GAAAH,KAKAA,EAAAn8C,EAAAijC,QAAAx5D,QAAsD2nE,YAAAjJ,gBAAAK,EAAAwG,QAAAsN,EAAA,IAA8EA,EAAA,IACpIC,EAAA,GAAAv8C,GAAAijC,QAAAwZ,cAAAN,IAIAI,EAAA,GAAAtZ,GAAAwZ,eAA+DzN,QAAAsN,EAAAt1B,SAAA,KAAAoqB,YAAAjJ,gBAAAK,QAG/D,CACA,GAAAkU,IACA1+B,EAAAs+B,EAAA,GAAAj+B,EAAAi+B,EAAA,GACAK,YAAAL,EAAAr0E,QAAA,GAAAq0E,EAAA,GAAAA,EAAA,UACA3R,QAAA2R,EAAAr0E,QAAA,GAAAq0E,EAAA,GAAAA,EAAA,UACAlL,YACAjJ,gBAAAK,EACApC,SAAA,GAAAkW,EAAAr0E,OAAAq0E,EAAA,QAEAC,GAAA,GAAAv8C,GAAAijC,QAAA2Z,OAAAF,GACAH,EAAAzkC,MAAA,WACA,UAAA9X,GAAAijC,QAAA2Z,OAAAF,IAMA,MADAH,GAAApsE,KAAAosE,EAAApsE,GAAA,UAAAk7D,KACAkR,GAOAhyE,KAAAsyE,YAAA,SAAA7Y,EAAAoN,EAAAjJ,GAEA,OADA7N,MACAtyD,EAAA,EAAAwpE,EAAAxN,EAAA/7D,OAA8CD,EAAAwpE,EAAQxpE,IACtD,gBAAAg8D,GAAAh8D,GACAsyD,EAAAluD,KAAA4zB,EAAAijC,QAAAwQ,QAAAzP,EAAAh8D,KAA2DopE,YAAAjJ,qBAC3DzF,EAAAv1D,QAAA62D,EAAAh8D,KACAsyD,EAAAluD,KAAAo8D,EAAA0T,WAAAlY,EAAAh8D,GAAAopE,EAAAjJ,GAEA,OAAA7N,IAQA/vD,KAAAuyE,kBAAA,SAAA9N,EAAA+N,GACA,UAAA/8C,GAAAijC,QAAAwZ,eAAmDzN,UAAAhoB,SAAA+1B,EAAA3L,UAAA,KAAAjJ,gBAAAK,KAKnDj+D,KAAAylE,6BACAzlE,KAAAwlE,4BAEA,IAAAiN,IAAA,SAAA70B,EAAAuE,EAAA1F,EAAAi2B,EAAAC,GAGA,OAFA59B,GAAA6I,EAAAj8C,QAAAi8C,EAAAd,WAAA81B,GAAA,EACAhlB,EAAA8kB,EAAAG,YAAA1wB,EAAA1F,GACA9sC,EAAA,EAA2BA,EAAAi+C,EAAAlwD,OAAgBiS,IAC3C,GAAAi+C,EAAAj+C,IAAAolC,EAAA,CACA69B,GAAA,CACA,OAGA,MAAAD,IAAAC,KAGAE,GAAA,SAAAC,EAAAhxD,EAAAixD,EAAAjD,EAAAE,GACA,GAAAgD,GAAA,GAAApZ,GAAA93C,GACAmxD,EAAAnxD,EAAAu2C,SAAA6a,qBACAza,QAAAuF,EACArW,QAAA,WACA,MAAAmrB,GAAA3yE,IAAAwnD,SAEAqc,OAAA,WACA,GAAAmP,GAAAnV,EAAAzM,QAA+D7vD,OAAAoxE,EAAAntE,KAAkBlI,MACjF,OAAAq1E,GAAA3yE,IAAAizE,eAAA,GAAAD,GAAAL,EAAA3yE,IAAAizE,gBAEAx+C,QAAAk+C,EAAAhlE,GACA84D,UAAAkM,EAAAntE,GACAmqE,WACAE,WACA3nD,SAAA,SAAA+zC,GACA4B,EAAA31C,SAAAyqD,EAAAhlE,GAAAsuD,IAEA5zC,YAAA,SAAA4zC,GACA4B,EAAAx1C,YAAAsqD,EAAAhlE,GAAAsuD,IAEAiX,OAAA,SAAAnN,GACAA,EAAAzB,UAAA,GACAF,OAAA+O,QAAA,GAEAnY,cAAA,WACA,MAAA6X,GAAA7X,cAAAx8D,MAAAq0E,EAAAt0E,YAEA60E,SAAA,SAAArN,GACA,aAAAA,EAAAsN,kBAAA,MAAAtN,EAAAE,mBAAAF,EAAAE,kBAAAxxC,UAAAk+C,EAAAhlE,IAEAoiE,YAAA,SAAAhK,GAKA,GAAAf,GAAA2N,EAAA3yE,IAAAyjE,QAIA,UAAAuB,GAAA,MAAAA,EAAA9M,SAAA,CACA,GAAAob,GAAAzV,EAAA0V,4BAAAxN,EAAAr/D,UAAA8Y,KAAA,SACAgyD,EAAA8B,EAAAhP,UAAAjvC,EAAAijC,QAAAx5D,OAAA6iB,GACA8hD,SAAAkP,EAAA3yE,QAAAyjE,UAAA6P,EAAAhP,UAAA,KACyB3iD,CACzB2xD,GAAAjP,UACAmN,EAAAn8C,EAAAijC,QAAAx5D,OAAA0yE,GACApN,OAAAuO,EAAA3yE,QAAAokE,QAAAkP,EAAAjP,QAAA,MAGAW,EAAAnH,EAAAsG,YAAAwO,EAAAhlE,GAAA6jE,GACAxM,EAAAwO,QAAA,EAeA,GAZA7xD,EAAAujD,iBACAyN,EAAA3yE,IAAAyjE,SAAAuB,GAGAA,EAAAC,kBAAA,GAGAc,EAAAD,gBACAd,EAAAhD,gBAIA,MAAAgD,EAAAZ,OAAAqP,eAAA,CACA,GAAAC,GAAA7V,EAAA+E,cAAArkE,UAAAs/D,EAAAtR,WACAonB,EAAA9V,EAAAmT,UAAA2B,EAAAhlE,IACAimE,EAAA/V,EAAA9P,QAAA4kB,EAAAhlE,IACAkmE,EAAA,MAAAH,GAAA,KAAA1O,EAAAZ,OAAAqP,eAAAC,EAAAC,EAAAC,EAAA5O,EAAAZ,OAAA0P,kBAEA9O,GAAAZ,OAAA/wB,EAAAwgC,EAAA,GACA7O,EAAAZ,OAAA1wB,EAAAmgC,EAAA,GAQA,MAAA7O,IAEA+O,aAAA,SAAAlV,GACAA,EAAA2U,QAAA,IAAA3U,EAAAgB,YAAAviE,OACAugE,EAAAsO,cAAuD1I,SAAA5E,UAGvDA,GAAA2U,UAKAQ,EAAA3+C,EAAAijC,QAAA4J,WAAA1T,IAmBA,OAlBAokB,GAAA11C,MAAA01C,EAAA11C,OAAAvb,EAAAub,OAAA2gC,EAAA7D,SAAAwG,MACAoS,EAAAoB,GAAAjc,EAAA3B,KAAAwc,EAAAoB,GAAAlB,GAAA,GAIAjD,IACA+C,EAAAv9C,EAAAijC,QAAA4J,WAAAjiB,MAAA,WAAyE,YAIzE,IAAAt+B,EAAA8tC,gBACAmjB,EAAA5jB,QAAA,SAAAilB,GAEA,MADAA,GAAA/mB,iBAAAgnB,wBACAvB,EAAAhlE,KAGAkwD,EAAA0P,cAAAoF,EAAAhlE,GAAAilE,EAAA,YAEAE,EAKAlzE,MAAAu0E,WAAA,SAAAxmE,EAAAy0C,EAAAohB,GAGA,GAAA7hD,GAAA0T,EAAAijC,QAAAx5D,QAAyCo5D,SAAAt4D,MAAe4jE,EACxDnuC,GAAAijC,QAAAx5D,OAAA6iB,EAAAygC,EA2CA,QAzCA6wB,GAAAtxD,EAAAsxD,iBAAA,EAEAmB,EAAA,SAAAzmE,GAKA,GAAAglE,GAAA1U,EAAAtwD,GACA0mE,EAAA1B,EAAAntE,GACAotE,EAAAv9C,EAAAijC,QAAAx5D,UAA4D6iB,EAAAixD,iBAC5Dj4E,EAAAgnB,EAAAmiD,gBAAA,SAEAlkE,MAAAylE,0BAAAgP,GAAAz0E,KAAAylE,0BAAAgP,OAEA9K,GAAA8K,GAIA1B,EAAAhlE,GAAA2mE,iBAAA,MAAA1B,EAAAvjB,OACAujB,EAAAvjB,MAAA,EAIA,IAAAklB,IACAv0E,IAAAq1B,EAAAijC,QAAAx5D,UAAmD6iB,GACnDujD,eAAAvjD,EAAAujD,eACA+N,iBACAzrB,SAAA,EAEAmrB,GAAA3yE,IAAAu0E,EACA30E,KAAAylE,0BAAAgP,GAAA15E,GAAA45E,EACA7B,GAAAC,EAAAhxD,EAAAixD,GAAA,IAAAjxD,EAAAguD,UAAA,GAEAgD,EAAAhlE,GAAAwjD,eAAAwhB,EAAAhlE,GAAAwjD,eAAA7zD,OAAA,GAAAk3E,UAAAD,GAEiBp2E,KAAAyB,MAGjB0pE,EAAA37D,EAAArQ,QAAAqQ,EAAA0K,aAAA3b,OAAAiR,MAGAtQ,EAAA,EAAAwpE,EAAAyC,EAAAhsE,OAA+CD,EAAAwpE,EAAQxpE,IACvD+2E,EAAA9K,EAAAjsE,GAGA,OAAAuC,OAIAA,KAAA60E,aAAA,SAAA9mE,EAAA+mE,GACA,GAAA9zE,GAAAq9D,EAAAtwD,EAMA,OALAkwD,GAAAxL,iBAAAzxD,EAAA+M,GAAA,YACA+mE,SACA90E,MAAAylE,0BAAAzkE,EAAA4E,IAGA5F,MAIAA,KAAA+0E,WAAA,SAAAhnE,EAAAy0C,EAAAohB,GACA,GAAA7hD,GAAA0T,EAAAijC,QAAAx5D,QAAyCo5D,SAAAt4D,MAAe4jE,EACxDnuC,GAAAijC,QAAAx5D,OAAA6iB,EAAAygC,EACA,IAAAznD,GAAAgnB,EAAAmiD,gBAAA,UACA8Q,EAAA/W,EAAA0V,4BAAA54E,EACAgnB,GAAA8hD,SAAA9hD,EAAA8hD,UAAAmR,EAAAtQ,UAAA,GACA3iD,EAAAyiD,OAAAziD,EAAAyiD,QAAAwQ,EAAAvQ,QAAA,EA4LA,QA3LA4O,GAAAtxD,EAAAsxD,iBAAA,EACA4B,EAAAlzD,EAAAkzD,iBACAT,EAAA,SAAAzB,GAGA,GAAA0B,GAAA1B,EAAAntE,GACAsvE,EAAAl1E,KAAAs+D,WAAAyU,EAAAhlE,GAEA/N,MAAAwlE,0BAAAiP,GAAAz0E,KAAAwlE,0BAAAiP,OACA9K,GAAA8K,EAEA,IAAAE,IACAv0E,IAAAq1B,EAAAijC,QAAAx5D,UAAkD6iB,GAClDujD,eAAAvjD,EAAAujD,eACA+N,iBACAzrB,SAAA,EAIA5nD,MAAAwlE,0BAAAiP,GAAA15E,GAAA45E,EACA5B,EAAA3yE,IAAAu0E,CAEA,IAAApS,GAAA9sC,EAAAijC,QAAA4J,WAAAxzB,KACAuzB,EAAA5sC,EAAAijC,QAAA4J,WAAA9b,KACAub,EAAAtsC,EAAAijC,QAAAx5D,UAA6D6iB,EAAAggD,iBAC7DhR,EAAAgR,EAAAvb,KACA2uB,EAAApT,EAAAjzB,KACAmwB,EAAA,KACAmW,GAAA,CAGArT,GAAAzkC,MAAAykC,EAAAzkC,OAAAvb,EAAAub,MAEAykC,EAAAM,GAAAlK,EAAA3B,KAAAuL,EAAAM,GAAA,WACAtR,KAAAnyD,MAAAoB,KAAArB,WACAy2E,GAAA,IAGArT,EAAAQ,GAAApK,EAAA3B,KAAAuL,EAAAQ,GAAA,WAIA,GAFA4S,KAAAv2E,MAAAoB,KAAArB,WACAqB,KAAAs9D,mBAAA,EACA,MAAA2B,EAAA3G,SAAA,CAKA,GAAA+c,GAAAtzD,EAAAyiD,QAAAxkE,KAAAo6D,SAAAiY,OACAiD,EAAArW,EAAAuF,OACA+Q,EAAAtW,EAAAgB,YAAA,GAEA+R,EAAAhyE,KAAA2xE,WAAA0D,EAAAZ,EAAAz0E,MACAmiD,EAAA8c,EAAApqC,OAIA,UAAAm9C,EAAA6B,eAAA,CACA,GAAAE,GAAA9V,EAAAmT,UAAAjvB,GACA6xB,EAAAh0E,KAAAmuD,QAAAhM,GACA2xB,GAAoDvjD,KAAAwjD,EAAAxjD,KAAA+kD,EAAA7hC,EAAAugC,EAAA,GAAAvjD,IAAAsjD,EAAAtjD,IAAA6kD,EAAAxhC,EAAAkgC,EAAA,IACpDC,EAAAjC,EAAA6B,eAAAC,EAAAC,EAAAC,EAAAhC,EAAAkC,kBAEAlC,GAAAv+B,EAAAwgC,EAAA,GACAjC,EAAAl+B,EAAAmgC,EAAA,GAGAhV,EAAAsQ,UAAAyC,GAAA,GACA/S,EAAArF,UACA55D,KAAA45D,QAAAqF,EAAA4H,WACA,MAAA0O,GAAAv1E,KAAA45D,QAAA2b,EAAAja,YAEqB/8D,KAAAyB,MAGrB,IAAAw1E,GAAA,SAAA51E,GAEA,OAAAA,EAAAosD,OAAA,IAAApsD,EAAAqsD,OAAA,CAGA,GAAA7rD,GAAAJ,KAAAwlE,0BAAAiP,GAAA15E,EAGA,IAAAqF,EAAAwnD,QAAA,CAKA,GAHA6sB,EAAAz0E,KAAAy6D,MAAAz6D,KAAAs+D,WAAAyU,EAAAhlE,KAGAgU,EAAA5G,OAAA,CAEA,SADAg9C,EAAAlE,SAAAlyC,EAAA5G,QAAAs3D,GAAA7yE,EAAAmzE,EAAAhlE,GAAAgU,EAAA5G,OAAAnb,KAAA+hB,EAAAwtC,eAAAxtC,EAAA5G,OAAAvb,EAAAmzE,EAAAhlE,KACA,OAIA,GAAA0nE,GAAAz1E,KAAAwxD,QAAuDz9C,OAAA0gE,IAAa/2E,MACpE,IAAA0C,EAAAizE,gBAAA,GAAAoC,GAAAr1E,EAAAizE,eAOA,MANA4B,IACAA,GACApgD,QAAAk+C,EAAAhlE,GACAslE,kBACiCzzE,IAEjC,CAKA,IAAA81E,GAAAjgD,EAAAijC,QAAAid,qBAAA/1E,EAAAs1E,EAAA3kB,GAKAqlB,IACAngD,GAAAijC,QAAAx5D,OAAA02E,EAAA7zD,GACA6zD,EAAAtP,mBAAA,EACAsP,EAAApR,QAAAkR,EAAA,GAAAA,EAAA,QACAE,EAAA7T,cAEA3hE,MAAAk9B,QAAAs4C,EAAAt4C,MAAAl9B,MAAAk9B,OAEA2hC,EAAAj/D,KAAAukE,YAAAkQ,EAAAmB,GACAR,GAAA,EACAnW,EAAAoG,kBAAA,GAKAjlE,EAAAklE,iBACAllE,EAAAyjE,SAKA5E,EAAAsG,cAAAnlE,EAAAyjE,UAJAzjE,EAAAyjE,SAAA5E,EACAA,EAAAoG,kBAAA,IAMA,IAAAwQ,GAAA,WAKA5X,EAAAnb,IAAAmc,EAAAnD,OAAA,UAAA+Z,GACA5X,EAAAnb,IAAAiwB,EAAAhlE,GAAA,UAAA8nE,GACAT,IACAA,GAAA,EACAnX,EAAAmO,eAAAnN,IAIAhB,GAAAz1D,GAAAy2D,EAAAnD,OAAA,UAAA+Z,GACA5X,EAAAz1D,GAAAuqE,EAAAhlE,GAAA,UAAA8nE,EAGA,IAAA7yB,KACA,IAAA5iD,MAAA01E,QACA,OAAAC,KAAA31E,OAAA01E,QAAA,CACA,GAAAj6E,IAAA+D,EAAAk9C,YAAAl9C,EAAA+B,QAAA6mB,aAAAutD,EACAl6E,KACAmnD,EAAA5iD,MAAA01E,QAAAC,IAAAl6E,GAOAoiE,EAAAjvC,QAAAiwC,EAAAnD,OAAA,YAAAl8D,EAAAojD,GAEAmV,EAAAzT,QAAA9kD,MAEqBrB,KAAAyB,KAErBA,MAAAwI,GAAAuqE,EAAAhlE,GAAA,YAAAynE,GACAb,EAAA3lD,QAAAwmD,EAKAzzD,EAAA5G,SAAAg9C,EAAAlE,SAAAlyC,EAAA5G,SAAAg9C,EAAA9D,WAAAtyC,EAAA5G,UACA8iD,EAAA+X,cAAAjD,EAAAhlE,GAAAgU,EAAA5G,OAGA,IAAA63D,GAAAv9C,EAAAijC,QAAAx5D,UAA4D6iB,EAAAixD,gBAE5DF,IAAAC,EAAAhxD,EAAAixD,GAAA,OAAAjxD,EAAAkuD,WAEiB1xE,KAAAyB,MAEjB0pE,EAAA37D,EAAArQ,QAAAqQ,EAAA0K,aAAA3b,OAAAiR,MACAtQ,EAAA,EAAAwpE,EAAAyC,EAAAhsE,OAA+CD,EAAAwpE,EAAQxpE,IACvD+2E,EAAAnW,EAAAqL,EAAAjsE,IAGA,OAAAuC,OAIAA,KAAAi2E,aAAA,SAAAloE,EAAAm2D,EAAA4Q,GACA,GAAA9zE,GAAAq9D,EAAAtwD,EACAkwD,GAAAxL,iBAAAzxD,EAAA+M,GAAA,WACA,IAAAmoE,GAAAl2E,KAAAwlE,0BAAAxkE,EAAA4E,GACA,IAAAswE,EACA,OAAA91E,KAAA81E,GACA,SAAAhS,OAAA9jE,EAAA,CACA,GAAAo1E,GAAAU,EAAA91E,GAAA4uB,OACAwmD,IACAvX,EAAAnb,IAAA9hD,EAAA+M,GAAA,YAAAynE,GACAV,SACA90E,MAAAwlE,0BAAAxkE,EAAA4E,IAAAxF,GAMA,MAAAJ,OAIAA,KAAAm2E,kBAAA,WACA,OAAA14E,KAAAuC,MAAAwlE,0BACAvH,EAAAgY,aAAAx4E,EAAA,QAGA,OADAuC,MAAAwlE,6BACAxlE,KAGA,IAAAo2E,IAAA,SAAAroE,EAAA0rD,EAAAyK,GACAzK,EAAAtB,EAAAv1D,QAAA62D,QACA,IAAA7zD,GAAA24D,EAAAxwD,EACAm2D,MAAA,SACA,QAAAzmE,GAAA,EAA2BA,EAAAg8D,EAAA/7D,OAAkBD,IAAA,CAC7C,GAAAy4E,GAAAl2E,KAAAy5D,EAAAh8D,IAAAmI,EACA,IAAAswE,KAAAhS,GAAA,MAAAgS,GAAAhS,GAAA9jE,IAAAk9B,OAAAt9B,KAAAo6D,SAAAwG,QAESriE,KAAAyB,MAETq2E,GAAA,SAAAtoE,EAAAuvB,EAAAm8B,EAAAyK,GACAzK,EAAAtB,EAAAv1D,QAAA62D,QACA,IAAA7zD,GAAA24D,EAAAxwD,EACAm2D,MAAA,SACA,QAAAzmE,GAAA,EAA2BA,EAAAg8D,EAAA/7D,OAAkBD,IAAA,CAC7C,GAAAy4E,GAAAl2E,KAAAy5D,EAAAh8D,IAAAmI,EACAswE,MAAAhS,KACAgS,EAAAhS,GAAA9jE,IAAAk9B,WAIS/+B,KAAAyB,KAETA,MAAAs2E,SAAA,SAAAvoE,EAAAuvB,GACA,MAAA84C,IAAAroE,GAAA,2DAEA/N,KAAAu2E,eAAA,SAAAxoE,GACA,MAAAqoE,IAAAroE,EAAA,8BAEA/N,KAAAw2E,eAAA,SAAAzoE,GACA,MAAAqoE,IAAAroE,EAAA,8BAEA/N,KAAA6oC,SAAA,SAAA96B,EAAAuvB,EAAA4mC,GACAlkE,KAAAy2E,eAAA1oE,EAAAuvB,EAAA4mC,GACAlkE,KAAA02E,eAAA3oE,EAAAuvB,EAAA4mC,IAEAlkE,KAAAy2E,eAAA,SAAA1oE,EAAAuvB,EAAA4mC,GACAmS,GAAAtoE,EAAAuvB,EAAA,4BAAA4mC,GAEAlkE,KAAA22E,aAAA5oE,EAAAuvB,IAEAt9B,KAAA02E,eAAA,SAAA3oE,EAAAuvB,EAAA4mC,GACAmS,GAAAtoE,EAAAuvB,EAAA,4BAAA4mC,GACAlkE,KAAA42E,aAAA7oE,EAAAuvB,IAIAt9B,KAAA62E,kBAAA,WACA,OAAAp5E,KAAAuC,MAAAylE,0BACAxH,EAAA4W,aAAAp3E,GAAA,EAGA,OADAuC,MAAAylE,6BACAzlE,KAIA,IAAA82E,IAAA,SAAA/7E,EAAAgT,EAAAwlD,EAAAwjB,EAAA7S,GACA,GACA8S,GAAAh2E,EAAAi2E,EADA78E,EAAA,UAAAW,EAAAiF,KAAAwlE,0BAAAxlE,KAAAylE,yBAMA,IAHAvB,KAAA,UAGAn2D,EAAArQ,SAAAy6D,EAAAlE,SAAAlmD,GAAA,CACAipE,IACA,QAAAv5E,GAAA,EAAAwpE,EAAAl5D,EAAArQ,OAA+CD,EAAAwpE,EAAQxpE,IACvDuD,EAAAq9D,EAAAtwD,EAAAtQ,IACArD,EAAA4G,EAAA4E,KAAAxL,EAAA4G,EAAA4E,IAAAs+D,KACA8S,EAAAv5E,GAAArD,EAAA4G,EAAA4E,IAAAs+D,GAAAtc,QACAqvB,EAAAF,GAAAC,EAAAv5E,GAAA81D,EACAn5D,EAAA4G,EAAA4E,IAAAs+D,GAAAtc,QAAAqvB,EACAhZ,EAAAgZ,EAAA,0BAAAj2E,EAAA+M,GAAA,OAAAhT,EAAA,kBAKA,CACAiG,EAAAq9D,EAAAtwD,EACA,IAAAnI,GAAA5E,EAAA4E,EACAxL,GAAAwL,IAAAxL,EAAAwL,GAAAs+D,KACA8S,EAAA58E,EAAAwL,GAAAs+D,GAAAtc,QACAqvB,EAAAF,GAAAC,EAAAzjB,EACAn5D,EAAAwL,GAAAs+D,GAAAtc,QAAAqvB,EACAhZ,EAAAgZ,EAAA,0BAAAj2E,EAAA+M,GAAA,OAAAhT,EAAA,cAGA,MAAAi8E,IACSz4E,KAAAyB,MAETk3E,GAAA,SAAAnpE,EAAA1P,GACA,MAAA85D,GAAAlE,SAAAlmD,OAAArQ,OACAW,EAAAO,MAAAoB,MAAA+N,IACAA,EAAArQ,OACAW,EAAAO,MAAAoB,MAAA+N,EAAA,SADA,IAGSxP,KAAAyB,KAETA,MAAAm3E,oBAAA,SAAAppE,EAAAm2D,GAEA,MADA4S,IAAA,SAAA/oE,EAAA,QAAAm2D,GACAlkE,KAAAo3E,gBAAArpE,EAAAm2D,IAGAlkE,KAAAq3E,iBAAA,SAAAtpE,EAAAwlD,EAAA2Q,GACA,MAAA4S,IAAA,SAAA/oE,EAAAwlD,EAAA,KAAA2Q,IAEAlkE,KAAA+vE,SAAA,SAAAhiE,EAAAm2D,GAEA,MADAA,MAAA,UACAgT,GAAAnpE,EAAA,SAAAo0C,GACA,GAAA+zB,GAAAl2E,KAAAwlE,0BAAAnH,EAAAlc,GAAAv8C,GACA,cAAAswE,GAAA,MAAAA,EAAAhS,IACa3lE,KAAAyB,QAEbA,KAAAo3E,gBAAA,SAAArpE,EAAAm2D,GAEA,MADAA,MAAA,UACAgT,GAAAnpE,EAAA,SAAAo0C,GACA,GAAAgpB,GAAAnrE,KAAAwlE,0BAAAnH,EAAAlc,GAAAv8C,GACA,OAAAulE,MAAAjH,KAAA,IAAAiH,EAAAjH,GAAAtc,SACarpD,KAAAyB,QAGbA,KAAAs3E,oBAAA,SAAAvpE,EAAAm2D,GAEA,MADA4S,IAAA,SAAA/oE,EAAA,QAAAm2D,GACAlkE,KAAAu3E,gBAAAxpE,EAAAm2D,IAGAlkE,KAAAiwE,SAAA,SAAAliE,EAAAm2D,GAEA,MADAA,MAAA,UACAgT,GAAAnpE,EAAA,SAAAo0C,GACA,GAAA+zB,GAAAl2E,KAAAylE,0BAAApH,EAAAlc,GAAAv8C,GACA,cAAAswE,GAAA,MAAAA,EAAAhS,IACa3lE,KAAAyB,QAEbA,KAAAu3E,gBAAA,SAAAxpE,EAAAm2D,GAEA,MADAA,MAAA,UACAgT,GAAAnpE,EAAA,SAAAo0C,GACA,GAAAgjB,GAAAnlE,KAAAylE,0BAAApH,EAAAlc,GAAAv8C,GACA,OAAAu/D,MAAAjB,KAAA,IAAAiB,EAAAjB,GAAAtc,SACarpD,KAAAyB,QAEbA,KAAAw3E,iBAAA,SAAAzpE,EAAAwlD,EAAA2Q,GACA,MAAA4S,IAAA,SAAA/oE,EAAAwlD,EAAA,KAAA2Q,IAKAlkE,KAAAg3D,MAAA,SAAA34D,GACA4/D,EAAA1/D,KAAA,QAAAF,GAGA,IAAAo5E,IAAA,SAAA1pE,EAAA1P,GAEA,mBAAA0P,MAAArQ,OACA,OAAAD,GAAA,EAAAwpE,EAAAl5D,EAAArQ,OAA+CD,EAAAwpE,EAAQxpE,IACvDY,EAAA0P,EAAAtQ,QAGAY,GAAA0P,EAEA,OAAAkwD,GAIAj+D,MAAA45D,QAAA,SAAA7rD,EAAAmzD,EAAArI,GACA,MAAA4e,IAAA1pE,EAAA,SAAAo0C,GACA8e,EAAA9e,EAAA+e,EAAArI,MAIA74D,KAAA2qE,WAAA,SAAA58D,EAAA8qD,EAAA6e,GACA,MAAAD,IAAA1pE,EAAA,SAAAo0C,GACA,GAAAud,GAAAgY,EAAAv1B,EAAA8b,EAAAxD,MAAAtY,EACA8b,GAAAkT,cAA+CzR,OAAAjC,QAAA,EAAA5E,aAC/C,IAAAwI,GAAApD,EAAAqD,gBACAD,IACAA,EAAAsW,cAAAjY,GAEAzB,EAAArE,QAAAzX,MAKAniD,KAAAw+D,kBAAA,WAIA,GAAAkB,GAAA7G,EAAAT,GAEA,KAAAsH,IAAAQ,GACAjC,EAAAkT,cAA+CzR,OAAAjC,QAAA,EAAA5E,aAG/C,KAAA6G,IAAAQ,GACAe,EAAAvB,EAAA,KAAA7G,EAGA,OAAA74D,OAGAA,KAAA43E,mBAAA,SAAA7pE,EAAA8pE,EAAA9e,GACAA,OACA,IAAA9b,GAAA,SAAAkF,GACA,GAEA1kD,GAAAwpE,EAFAjmE,EAAAq9D,EAAAlc,GACA21B,EAAA5X,EAAAl/D,EAAA4E,GAGA,IAAAkyE,EAEA,IADA/e,EAAAl3D,KAAAb,GACAvD,EAAA,EAAAwpE,EAAA6Q,EAAAp6E,OAAgDD,EAAAwpE,EAAQxpE,IACxDwgE,EAAAmO,eAAA0L,EAAAr6E,IAAA,EAIA,UAFAyiE,GAAAl/D,EAAA4E,IAEAiyE,GACA72E,EAAA+M,IAAA,GAAA/M,EAAA+M,GAAAyd,UAAA,GAAAxqB,EAAA+M,GAAAyd,SACA,IAAA/tB,EAAA,EAAAwpE,EAAAjmE,EAAA+M,GAAAgqE,WAAAr6E,OAAmED,EAAAwpE,EAAQxpE,IAC3Ew/C,EAAAj8C,EAAA+M,GAAAgqE,WAAAt6E,IAOA,OADAw/C,GAAAlvC,GACA/N,KAGA,IAAAg4E,IAAA,SAAAh3E,EAAA+3D,GACAkF,EAAA2Z,mBAAA52E,EAAA4E,IAAA,EAAAmzD,EA0BA,QAzBAsI,GAAApD,EAAAqD,iBACArkB,EAAA,SAAAohB,GAEAgD,GACAA,EAAA9O,eAAA8L,EAAAz4D,IAEAq4D,EAAAyD,cAAAuW,SAAA5Z,EAAAz4D,IACAq4D,EAAAyD,cAAAwW,yBAAA7Z,EAAAz4D,IAEAq4D,EAAA8R,SAAA1R,EAAAtwD,KAAAkwD,EAAAgY,aAAA5X,EAAAtwD,IACAkwD,EAAAgS,SAAA5R,EAAAtwD,KAAAkwD,EAAA4W,aAAAxW,EAAAtwD,IACAkwD,EAAAzL,iBAAA6L,EAAAtwD,IACAkwD,EAAAxL,iBAAA4L,EAAAtwD,UAGAkwD,GAAAka,oBAAA9Z,EAAAz4D,UACA+5D,GAAAtB,EAAAz4D,UACAw6D,GAAA/B,EAAAz4D,IACAy4D,EAAAtwD,KACAkwD,EAAAma,cAAA/Z,EAAAtwD,IACAswD,EAAAtwD,GAAAuqD,SAAA,OAKA+f,EAAA,EAA4BA,EAAAtf,EAAAr7D,OAA8B26E,IAC1Dp7B,EAAA8b,EAAAsf,GAGAp7B,GAAAj8C,GAQAhB,MAAApC,OAAA,SAAAmQ,EAAAsrD,GACA,GAAAr4D,GAAAq9D,EAAAtwD,GAAAgrD,IASA,OARA/3D,GAAAyG,KACAzG,EAAA+M,GAAA0N,WAAA+B,YAAAxc,EAAA+M,IAEA/M,EAAA4E,IACAq4D,EAAAoP,MAAA,WACA2K,GAAAh3E,EAAA+3D,KACiB,IAAAM,GAEjB4E,GAGAj+D,KAAAs4E,MAAA,SAAAvqE,EAAAsrD,GACA,GAAAN,MACA9b,EAAA,SAAAlvC,EAAAwqE,GACA,GAAAv3E,GAAAq9D,EAAAtwD,EACA,IAAA/M,EAAAyG,KACAzG,EAAA+M,GAAA0N,WAAA+B,YAAAxc,EAAA+M,QAEA,IAAA/M,EAAA+M,GAAA,CACA,KAAA/M,EAAA+M,GAAAgqE,WAAAr6E,OAAA,GACAu/C,EAAAj8C,EAAA+M,GAAAgqE,WAAA,GAEAQ,IAAAP,GAAAh3E,EAAA+3D,IAQA,OAJAkF,GAAAoP,MAAA,WACApwB,EAAAlvC,GAAA,KACa,IAAAsrD,GAEb4E,GAGAj+D,KAAA0yD,MAAA,WACAuL,EAAAtG,SAAA,WACA6Y,IAAA,EACAvS,EAAAua,kBACAva,EAAAwa,qBACAxa,EAAAuO,sBACAvO,EAAAjyB,SACAhsC,KAAAylE,6BACAzlE,KAAAwlE,6BACAvF,EAAAviE,OAAA,EACAsC,KAAA04E,SAAA14E,KAAA04E,WACan6E,KAAAyB,OAGb,IAAA24E,IAAA,SAAAt8E,GACAA,EAAAy/D,QAAAz/D,EAAAy/D,OAAArgD,YACApf,EAAAy/D,OAAArgD,WAAA+B,YAAAnhB,EAAAy/D,QACAz/D,EAAAw7D,UACAx7D,EAAA0nC,UAGA/jC,MAAAmR,MAAA,WACA8sD,EAAAzM,SAAAqN,KAAA8Z,IACA1a,EAAAe,kBAAAH,KAAA8Z,IAEAzY,KACAC,MAGAngE,KAAA44E,gBAAA,SAAAt7C,GAEA,MADAqjC,GAAArjC,EACA2gC,GAIAj+D,KAAA4nE,aAAAR,EAEApnE,KAAA2zE,4BAAA,SAAA54E,EAAA89E,GAEA,OADAC,KAAAD,EAAA,eAAA99E,GAAAyC,MAAA,QAAAk2E,EAAA,KAAAzU,EAAA,KAAA7kE,EAAA,KAAA2+E,EAAA,KACAt7E,EAAA,EAA2BA,EAAAq7E,EAAAp7E,OAAiBD,IAAA,CAC5C,GAAA2nC,GAAA64B,EAAAn3D,QAAAgyE,EAAAr7E,GAAA,aACA2nC,KACAA,EAAAs/B,YAAAgP,EAAAtuC,EAAAs/B,WACAt/B,EAAAy+B,WAAA5E,EAAA75B,EAAAy+B,UACAz+B,EAAAq/B,UAAAsU,EAAA3zC,EAAAq/B,SACAr/B,EAAAo/B,SAAApqE,EAAAgrC,EAAAo/B,SAGA,OAAoBE,UAAAgP,IAAAzU,KAAAwF,QAAAsU,IAAA3+E,OAIpB4F,KAAAg5E,MAAA,SAAAjrE,EAAAkrE,EAAAC,GAEA,GAAAtzE,EAEAuyD,GAAAlE,SAAAlmD,GACAnI,EAAAmI,GAGAA,EAAA/N,KAAAs+D,WAAAvwD,GACAnI,EAAA5F,KAAAy6D,MAAA1sD,GAGA,IAAAorE,GAAAn5E,KAAAmuE,gBAA8Cp6D,OAAAnO,EAAA03B,MAAA,MAAuB,GACrE87C,EAAAp5E,KAAAmuE,gBAA8CxsE,OAAAiE,EAAA03B,MAAA,MAAuB,EAErE27C,GAAA,GAAAA,EAEAC,EAKAnrE,EAAA/N,KAAAs+D,WAAA2a,IAJAlrE,EAAA/N,KAAAs+D,WAAA14D,GACA5F,KAAA+c,aAAAhP,EAAA,KAAAkrE,IAKA/Y,EAAA+Y,GAAA/Y,EAAAt6D,MACA,QAAAnI,GAAA,EAAAwpE,EAAA/G,EAAA+Y,GAAAv7E,OAAkED,EAAAwpE,EAAQxpE,IAC1EyiE,EAAA+Y,GAAAx7E,GAAA47E,aAAAJ,GACA/Y,EAAA+Y,GAAAx7E,GAAA67E,oBAAAvrE,SAEAmyD,GAAAt6D,GAEA5F,KAAAwlE,0BAAAyT,GAAAj5E,KAAAwlE,0BAAA5/D,SACA5F,MAAAwlE,0BAAA5/D,GACA5F,KAAAylE,0BAAAwT,GAAAj5E,KAAAylE,0BAAA7/D,SACA5F,MAAAylE,0BAAA7/D,GAEA5F,KAAA0hE,cAAA6X,SAAA3zE,EAAAqzE,EACA,IAAA5X,GAAArhE,KAAAshE,gBACAD,IACAA,EAAAkY,SAAA3zE,EAAAqzE,GAEAtZ,EAAAsZ,GAAAtZ,EAAA/5D,SACA+5D,GAAA/5D,EAEA,IAAA4zE,GAAA,SAAAj8E,EAAAk8E,EAAA1+E,GACA,OAAA0C,GAAA,EAAAwpE,EAAA1pE,EAAAG,OAAiDD,EAAAwpE,EAAQxpE,IACzDF,EAAAE,GAAAinE,UAAA+U,GAAAJ,aAAAJ,GACA17E,EAAAE,GAAAinE,UAAA+U,GAAAH,oBAAAvrE,GACAxQ,EAAAE,GAAA1C,EAAA,MAAAk+E,EACA17E,EAAAE,GAAA1C,GAAAgT,EAGAyrE,GAAAL,EAAA,YACAK,EAAAJ,EAAA,YAEAp5E,KAAA45D,QAAAqf,IAGAj5E,KAAA05E,YAAA,SAAAC,GACApjB,EAAAojB,GAGA35E,KAAA0sE,kBAAA,SAAA/vE,EAAAi9E,GACA,GAAAC,GAAApZ,CAIA,OAHAA,GAAA9jE,EACA+jE,EAAA/jE,GAAA,GAAA63D,OAAAC,UAAyD,KACzDmlB,GAAA55E,KAAAw+D,oBACAqb,GAIA75E,KAAAw9D,iBAAA,WACA,MAAAiD,IAIAzgE,KAAA85E,eAAA,WACA,MAAApZ,IAGA1gE,KAAAqtE,MAAA,SAAAhvE,EAAA07E,GACA,GAAAC,GAAAh6E,KAAAw9D,kBACAwc,IACAh6E,KAAA0sE,mBAAA,EACA,KACAruE,IAEA,MAAAuB,GACAu4D,EAAA5B,IAAA,sCAAA32D,GAEAo6E,GACAh6E,KAAA0sE,mBAAA,GAAAqN,IAGA/5E,KAAAi6E,iBAAAj6E,KAAAqtE,MAEArtE,KAAAk6E,cAAAnS,EACA/nE,KAAA64D,UAAAT,EACAp4D,KAAAstB,KAAA,SAAAvf,EAAA+5D,GAEA,MADAR,GAAAv5D,EAAA,QAAA+5D,GACA7J,GAIAj+D,KAAAm6E,cAAAtS,EACA7nE,KAAAo6E,gBAAAzS,EACA3nE,KAAAq6E,YAAAr6E,KAAAzB,KAGA45D,GAAAj5D,OAAAu2B,EAAAmoC,gBAAAzF,EAAAvB,gBACA75C,aAAA,SAAAhP,EAAA3T,EAAAyB,GACAmE,KAAA+c,aAAAhP,EAAA3T,EAAAyB,IAEA2sB,aAAA,SAAAza,EAAA3T,GACA,MAAA4F,MAAAwoB,aAAAiN,EAAAijC,QAAA4F,WAAAvwD,GAAA3T,IAEA0gE,yBAAA,SAAA7H,GAKA,MAJAkF,GAAAlE,SAAAhB,KACAA,UAEAA,EAAA,GAAArtD,GAAAqtD,EAAA,GAAArtD,IAAAuyD,EAAAzQ,OACAuL,GAEAqnB,uBAAA,SAAA10E,EAAA7K,GAEA,GADAiF,KAAA+9D,iBAAAn4D,GAAA6vB,EAAAijC,QAAAx5D,UAA8DnE,GAC9DA,EAAA2/D,SAAA,CAEA,OADAv7D,MACA1B,EAAA,EAA+BA,EAAA1C,EAAA2/D,SAAAh9D,OAA0BD,IAAA,CAGzD,GAAAo9D,GAAA76D,KAAA86D,yBAAA//D,EAAA2/D,SAAAj9D,GACA0B,GAAA07D,EAAA,GAAAj1D,IAAAi1D,EAEA76D,KAAA+9D,iBAAAn4D,GAAA80D,SAAAv7D,IAGAo7E,wBAAA,SAAA9gB,GACA,OAAAh8D,KAAAg8D,GACAz5D,KAAAs6E,uBAAA78E,EAAAg8D,EAAAh8D,KAEA+8E,qBAAA,SAAA50E,EAAA7K,GAEA,GADAiF,KAAAg+D,eAAAp4D,GAAA6vB,EAAAijC,QAAAx5D,UAA4DnE,GAC5DA,EAAA2/D,SAAA,CAEA,OADAv7D,MACA1B,EAAA,EAA+BA,EAAA1C,EAAA2/D,SAAAh9D,OAA0BD,IAAA,CAGzD,GAAAo9D,GAAA76D,KAAA86D,yBAAA//D,EAAA2/D,SAAAj9D,GACA0B,GAAA07D,EAAA,GAAAj1D,IAAAi1D,EAEA76D,KAAAg+D,eAAAp4D,GAAA80D,SAAAv7D,IAGAs7E,sBAAA,SAAAhhB,GACA,OAAAh8D,KAAAg8D,GAEAz5D,KAAAw6E,qBAAA/8E,EAAAg8D,EAAAh8D,KAEAqJ,QAAA,SAAAlB,EAAA80E,GACA,qBAAAA,EAAA16E,KAAA+9D,iBAAAn4D,GAAA5F,KAAAg+D,eAAAp4D,IAEA+0E,aAAA,SAAAC,EAAA3B,GACAj5E,KAAAg5E,MAAA4B,EAAA3B,GAAA,IAGA4B,UAAA,SAAA9sE,EAAA+sE,GACA,GAAAC,GAAA/6E,KAAAs+D,WAAAvwD,GACAitE,EAAAh7E,KAAAy6D,MAAAsgB,GACAE,EAAAj7E,KAAAs+D,WAAAwc,GACAI,EAAAl7E,KAAAy6D,MAAAwgB,GACA5Z,EAAArhE,KAAAshE,gBAEAyZ,GAAAt/D,WAAA+B,YAAAu9D,GACAE,EAAAx9D,YAAAs9D,GACA1Z,GACAA,EAAAwZ,UAAAE,EAAAC,EAAAC,EAAAC,IAGAh8E,OAAA,SAAAi8E,EAAAC,EAAAC,GACA,GAAA59E,EACA,IAAA49E,EACA,IAAA59E,EAAA,EAA2BA,EAAA49E,EAAA39E,OAAkBD,IAC7C09E,EAAAE,EAAA59E,IAAA29E,EAAAC,EAAA59E,QAGA,KAAAA,IAAA29E,GAAAD,EAAA19E,GAAA29E,EAAA39E,EACA,OAAA09E,IAEAhD,uBACAmD,uBAAA,SAAAnV,GACA,MAAAA,GAAAzB,UAAA,GAAA6W,aAAA,EAAApV,EAAAzB,UAAA,GAAA6W,aAAA,QAIA3d,EAAA7zD,UAAAqwD,UACAiY,OAAA,SACAnJ,SAAA,WACAsS,uBAAA,EACAC,sBACAC,UAAA,SACA3b,UAAA,KACA+R,kBAAA,EACA5P,eACAyZ,eACAhV,SAAA,MACAiV,oBACAxS,WAAA,WACAI,eAAwB7Q,KAAA,QACxBkjB,gBAAA,WACAC,mBAAA,KACAC,qBAAA,WACAC,gBAAA,KACAC,YAAqBC,MAAA,SACrBpe,YAAA,EACAuL,YACA8S,eAAA,EACAC,YAAqBC,eAAA,EAAAC,OAAA,QACrBC,qBAAA,EACAC,WAAA,MACA5b,MAAA,uBAMA,IAAAlI,GAAA,GAAAkF,EAEAnoC,GAAAijC,UAEAA,EAAA+jB,YAAA,SAAA5e,EAAA6e,GACA,GAAA/sE,GAAA,GAAAiuD,GAAAC,EACA,IAAA6e,EACA,OAAAC,KAAAD,GACA/sE,EAAAgtE,GAAAD,EAAAC,EAIA,OADAhtE,GAAA8zB,OACA9zB,GAEA+oD,EAAAmG,KAAA,SAAA5L,EAAA50D,GACA,SAAA40D,EACA,mBAAAA,GACA50D,EAAAq6D,EAAA4F,WAAArL,QACA,UAAAA,EAAAv1D,OACA,OAAAD,GAAA,EAA2BA,EAAAw1D,EAAAv1D,OAAiBD,IAC5CY,EAAAq6D,EAAA4F,WAAArL,EAAAx1D,SAGAY,GAAA40D,IAKAl5D,EAAA2+D,WAKCl8D,KAAA,mBAAA8f,eAAAtc,MAmBD,WAEA,GAAAy1B,GAAAz1B,KAAAm4D,EAAA1iC,EAAAu+B,YAEA7S,EAAA,SAAAC,EAAAxhD,GACA,SAAAA,EAAA,WACA,IAAAyhD,GAAAC,EAAA1hD,GAAAm1C,EAAAwM,EAAAF,EAAA,EACA,QAAAtM,EAAAqM,EAAA,KAAArM,EAAAqM,EAAA,OAEA3C,EAAA0C,EAAA5iD,KAAAyB,KAAA,QACA4hD,EAAAT,EAAA5iD,KAAAyB,KAAA,UACA6hD,EAAAV,EAAA5iD,KAAAyB,KAAA,UACAuhD,EAAA,SAAAzC,EAAA56B,GACA,MAAA46B,GAAAhhD,KAAAghD,EAAAhhD,KAAAomB,GAAA46B,EAAA56B,IAEAo9B,EAAA,SAAA1hD,GACA,MAAAA,GAAAk/C,SAAAl/C,EAAAk/C,QAAAphD,OAAA,EAAAkC,EAAAk/C,QACAl/C,EAAAkiD,gBAAAliD,EAAAkiD,eAAApkD,OAAA,EAAAkC,EAAAkiD,eACAliD,EAAAmiD,eAAAniD,EAAAmiD,cAAArkD,OAAA,EAAAkC,EAAAmiD,eACAniD,IAcAg9E,EAAA,SAAA3e,GACA,GAAA4e,MAA4BC,KAAAC,KAA8BC,KAE1DC,IAMAj9E,MAAAqjE,SAAA,SAAAt1D,GACA,GAAAnI,GAAAq4D,EAAAxD,MAAA1sD,GACAmvE,EAAAjf,EAAAmT,UAAArjE,EAEA8uE,GAAAj3E,KACAi3E,EAAAj3E,GAAAmI,EACA+uE,EAAAj7E,KAAAkM,GACAgvE,EAAAn3E,MAIA,IAAAu3E,GAAA,SAAAp7D,GACA,GAAAA,EACA,OAAAtkB,GAAA,EAAmCA,EAAAskB,EAAAg2D,WAAAr6E,OAAyBD,IAC5D,MAAAskB,EAAAg2D,WAAAt6E,GAAA+tB,UAAA,GAAAzJ,EAAAg2D,WAAAt6E,GAAA+tB,SAAA,CACA,GAAA4xD,GAAA1kB,QAAA4F,WAAAv8C,EAAAg2D,WAAAt6E,IACAiX,EAAAupD,EAAAxD,MAAA14C,EAAAg2D,WAAAt6E,GAAA,QACA,IAAAiX,GAAAsoE,EAAAtoE,IAAAsoE,EAAAtoE,GAAA,GACA,GAAA2oE,GAAApf,EAAAmT,UAAAgM,EACAL,GAAAn3E,GAAA8O,IACA9O,GAAA8O,EACA+sD,QACAlxC,KAAA8sD,EAAA9sD,KAAA2sD,EAAA3sD,KACAE,IAAA4sD,EAAA5sD,IAAAysD,EAAAzsD,MAGAwsD,EAAAvoE,GAAA9O,EAEAu3E,EAAAp7D,EAAAg2D,WAAAt6E,KAMA0/E,GAAApvE,IAIA/N,KAAA23E,cAAA,SAAAjY,EAAA4d,GACA,SAAA5d,EAAA,CACA4d,OACA,IAAAC,GAAA7kB,QAAA4F,WAAAoB,GACA95D,EAAAq4D,EAAAxD,MAAA8iB,GACA/1E,EAAAu1E,EAAAn3E,GACAs3E,EAAAjf,EAAAmT,UAAAmM,EAEA,IAAA/1E,EACA,OAAA/J,KAAA+J,GACA,GAAAA,EAAArJ,eAAAV,GAAA,CACA,GAAA+/E,GAAA9kB,QAAA4F,WAAA7gE,GACA4/E,EAAAC,EAAA7/E,IAAAwgE,EAAAmT,UAAAoM,EAGA,UAAAA,EAAAzM,cAAA,MAAAgM,EAAAn3E,GAAAnI,GAAA,QAEAs/E,GAAAn3E,GAAAnI,IACAmI,GAAAnI,EACAgkE,QACAlxC,KAAA8sD,EAAA9sD,KAAA2sD,EAAA3sD,KACAE,IAAA4sD,EAAA5sD,IAAAysD,EAAAzsD,MAGAwsD,EAAAx/E,GAAAmI,KAYA5F,KAAA8mE,cAAA,SAAA/4D,EAAAnI,GAEAA,KAAAq4D,EAAAxD,MAAA1sD,EAEA,IAAAtO,GAAA4c,SAAA8wB,KACAprB,EAAAhU,EAAA0N,UAIA,KAFAuhE,EAAAp3E,GAAAo3E,EAAAp3E,GAAAo3E,EAAAp3E,GAAA,IAEA,MAAAmc,MAAAtiB,GAAA,CACA,GAAAg+E,GAAAxf,EAAAxD,MAAA14C,EAAA,QACA,IAAA07D,GAAAZ,EAAAY,GAAA,CACA,GAAAC,GAAAzf,EAAAmT,UAAArvD,EAEA,UAAAg7D,EAAAU,GAAA73E,GAAA,CACA,GAAA+3E,GAAA1f,EAAAmT,UAAArjE,EACAgvE,GAAAU,GAAA73E,IACAA,KACA67D,QACAlxC,KAAAotD,EAAAptD,KAAAmtD,EAAAntD,KACAE,IAAAktD,EAAAltD,IAAAitD,EAAAjtD,MAGAwsD,EAAAr3E,GAAA63E,EAEA,MAEA17D,IAAAtG,aAIAzb,KAAA49E,gBAAA,SAAA/Z,GACA,GAAAmZ,EAAAnZ,EAAAgD,cACAmW,EAAAnZ,EAAAgD,YACA,EACA,OAAAppE,KAAAs/E,GACAA,EAAA5+E,eAAAV,IAAAs/E,EAAAt/E,WACAs/E,GAAAt/E,GAAAomE,EAAAgD,iBACAoW,GAAApZ,EAAAgD,aAOA7mE,KAAAu5E,SAAA,SAAAqB,EAAA3B,GACA8D,EAAA9D,GAAA8D,EAAAnC,GACAmC,EAAAnC,MACAqC,EAAAhE,GAAAgE,EAAArC,GACAqC,EAAArC,GAAA,MAGA56E,KAAAuhE,wBAAA,SAAA37D,GACA,MAAAm3E,GAAAn3E,IAGA5F,KAAAuyD,eAAA,SAAAsU,GACA,GAAAnH,GAAAud,EAAApW,EACAnH,WACAqd,GAAArd,GAAAmH,SACAoW,GAAApW,KAIA7mE,KAAA0yD,MAAA,WACAmqB,KACAC,KACAC,KACAC,MAOAh9E,KAAAmjE,UAAA,SAAAp1D,GACA,SAAAA,EAAAgjE,aAAA,CACA,GAAAnrE,GAAAq4D,EAAAxD,MAAA1sD,GACAu7B,EAAA2zC,EAAAr3E,EAEA0jC,IAAAtpC,KAAA23E,cAAAruC,KAIAtpC,KAAA66E,UAAA,SAAA9sE,EAAA2xD,EAAA39C,EAAA87D,EAAAC,GACA,GAAA5iE,GAAA+hE,EAAAvd,EACAqd,GAAAc,KACAd,EAAAc,MAEA,IAAAH,GAAAzf,EAAAmT,UAAArvD,GACA47D,EAAAG,GAAA7f,EAAAmT,UAAArjE,EAEAmN,IAAA6hE,EAAA7hE,UACA6hE,GAAA7hE,GAAAwkD,GAGAqd,EAAAc,GAAAne,IACA95D,GAAA85D,EACA+B,QACAlxC,KAAAotD,EAAAptD,KAAAmtD,EAAAntD,KACAE,IAAAktD,EAAAltD,IAAAitD,EAAAjtD,MAGAwsD,EAAAvd,GAAAme,GAGA79E,KAAA+9E,YAAA,SAAAhwE,EAAA2xD,GACA,GAAAxkD,GAAA+hE,EAAAvd,EACAxkD,WACA6hE,GAAA7hE,GAAAwkD,SACAud,GAAAvd,KAIA1/D,KAAAg+E,iBAAA,SAAAjwE,EAAA2xD,EAAAue,GACA,GAAA/iE,GAAA+hE,EAAAvd,EACA,IAAAxkD,EAAA,CACA,GAAAgjE,KACAA,GAAAxe,GAAAue,EACAj+E,KAAA23E,cAAAz8D,EAAAgjE,GACAjgB,EAAA0M,WAAAzvD,KAIAlb,KAAAm+E,gBAAA,SAAApwE,GACA,GAAAqwE,GAAA1lB,QAAA4F,WAAAvwD,GACAnI,EAAAq4D,EAAAxD,MAAA2jB,GACAC,EAAApB,EAAAr3E,EAEA,OAAAy4E,GACA3lB,QAAA4F,WAAA+f,GAEA,OAKAh9D,EAAA,SAAAjkB,GACA,aAAAA,EAAA,KAAAA,EAAAurB,QAAA,aAAAA,QAAA,cAEA21D,EAAA,SAAAvwE,EAAAwwE,GACAA,EAAAl9D,EAAAk9D,OACA,KAAAxwE,EAAAywE,UAAAC,QACA1wE,EAAAywE,UAAAC,QAAAF,EAEAxwE,EAAAywE,UAAAD,GAEAG,EAAA,SAAA3wE,GACA,gBAAAA,EAAAywE,UAAAC,QAAA1wE,EAAAywE,UAAAzwE,EAAAywE,UAAAC,SAEAE,EAAA,SAAA5wE,EAAAwuD,EAAAC,GACAD,EAAA,MAAAA,KAAApE,EAAAv1D,QAAA25D,OAAA/+D,MAAA,OACAg/D,EAAA,MAAAA,KAAArE,EAAAv1D,QAAA45D,OAAAh/D,MAAA,MAEA,IAAAghF,GAAAE,EAAA3wE,GACA6wE,EAAAJ,EAAAhhF,MAAA,OAEAqhF,EAAA,SAAAn2E,EAAAo2E,GACA,OAAArhF,GAAA,EAA+BA,EAAAqhF,EAAAphF,OAAoBD,IACnD,GAAAiL,GACA,GAAAk2E,EAAA5gF,QAAA8gF,EAAArhF,KACAmhF,EAAA/8E,KAAAi9E,EAAArhF,QAEA,CACA,GAAAymB,GAAA06D,EAAA5gF,QAAA8gF,EAAArhF,KACA,GAAAymB,GACA06D,EAAA3gF,OAAAimB,EAAA,IAKA26D,IAAA,EAAAtiB,GACAsiB,GAAA,EAAAriB,GAEA8hB,EAAAvwE,EAAA6wE,EAAAh/D,KAAA,MAGA6V,GAAAijC,QAAAx5D,OAAAu2B,EAAAmoC,gBAAA7zD,WAEAi4D,UAAA,EAEAjd,aAAAtG,EACAsgC,eAAAn9B,EACAo9B,eAAAn9B,EAEAyf,eAAA,WAIA,MAHA,OAAAthE,KAAAi/E,cACAj/E,KAAAi/E,YAAA,GAAArC,GAAA58E,OAEAA,KAAAi/E,aAGAC,mBAAA,SAAAxf,GACA1/D,KAAAshE,iBAAAqW,cAAAjY,IAGArrD,cAAA,SAAA/M,EAAAigB,EAAA80C,EAAA8iB,GACA,MAAAn/E,MAAAgd,gBAAA,KAAA1V,EAAAigB,EAAA80C,EAAA8iB,IAGAniE,gBAAA,SAAAnV,EAAAP,EAAAigB,EAAA80C,EAAA8iB,GACA,GACA1hF,GADAmC,EAAA,MAAAiI,EAAAwU,SAAAhI,cAAA/M,GAAA+U,SAAAW,gBAAAnV,EAAAP,EAEAigB,QACA,KAAA9pB,IAAA8pB,GACA3nB,EAAA2nB,MAAA9pB,GAAA8pB,EAAA9pB,EAEA4+D,KACAz8D,EAAA4+E,UAAAniB,GAEA8iB,OACA,KAAA1hF,IAAA0hF,GACAv/E,EAAAmd,aAAAtf,EAAA,GAAA0hF,EAAA1hF,GAEA,OAAAmC,IAGA4oB,aAAA,SAAAza,EAAAqxE,GACA,aAAArxE,EAAAya,aAAAza,EAAAya,aAAA42D,GAAA,MAGAriE,aAAA,SAAAhP,EAAA3T,EAAAyB,GACA,MAAAkS,EAAAgP,cAAAhP,EAAAgP,aAAA3iB,EAAAyB,IAGAwjF,cAAA,SAAAtxE,EAAAoxE,GACA,OAAA1hF,KAAA0hF,GACAA,EAAAhhF,eAAAV,IAAAsQ,EAAAgP,aAAAtf,EAAA0hF,EAAA1hF,KAEAujE,aAAA,SAAA72D,GACAkS,SAAA8wB,KAAA1vB,YAAAtT,IAEAqnE,eAAA,WACA,eAEArV,SAAAuiB,EACAp2D,SAAA,SAAAva,EAAAsuD,GACA3D,QAAAmG,KAAA9wD,EAAA,SAAAnO,GACA++E,EAAA/+E,EAAAy8D,MAGAD,SAAA,SAAAruD,EAAAsuD,GAEA,MADAtuD,GAAA2qD,QAAA4F,WAAAvwD,GACAA,EAAAwa,UAAAxa,EAAAwa,UAAA+2D,SAAAjjB,IAEA,GAAAqiB,EAAA3wE,GAAA/P,QAAAq+D,IAGA5zC,YAAA,SAAA1a,EAAAsuD,GACA3D,QAAAmG,KAAA9wD,EAAA,SAAAnO,GACA++E,EAAA/+E,EAAA,KAAAy8D,MAGAC,cAAA,SAAAvuD,EAAAwxE,EAAAC,GACA9mB,QAAAmG,KAAA9wD,EAAA,SAAAnO,GACA++E,EAAA/+E,EAAA2/E,EAAAC,MAGAC,SAAA,SAAA1xE,EAAAsuD,GACA3D,QAAAmG,KAAA9wD,EAAA,SAAAnO,GACA0+E,EAAA1+E,EAAAy8D,MAGA/R,YAAA,SAAAv8C,EAAAgU,GACAhU,EAAAwZ,MAAAgJ,KAAAxO,EAAAwO,KAAA,KACAxiB,EAAAwZ,MAAAkJ,IAAA1O,EAAA0O,IAAA,MAEA45B,YAAA,SAAAt8C,GACA,GAAAkvC,GAAA,SAAA52C,GACA,GAAAxK,GAAAkS,EAAAwZ,MAAAlhB,EACA,OAAAxK,KAAAgpB,UAAA,EAAAhpB,EAAA6B,OAAA,KAEA,QACA6yB,KAAA0sB,EAAA,QACAxsB,IAAAwsB,EAAA,SAGAr1B,SAAA,SAAA7Z,EAAA1H,GACA,gBAAAiW,OAAA0N,iBACAA,iBAAAjc,EAAA,MAAA2xE,iBAAAr5E,GAEA0H,EAAA4xE,aAAAt5E,IAGAwsE,YAAA,SAAAr0E,EAAAy0D,GAQA,MANA,IAAAt0D,UAAAjB,OACA,MAAAc,EAAAgtB,SAAAhtB,EAAA6d,SAAAsgC,iBAAAn+C,GAGAA,EAAAm+C,iBAAAsW,IAIAme,UAAA,SAAArjE,EAAA6xE,EAAA9gD,GACA/wB,EAAA2qD,QAAA4F,WAAAvwD,GACA+wB,KAAA9+B,KAAA4/D,cAaA,KAZA,GAAAztB,IACA5hB,KAAAxiB,EAAA0gD,WACAh+B,IAAA1iB,EAAA2gD,WAEAmxB,EAAAD,GAAA,MAAA9gD,GAAA/wB,GAAA+wB,GAAA/wB,EAAAgjE,cAAAjyC,EAAA/wB,EAAAgjE,aAAA,KACA+O,EAAA,SAAA/O,GACA,MAAAA,OAAA10D,SAAA8wB,OAAA4jC,EAAApvB,UAAA,GAAAovB,EAAAtvB,WAAA,KACAtP,EAAA5hB,MAAAwgD,EAAAtvB,WACAtP,EAAA1hB,KAAAsgD,EAAApvB,YAEiBpjD,KAAAyB,MAEjB,MAAA6/E,GACA1tC,EAAA5hB,MAAAsvD,EAAApxB,WACAtc,EAAA1hB,KAAAovD,EAAAnxB,UACAoxB,EAAAD,GACAA,EAAAD,EAAAC,EAAA9O,aACA8O,EAAA9O,cAAAjyC,EAAA,KAAA+gD,EAAA9O,YAIA,UAAAjyC,IAAA8gD,IAAA9gD,EAAA6iB,UAAA,GAAA7iB,EAAA2iB,WAAA,IACA,GAAAmwB,GAAA,MAAA7jE,EAAAgjE,aAAA/wE,KAAA4nB,SAAA7Z,EAAAgjE,aAAA,qBACAhvD,EAAA/hB,KAAA4nB,SAAA7Z,EAAA,WACA,cAAAgU,GAAA,UAAAA,GAAA,aAAA6vD,GAAA,SAAAA,IACAz/B,EAAA5hB,MAAAuO,EAAA2iB,WACAtP,EAAA1hB,KAAAqO,EAAA6iB,WAGA,MAAAxP,IAKAwjC,qBAAA,SAAA/3B,EAAA7vC,EAAAgyE,GACA,GAAAp6B,OAAA,KAAA53C,EAAAmiB,sBAAAniB,EAAAmiB,yBAAsGK,KAAA,EAAAE,IAAA,EAAAunC,MAAA,EAAAD,OAAA,GACtG5qB,EAAA9wB,SAAA8wB,KACAyY,EAAAvpC,SAAAk0B,gBACAoR,EAAArlC,OAAAupC,aAAAD,EAAAjE,WAAAxU,EAAAwU,UACAF,EAAAnlC,OAAAwpC,aAAAF,EAAAnE,YAAAtU,EAAAsU,WACAsE,EAAAH,EAAAG,WAAA5Y,EAAA4Y,WAAA,EACAC,EAAAJ,EAAAI,YAAA7Y,EAAA6Y,YAAA,EAGAv1B,EAAAk1B,EAAAl1B,IAAAkxB,EAAAoE,EAFA,EAEAg6B,EACAxvD,EAAAo1B,EAAAp1B,KAAAkxB,EAAAuE,EAFA,EAEA+5B,EACAx8B,EAAAmV,QAAA3T,aAAAnH,GACApJ,EAAAmR,EAAAqS,OAAAjqD,EAAAiyE,YAAAD,EACA5rE,EAAAwxC,EAAAoS,QAAAhqD,EAAAq/B,aAAA2yC,CAIA,SAHAx8B,EAAA,GAAAhzB,GAAAikB,GACA+O,EAAA,GAAA9yB,GAAAtc,IAWA8rE,oBAAA,SAAAlyE,GACA,GAAAkvC,GAAA,SAAAjyB,GACA,GAAAyjD,GAAA1gE,EAAAwZ,MAAAyD,EACA,IAAAyjD,EAAA,MAAAxxE,YAAAwxE,EAAA5pD,UAAA,EAAA4pD,EAAA/wE,OAAA,IAEA,QAAAu/C,EAAA,QAAAA,EAAA,SAWAijC,oBAAA,SAAAnyE,EAAAi8D,EAAAmW,EAAAC,GACAD,EACAngF,KAAAmqE,QAAAp8D,GACAwiB,KAAA,MAAAy5C,EAAA,GAAAmW,EAAA,IACA1vD,IAAA,MAAAu5C,EAAA,GAAAmW,EAAA,KACiBC,IAGjBryE,EAAAwZ,MAAAgJ,KAAAy5C,EAAA,QACAj8D,EAAAwZ,MAAAkJ,IAAAu5C,EAAA,UAMA7b,QAAA,SAAApgD,GACA,OAAAA,EAAAiyE,YAAAjyE,EAAAq/B,eAEAizC,SAAA,SAAAtyE,GACA,MAAAA,GAAAiyE,aAEAM,UAAA,SAAAvyE,GACA,MAAAA,GAAAq/B,cAEAmzC,cAAA,WAAoC,gBAGnC/jF,KAAA,mBAAA8f,eAAAtc,MAkBA,WAED,YACA,IAAAy1B,GAAAz1B,KAAAwgF,EAAA/qD,EAAAijC,QAAAP,EAAA1iC,EAAAu+B,YAOAysB,EAAA,SAAAh1E,EAAA+2C,GAEA,GAAAk+B,IACA7kB,SAAArZ,EAAAqZ,SACA8kB,WAAAl1E,EAAAk1E,WACA/6E,GARA,UASA6F,YACA6sD,SAAA7sD,EAAA6sD,SAAAnnB,UAEAyvC,EAAAJ,EAAAthF,OAAAwhF,EAAAl+B,EAEA,YAAAg+B,EAAAnX,SAAA59D,EAAA6sD,SAAAnnB,SAAAovC,iBAAAM,OAAAD,IAEAE,EAAA,SAAAr1E,EAAA4lD,GACA,GAAA0vB,GAAA,IACA,IAAA5oB,EAAAv1D,QAAAyuD,GAAA,CAIA,GAAAt2D,GAAAs2D,EAAA,GAEAtvC,EAAAy+D,EAAAthF,QAAoCuM,YAAA6sD,SAAA7sD,EAAA6sD,SAAAnnB,UAA4DkgB,EAAA,GAChG,IAAAA,EAAA3zD,QAAA8iF,EAAAthF,OAAA6iB,EAAAsvC,EAAA,IACA0vB,EAAA,IAAAP,EAAAnX,SAAA59D,EAAA6sD,SAAAnnB,SAAAovC,iBAAAxlF,IAAAgnB,OAEAg/D,GADa1vB,EAAA54C,aAAA3b,OACb,IAAA0jF,EAAAnX,SAAA59D,EAAA6sD,SAAAnnB,SAAAovC,iBAAAlvB,KAAgG5lD,YAAA6sD,SAAA7sD,EAAA6sD,SAAAnnB,WAEhGkgB,CAQA,OALA0vB,GAAAn7E,GAAAm7E,EAAAn7E,IAAAuyD,EAAAzQ,OACAj8C,EAAA8uD,cAAA,UAAAwmB,IAAAn7E,IAEA6F,EAAA6sD,SAAAoC,SAAAqmB,EAAAn7E,IAAAm7E,EAEAA,EAGAP,GAAAQ,iCAAA,SAAAx+B,GAEA/sB,EAAAokC,mBAAAj7D,MAAAoB,KAAArB,WACAqB,KAAAs4D,SAAAoC,YACA16D,KAAAs4D,SAAA2oB,oBAEAz+B,EAAA0+B,QACAlhF,KAAAs5D,iBAAAoB,SAAA,kBACAwmB,MAAA1+B,EAAA0+B,MACAhsC,SAAAsN,EAAA2+B,eAAAnhF,KAAAohF,sBAAA,GACAT,WAAAn+B,EAAAm+B,YAAA3gF,KAAAs4D,SAAAnnB,SAAAipB,SAAA6hB,WACAr2E,GApDA,aAwDA5F,KAAA07D,qBAAA,SAAAx7D,GACA,GAAAF,KAAAs4D,SACA,OAAA76D,KAAAuC,MAAAs4D,SAAAoC,SACA16D,KAAAs4D,SAAAoC,SAAAj9D,GAAAi+D,qBAAAx7D,KAKAsgF,EAAAQ,iCAAArnB,UAAA,SAAAluD,EAAAspC,GACA,GAAAA,EAAA2lB,SAAA,CAGA,GAAyBj9D,GAAzB4jF,IAEA,KAAA5jF,IAAAs3C,GAAA2lB,SAAA,CAEA,GAAA4mB,GAAA71E,EAAA6sD,SAAAoC,SAAA3lB,EAAA2lB,SAAAj9D,GAAA,GAAAmI,GACA,IAAA07E,EAEAA,EAAAC,WAAAxsC,EAAA2lB,SAAAj9D,GAAA,IACA4jF,EAAAtsC,EAAA2lB,SAAAj9D,GAAA,GAAAmI,KAAA,MAEA,CACA,GAAA1F,GAAAuL,EAAA+uD,kBAAA,UAAAzlB,EAAA2lB,SAAAj9D,GAAA,GAAAmI,GACA,OAAA1F,GACAA,EAAAshF,SAAA/1E,EAAA6sD,SAAAnnB,UACAjxC,EAAAsnE,YAAA,GAEAtnE,EAAAqhF,WAAAxsC,EAAA2lB,SAAAj9D,GAAA,IACAgO,EAAA6sD,SAAAoC,SAAAx6D,EAAA0F,IAAA1F,GAGAA,EAAAuL,EAAAg2E,WAAA1sC,EAAA2lB,SAAAj9D,IAAA,GAEA4jF,EAAAnhF,EAAA0F,KAAA,GAKA,IAAAnI,IAAAgO,GAAA6sD,SAAAoC,SACA,MAAA2mB,EAAA51E,EAAA6sD,SAAAoC,SAAAj9D,GAAAmI,KACA6F,EAAAi2E,cAAAj2E,EAAA6sD,SAAAoC,SAAAj9D,GAAAmI,IAAA,KAOAuyD,EAAAj5D,OAAAshF,EAAAQ,iCAAAvrD,EAAAokC,oBAEAzS,SAAA,SAAAX,EAAA4W,GACA,GAAAr9D,KAAAs4D,WAAAt4D,KAAAs4D,SAAAnnB,SAAA82B,2BACA,OAAAxqE,KAAAuC,MAAAs4D,SAAAoC,SACA16D,KAAAs4D,SAAAoC,SAAAj9D,GAAAgpD,EAAA,0BAAAzmD,KAAAs4D,SAAAnnB,SAAAye,aAIA6xB,WAAA,SAAAE,EAAAtoB,GACA,GAAAhI,GAAAyvB,EAAA9gF,KAAA2hF,EAEA,OADAtoB,IAAAr5D,KAAA45D,UACAvI,GAEAuwB,WAAA,SAAAh8E,GACA,MAAA5F,MAAAs4D,SAAAoC,SAAA90D,IAEAi8E,YAAA,WACA,MAAA7hF,MAAAs4D,SAAAoC,UAEAonB,YAAA,SAAAl8E,GACA,GAAAyrD,GAAArxD,KAAA4hF,WAAAh8E,EACAyrD,MAAArf,QAEA+vC,aAAA,WACA,OAAAtkF,KAAAuC,MAAAs4D,SAAAoC,SACA16D,KAAAs4D,SAAAoC,SAAAj9D,GAAAu0C,QAEAgwC,YAAA,SAAAp8E,GACA,GAAAyrD,GAAArxD,KAAA4hF,WAAAh8E,EACAyrD,MAAA/jC,QAEA20D,aAAA,WACA,OAAAxkF,KAAAuC,MAAAs4D,SAAAoC,SACA16D,KAAAs4D,SAAAoC,SAAAj9D,GAAA6vB,QAEA40D,kBAAA,SAAA7oB,GACA,OAAA57D,KAAAuC,MAAAs4D,SAAAoC,SACA16D,KAAAs4D,SAAAoC,SAAAj9D,GAAAo6D,SAAA73D,KAAAs4D,SAAAoC,SAAAj9D,GAAAo6D,SAGA73D,MAAAs4D,SAAAoC,YACA16D,KAAAs4D,SAAA2oB,iBAAA,KACA5nB,GACAr5D,KAAA45D,WAEA8nB,cAAA,SAAAS,EAAAC,GACA,GAAA/wB,GAAArxD,KAAAs4D,SAAAoC,SAAAynB,EACA9wB,KACAA,EAAAmW,YAAA,IACA4a,GAAA/wB,EAAAwG,SAAAxG,EAAAwG,gBACA73D,MAAAs4D,SAAAoC,SAAAynB,GACAniF,KAAAs4D,SAAA2oB,wBACAjhF,MAAAs4D,SAAA2oB,iBAAAkB,KAGAE,eAAA,WACA,OAAA5kF,GAAA,EAAAkS,EAAAhR,UAAAjB,OAAiDD,EAAAkS,EAAOlS,IACxDuC,KAAA0hF,cAAA/iF,UAAAlB,KAEAshE,WAAA,SAAA+b,GAMA,GALA96E,KAAAsiF,WACAtiF,KAAAsiF,SAAA7mE,WAAA+B,YAAAxd,KAAAsiF,UACAxH,EAAAr9D,YAAAzd,KAAAsiF,WAGAtiF,KAAA87D,QAAA97D,KAAA87D,OAAArgD,WAAA,CACAzb,KAAA87D,OAAArgD,WAAA+B,YAAAxd,KAAA87D,QACAgf,EAAAr9D,YAAAzd,KAAA87D,OAEA,QAAAr+D,KAAAuC,MAAAs4D,SAAAoC,SACA,GAAA16D,KAAAs4D,SAAAoC,SAAAj9D,GAAA8kF,qBAAA,CACA,GAAAx0E,GAAA/N,KAAAs4D,SAAAoC,SAAAj9D,GAAA6gE,YACAvwD,GAAA0N,WAAA+B,YAAAzP,GACA+sE,EAAAr9D,YAAA1P,MAKAy0E,SAAA,WACA,GAAAC,GAAAziF,KAAA4hF,WAxLA,UAyLA,cAAAa,IAAAD,WAAA,MAEAE,gBAAA,WACA,MAAA1iF,MAAA4hF,WA5LA,YA8LAe,SAAA,SAAAjkF,GACA,GAAA+jF,GAAAziF,KAAA4hF,WA/LA,UAgMA,IAAAa,EAMA/jF,EAAA+Z,aAAA3b,QAAA4B,EAAA+Z,aAAA4lB,SAAAokD,EAAAE,SAAAjkF,IAEAA,EAAAwiF,OAAAuB,EAAAE,SAAAjkF,EAAAwiF,OACAxiF,EAAAw2C,UAAAutC,EAAAG,YAAAlkF,EAAAw2C,eATA,CACA,GAAAsN,GAAA9jD,EAAA+Z,aAAA3b,QAAA4B,EAAA+Z,aAAA4lB,UAAqF6iD,MAAAxiF,GAAWA,CAChG+jF,GAAAhC,EAAAzgF,KAAAwiD,GACAxiD,KAAAs4D,SAAAoC,SAAA,QAAA+nB,EAUAziF,KAAAs4D,SAAAnnB,SAAAqsB,oBACAx9D,KAAA45D,WAEA/B,QAAA,SAAAnK,GACA,OAAAjwD,KAAAuC,MAAAs4D,SAAAoC,SACA16D,KAAAs4D,SAAAoC,SAAAj9D,GAAAo6D,QAAAnK,GACA1tD,KAAAs4D,SAAAoC,SAAAj9D,GAAAsmC,QAAA2pB,EAEAA,KACA1tD,KAAAs4D,SAAAoC,YACA16D,KAAAs4D,SAAA2oB,iBAAA,OAGAzZ,WAAA,SAAA3rE,GACAmE,KAAAnE,EAAA,kCAEAgnF,2BAAA,SAAAlB,EAAA3X,GACAhqE,KAAAs4D,SAAA2oB,iBAAAU,EAAA/7E,IAAAokE,GAEA8Y,2BAAA,SAAAnB,GACA,MAAA3hF,MAAAs4D,SAAA2oB,iBAAAjhF,KAAAs4D,SAAA2oB,iBAAAU,EAAA/7E,IAAA,MAEAm9E,YAAA,SAAAC,EAAA3mB,EAAA4mB,GACA,IAAAA,EACA,OAAAxlF,KAAAuC,MAAAs4D,SAAAoC,SACA16D,KAAAs4D,SAAAoC,SAAAj9D,GAAAulF,EAAA,SAAA3mB,IAIA/zC,SAAA,SAAA+zC,EAAA4mB,GACAjjF,KAAA+iF,YAAA,MAAA1mB,EAAA4mB,IAEAx6D,YAAA,SAAA4zC,EAAA4mB,GACAjjF,KAAA+iF,YAAA,SAAA1mB,EAAA4mB,OAMCzmF,KAAA,mBAAA8f,eAAAtc,MAkBD,WAEA,YACA,IAAAy1B,GAAAz1B,KAAAwgF,EAAA/qD,EAAAijC,QAAAP,EAAA1iC,EAAAu+B,YAGAkvB,EAAA,SAAArf,EAAAp0C,EAAA6oC,GACA,GAAA6qB,IAAA,CACA,QACA38B,KAAA,WACA,GAAA28B,EAEA,MADAA,IAAA,GACA,CAGA,IAAA1zD,EAAAoF,QAAA,CACA,GAAAuuD,GAAA9qB,EAAA0K,cAAArkE,UAAA25D,EAAA3L,UACA,OAAAy2B,GAAA1qB,QAAApO,YAAA76B,EAAAoF,QAAAuuD,GACA9qB,EAAAsB,QAAAnqC,EAAAoF,QAAAuuD,GAGAvf,EAAAgG,OAAoCwZ,YAAAxf,EAAAW,OAAA8e,oBAAgDzuD,QAAAgvC,QAGpF0f,SAAA,WACAJ,GAAA,KAMAK,EAAA,SAAA/zD,EAAA6oC,EAAAmrB,EAAAC,GACA,GAAA1mF,GAAA07D,QAAArkD,cAAA,OAA8C63C,SAAA,YAC9CoM,GAAAiY,cAAAvzE,EACA,IAAA4I,GAAA0yD,EAAAmC,MAAAz9D,EACA07D,SAAApO,YAAAttD,EAAAymF,GACAzmF,EAAAuqB,MAAAywC,MAAA0rB,EAAA,QACA1mF,EAAAuqB,MAAAwwC,OAAA2rB,EAAA,QACAprB,EAAA2Y,OAAArrE,EAAA5I,GAAA,GAEAyyB,EAAA7pB,KACA6pB,EAAAoF,QAAA73B,GAIA2mF,EAAA,SAAAprB,EAAAqrB,EAAA/f,EAAAggB,EAAA/qB,EAAAR,EAAAwN,EAAAxoC,GAKA,MAAAwoC,IACAvN,aACAsL,WACAW,OAPA,GAAAgc,GAAAsD,gBAAqDC,UAAAH,EAAAC,kBAAAjmB,gBAAAtF,IAQrDvkD,OAAA+kD,EACAx7B,WAIA0mD,GAAA,2DACA,qEAIAC,EAAA,SAAAhlB,EAAAilB,GACA,GAAAhgE,GAAA,CACA,UAAAggE,EACA,OAAAzmF,GAAA,EAA2BA,EAAAwhE,EAAAgB,YAAAviE,OAA2BD,IACtD,GAAAwhE,EAAAgB,YAAAxiE,GAAA49D,UAAA6oB,GAAAjlB,EAAAgB,YAAAxiE,GAAA69D,UAAA4oB,EAAA,CACAhgE,EAAAzmB,CACA,OAKA,MAAAwhE,GAAAgB,YAAA/7C,GAGAs8D,GAAA7Z,SAAA,SAAAnkB,GACA,GAAA8V,GAAA9V,EAAA8V,SACAoN,EAAAljB,EAAA0iB,cACAY,EAAAtjB,EAAA4iB,WAEAplE,MAAA85D,SAAA,cACA95D,KAAAohF,sBAAA,OACAphF,KAAA46D,oBAAA,+BACA4lB,EAAAQ,iCAAApiF,MAAAoB,KAAArB,WAIAqB,KAAAi7D,qBACAiJ,eAAA1hB,EAAA0hB,eACAmP,eAAA,MAAA7wB,EAAA6wB,eAAArzE,KAAAs4D,SAAAnnB,SAAAipB,SAAA+hB,eAAA35B,EAAA6wB,eACA9a,WAAA/V,EAAAoiB,eAAApiB,EAAA+V,YAAA/V,EAAAj7B,OAAAvnB,KAAAs4D,SAAAnnB,SAAAipB,SAAAoP,eAAAgX,EAAApmB,SAAAoP,cACAhR,gBAAAhW,EAAAsiB,oBAAAtiB,EAAAgW,iBAAAx4D,KAAAs4D,SAAAnnB,SAAAipB,SAAA0hB,oBAAA0E,EAAApmB,SAAA0hB,mBACAqI,eAAA3hC,EAAA2hC,eACAC,oBAAA5hC,EAAA4hC,oBACAjc,eAAA3lB,EAAA2lB,eACAkc,oBAAA7hC,EAAA6hC,oBACAlgB,kBAAA3hB,EAAA2hB,kBACAyM,UAAApuB,EAAAouB,UACA0T,iBAAA9hC,EAAA8hC,mBAKAtkF,KAAAs4D,SAAA1Q,WAAA,IAAApF,EAAAoF,SACA5nD,KAAAs4D,SAAAisB,SAAA,EACAvkF,KAAA60B,QAAA2rD,EAAAliB,WAAA9b,EAAAzuC,QACA/T,KAAAs4D,SAAA5Q,KAAAlF,EAAAkF,KACA1nD,KAAAs4D,SAAAksB,iBAAA,IAEAxkF,MAAAs4D,SAAA5Q,OAAAlF,EAAA2d,gBAAAngE,KAAAs4D,SAAA5Q,MAAA1nD,MACAA,KAAA6mE,UAAArkB,EAAAqkB,UACA7mE,KAAAykF,UAAAjiC,EAAAiiC,UAEAzkF,KAAAs4D,SAAAosB,eAAAliC,EAAAkiC,eACA1kF,KAAAs4D,SAAAqsB,oBAAAniC,EAAAmiC,oBACA3kF,KAAAs4D,SAAAssB,mBAAA,GACA5kF,KAAAs4D,SAAAt1C,SAEA,IAAA6hE,IAAA,IAAAriC,EAAAqiC,aACA7kF,MAAAqlE,iBAAA,SAAAjxD,GAA6CywE,EAAAzwE,EAE7C,IAAA0wE,GAAA,WAEA,GAAAC,GAAAzsB,EAAAwQ,0BAAA,IAAA9oE,KAAAs4D,SAAAssB,kBACA5kF,MAAAs4D,SAAAssB,mBAAA5kF,KAAAwkE,OAAAwgB,aACA,IAAAC,GAAA3sB,EAAAwQ,2BAAA9oE,KAAAs4D,SAAAssB,mBAAA,IAAA5kF,KAAAs4D,SAAAssB,mBAAA,GAEA5kF,MAAAyoB,YAAAs8D,GACA/kF,KAAAsoB,SAAA28D,GAEAzE,EAAAlkB,cAAAt8D,KAAA60B,QAAAowD,EAAAF,IACSxmF,KAAAyB,KAETA,MAAAklF,cAAA,SAAA/S,GACA,GAAA/3E,GAAA4F,KAAAs4D,SAAAnnB,SAAAwgC,WAAAQ,EAAAnyE,KAAA6mE,UAAAvO,EAKA,OAJAl+D,GAAAmE,KAAA,yBAAA4mF,GACAnlF,KAAAm3D,KAAA,iBAA4C0M,SAAA7jE,KAAAwkE,OAAA2gB,IAC5CL,KACavmF,KAAAyB,OACb5F,GAGA4F,KAAAolF,kBAAA,SAAA5gB,EAAAnL,GAQA,MAPAr5D,MAAAs4D,SAAAnnB,SAAAk0C,wBAAAl0E,MAAAnR,KAAA6mE,WACA7mE,KAAAwkE,SACAsgB,IAEAzrB,GACAr5D,KAAAs4D,SAAAnnB,SAAAyoB,QAAA55D,KAAA6mE,WAEA7mE,MAGAA,KAAAuvE,UAAA,SAAA4C,EAAA9Y,GACA,GAAAj/D,GAAA4F,KAAAklF,cAAA/S,EAEA,OADAnyE,MAAAolF,kBAAAhrF,EAAAi/D,GACAr5D,KAGA,IAAAslF,GAAA,SAAA/xB,GACA,GAAAvzD,KAAAigE,YAAAviE,OAAA,EACA,OAAAD,GAAA,EAA+BA,EAAAuC,KAAAigE,YAAAviE,OAA6BD,IAC5DuC,KAAAigE,YAAAxiE,GAAA2pD,SAAAmM,GAAA,OAGAvzD,MAAAonD,SAAAmM,IACSh1D,KAAAyB,KAETA,MAAAzB,KAAA,uBACA+mF,GAAA,KAEAtlF,KAAAzB,KAAA,sBACA+mF,GAAA,KAIA9iC,EAAA0uB,YACAlxE,KAAAs4D,SAAAnnB,SAAAuwB,cAAAh5D,IAAA1I,UAAA6mE,WAEA7mE,KAAAulF,gBAAA,SAAAtmB,EAAA9F,GACA,GAgBA0K,GAhBAj+B,EAAA,SAAAmP,EAAAhzB,GACA,GAAA4L,GAAA2qC,EAAAioB,eACA,IAAAC,EAAApX,UAAAz7C,GAAAonB,GAAA,UAAAyrC,GAAApX,UAAAz7C,GAAAonB,GAAAhzB,EACA,KAAAu2C,EAAA8B,SAAA0X,iBACA,MAA2B1vD,IAAA,mCAAA2yB,EAAA,MAG3BywC,GACAltB,SAAAt4D,KAAAs4D,SAAAnnB,SACA0qB,SAAArZ,EAAAqZ,SACA/8B,UAAA0jB,EAAA1jB,UACA2mD,QAAAjjC,EAAAijC,QACAnB,iBAAA9hC,EAAA8hC,iBACAzgB,SAAA7jE,KA+BA,OA1BAm4D,GAAAlE,SAAAgL,GACA4E,EAAAj+B,EAAAq5B,EAAAumB,GACArtB,EAAAv1D,QAAAq8D,IACAumB,EAAArtB,EAAAzD,MAAAuK,EAAA,GAAAumB,GACA3hB,EAAAj+B,EAAAq5B,EAAA,GAAAumB,IAGA3hB,EAAA5E,EAAA1xB,QAQAs2B,EAAAt2B,MAAA,WAEA,MAAA4qB,GAAAlE,SAAAgL,GACAr5B,EAAAq5B,EAAAumB,GACArtB,EAAAv1D,QAAAq8D,IACAumB,EAAArtB,EAAAzD,MAAAuK,EAAA,GAAAumB,GACA5/C,EAAAq5B,EAAA,GAAAumB,QAFA,IAIajnF,KAAAyB,MAEb6jE,EAAA1K,SACA0K,GAGA7jE,KAAA0lF,YAAA,SAAAzmB,EAAA5F,GACA,GAAAwW,GAAA7vE,KAAAulF,gBAAAtmB,EACAj/D,MAAA2lF,oBAAA9V,GAAA,IAGA7vE,KAAA2lF,oBAAA,SAAA1mB,EAAA5F,GACA,MAAAr5D,KAAA6jE,WACA7jE,KAAA6jE,SAAAhM,UACA73D,KAAA6jE,SAAA9/B,WAEA/jC,KAAA6jE,SAAA5E,EACAj/D,KAAAjF,KAAAiF,KAAA6jE,SAAA9oE,KACAiF,KAAA87D,OAAA97D,KAAA6jE,SAAA/H,QAGA0kB,EAAAthF,OAAAc,KAAAwiD,EAAAwhC,GAEAhkF,KAAA+vE,SAAAvtB,EAAAutB,WAAA,EACA/vE,KAAAsmE,kBAAA9jB,EAAA8jB,oBAAA,EACAtmE,KAAAiwE,SAAAztB,EAAAytB,WAAA,EAEAjwE,KAAAigE,YAAAzd,EAAAyd,gBACAjgE,KAAAokE,uBAAA5hB,EAAA,4BAEAxiD,KAAAs9B,MAAAklB,EAAAllB,OAAAg7B,EAAA0C,kBACAh7D,KAAA64D,UAAA,KACA74D,KAAA4lF,oBAAApjC,EAAAg/B,UAAAlpB,EAAA8B,SAAAmiB,oBACAv8E,KAAA6lF,sBAAAvtB,EAAA8B,SAAAohB,uBACA,IAAAh5B,EAAAqjC,wBAAA,IAAArjC,EAAAsjC,aACA9lF,KAAA6lF,uBAAA,GACA7lF,KAAA+lF,qBAAA,IAAAvjC,EAAAujC,oBAEAvjC,EAAAyyB,kBACAj1E,KAAAzB,KAAA,iBAAAikD,EAAAyyB,kBAKAj1E,KAAA4rE,cAAA,SAAAzQ,GACAn7D,KAAAigE,YAAAp+D,KAAAs5D,GACAn7D,WAAAigE,YAAAviE,OAAA,2BAAA46D,EAAAkQ,wBACAxoE,WAAAikE,SAAA,yBAAA3L,EAAAmQ,oBAGAzoE,KAAA8rE,qBAAA,SAAA3Q,EAAAj3C,EAAAwpD,GACAxpD,EAAA,MAAAA,EAAAlkB,KAAAigE,YAAAjiE,QAAAm9D,GAAAj3C,EACAA,GAAA,IACAlkB,KAAAigE,YAAAhiE,OAAAimB,EAAA,GACAlkB,WAAAigE,YAAAviE,OAAA,2BAAA46D,EAAAkQ,wBACAxoE,WAAAikE,SAAA,yBAAA3L,EAAAmQ,qBAIAiF,GAAAmX,GAAA,IAAA7kF,KAAAigE,YAAAviE,QACA46D,EAAAiU,cACA1I,SAAA7jE,KACAykD,WAAA,EACA6nB,uBAAA,IAAAoB,KAKA1tE,KAAAktE,sBAAA,SAAA1qB,GAEA,OADAtiD,GAAAF,KAAAigE,YAAAviE,OACAD,EAAA,EAA2BA,EAAAyC,EAAOzC,IAClC66D,EAAA2U,iBAAAjtE,KAAAigE,YAAA,GAAAzd,IA0DAxiD,KAAAgmF,WAAA,SAAAjiB,EAAAtf,EAAA1B,GAEA,OADA7iD,MACAzC,EAAA,EAA2BA,EAAAuC,KAAAigE,YAAAviE,OAA6BD,IACxDuC,KAAAigE,YAAAxiE,GAAAinE,UAAA,IAAAX,GAAA/jE,KAAAigE,YAAAxiE,GAAAinE,UAAA,IAAAX,GACA7jE,EAAA2B,KAAA7B,KAAAigE,YAAAxiE,GAIA,QADA0vE,GAAAjtE,EAAAxC,OACAiS,EAAA,EAA2BA,EAAAw9D,EAAWx9D,IAQtC2oD,EAAA2U,iBAAA/sE,EAAA,GAEA,OAAAF,OAGAA,KAAAs+D,WAAA,WACA,MAAAt+D,MAAA60B,SAGA70B,KAAAimF,WAAA,SAAAl4E,GACA,GAAAm4E,GAAAlmF,KAAAs4D,SAAAnnB,SAAAspB,MAAA1sD,GACAo4E,EAAAnmF,KAAA6mE,SAUA,OARA1O,GAAAvC,mBAAApT,EAAA0d,mBAAAlgE,KAAA6mE,WAAA,SAAAjnE,GACA,MAAAA,GAAAgG,IAAA5F,KAAA4F,IACarH,KAAAyB,OACbA,KAAA60B,QAAA2rD,EAAAliB,WAAAvwD,GACA/N,KAAA6mE,UAAAvO,EAAAmC,MAAAz6D,KAAA60B,SACAyjC,EAAAoJ,cAAA0kB,eAAApmF,KAAAmmF,EAAAnmF,KAAA60B,SACAyjC,EAAA2mB,YAAAnY,cAAA9mE,KAAA60B,SACAsjC,EAAApC,UAAAvT,EAAA0d,mBAAAgmB,EAAAlmF,MACAA,MAMAA,KAAAqmF,gBAAA,WACA,GAAAC,GAAAtmF,KAAAwkE,OAAA8e,oBAAsDzuD,QAAA70B,OACtDqxD,EAAArxD,KAAAwkE,OAAAyN,eAAAjyE,MACAumF,EAAAvmF,KAAAwkE,OAAAwgB,cACAwB,GACAjoF,KAAA,aAEAwrE,QAAA,WACA,OAAAuc,EAAA,GAAAA,EAAA,KAEAhD,mBAAA,WACA,OAAAgD,EAAA,GAAAA,EAAA,KAEArU,eAAA,WACA,MAAA5gB,IAEA2zB,YAAA,WACA,MAAAuB,IAIA,OAAAzgB,IACAkN,YAAAxwB,EAAAwwB,YACAxO,OAAAgiB,EACAzyE,OAAA/T,KAAA60B,QACA0jC,WAAAv4D,KAAAm9D,gBACA0G,SAAArhB,EAAAikC,WAAA,QAAAzmF,KAAA6jE,SACAqN,YAAA,EACA5zC,MAAAt9B,KAAAs9B,MACAymD,UAAA/jF,QAOAA,KAAA0mF,kBAAA,WACA,GAAA7V,GAAA7wE,KAAAigE,YAAA,EAEA,OAAA4Q,KAEA7wE,KAAAigE,YAAAviE,OAAAsC,KAAAs4D,SAAA+a,iBAAA,GAAArzE,KAAAs4D,SAAA+a,eAAA,KAAAxC,IAIA7wE,KAAA2mF,SAAA3mF,KAAAi9D,cAEAj9D,KAAA6pE,MAAA,SAAArnB,GACAA,OACA,IAAAqW,GAAArW,EAAAqW,UAAA4E,KAAA,IAAAjb,EAAAib,OACA,KAAA5E,GAAA74D,KAAA64D,cAAA,CAEA,GAAA73D,GAAAs3D,EAAA6Y,cAAkDzR,KAAA1/D,KAAA6mE,UAAAhO,cAElDmR,EAAAxnB,EAAAif,OAAAjf,EAAAif,OAAApQ,EAAArwD,EAAAqwD,CACA,UAAA2Y,EAAA,CACA,GAAAiK,GAAAzxB,EAAA6gC,YAAAuD,EAAApkC,EAAAokC,mBACA,UAAA3S,EAAA,CACA,GAAAhK,GAAAznB,EAAAqkC,YAAA7lF,EAAAgqB,EACAmnD,GAA4CnI,MAAAz5C,KAAAy5C,EAAAv5C,KAAAw5C,KAAAp1C,QAAA70B,KAAA64D,YAC5C,IAAA4E,GAAAz9D,KAAAwkE,OAAAsiB,WAAA9mF,KAAAigE,YAAAviE,OAAA,GACA,GAAAwC,GAAA+jF,EAAAjkF,KAAAwiD,EAAA0hC,uBACA6C,EAAA7mF,EAAAwkE,UAAA,IAAA1kE,KAAA,IACAgnF,EAAA,IAAAD,EAAA7mF,EAAAm7D,SAAAn7D,EAAAo7D,SACA2rB,EAAA3uB,EAAA4hB,cAAA8M,GACAE,EAAAD,EAAA51B,EAAA81B,EAAAF,EAAAj8D,CACAmnD,GAAAiV,KAAAF,EAAA32D,KAAA22D,EAAAz2D,KACA0hD,EAAAkV,IAAAF,EACAhV,EAAAmV,SAAApnF,EAAAwkE,UAAAqiB,GAEA9S,EAAAj0E,KAAAwkE,OAAAuF,QAAAoI,GAGAnyE,KAAA6jE,SAAAkG,QAAAkK,EAAAj0E,KAAAwkE,OAAAyN,eAAAjyE,WAAAs4D,SAAA0B,gBAAA4sB,GAAA5mF,KAAAg6D,iBACAh6D,KAAA6jE,SAAAgG,MAAA7pE,KAAAs4D,SAAA0B,gBAAAh6D,KAAAwkE,QACAxkE,KAAA64D,WAGA,QAAAp7D,KAAAuC,MAAAs4D,SAAAoC,SACA,GAAA16D,KAAAs4D,SAAAoC,SAAAv8D,eAAAV,GAAA,CACA,GAAA4zD,GAAArxD,KAAAs4D,SAAAoC,SAAAj9D,EACA4zD,GAAAqW,cACA1nE,KAAAs4D,SAAA6B,kBAAA18D,GAAA4zD,EAAAk2B,KAAAvnF,KAAA6jE,SAAA7jE,KAAAs4D,SAAA0B,iBACA3I,EAAAwY,MAAA7pE,KAAAs4D,SAAA6B,kBAAA18D,SAQAuC,KAAAu5D,kBAAA,WACA,kBAEAv5D,KAAA0nE,UAAA,WACA,MAAA1nE,MAAAs4D,SAAAisB,SAGAvkF,KAAA45D,QAAA55D,KAAA6pE,KAEA,IAAA2d,IAAA,CACAxnF,MAAAoiE,cAAA,WAIA,IAAAolB,GAAAhH,EAAAve,gBAAAjiE,KAAA60B,SAAA,CACA,GAWAmuB,GAXAykC,GAAuC7hF,GAAA,KAAAivB,QAAA,MACvCsxC,EAAA,KACAuhB,GAAA,EACAC,EAAA,KACAC,EAAA1E,EAAAljF,KAAAynF,EAAAnvB,GACAyJ,EAAAvf,EAAAuf,gBACA8lB,KACArlB,EAAAge,EAAAle,WAAAvjE,MACAwjE,EAAAie,EAAAle,WAAAxzB,KACAuzB,EAAAme,EAAAle,WAAA9b,KACAshC,EAAAtH,EAAAle,WAAA/U,YAKAA,EAAA,SAAAw6B,GACA/kC,EAAA+kC,EAAAnoF,EAAAojD,aAGAjkD,EAAA,SAAAipF,GAIA7hB,EAAAnmE,KAAA0mF,mBAIA,IAAAuB,IAAA,CAEAjoF,MAAA8nD,cAAAmgC,GAAA,GAEA,MAAA9hB,GAAAnmE,KAAA+vE,UAAA/vE,KAAAsmE,oBAAA2hB,GAAA,IAEAjoF,KAAA+vE,WAAA/vE,KAAAikE,UAAA,MAAAkC,GAAAnmE,KAAA+lF,sBAAAkC,GAAA,GAIA,MAAA9hB,KAAAD,aAAAlmE,QAAAioF,GAAA,EAEA,IAAAC,GAAA5vB,EAAAkD,eAAA,MAAA2K,EAAA,kCACAtC,SAAA7jE,KACA+T,OAAA/T,KAAA60B,QACAwmC,SAAAr7D,KAAA6mE,UACA1L,WAAAgL,GAYA,KAVA,IAAA+hB,EAAAD,GAAA,EAGA,gBAAAC,GACA1H,EAAAthF,OAAAgpF,EAAAllC,OAIAklC,EAAAllC,OAEA,IAAAilC,EAMA,MAFA3vB,GAAAirB,UAAAjrB,EAAAirB,SAAAvjF,KAAA87D,QACA8rB,EAAArE,YACA,CAQA,QAAA9lF,GAAA,EAAmCA,EAAAuC,KAAAigE,YAAAviE,OAA6BD,IAChEuC,KAAAigE,YAAAxiE,GAAA2pD,UAAA,EAEApnD,MAAAsoB,SAAA,gBACAgwC,EAAAyK,2BAAA,GAGAoD,IAAAnmE,KAAAikE,UAAAjkE,KAAA+vE,WAAA5J,EAAA,MAEA7N,EAAA6Y,cAA2CzR,KAAA1/D,KAAA6mE,WAI3C,IAAA4c,GAAAzjF,KAAAs4D,SAAAnnB,SAAAigC,UAAApxE,KAAA87D,QACAqsB,EAAAnoF,KAAA87D,OACA4nB,EAAA1jF,KAAAs4D,SAAAnnB,SAAAgd,QAAAnuD,KAAA87D,OAEA0nB,GAAAiE,EAAAnvB,EAAAmrB,EAAAC,GAGAprB,EAAA+mB,cAAAr/E,KAAA87D,QACAssB,OAAAX,EAAA7hF,GACA85D,KAAA1/D,KAAA6mE,WAKA,IAAAwhB,GAAAroF,KAAAykF,WAAAzkF,KAAA6jE,QACA,UAAA7jE,KAAAykF,WAAA,MAAAzkF,KAAAkkE,eAAA,CACA,GAAA8Q,GAAAh1E,KAAAs4D,SAAAnnB,SAAAwiC,4BAAA3zE,KAAAkkE,eACA8Q,GAAAtQ,UAAA,KAAA2jB,EAAArT,EAAAtQ,UAAA,IAEA,GAAA4jB,GAAAtoF,KAAAs4D,SAAAnnB,SAAAwgC,WAAA,SACA2W,GAAA/M,YAAA,EACAv7E,KAAAs4D,SAAAksB,iBAAAb,EAAA3jF,KAAAm9D,gBAAAmrB,EAAAD,EAAAroF,KAAA87D,OAAA2rB,EAAA5yD,QAAAyjC,EAAAwN,EAAA9lE,KAAAs9B,MACA,IAAAirD,GAAAvoF,KAAAs4D,SAAAksB,iBAAAhgB,MAGA,UAAA2B,EAEAnmE,KAAAonD,UAAA,MAEA+e,EAAAT,GACA5B,eAAA9jE,KACA+jE,eAAA/jE,KAAAs4D,SAAAksB,iBACAzwE,OAAA/T,KAAA60B,QACAlzB,OAAA8lF,EAAA5yD,QACA4vC,SAAAzkE,KAAAwkE,OAAAxkE,KAAAs4D,SAAAksB,iBAAAhgB,QACAjM,WAAA/V,EAAA2hC,eACA3rB,gBAAAhW,EAAA4hC,oBACAxT,UAAApuB,EAAAouB,UACAlW,SAAAlY,EAAA2hB,kBACAppE,KAAAiF,KAAAkkE,eACArI,SAAA77D,KAAAmoE,eACAvY,WAAA5vD,KAAAqkF,oBACA/mD,MAAAklB,EAAAllB,MACA/1B,KAAA2gF,IAEA/hB,EAAA1lC,SAAA,EACA0lC,EAAA79C,SAAAgwC,EAAAuQ,eACA7oE,KAAAs4D,SAAAksB,iBAAAl8D,SAAAgwC,EAAAuQ,eACA7oE,KAAAs4D,SAAAksB,iBAAAhgB,OAAA+jB,EAEAjwB,EAAAnB,KAAA,iBAAAgP,GAOA7N,EAAAoJ,cAAAwD,cAAAiB,OAEqB,CACrBuhB,GAAA,EACAvhB,EAAA/e,UAAA,EAEA,IAAAohC,GAAAriB,EAAAzB,UAAA,GAAA9+D,IAAA5F,KAAA4F,GAAA,GACA5F,MAAA8rE,qBAAA3F,EAAA,QAGA,IAAAsiB,GAAAnwB,EAAAowB,aAAAP,EACA7vB,GAAAv7C,aAAA/c,KAAA87D,OAAA,gBAAA2sB,GAIAnwB,EAAAnB,KAAA,iBAAAgP,GAGA,IAAAqiB,GACAb,GAAAxhB,EAAApyD,OAAAoyD,EAAA9K,SAAA8sB,EAAAM,GACAnwB,EAAAoJ,cAAAuK,cAAA9F,EAAAzB,UAAA8jB,GAAA3hB,UAAA4gB,EAAA7hF,GAAAugE,EAAAshB,EAAA5yD,WAGA8yD,GAAAxhB,EAAAxkE,OAAAwkE,EAAA7K,SAAA6sB,EAAAM,GACAtiB,EAAAxkE,OAAA8lF,EAAA5yD,QACAsxC,EAAA7K,SAAAmsB,EAAA7hF,GAEA0yD,EAAAoJ,cAAAyK,oBAAAhG,EAAA9K,SAAA8K,EAAAzB,UAAA8jB,GAAA3hB,UAAAV,EAAA7K,SAAA6K,IAIAA,EAAAE,kBAAAF,EAAAzB,UAAA8jB,GAGAriB,EAAAsN,iBAAAtN,EAAAzB,UAAA8jB,GAAAlqB,aACA6H,EAAAwiB,mBAAAxiB,EAAAzB,UAAA8jB,GAAA3hB,UACAV,EAAAyiB,qBAAA,IAAAJ,EAAA,kBAEAriB,EAAAE,kBAAAjf,UAAA,GACApnD,KAAAs4D,SAAAksB,iBAAAqE,kBAAA1iB,EAAAE,kBACAF,EAAAzB,UAAA8jB,GAAAxoF,KAAAs4D,SAAAksB,iBAEAre,EAAA79C,SAAAgwC,EAAAuQ,eACA7oE,KAAAs4D,SAAAksB,iBAAAl8D,SAAAgwC,EAAAuQ,eAIAvQ,EAAA6f,oBAAAsP,EAAA7hF,IAAAugE,EAGAhO,EAAApC,UAAAvT,EAAA0d,mBAAAunB,EAAA7hF,GAAA5F,KAAAs4D,SAAAksB,kBAEAlsB,EAAAgF,mBAAA,GACiB/+D,KAAAyB,MAEjB8uC,EAAA,WAGA,GAFAwpB,EAAAyK,2BAAA,GAEAoD,GAAA,MAAAA,EAAAzB,UAAA,CAEA,GAAA3hB,GAAAuV,EAAAwwB,aAAAnqF,WAEAulB,EAAAo0C,EAAAgjB,uBAAAnV,EASA,IARAA,EAAAzB,UAAA,IAAAxgD,EAAA,KAAAsgD,OAAA+O,QAAA,EAEApN,EAAA19C,YAAA6vC,EAAAuQ,eAMA7oE,KAAAs4D,WAAA6N,EAAA4iB,qBAAA5iB,EAAAzB,UAAAxgD,IAAAlkB,KAAAs4D,SAAAksB,mBAEAkD,GAAAvhB,EAAAE,kBAAA,CAGA,IAAAniD,GACAiiD,EAAA6iB,gBAAA7iB,EAAApyD,OACAoyD,EAAA8iB,WAAA9iB,EAAA9K,SACA8K,EAAAqe,iBAAAre,EAAAzB,UAAA,GACAyB,EAAA+iB,cAAA,EACA/iB,EAAApyD,OAAA4zE,EAAA,GACAxhB,EAAA9K,SAAAssB,EAAA,KAGAxhB,EAAA6iB,gBAAA7iB,EAAAxkE,OACAwkE,EAAA8iB,WAAA9iB,EAAA7K,SACA6K,EAAAqe,iBAAAre,EAAAzB,UAAA,GACAyB,EAAA+iB,cAAA,EACA/iB,EAAAxkE,OAAAgmF,EAAA,GACAxhB,EAAA7K,SAAAqsB,EAAA,GAGA,IAAAwB,GAAAnpF,KAAAs4D,SAAAksB,gBAEAlsB,GAAAqe,aAAAgR,EAAA,GAAAA,EAAA,IACAxhB,EAAAzB,UAAAxgD,GAAAiiD,EAAAE,kBAIAF,EAAAkJ,cAAAlJ,EAAAijB,gBAAAjjB,EAAAkjB,eAAA/wB,EAAA2U,iBAAA9G,IAEAA,EAAA/e,UAAA,GACA+e,EAAAkjB,aAAA,KACAljB,EAAAijB,eAAA,KACAppF,KAAAs4D,SAAAksB,iBAAA1Y,qBAAA3F,GACAA,EAAAE,kBAAAuF,cAAAzF,GAKA,GAAAjiD,EACAo0C,EAAAoJ,cAAAyK,oBAAAhG,EAAA9K,SAAA8K,EAAA8iB,WAAA9iB,EAAA7K,SAAA6K,GAGA7N,EAAAoJ,cAAAuK,cAAA9F,EAAA8iB,WAAA9iB,EAAA9K,SAAA8K,IAAApyD,QAGAukD,EAAAsB,QAAA+tB,EAAA,KAGArvB,EAAAiU,cAA2D1I,SAAAslB,IAM3DnpF,KAAAspF,oBACAhxB,EAAAiU,cAAmD1I,SAAA7jE,OAGnDA,KAAAs4D,UACAt4D,KAAA6pE,OAA6CpM,QAAA,IAK7CnF,EAAAnB,KAAA,qBAAAgP,EAAApjB,GAEAojB,EAAA1lC,SACA63B,EAAAnB,KAAA,oBAAAgP,EAAApjB,GAGAuV,EAAAgF,mBAAA,EACA6I,EAAAsN,iBAAA,KACAtN,EAAAE,kBAAA,KACAF,EAAA,KAMAshB,KAAA5yD,SACAyjC,EAAA16D,OAAA6pF,EAAA5yD,SAAA,MAOA70B,KAAAs4D,WAEAt4D,KAAA87D,OAAAv0C,MAAAgiE,WAAA,UAEAvpF,KAAAwkE,OAAA+O,QAAA,EAEAvzE,KAAAs4D,SAAAksB,iBAAA,OAGiBjmF,KAAAyB,KAEjB+hE,GAAAye,EAAAthF,OAAA2oF,EAAA9lB,GACAA,EAAAzkC,MAAAt9B,KAAAs9B,OAAAykC,EAAAzkC,MACAykC,EAAA+lB,GAAA3vB,EAAA3B,KAAAuL,EAAA+lB,GAAAv6B,GAAA,GACAwU,EAAAS,GAAArK,EAAA3B,KAAAuL,EAAAS,GAAAzjE,GAAA,GAEAgjE,EAAAM,GAAAlK,EAAA3B,KAAAuL,EAAAM,GAAAulB,EAAAphC,MACAub,EAAAQ,GAAApK,EAAA3B,KAAAuL,EAAAQ,GAAAzzB,GACAizB,EAAA7Y,cAAA,EAEA6Y,EAAAnW,QAAA,WACA,MAAA5rD,MAAA+vE,UAAA/vE,KAAAsmE,mBAAAtmE,KAAAigE,YAAAviE,OAAA,GACiBa,KAAAyB,MAEjBs4D,EAAA8J,cAAApiE,KAAA87D,OAAAiG,EAAA,YAEA/hE,KAAA87D,OAAAwY,uBAAAt0E,KAAA60B,QAEA2yD,GAAA,GAIA,IAAAvoB,GAAAzc,EAAAqhB,UAAA7jE,KAAAs4D,SAAAnnB,SAAAipB,SAAAuM,UAAA6Z,EAAApmB,SAAAuM,QACA3mE,MAAA0lF,YAAAzmB,GAAA,EACA,IAAAuqB,GAAAhnC,EAAAgiB,OAAAhiB,EAAAgiB,OAAAhiB,EAAAiiB,QAAAjiB,EAAAiiB,QAAAnM,EAAA8B,SAAAiY,QAAA,KACAryE,MAAAuvE,UAAAia,GAAA,EAGA,IAAAzuF,IAAA,UAAAynD,EAAAznD,MAAA,IAAA6kB,KAAA,IACA5f,MAAA68D,QAAA9hE,EAAAynD,EAAAj7C,MAAA,GACAvH,KAAA87D,OAAA97D,KAAA6jE,SAAA/H,OACA97D,KAAA87D,OAAAxD,SAAAt4D,KAEAA,KAAAoiE,eAIA,IAAAqnB,GAAA,SAAA3tB,EAAA4tB,EAAA7lB,EAAAglB,GAEA,GAAArI,EAAAmJ,gBAAA3pF,KAAA60B,SAAA,CACA,GAAAm+C,GAAAxwB,EAAAwwB,aAAA1a,EAAA8B,SAAAuhB,aAAA6E,EAAApmB,SAAAuhB,WACA3I,GAAAwN,EAAAthF,UAA2C8zE,GAC3CA,EAAA11C,MAAA01C,EAAA11C,OAAAt9B,KAAAs9B,KACA,IAAA82C,GAAAoM,EAAAle,WAAA1T,KACAg7B,EAAApJ,EAAAle,WAAAjiB,KACAwpC,EAAArJ,EAAAle,WAAAnwB,IACA09B,EAAA7vE,KACA4uD,EAAA0J,EAAA6a,qBACAhD,YAAA,WACA,MAAAN,IAEAnX,QAAAJ,EACA1Q,QAAA,WACA,aAAAic,KAAA/b,aAEAmc,OAAA,WACA,MAAAJ,GAAAI,UAEApvC,QAAA70B,KAAA60B,QACAgyC,UAAA7mE,KAAA6mE,UACAkJ,SAAA/vE,KAAA+vE,SACAE,SAAAjwE,KAAAiwE,SACA3nD,SAAA,SAAA+zC,GACAwT,EAAAvnD,SAAA+zC,IAEA5zC,YAAA,SAAA4zC,GACAwT,EAAApnD,YAAA4zC,IAEAjB,cAAA,WACA,MAAAyU,GAAAzU,cAAAx8D,MAAAixE,EAAAlxE,YAEAolF,UAAA8E,EACArV,SAAA,SAAArN,EAAA2jB,GACA,MAAA3jB,GAAAE,mBAAAyjB,EAAA/F,WAAA5d,EAAAE,kBAAAzgE,KAAAkkF,EAAA/F,UAAAn+E,KAIAotE,GAAAoB,GAAAjc,EAAA3B,KAAAwc,EAAAoB,GAAAxlB,GAAA,GACAokB,EAAA4W,GAAAzxB,EAAA3B,KAAAwc,EAAA4W,GAAA,WACA,GAAAtjC,GAAAk6B,EAAAuJ,cAAAprF,WACAiH,EAAA0yD,EAAA9vC,aAAAg4D,EAAAliB,WAAAhY,GAAA,UACA0jC,EAAA1xB,EAAA6f,oBAAAvyE,EAEA,UAAAokF,EAAA,CACA,GAAA9lE,GAAAo0C,EAAAgjB,uBAAA0O,EAIA,IADAhqF,KAAAiwE,UAAA,IAAA/rD,GAAA8lE,EAAA3jB,mBAAArmE,KAAA6oF,mBAAA7oF,KAAA6oF,kBAAAjjF,IAAAokF,EAAA3jB,kBAAAzgE,GACA,CACA,GAAAqkF,GAAA3xB,EAAAkD,eAAA,oBACAsI,eAAAkmB,EAAAtlB,UAAAxgD,GACA6/C,eAAA/jE,KACAm7D,WAAA6uB,GAEAhqF,OAAAiqF,EAAA,yBAAA3xB,EAAAoQ,0BACA1oE,MAAAiqF,EAAA,yBAAA3xB,EAAAqQ,4BACAqhB,EAAAtlB,UAAAxgD,GAAAsgD,OAAAnkB,KAAArgD,KAAAwkE,OAAAxkE,SAGiBzB,KAAAyB,OAEjBgzE,EAAA6W,GAAA1xB,EAAA3B,KAAAwc,EAAA6W,GAAA,WACA,GAAAvjC,GAAAk6B,EAAAuJ,cAAAprF,WACAiH,EAAA,MAAA0gD,EAAA,KAAAgS,EAAA9vC,aAAAg4D,EAAAliB,WAAAhY,GAAA,UACA0jC,EAAApkF,EAAA0yD,EAAA6f,oBAAAvyE,GAAA,IAEA,UAAAokF,EAAA,CACA,GAAA9lE,GAAAo0C,EAAAgjB,uBAAA0O,IACAhqF,KAAAiwE,UAAA,IAAA/rD,GAAA8lE,EAAA3jB,mBAAArmE,KAAA6oF,mBAAA7oF,KAAA6oF,kBAAAjjF,IAAAokF,EAAA3jB,kBAAAzgE,MAEA5F,KAAAyoB,YAAA6vC,EAAAoQ,0BACA1oE,KAAAyoB,YAAA6vC,EAAAqQ,4BACAqhB,EAAAtlB,UAAAxgD,GAAAsgD,OAAAryB,SAGiB5zC,KAAAyB,OAEjBs4D,EAAAqV,cAAA7R,EAAAkX,EAAA,WAAA0W,KAESnrF,KAAAyB,KAQT,OAJAA,MAAAwkE,OAAA+W,YACAkO,EAAAzpF,KAAA87D,SAAAtZ,EAAA0uB,YAAAlxE,KAAAwkE,OAAA+W,YAAAv7E,KAAAwiD,EAAAuhC,WAGA/jF,MAGAm4D,EAAAj5D,OAAAshF,EAAA7Z,SAAA6Z,EAAAQ,kCAEAxZ,WAAA,SAAA3rE,EAAAquF,EAAAC,GAIA,GAHAnqF,KAAAs4D,SAAAisB,QAAA1oF,EACAmE,KAAA87D,SAAA97D,KAAA87D,OAAAv0C,MAAAwkB,QAAAlwC,EAAA,gBACAmE,KAAAnE,EAAA,kCACAquF,EACA,OAAAzsF,GAAA,EAA+BA,EAAAuC,KAAAigE,YAAAviE,OAA6BD,IAE5D,GADAuC,KAAAigE,YAAAxiE,GAAA+pE,WAAA3rE,IACAsuF,EAAA,CACA,GAAApD,GAAA/mF,YAAAigE,YAAAxiE,GAAAinE,UAAA,MAEA,IAAA1kE,KAAAigE,YAAAxiE,GAAAinE,UAAAqiB,GAAA9mB,YAAAviE,QAAAsC,KAAAigE,YAAAxiE,GAAAinE,UAAAqiB,GAAAvf,WAAA3rE,GAAA,QAKAm9D,oBAAA,WACA,MAAAh5D,MAAAigE,aAEAtG,UAAA,SAAA5kB,EAAAskB,GACAr5D,KAAAi9D,cAAAloB,EAAA6vB,eAAA7vB,EAAAwjB,WAAAc,GACAr5D,KAAAk9D,mBAAAnoB,EAAA+vB,oBAAA/vB,EAAAyjB,gBAAAa,GACA,MAAAtkB,EAAAs+B,iBAAArzE,KAAAs4D,SAAA+a,eAAAt+B,EAAAs+B,gBACAt+B,EAAAzX,QAAAt9B,KAAAs9B,MAAAyX,EAAAzX,OACAkjD,EAAAthF,OAAAc,KAAA+0C,EAAAivC,GACA,MAAAjvC,EAAA8mB,UAAA77D,KAAA87D,QAAA97D,KAAAs4D,SAAAnnB,SAAA7oB,SAAAtoB,KAAA87D,OAAA/mB,EAAA8mB,UACA2kB,EAAAQ,iCAAArnB,UAAA35D,KAAA+0C,IAEA+S,UAAA,WACA,MAAA9nD,MAAAs4D,SAAA1Q,SAEAC,WAAA,SAAAjoD,GACAI,KAAAs4D,SAAA1Q,QAAAhoD,GAEAi4D,QAAA,WACA,GAAAotB,GAAAjlF,KAAAs4D,SAAAnnB,SAAA23B,2BAAA9oE,KAAAs4D,SAAAssB,mBAAA,IAAA5kF,KAAAs4D,SAAAssB,mBAAA,GACApE,GAAA/3D,YAAAzoB,KAAA60B,QAAAowD,GACAjlF,KAAAwkE,OAAA,KACAxkE,KAAA6jE,SAAAhM,SAAA,GACA73D,KAAA6jE,SAAA9/B,UACA/jC,KAAA6jE,SAAA,KAEA7jE,KAAAs4D,SAAAnnB,SAAAqhB,iBAAAxyD,KAAA87D,OAAA,YACA97D,KAAAs4D,SAAAnnB,SAAAshB,iBAAAzyD,KAAA87D,OAAA,aAEA1U,SAAA,SAAAjzC,GACAnU,KAAA6jE,UAAA7jE,KAAAs4D,WAAAt4D,KAAAs4D,SAAAnnB,SAAA82B,4BACAjoE,KAAA6jE,SAAAzc,SAAAjzC,IAEA8vD,OAAA,WACA,WAAAjkE,KAAAs4D,SAAA+a,kBAAArzE,KAAAu7E,cAAAv7E,KAAAs4D,SAAA+a,eAAA,GAAArzE,KAAAigE,YAAAviE,OAAAsC,KAAAs4D,SAAA+a,iBAKAkI,WAAA,WACA,aAAAv7E,KAAAwkE,QAAAxkE,KAAAwkE,OAAA+W,YAEA6O,cAAA,SAAAvmB,GACA,GAAAwmB,IAAA,CACA,IAAAxmB,EACA,OAAApmE,GAAA,EAA+BA,EAAAuC,KAAAigE,YAAAviE,OAA6BD,IAC5D,GAAAuC,KAAAigE,YAAAxiE,GAAAinE,UAAA,IAAAb,GAAA7jE,KAAAigE,YAAAxiE,GAAAinE,UAAA,IAAAb,EAAA,CACAwmB,GAAA,CACA,OAIA,MAAAA,IAEAC,kBAAA,WACA,MAAAtqF,MAAAs4D,SAAAosB,gBAEA6F,kBAAA,SAAArqF,GACAF,KAAAs4D,SAAAosB,eAAAxkF,GAEAsqF,uBAAA,WACA,MAAAxqF,MAAAs4D,SAAAqsB,qBAEA8F,uBAAA,SAAAhrF,GACAO,KAAAs4D,SAAAqsB,oBAAAllF,GAEA45E,aAAA,SAAAqR,GACA1qF,KAAA6mE,UAAA6jB,EACA1qF,KAAAwkE,OAAAqC,UAAA6jB,GAEApR,oBAAA,SAAAn3B,GACAniD,KAAA60B,QAAA2rD,EAAAliB,WAAAnc,IAEAwoC,uBAAA,SAAAC,GACA5qF,KAAA+lF,oBAAA6E,GAEAC,OAAA,SAAAhnB,GACA,MAAA7jE,MAAAwkE,OAAAqmB,OAAAhnB,EAAAW,SAEAsmB,QAAA,WACA,MAAA9qF,MAAAs4D,SAAA5Q,MAEAqjC,cAAA,SAAAvoC,GACA,MAAAxiD,MAAAwkE,OAAAuF,QAAAvnB,MAIA/sB,EAAAmoC,gBAAA7zD,UAAAopE,oBAAA,SAAA2W,GACA,gBAAAlqF,GAEA,GAAA04D,GAAAwxB,EAAApxB,OAIAoxB,GAAArhE,YAAA6vC,EAAAoQ,0BACAohB,EAAArhE,YAAA6vC,EAAAqQ,2BAEA,IAAA5lB,GAAAuV,EAAAwwB,aAAAnqF,WACA2nD,EAAAgS,EAAAyxB,cAAAprF,WACAiH,EAAA0yD,EAAA9vC,aAAA89B,EAAA,UAEAhpB,GADAg7B,EAAA9vC,aAAA89B,EAAA,QACAgS,EAAA9vC,aAAA89B,EAAA,kBACA6f,EAAA7N,EAAA6f,oBAAAvyE,EAGA,UAAAugE,EAAA,CAGA,GAAA6kB,GAAA,MAAA7kB,EAAAE,iBAIA,KAAA2kB,GAAA,MAAA7kB,EAAAE,kBAAA/N,SAAA,CAKA,GAAAuX,GAAAia,EAAA3Z,YAAAhK,EAGA,UAAA0J,EAAA,CAIA,GAAAia,EAAAtW,SAAArN,EAAA2jB,GAIA,MAHA3jB,GAAAijB,gBAAA,EACAjjB,EAAA/e,UAAA,QACA0iC,EAAA3V,cAAA2V,EAAA3V,aAAAtE,GAKA,IAAA3rD,GAAAo0C,EAAAgjB,uBAAAnV,EACA,QAAAjiD,IAAA4lE,EAAA/Z,UAAA,IAAA7rD,IAAA4lE,EAAA7Z,SAEA,YADA6Z,EAAA3V,cAAA2V,EAAA3V,aAAAtE,GAIAia,GAAAxW,QAAAwW,EAAAxW,OAAAnN,GAGA7oC,GAAAg7B,EAAAqe,aAAArwB,EAAAhpB,EAIA,IAAA2mC,GAAA6lB,EAAA7lB,OAAArkE,EAUA,IATAqkE,GACA4L,EAAA1Y,KAAA,kBACA0M,SAAA7jE,KACAm7D,WAAAgL,EACAkN,eAAAxD,EAAAvX,SAAA+a,gBACiBtwB,IAIjBkhB,GAAA6lB,EAAAliC,UAAA,CACA,GAAAqjC,IAAA,CAKA,KAAA/mE,GACAiiD,EAAA6iB,gBAAA7iB,EAAApyD,OACAoyD,EAAA8iB,WAAA9iB,EAAA9K,SACA8K,EAAAqe,iBAAAre,EAAAzB,UAAA,GACAyB,EAAA+iB,cAAA,EACA/iB,EAAApyD,OAAA+1E,EAAAj1D,QACAsxC,EAAA9K,SAAAyuB,EAAAjjB,YAEAV,EAAA6iB,gBAAA7iB,EAAAxkE,OACAwkE,EAAA8iB,WAAA9iB,EAAA7K,SACA6K,EAAAqe,iBAAAre,EAAAzB,UAAA,GACAyB,EAAA+iB,cAAA,EACA/iB,EAAAxkE,OAAAmoF,EAAAj1D,QACAsxC,EAAA7K,SAAAwuB,EAAAjjB,WAKAmkB,GAAA7kB,EAAAE,kBAAAzgE,IAAAiqE,EAAAjqE,KAEAugE,EAAAjL,gBAAAiL,MAAAzB,UAAAxgD,GAAAg3C,gBAAAiL,MAAAE,kBAAAnL,gBAAAiL,IAAA7N,EAAAkD,eAAA,eAAA2K,KACA8kB,GAAA,GAKA,IAAAC,GAAA,SAAAC,GAGAhlB,EAAAzB,UAAAxgD,GAAA4nD,qBAAA3F,GAGAA,EAAAE,mBAAAF,EAAAE,kBAAAyF,qBAAA3F,GAEAA,EAAAzB,UAAAxgD,GAAA2rD,EACAA,EAAAjE,cAAAzF,EAGA,IAAA3jB,GAAAqtB,EAAA5T,eACA,QAAAmvB,KAAA5oC,GACA2jB,EAAAnK,aAAAovB,EAAA5oC,EAAA4oC,GAEA,IAAAJ,EAKA,CACA,GAAArC,GAAAxiB,EAAAE,kBAAAQ,SACAvO,GAAAyT,eACAhuE,MAAAmmB,EACAsnD,iBAAA,IAAAtnD,EAAAykE,EAAAxiB,EAAA9K,SACAoQ,YAAA,IAAAvnD,EAAA2rD,EAAAhJ,UAAAV,EAAA9K,SACAqQ,iBAAA,GAAAxnD,EAAAykE,EAAAxiB,EAAA7K,SACAqQ,YAAA,GAAAznD,EAAA2rD,EAAAhJ,UAAAV,EAAA7K,SACA+vB,uBAAA,IAAAnnE,EAAAiiD,EAAAE,kBAAAF,EAAAzB,UAAA,GACA4mB,kBAAA,IAAApnE,EAAA2rD,EAAA1J,EAAAzB,UAAA,GACA6mB,uBAAA,GAAArnE,EAAAiiD,EAAAE,kBAAAF,EAAAzB,UAAA,GACA8mB,kBAAA,GAAAtnE,EAAA2rD,EAAA1J,EAAAzB,UAAA,GACAvJ,WAAAgL,GACyBpjB,OAhBzBP,GAAA8D,WACAgS,EAAA8J,cAAApiE,KAAA60B,QAAAktC,YAAA,WAAAzJ,EA6BA,IAXA,GAAAp0C,EACAo0C,EAAAoJ,cAAAyK,oBAAAhG,EAAA9K,SAAA8K,EAAA8iB,WAAA9iB,EAAA7K,SAAA6K,GAGA7N,EAAAoJ,cAAAuK,cAAA9F,EAAA8iB,WAAA9iB,EAAA9K,SAAA8K,IAAApyD,QAOAoyD,EAAAzB,UAAA,GAAAa,cAAA,CACAY,EAAAzB,UAAA,GACAoH,qBAAA3F,GACAA,EAAAzB,UAAA,GAAAyB,EAAAzB,UAAA,GAAAa,cACAY,EAAAzB,UAAA,GAAAkH,cAAAzF,GAIAhO,EAAA/7D,SAAA+uF,IACAhlB,EAAAniE,UAAAmnF,GAIA7yB,EAAAyN,mBAAAI,EAAA,KAAApjB,GAAA,GACAojB,EAAA/e,UAAA,IAEiB7oD,KAAAyB,KAqCjB,IAFAirF,KAAAnB,EAAA1uB,cAAA+K,EAAA9K,SAAA8K,EAAA7K,SAAA6K,EAAA7oC,MAAA6oC,EAAA0J,GAIA,MADAqb,GAAAD,IACA,GArCA,WAEA9kB,EAAAE,oBACAF,EAAAzB,UAAAxgD,GAAAiiD,EAAAE,kBACAF,EAAA/e,UAAA,GACA+e,EAAAkjB,cAAA,EACA,IAAAnlE,GACAiiD,EAAApyD,OAAAoyD,EAAAE,kBAAAxxC,QACAsxC,EAAA9K,SAAA8K,EAAAE,kBAAAQ,YAEAV,EAAAxkE,OAAAwkE,EAAAE,kBAAAxxC,QACAsxC,EAAA7K,SAAA6K,EAAAE,kBAAAQ,WAEAV,EAAAE,kBAAAuF,cAAAzF,GAGA,GAAAjiD,EACAo0C,EAAAoJ,cAAAyK,oBAAAhG,EAAA9K,SAAA8K,EAAA8iB,WAAA9iB,EAAA7K,SAAA6K,GAGA7N,EAAAoJ,cAAAuK,cAAA9F,EAAA8iB,WAAA9iB,EAAA9K,SAAA8K,IAAApyD,QAGAukD,EAAAsB,QAAAuM,EAAA9K,UACA8K,EAAAkjB,cAAA,MAoBAS,EAAA3V,cAAA2V,EAAA3V,aAAAtE,GAEAvX,EAAAgF,mBAAA,QAGC9gE,KAAA,mBAAA8f,eAAAtc,MAmBD,WAEA,YACA,IAAAy1B,GAAAz1B,KACAwgF,EAAA/qD,EAAAijC,QACAP,EAAA1iC,EAAAu+B,YAEAy3B,EAAA,SAAAnzB,EAAAozB,EAAAC,EAAAC,EAAAC,GACA,IAAAvzB,EAAA8B,SAAA0X,kBAAA,MAAA0O,EAAArX,WAAAuiB,GAAAC,GACA,MAAuBvpE,IAAA,oCAAAupE,EAAA,IAEvB,WAAAnL,GAAArX,WAAAuiB,GAAAC,GAAAC,EAAAC,IAEAC,EAAA,SAAA3Z,EAAAtL,EAAAvO,GACA,SAAAA,EAAAqZ,WAAAQ,EAAAtL,EAAAvO,GAAA,MAEAyzB,EAAA,SAAAjtB,EAAAjqC,EAAAyjC,EAAA16D,GACA,MAAAi3B,IACAA,EAAAm3D,oBAAAn3D,EAAAm3D,wBACApuF,QACAi3B,GAAAm3D,oBAAAltB,EAAAl5D,IAEAivB,EAAAm3D,oBAAAltB,EAAAl5D,KAAA,EAEAuyD,EAAA7D,QAAAz/B,EAAAm3D,qBACA1zB,EAAA7vC,YAAAoM,EAAAyjC,EAAAgQ,gBAGAhQ,EAAAhwC,SAAAuM,EAAAyjC,EAAAgQ,iBAIAkY,GAAAlQ,WAAA,SAAA9tB,GACA,GAAAsjB,GAAAtjB,EAAA4iB,WAEAplE,MAAA4F,GAAA48C,EAAA58C,GACA5F,KAAA4wE,UAAA,KACA5wE,KAAA85D,SAAA,cACA95D,KAAAohF,qBAAA,GACAphF,KAAA46D,oBAAA,iCAIA56D,KAAAisF,mBAAAzpC,EAAAypC,mBACAjsF,KAAA+T,OAAAysE,EAAAliB,WAAA9b,EAAAzuC,QACA/T,KAAA2B,OAAA6+E,EAAAliB,WAAA9b,EAAA7gD,QAIA6gD,EAAAshB,iBAAA9jE,KAAA+T,OAAAyuC,EAAAshB,eAAAxF,cACA9b,EAAAuhB,iBAAA/jE,KAAA2B,OAAA6gD,EAAAuhB,eAAAzF,cAEAkiB,EAAAQ,iCAAApiF,MAAAoB,KAAArB,WAEAqB,KAAAq7D,SAAAr7D,KAAAs4D,SAAAnnB,SAAAspB,MAAAz6D,KAAA+T,QACA/T,KAAAs7D,SAAAt7D,KAAAs4D,SAAAnnB,SAAAspB,MAAAz6D,KAAA2B,QACA3B,KAAAs9B,MAAAklB,EAAAllB,MACAt9B,KAAA0kE,aACA1kE,KAAA2kE,iBAEA,IAAArM,GAAAt4D,KAAAs4D,SAAAnnB,QAEAmnB,GAAA2Y,OAAAjxE,KAAAq7D,SAAAr7D,KAAA+T,QACAukD,EAAA2Y,OAAAjxE,KAAAs7D,SAAAt7D,KAAA2B,QAEA3B,KAAAs4D,SAAAisB,SAAA,EACAvkF,KAAAs4D,SAAA4zB,UAAA,IAAA1pC,EAAA0pC,SACAlsF,KAAAs4D,SAAA9V,QACAqZ,SAAArZ,EAAAqZ,SACA/8B,UAAA0jB,EAAA1jB,UACAqtD,iBAAA3pC,EAAA,kBACA4pC,aAAA5pC,EAAA4pC,aACA1xB,SAAAlY,EAAAkY,UAEA16D,KAAAs4D,SAAA+zB,cAAA,KAGArsF,KAAAzB,KAAA,uBACAyB,KAAAonD,UAAA,IACS7oD,KAAAyB,OACTA,KAAAzB,KAAA,sBACAyB,KAAAonD,UAAA,IACS7oD,KAAAyB,OAETA,KAAAssF,mBAAA,IAAA9pC,EAAA0pC,SACAlsF,KAAAusF,YAAA,SAAA3sF,GACA,QAAAI,KAAA4wE,WAAA5wE,KAAA4wE,UAAA2b,YAAA3sF,IAEAI,KAAAwsF,WAAA,WAAsC,QAAAxsF,KAAA4wE,WAAA5wE,KAAA4wE,UAAA4b,cACtCxsF,KAAAysF,UAAA,WAAqC,QAAAzsF,KAAA4wE,WAAA5wE,KAAA4wE,UAAA6b,aAIrCzsF,KAAA6rE,aAAA,SAAAkE,EAAAhiE,EAAA2xD,EAAAT,GAEA,MADAS,MAAA1/D,KAAAs4D,SAAAnnB,SAAAspB,MAAA1sD,GACA/N,KAAAulF,gBAAAjtB,EAAAwN,EAAA9lE,KAAAi/D,EAAA8Q,EAAA,IAAAvtB,EAAAz0C,EAAA2xD,IAMAld,EAAAznD,OACAynD,EAAAkiB,UAAAliB,EAAAkiB,WAAA1kE,KAAAs4D,SAAAnnB,SAAAwiC,4BAAAnxB,EAAAznD,MAAA2pE,UAGA,IAAAgoB,GAAA1sF,KAAA6rE,cAAA,EAAA7rE,KAAA+T,OAAA/T,KAAAq7D,SAAA7Y,EAAAshB,gBACA6oB,EAAA3sF,KAAA6rE,cAAA,EAAA7rE,KAAA2B,OAAA3B,KAAAs7D,SAAA9Y,EAAAuhB,eAEA2oB,IAAAv0B,EAAApC,UAAAvT,EAAA0d,mBAAAlgE,KAAAq7D,SAAAqxB,GACAC,GAAAx0B,EAAApC,UAAAvT,EAAA0d,mBAAAlgE,KAAAs7D,SAAAqxB,GAEA3sF,KAAAs9B,QAAAt9B,KAAAs9B,MAAAt9B,KAAA0kE,UAAA,GAAApnC,OAGA,MAAAklB,EAAAoqC,yBACA5sF,KAAA0kE,UAAA,GAAAW,iBAAA7iB,EAAAoqC,wBACA5sF,KAAA0kE,UAAA,GAAAW,iBAAA7iB,EAAAoqC,wBAWA,IAAAC,GAAAv0B,EAAA8B,SAAAohB,uBACA,IAAAh5B,EAAAsjC,aAAA+G,GAAA,IACA,IAAA7sF,KAAA0kE,UAAA,GAAAmhB,wBAAAgH,GAAA,IACA,IAAA7sF,KAAA0kE,UAAA,GAAAmhB,wBAAAgH,GAAA,EAEA,IAAAC,GAAAtqC,EAAAg/B,UAAAxhF,KAAA0kE,UAAA,GAAAkhB,qBAAA5lF,KAAA0kE,UAAA,GAAAkhB,qBAAAttB,EAAA8B,SAAAmiB,mBAEAv8E,MAAAi7D,qBACA6qB,WAAA+G,EACArL,SAAAsL,EACAv0B,WAAAv4D,KAAA0kE,UAAA,GAAAyf,gBAAAnkF,KAAA0kE,UAAA,GAAAyf,gBAAA3hC,EAAA+V,YAAAD,EAAA8B,SAAAgiB,YAAAoE,EAAApmB,SAAAgiB,WACA5jB,gBAAAx4D,KAAA0kE,UAAA,GAAA0f,qBAAApkF,KAAA0kE,UAAA,GAAA0f,qBAAA5hC,EAAAgW,iBAAAF,EAAA8B,SAAA4hB,iBAAAwE,EAAApmB,SAAA4hB,iBAIA,IAAAtb,GAAApI,EAAAwhB,gBACA,KAAAxhB,EAAAkF,mBAAA,CAEA,GAAAuvB,GAAAz0B,EAAA4hB,cAAAl6E,KAAAq7D,UACAuO,EAAAmjB,EAAA17B,EAAA27B,EAAAD,EAAA/hE,EACAiiE,EAAA30B,EAAA4hB,cAAAl6E,KAAAs7D,UACA4xB,EAAAD,EAAA57B,EACA87B,EAAAF,EAAAjiE,EACAoiE,EAAA1sB,GAAApI,EAAAO,YACAiR,EAAA9pE,KAAA0kE,UAAA,GAAAF,OAAAuF,SACAC,IAAAJ,EAAAr5C,KAAAq5C,EAAAn5C,KAAAw5C,GAAA+iB,EAAAn4D,QAAA70B,KAAA0kE,UAAA,GACAmC,UAAA7mE,KAAA0kE,UAAA,GAAAmC,UACAugB,KAAA8F,EAAA38D,KAAA28D,EAAAz8D,KAAA42D,IAAA8F,EAAA7F,SAAAtnF,KAAA0kE,UAAA,GACA7L,UAAAu0B,GAGAptF,MAAA0kE,UAAA,GAAAmF,OAAqCC,YAAAjR,UAAAu0B,IAErCtjB,EAAA9pE,KAAA0kE,UAAA,GAAAF,OAAAuF,SACAC,IAAAkjB,EAAA38D,KAAA28D,EAAAz8D,KAAAw5C,GAAAkjB,EAAAt4D,QAAA70B,KAAA0kE,UAAA,GACAmC,UAAA7mE,KAAA0kE,UAAA,GAAAmC,UACAugB,KAAAxd,EAAAr5C,KAAAq5C,EAAAn5C,KAAA42D,IAAA2F,EAAA1F,SAAAtnF,KAAA0kE,UAAA,GACA7L,UAAAu0B,IAEAptF,KAAA0kE,UAAA,GAAAmF,OAAqCC,YAAAjR,UAAAu0B,IAGrCptF,KAAAu5D,kBAAA,WACA,oBAEAv5D,KAAAg5D,oBAAA,WACA,MAAAh5D,MAAA0kE,WAGA1kE,KAAAkmE,aAAA,WACA,WAAAlmE,KAAAs4D,SAAAwtB,YAEA9lF,KAAAkvE,cAAA,SAAA4W,GACA9lF,KAAAs4D,SAAAwtB,YAAA,IAAAA,GAEA9lF,KAAAqvE,WAAA,WACA,WAAArvE,KAAAs4D,SAAAkpB,WAAA,IAAAxhF,KAAA0kE,UAAA,GAAAkhB,sBAAA,IAAA5lF,KAAA0kE,UAAA,GAAAkhB,qBAEA5lF,KAAAmvE,YAAA,SAAAqS,GACAxhF,KAAAs4D,SAAAkpB,UAAA,IAAAA,GAcAxhF,KAAAs4D,SAAA+0B,KAAA7qC,EAAA6qC,MAAArtF,KAAA0kE,UAAA,GAAA4lB,oBACAtqF,KAAAs4D,SAAAg1B,SAAA9qC,EAAA8qC,SAEA,MAAA9qC,EAAA8qC,WAAAttF,KAAAs4D,SAAAg1B,SAAAttF,KAAA0kE,UAAA,GAAA8lB,yBAOA,IAAA35B,GAAA2vB,EAAAthF,UAA8Bc,KAAA0kE,UAAA,GAAAzI,gBAC9BukB,GAAAthF,OAAA2xD,EAAA7wD,KAAA0kE,UAAA,GAAAzI,iBACAukB,EAAAthF,OAAA2xD,EAAA7wD,KAAAi8D,iBACAj8D,KAAAk8D,cAAArL,GAKA7wD,KAAAovE,aAAApvE,KAAA0kE,UAAA,GAAAkM,WAAA5wE,KAAA0kE,UAAA,GAAAkM,WAAApuB,EAAAouB,WAAAtY,EAAA8B,SAAAshB,WAAA8E,EAAApmB,SAAAshB,WAAA,GACAl5B,EAAA+qC,UACAvtF,KAAA4wE,UAAA4c,YAAAhrC,EAAA+qC,SAEA,IAAAhmF,GAAA,MAAAi7C,EAAAj7C,MAAA4wD,EAAA/7D,SAAAomD,EAAAj7C,MAAyEi7C,EAAAj7C,OACzEvH,MAAAwS,QAAA,WAAmC,MAAAjL,IACnCvH,KAAAytF,QAAA,SAAAr5E,GAAoC7M,EAAA6M,OACpCpU,KAAAgE,UAAA,SAAAoQ,GAAsC7M,EAAAi5E,EAAAthF,OAAAqI,EAAA6M,GAGtC,IAAAs5E,IAAA,UAAA1tF,KAAA0kE,UAAA,GAAAR,eAAAlkE,KAAA0kE,UAAA,GAAAR,eAAA1hB,EAAAznD,MAAA6kB,KAAA,IACA,SAAAjf,KAAA+sF,IACA1tF,KAAA68D,QAAA6wB,EAAAlrC,EAAAj7C,MAAA,GAEAvH,KAAA2tF,wBAKAx1B,EAAAj5D,OAAAshF,EAAAlQ,WAAAkQ,EAAAQ,kCACArnB,UAAA,SAAA5kB,EAAAskB,EAAAu0B,GAGA,MAAA74C,EAAA+wC,YAAA9lF,KAAAkvE,cAAAn6B,EAAA+wC,YACA,MAAA/wC,EAAAysC,UAAAxhF,KAAAmvE,YAAAp6B,EAAAysC,UACAzsC,EAAAzX,QAAAt9B,KAAAs9B,MAAAyX,EAAAzX,OAEA,MAAAyX,EAAA8mB,UAAA77D,KAAA87D,QAAA97D,KAAAs4D,SAAAnnB,SAAA7oB,SAAAtoB,KAAA87D,OAAA/mB,EAAA8mB,SAEA,IAAAgyB,GAAA,IAEA94C,GAAAyvB,OAGA,OADAqpB,EAAA7tF,KAAAw6D,kBAAA,UAAAozB,EAAAppB,WAEAqpB,GAAA7tF,KAAAs4D,SAAAnnB,SAAAwgC,WAAA58B,EAAAyvB,QAAAxkE,KAAAs4D,SAAAnnB,SAAAwgC,WAAA58B,EAAAyvB,SACAxkE,KAAAu6D,cAAA,UAAAszB,EAAAD,EAAAppB,SAGAzvB,EAAA0vB,SAEA,OADAopB,EAAA7tF,KAAAw6D,kBAAA,UAAAozB,EAAAnpB,YAEAopB,GACA7tF,KAAAs4D,SAAAnnB,SAAAwgC,WAAA58B,EAAA0vB,QAAA,IACAzkE,KAAAs4D,SAAAnnB,SAAAwgC,WAAA58B,EAAA0vB,QAAA,KAEAzkE,KAAAu6D,cAAA,UAAAszB,EAAAD,EAAAnpB,UAGA,MAAAopB,IACA7tF,KAAA0kE,UAAA,GAAAF,OAAAqpB,EAAA,GACA7tF,KAAA0kE,UAAA,GAAAF,OAAAqpB,EAAA,GACA7tF,KAAA0kE,UAAA,GAAAF,OAAAsiB,WAAA9mF,KAAAs4D,SAAAnnB,SAAAyoB,QAAA55D,KAAA0kE,UAAA,GAAAmC,YAGA2Z,EAAAQ,iCAAArnB,UAAA35D,KAAA+0C,IAEAzsB,SAAA,SAAApoB,EAAA4tF,GACAA,IACA9tF,KAAA0kE,UAAA,GAAAp8C,SAAApoB,GACAF,KAAA0kE,UAAA,GAAAp8C,SAAApoB,GACAF,KAAAqmE,mBAAArmE,KAAAqmE,kBAAA/9C,SAAApoB,IAEAF,KAAA4wE,WACA5wE,KAAA4wE,UAAAtoD,SAAApoB,IAGAuoB,YAAA,SAAAvoB,EAAA4tF,GACAA,IACA9tF,KAAA0kE,UAAA,GAAAj8C,YAAAvoB,GACAF,KAAA0kE,UAAA,GAAAj8C,YAAAvoB,GACAF,KAAAqmE,mBAAArmE,KAAAqmE,kBAAA59C,YAAAvoB,IAEAF,KAAA4wE,WACA5wE,KAAA4wE,UAAAnoD,YAAAvoB,IAGAwnE,UAAA,WACA,MAAA1nE,MAAAs4D,SAAAisB,SAEA/c,WAAA,SAAA3rE,GACAmE,KAAAs4D,SAAAisB,QAAA1oF,EACAmE,KAAA4wE,WACA5wE,KAAA4wE,UAAApJ,WAAA3rE,GACAmE,KAAA45D,WAEA/B,QAAA,WACA73D,KAAA2tF,sBAAA,GACA3tF,KAAA0kE,UAAA,KACA1kE,KAAA+T,OAAA,KACA/T,KAAA2B,OAAA,KACA,MAAA3B,KAAA4wE,YACA5wE,KAAA4wE,UAAA/Y,SAAA,GACA73D,KAAA4wE,UAAA7sC,SAAA,IAEA/jC,KAAA4wE,UAAA,MAEA+c,qBAAA,SAAA/vF,GACAoC,KAAAs4D,WACAyzB,EAAA/rF,UAAA+T,OAAA/T,KAAAs4D,SAAAnnB,SAAAvzC,GACAmuF,EAAA/rF,UAAA2B,OAAA3B,KAAAs4D,SAAAnnB,SAAAvzC,KAGAwpD,SAAA,SAAAmM,GACAvzD,KAAA4wE,WAAA5wE,KAAAs4D,WAAAt4D,KAAAs4D,SAAAnnB,SAAA82B,6BACAjoE,KAAA4wE,UAAAxpB,SAAAmM,GACA99B,EAAAijC,QAAAnF,EAAA,0BAAAvzD,KAAA+T,OAAA/T,KAAAs4D,SAAAnnB,SAAA43B,kBACAtzC,EAAAijC,QAAAnF,EAAA,0BAAAvzD,KAAA2B,OAAA3B,KAAAs4D,SAAAnnB,SAAA63B,oBAGA+kB,SAAA,WACA,OAAA/tF,KAAA0kE,UAAA,GAAAomB,UAAA9qF,KAAA0kE,UAAA,GAAAomB,YAEAkD,QAAA,WACA,MAAAhuF,MAAAs4D,SAAAt4D,KAAAs4D,SAAA+0B,MAAAh0C,KAEA40C,QAAA,SAAA/tF,GACAF,KAAAs4D,SAAA+0B,KAAAntF,GAEAguF,WAAA,WACA,WAAAluF,KAAAs4D,SAAAg1B,UAEAa,aAAA,WACA,MAAAnuF,MAAA4wE,WAEAwd,YAAA,WAAkC,MAAApuF,MAAA4wE,UAAA5wE,KAAA4wE,UAAAwd,cAAA,MAClCZ,YAAA,SAAAz/C,GAAmC/tC,KAAA4wE,WAAA5wE,KAAA4wE,UAAA4c,YAAAz/C,IACnCsgD,iBAAA,SAAAC,EAAAn1B,GACA,GAQAyX,GARAgb,GACAtzB,SAAAt4D,KAAAs4D,SAAAnnB,SACA0qB,UAAA77D,KAAAs4D,SAAA9V,OAAAqZ,UAAA,KAAA77D,KAAAwsF,aAAAxsF,KAAAs4D,SAAAnnB,SAAAk3B,uBAAA,IACAvpC,UAAA9+B,KAAAs4D,SAAA9V,OAAA1jB,UACAqtD,iBAAAnsF,KAAAs4D,SAAA9V,OAAA,kBACA0pC,SAAAlsF,KAAAssF,mBAEAZ,EAAA1rF,KAAAs4D,SAAAnnB,SAAAovC,eAYA,OATApoB,GAAAlE,SAAAq6B,GACA1d,EAAA6a,EAAAzrF,KAAAs4D,SAAAnnB,SAAAu6C,EAAA4C,EAAA1C,EAAA5rF,MACAm4D,EAAAv1D,QAAA0rF,KAEA1d,EADA,GAAA0d,EAAA5wF,OACA+tF,EAAAzrF,KAAAs4D,SAAAnnB,SAAAu6C,EAAA4C,EAAA,GAAA1C,EAAA5rF,MAEAyrF,EAAAzrF,KAAAs4D,SAAAnnB,SAAAu6C,EAAA4C,EAAA,GAAAn2B,EAAAzD,MAAA45B,EAAA,GAAA1C,GAAA5rF,OAEA,MAAAm5D,IAAAyX,EAAAzX,UACAyX,GAEA2d,qBAAA,SAAA3d,EAAAvX,EAAAm1B,EAAAr1B,GAEA,GAAAs1B,GAAAC,EAAA,EA2BA,IAxBA,MAAA1uF,KAAA4wE,YACA6d,EAAAzuF,KAAA4wE,UACA8d,EAAAD,EAAAtyB,WACAn8D,KAAA4wE,UAAA/Y,UACA73D,KAAA4wE,UAAA7sC,WAGA/jC,KAAA4wE,YACAzX,GACAn5D,KAAAu6D,cAAA,YAAAqW,EAAAzX,GAGAn5D,KAAA87D,OAAA97D,KAAA4wE,UAAA9U,OACA97D,KAAAsiF,SAAAtiF,KAAA4wE,UAAA0R,SAGAtiF,KAAAsoB,SAAAomE,GAKA1uF,KAAA87D,SAAA97D,KAAA87D,OAAAxD,SAAAt4D,MACAA,KAAAsiF,WAAAtiF,KAAAsiF,SAAAhqB,SAAAt4D,MAEA,MAAAyuF,EAEA,OADAp9B,GAAArxD,KAAA6hF,cACApkF,EAAA,EAA+BA,EAAA4zD,EAAA3zD,OAAcD,IAC7C4zD,EAAA5zD,GAAAkxF,UAAAt9B,EAAA5zD,GAAAkxF,SAAA3uF,KAAA4wE,UAIA4d,IAAAxuF,KAAA07D,qBAAA17D,KAAA4wE,WACAvX,GAAAr5D,KAAA45D,WAEAwV,aAAA,SAAAkf,EAAAj1B,EAAAm1B,EAAAr1B,GACA,GAAAyX,GAAA5wE,KAAAquF,iBAAAC,EAAAn1B,EACAn5D,MAAAuuF,qBAAA3d,EAAAvX,EAAAm1B,EAAAr1B,IAEA0Q,MAAA,SAAArnB,GAEA,IAAAxiD,KAAAs4D,SAAAnnB,SAAAqsB,oBAAAx9D,KAAAs4D,SAAAisB,QAAA,CACA/hC,OACA,IAAAqW,GAAArW,EAAAqW,UAGA+1B,EAAA5uF,KAAAs7D,SAAAuzB,EAAA7uF,KAAAq7D,QAGA,UAAAxC,MAAA74D,KAAAs4D,SAAA+zB,cAAA,CACA,GAAAyC,GAAA9uF,KAAAs4D,SAAAnnB,SAAAggC,cAA0EzR,KAAAmvB,IAASx9B,EACnF09B,EAAA/uF,KAAAs4D,SAAAnnB,SAAAggC,cAA0EzR,KAAAkvB,IAASv9B,EACnF29B,EAAAhvF,KAAA0kE,UALA,GAKAuqB,EAAAjvF,KAAA0kE,UALA,GAOAwqB,EAAAF,EAAAxqB,OAAA8e,oBAAiEtZ,IAAA8kB,EAAAv+D,KAAAu+D,EAAAr+D,KAAAw5C,IAAA6kB,EAAA92B,MAAA82B,EAAA/2B,QAAAljC,QAAAm6D,EAAAn2B,cACjEs2B,EAAAF,EAAAzqB,OAAA8e,oBAAiEtZ,IAAA+kB,EAAAx+D,KAAAw+D,EAAAt+D,KAAAw5C,IAAA8kB,EAAA/2B,MAAA+2B,EAAAh3B,QAAAljC,QAAAo6D,EAAAp2B,aAEjE74D,MAAA4wE,UAAAwe,cAEApvF,KAAA4wE,UAAA7G,SACAslB,UAAAH,EACAI,UAAAH,EACArrB,eAAA9jE,KAAA0kE,UAfA,GAgBAX,eAAA/jE,KAAA0kE,UAhBA,GAiBA2X,eAAAr8E,KAAAs4D,SAAA0B,gBAAAu1B,YACAT,aACAC,cAGA,IAAAS,IAA0CC,KAAAp2C,IAAAq2C,KAAAr2C,IAAAs2C,MAAAt2C,IAAAu2C,MAAAv2C,IAI1C,QAAA57C,KAAAuC,MAAAs4D,SAAAoC,SACA,GAAA16D,KAAAs4D,SAAAoC,SAAAv8D,eAAAV,GAAA,CACA,GAAA4zD,GAAArxD,KAAAs4D,SAAAoC,SAAAj9D,EACA4zD,GAAAqW,cACA1nE,KAAAs4D,SAAA6B,kBAAA18D,GAAA4zD,EAAAk2B,KAAAvnF,KAAA4wE,UAAA5wE,KAAAs4D,SAAA0B,gBAAAh6D,KAAA8iF,2BAAAzxB,IACAm+B,EAAAC,KAAA5rF,KAAAgyC,IAAA25C,EAAAC,KAAAzvF,KAAAs4D,SAAA6B,kBAAA18D,GAAAgyF,MACAD,EAAAG,KAAA9rF,KAAAC,IAAA0rF,EAAAG,KAAA3vF,KAAAs4D,SAAA6B,kBAAA18D,GAAAkyF,MACAH,EAAAE,KAAA7rF,KAAAgyC,IAAA25C,EAAAE,KAAA1vF,KAAAs4D,SAAA6B,kBAAA18D,GAAAiyF,MACAF,EAAAI,KAAA/rF,KAAAC,IAAA0rF,EAAAI,KAAA5vF,KAAAs4D,SAAA6B,kBAAA18D,GAAAmyF,OAKA,GAAAC,GAAA5yF,WAAA+C,KAAAs4D,SAAA0B,gBAAAu1B,aAAA,KACAO,EAAA7yF,WAAA+C,KAAAs4D,SAAA0B,gBAAAu1B,aAAA,GACAQ,GACAC,KAAAnsF,KAAAgyC,IAAA71C,KAAA4wE,UAAAqf,OAAAR,MAAAI,EAAAC,GAAAN,EAAAC,MACAS,KAAArsF,KAAAgyC,IAAA71C,KAAA4wE,UAAAqf,OAAAP,MAAAG,EAAAC,GAAAN,EAAAE,MACAS,KAAAtsF,KAAAC,IAAA9D,KAAA4wE,UAAAqf,OAAAN,MAAAE,EAAAC,GAAAN,EAAAG,MACAS,KAAAvsF,KAAAC,IAAA9D,KAAA4wE,UAAAqf,OAAAL,MAAAC,EAAAC,GAAAN,EAAAI,MAGA5vF,MAAA4wE,UAAA/G,MAAA7pE,KAAAs4D,SAAA0B,gBAAA,KAAA+1B,EAEA,QAAApgF,KAAA3P,MAAAs4D,SAAAoC,SACA,GAAA16D,KAAAs4D,SAAAoC,SAAAv8D,eAAAwR,GAAA,CACA,GAAAoS,GAAA/hB,KAAAs4D,SAAAoC,SAAA/qD,EACAoS,GAAA2lD,aACA3lD,EAAA8nD,MAAA7pE,KAAAs4D,SAAA6B,kBAAAxqD,GAAAogF,IAKA/vF,KAAAs4D,SAAA+zB,cAAAxzB,IAGAe,QAAA,SAAApX,GACAA,QACAxiD,KAAA6pE,OAAwBnK,KAAA1/D,KAAAq7D,SAAAoC,UAAA,IAAAjb,EAAAib,QAAA5E,UAAArW,EAAAqW,aAExB0sB,gBAAA,SAAAjtB,EAAAwN,EAAAhH,EAAAwiB,EAAAvjF,EAAAykD,EAAA3tB,EAAAgyC,GACA,GAAAjnE,EACA,IAAA0hF,EACAxiB,EAAA4F,UAAA3mE,GAAAujF,EACAA,EAAA1V,cAAA9M,OACa,CACbtc,EAAAkiB,YAAAliB,EAAAkiB,WAAA,WACA,IAAAzF,GAAAzc,EAAAkiB,UAAA3mE,IAAAykD,EAAAqhB,UAAAvL,EAAA8B,SAAAgP,UAAArrE,IAAAyiF,EAAApmB,SAAAgP,UAAArrE,IAAAu6D,EAAA8B,SAAAuM,UAAA6Z,EAAApmB,SAAAuM,QACAnkB,GAAAmiB,iBAAAniB,EAAAmiB,gBAAA,YACAniB,EAAAqiB,sBAAAriB,EAAAqiB,qBAAA,WACA,IAAAwrB,GAAA7tC,EAAAmiB,eAAA5mE,IAAAykD,EAAAoiB,eAAAtM,EAAA8B,SAAAyhB,eAAA99E,IAAAyiF,EAAApmB,SAAAyhB,eAAA99E,IAAAu6D,EAAA8B,SAAAoP,eAAAgX,EAAApmB,SAAAoP,aAEA,OAAA6mB,EAAA13B,MAAA,MAAAnW,EAAA+V,aACA83B,EAAA13B,KAAAnW,EAAA+V,WAAA+jB,QAEA,MAAA+T,EAAAC,eAAA,MAAA9tC,EAAA+V,aACA83B,EAAAC,cAAA9tC,EAAA+V,WAAA+3B,eACA,MAAAD,EAAAP,cAAA,MAAAttC,EAAA+V,aACA83B,EAAAP,aAAAttC,EAAA+V,WAAAu3B,aAEA,IAAAS,GAAA/tC,EAAAqiB,oBAAA9mE,IAAAykD,EAAAsiB,oBAAAxM,EAAA8B,SAAA2hB,oBAAAh+E,IAAAyiF,EAAApmB,SAAA2hB,oBAAAh+E,IAAAu6D,EAAA8B,SAAA0hB,oBAAA0E,EAAApmB,SAAA0hB,kBAEA,OAAAt5B,EAAAgW,kBACA,MAAA+3B,UACA,MAAAA,EAAA53B,OACA43B,EAAA53B,KAAAnW,EAAAgW,gBAAA8jB,QAGA,IAAAliF,GAAAooD,EAAAiiB,QAAAjiB,EAAAiiB,QAAA1mE,GACAykD,EAAAgiB,OAAAhiB,EAAAgiB,OACAsnB,EAAAxzB,EAAA8B,SAAA8O,QAAAnrE,GAAA8oE,EAAAvO,IACAwzB,EAAAtL,EAAApmB,SAAA8O,QAAAnrE,GAAA8oE,EAAAvO,IACAwzB,EAAAxzB,EAAA8B,SAAAiY,OAAAxL,EAAAvO,IACAwzB,EAAAtL,EAAApmB,SAAAiY,OAAAxL,EAAAvO,EAGA14D,GAAAkmE,GACAvN,WAAA83B,EAAA73B,gBAAA+3B,EAAA1sB,SAAA5E,EAAAgB,aAAAnB,GACApX,KAJAlF,EAAAwhB,MAAAxhB,EAAAwhB,MAAAjmE,GAAA,KAIAymE,OAAApqE,EAAA2Z,OAAA8gB,EAAAyI,MAAAklB,EAAAllB,MACAkkD,SAAAh/B,EAAAg/B,UAAAlpB,EAAA8B,SAAAmiB,oBACAuJ,WAAAtjC,EAAAsjC,YAAAxtB,EAAA8B,SAAAohB,wBAEA,MAAA8F,GACA1hF,EAAAylE,kBAAA,GAEAvG,EAAA4F,UAAA3mE,GAAA6B,GAEA,IAAA4iD,EAAAguC,eAAA5wF,EAAA4nE,YAAA,SAGA,MAAA5nE,OAICpD,KAAA,mBAAA8f,eAAAtc,MAmBD,WAEA,YAEA,IAAAy1B,GAAAz1B,KACAm4D,EAAA1iC,EAAAu+B,YACAwsB,EAAA/qD,EAAAijC,OAKA8nB,GAAA9O,cAAA,SAAAlvB,GACA,GAAAiuC,MACAC,KACAC,KACAC,KACAC,GAA2BC,WAAA,aAAAC,SAAA,WAAAC,SAAA,WAAAC,SAAA,YAC3BC,GAAA,+BACAC,KACAniD,EAAAhvC,KACAoxF,KACAxzB,EAAApb,EAAAob,gBACAua,KACAkZ,EAAA,SAAAh2B,EAAAC,EAAAg2B,EAAAj8C,EAAAk8C,EAAAC,GAEA,GAAAn2B,IAAAC,EAAA,OACA8W,YAAAye,EAAAI,SACA72F,GAAA,aAGA,IAAA8gD,GAAAr3C,KAAA4tF,MAAAp8C,EAAAk8B,QAAA+f,EAAA/f,QAAAl8B,EAAAi8B,QAAAggB,EAAAhgB,SACAj1B,EAAAx4C,KAAA4tF,MAAAH,EAAA/f,QAAAl8B,EAAAk8B,QAAA+f,EAAAhgB,QAAAj8B,EAAAi8B,SAOA/8B,KAAAm9C,MACA,SAAAj4B,EAAAk4B,GACA,OAAAl0F,GAAA,EAAmCA,EAAAg8D,EAAA/7D,OAAkBD,IACrDi0F,EAAAj4B,EAAAh8D,KACA8yB,MAAAohE,EAAAl0F,GAAA8yB,KAAAohE,EAAAl0F,GAAA8zE,SACA5iC,OAAAgjD,EAAAl0F,GAAAkxC,MAAAgjD,EAAAl0F,GAAA8zE,SACA9gD,KAAAkhE,EAAAl0F,GAAA6zE,QAAAqgB,EAAAl0F,GAAAgzB,KACA4gD,QAAAsgB,EAAAl0F,GAAA6zE,QAAAqgB,EAAAl0F,GAAA4zE,WAGiB,oBAAAigB,EAAAj8C,GAEjB,QAAAu8C,GAAA,EAAgCA,EAAAV,EAAAxzF,OAAkBk0F,IAClD,OAAAC,GAAA,EAAoCA,EAAAX,EAAAxzF,OAAkBm0F,IACtDt9C,EAAA1yC,MACAkS,OAAAm9E,EAAAU,GACAjwF,OAAAuvF,EAAAW,GACA/8C,KAAAwF,QAAAS,WAAA22C,EAAA39E,OAAAm9E,EAAAU,IAAAF,EAAA/vF,OAAAuvF,EAAAW,MAKAt9C,GAAAlkC,KAAA,SAAAjW,EAAAqF,GACA,MAAArF,GAAA06C,KAAAr1C,EAAAq1C,MAAA,EAAA16C,EAAA06C,KAAAr1C,EAAAq1C,KAAA,KAMA,QADAg9C,GAAAv9C,EAAA,GAAAxgC,OAAAg+E,EAAAx9C,EAAA,GAAA5yC,OACAlE,EAAA,EAA+BA,EAAA82C,EAAA72C,SAG/Bo0F,GADAP,EAAAS,cAAAT,EAAAU,gBAAA19C,EAAA92C,GAAAsW,QACAwgC,EAAA92C,GAAAsW,OAEA,KAGAg+E,GADAP,EAAAQ,cAAAR,EAAAS,gBAAA19C,EAAA92C,GAAAkE,QACA4yC,EAAA92C,GAAAkE,OAEA,KAGA,MAAAmwF,GAAA,MAAAC,GAbsDt0F,KAkBtD,OACArD,GAAA03F,EAAAC,GACA72C,QACAmB,WAIA61C,EAAA,SAAAtgD,EAAAugD,EAAAC,EAAAnyB,EAAAoyB,EAAAC,EAAAC,GAGA,OAFAn4F,MAAAowE,EAAA2nB,EAAAE,EAAA,MAAApyB,EAAAviE,OAAA,GAEAD,EAAA,EAA+BA,EAAAwiE,EAAAviE,OAAwBD,IAAA,CACvD,GAAAd,IAAAc,EAAA,GAAA+sE,EAAAgoB,EAAAF,EAAAH,EAAAE,EAAA,IACAE,KACA51F,EAAAw1F,EAAAE,EAAA,KAAA11F,EAEA,IAAA2zB,GAAA+hE,EAAA11F,EAAA61F,EAAA/+C,EAAA2+C,EAAA,GAAA9hE,EAAAmiE,EAAAniE,EAAA6hE,EAAA,GACA3hE,EAAA6hE,EAAAG,EAAA71F,EAAAm3C,EAAAs+C,EAAA,GAAA5hE,EAAAkiE,EAAAliE,EAAA2hE,EAAA,EAEA/3F,GAAAyH,MAAA4xC,EAAAK,EAAA2+C,EAAAC,EAAAzyB,EAAAxiE,GAAA,GAAAwiE,EAAAxiE,GAAA,KAGA,MAAArD,IAGAu4F,EAAA,SAAAC,GACA,gBAAAx4F,EAAAqF,GACA,GAAAswD,IAAA,CAOA,OALAA,GADA6iC,EACAx4F,EAAA,MAAAqF,EAAA,MAGArF,EAAA,MAAAqF,EAAA,OAEA,IAAAswD,GAAA,MAIA8iC,EAAA,SAAAz4F,EAAAqF,GAIA,OAFArF,EAAA,SAAAyJ,KAAAs3C,GAAA/gD,EAAA,MAAAyJ,KAAAs3C,GAAA/gD,EAAA,QACAqF,EAAA,SAAAoE,KAAAs3C,GAAA17C,EAAA,MAAAoE,KAAAs3C,GAAA17C,EAAA,OACA,GACA,GAGAqzF,GACAriE,IAAA,SAAAr2B,EAAAqF,GACA,MAAArF,GAAA,GAAAqF,EAAA,SAEAkvC,MAAAgkD,GAAA,GACAthB,OAAAshB,GAAA,GACApiE,KAAAsiE,GAGAE,EAAA,SAAAC,EAAAn1C,GACA,MAAAm1C,GAAA3iF,KAAAwtC,IAGAo1C,EAAA,SAAApsB,EAAAqsB,GACA,GAAAC,GAAAv1B,EAAAsc,cAAArT,GAAAusB,EAAAD,EAAAnoE,EAAAqoE,EAAAF,EAAA9hC,EACAiiC,EAAA,SAAA1hD,EAAAugD,EAAAC,EAAAmB,EAAAC,EAAAlB,EAAAlgB,GACA,GAAAmhB,EAAA71F,OAAA,EAaA,OAZA+1F,GAAAV,EAAAQ,EAAAT,EAAAlhD,IACA2gD,EAAA,UAAA3gD,GAAA,QAAAA,EACA6yB,EAAAytB,EAAAtgD,EAAAugD,EACAC,EAAAqB,EACAD,EAAAlB,EAAAC,GAGAmB,EAAA,SAAA7vB,EAAA8vB,GACAjD,EAAA7sB,EAAAj+D,KAAA+tF,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA/C,EAAA/sB,EAAAj+D,IAAAwsE,GAGA30E,EAAA,EAA2CA,EAAAgnE,EAAA/mE,OAAoBD,IAAA,CAC/D,GAAAyC,GAAAukE,EAAAhnE,GAAA,GAAAm2F,EAAA1zF,EAAAwkE,UAAA,GAAAmC,cAAAgtB,EAAA3zF,EAAAwkE,UAAA,GAAAmC,aACA+sB,IACAF,EAAAxzF,EAAAwkE,UAAA,GAAAD,EAAAhnE,IACAo2F,GACAH,EAAAxzF,EAAAwkE,UAAA,GAAAD,EAAAhnE,KAKA61F,GAAA,SAAAF,GAAAC,EAAA9iE,KAAA8iE,EAAA5iE,KAAAyiE,EAAA7hB,QAAA,WACAiiB,EAAA,MAAAF,GAAAC,EAAA9iE,KAAA8iE,EAAA5iE,KAAAyiE,EAAAziE,KAAA,YACA6iE,EAAA,OAAAF,GAAAC,EAAA9iE,KAAA8iE,EAAA5iE,KAAAyiE,EAAA3iE,MAAA,YACA+iE,EAAA,QAAAF,GAAAC,EAAA9iE,KAAA8iE,EAAA5iE,KAAAyiE,EAAAvkD,OAAA,WAGA3uC,MAAA0yD,MAAA,WACA+9B,KACAU,KACAC,MAEApxF,KAAA8zF,sBAAA,SAAAr4F,EAAAqjE,GACAqZ,EAAA18E,GAAAqjE,GAEA9+D,KAAAk4E,yBAAA,SAAAz8E,SACA08E,GAAA18E,IAEAuE,KAAAklE,cAAA,SAAApG,GACA,GAAAzD,GAAAyD,EAAAzD,SAAAC,EAAAwD,EAAAxD,SACA2D,EAAAH,EAAA4F,UACAqvB,GAAA,EACAC,EAAA,SAAAC,EAAAC,EAAAC,EAAAz0B,EAAAx/D,GACAm7D,GAAAC,GAAA64B,EAAAnC,eAEAlzB,EAAAxG,SAAAnnB,SAAAinC,cAAAnZ,EAAA,GAAAnD,QACAi4B,GAAA,GAEA57B,EAAApC,UAAAo7B,EAAAzxB,GAAAx/D,EAAAg0F,EAAAC,EAAA17E,aAAA+nE,EAAAtO,gBAGA8hB,GAAA,EAAA/0B,EAAA,GAAAA,EAAA,GAAAuF,OAAAlJ,EAAAwD,GACAi1B,GACAC,EAAA,EAAA/0B,EAAA,GAAAA,EAAA,GAAAuF,OAAAnJ,EAAAyD,GAEA,IAAAs1B,GAAA,SAAAvwB,IACA,SAAAtmE,EAAA82F,GACA,GAAA92F,EAAA,CACA,GAAAszC,GAAA,SAAAjxC,GACA,MAAAA,GAAA,IAAAy0F,EAEAl8B,GAAAvC,mBAAAr4D,EAAAkzB,IAAAogB,GACAsnB,EAAAvC,mBAAAr4D,EAAAgzB,KAAAsgB,GACAsnB,EAAAvC,mBAAAr4D,EAAA8zE,OAAAxgC,GACAsnB,EAAAvC,mBAAAr4D,EAAAoxC,MAAAkC,KAEaugD,EAAAvtB,EAAAgD,WAAAhD,EAAAj+D,IAEb5F,MAAA8sE,mBAAA,SAAAwnB,EAAAC,GACA,GAAAp5B,GAAAm5B,EAAAn5B,YAAAm5B,EACAj5B,EAAAi5B,EAAAj5B,SACAC,EAAAg5B,EAAAh5B,SACA2D,EAAA9D,EAAAuJ,UACA8vB,EAAA,SAAAP,EAAAC,EAAAC,EAAAz0B,EAAAx/D,GACAi4D,EAAAvC,mBAAAu7B,EAAAzxB,GAAA,SAAApnD,GACA,MAAAA,GAAA,GAAA1S,IAAA1F,EAAA0F,KAIA4uF,GAAA,EAAAv1B,EAAA,GAAAA,EAAA,GAAAuF,OAAAnJ,EAAAF,GACAq5B,EAAA,EAAAv1B,EAAA,GAAAA,EAAA,GAAAuF,OAAAlJ,EAAAH,GACAA,EAAA8tB,aACAuL,EAAAr5B,EAAA+tB,cAAA/tB,EAAAqpB,iBAAArpB,EAAAqpB,iBAAAhgB,OAAArJ,EAAA8tB,WAAA9tB,GACAi5B,EAAAj5B,EAAAqpB,mBAIA4P,EAAAj5B,EAAAuJ,UAAA,IACA0vB,EAAAj5B,EAAAuJ,UAAA,IAEA6vB,IACAvlD,EAAA2yB,OAAAxG,EAAAE,UACAF,EAAAG,WAAAH,EAAAE,UACArsB,EAAA2yB,OAAAxG,EAAAG,YAGAt7D,KAAA0I,IAAA,SAAAm7D,EAAAgD,GACA1O,EAAApC,UAAA06B,EAAA5pB,EAAAhD,IAEA7jE,KAAAu5E,SAAA,SAAAqB,EAAA3B,GACAkY,EAAAlY,GAAAkY,EAAAvW,GACA6V,EAAAxX,GAAAwX,EAAA7V,SACAuW,GAAAvW,SACA6V,GAAA7V,IAEA56E,KAAAy0F,kBAAA,SAAA5tB,GACA,MAAAsqB,GAAAtqB,QAEA7mE,KAAA00F,gBAAA,SAAA7tB,GACA,MAAA4pB,GAAA5pB,QAEA7mE,KAAAosE,eAAA,SAAAvI,GACA1L,EAAAvC,mBAAA66B,EAAA5sB,EAAAgD,WAAA,SAAAjnE,GACA,MAAAA,GAAAgG,IAAAi+D,EAAAj+D,KAEAwuF,EAAAvwB,IAEA7jE,KAAAi4E,SAAA,SAAApR,SACA4pB,GAAA5pB,GACA4pB,EAAA5pB,MAOA,IAAA8tB,GAAA,SAAAC,EAAA15C,EAAArD,EAAAinB,EAAA+1B,EAAAC,EAAA5wE,EAAAquE,EAAAwC,EAAAr1B,EAAAs1B,EAAAC,GAEA,GAcAx3F,GACAozE,EAdAqkB,GAAA,EACArxB,EAAA/E,EAAA4F,UAAAxgD,GACAixE,EAAAtxB,EAAAj+D,GACAmhF,GAAA,KAAA7iE,GACAsxC,IACAta,EAAArD,GACAinB,EACA+1B,EACAC,EACAK,GAEAC,EAAAR,EAAAG,GACAM,EAAAxxB,EAAAyxB,sBAAAV,EAAA/wB,EAAAyxB,uBAAA,IAIA,IAAAD,EAAA,CACA,GAAAE,GAAAp9B,EAAAxC,iBAAA0/B,EAAA,SAAAz1F,GACA,MAAAA,GAAA,IAAAu1F,GAEA,QAAAI,EAGA,IAFAF,EAAAp3F,OAAAs3F,EAAA,GAEA93F,EAAA,EAA+BA,EAAA43F,EAAA33F,OAA6BD,IAC5DozE,EAAAwkB,EAAA53F,GAAA,GACA06D,EAAAtC,gBAAAm/B,EAAAnkB,EAAA,SAAA3wE,GACA,MAAAA,GAAA0F,IAAAirE,EAAAjrE,KAEAuyD,EAAAtC,gBAAAo/B,EAAAI,EAAA53F,GAAA,GAAAinE,UAAAxgD,GAAA,SAAAtkB,GACA,MAAAA,GAAAgG,IAAAirE,EAAAnM,UAAAxgD,GAAAte,KAEAuyD,EAAAtC,gBAAAo/B,EAAAI,EAAA53F,GAAA,GAAAinE,UAAAqiB,GAAA,SAAAnnF,GACA,MAAAA,GAAAgG,IAAAirE,EAAAnM,UAAAqiB,GAAAnhF,KAMA,IAAAnI,EAAA,EAAuBA,EAAA23F,EAAA13F,OAAwBD,IAC/CozE,EAAAukB,EAAA33F,GAAA,GACA,GAAA+kD,EAAAt+B,KAAAkxE,EAAA33F,GAAA,KAAAq3F,IAAA,GAAAI,IACAA,EAAAz3F,GACA06D,EAAAtC,gBAAAm/B,EAAAnkB,EAAA,SAAA3wE,GACA,MAAAA,GAAA0F,IAAAirE,EAAAjrE,KAEAuyD,EAAAtC,gBAAAo/B,EAAAG,EAAA33F,GAAA,GAAAinE,UAAAxgD,GAAA,SAAAtkB,GACA,MAAAA,GAAAgG,IAAAirE,EAAAnM,UAAAxgD,GAAAte,KAEAuyD,EAAAtC,gBAAAo/B,EAAAG,EAAA33F,GAAA,GAAAinE,UAAAqiB,GAAA,SAAAnnF,GACA,MAAAA,GAAAgG,IAAAirE,EAAAnM,UAAAqiB,GAAAnhF,IAOA,IAAA4vF,GAAAjD,GAAA,GAAA2C,IAAA,EAAAE,EAAA13F,MACA03F,GAAAn3F,OAAAu3F,EAAA,EAAAhgC,GAIAqO,EAAAyxB,sBAAAP,EAQA/0F,MAAAmsE,oBAAA,SAAAspB,EAAAC,EAAA/pB,EAAAxQ,GACA,GAAAw6B,GAAAx9B,EAAAxC,iBAAAw7B,EAAAsE,GAAA,SAAAh4F,GACA,MAAAA,GAAA,GAAAmI,KAAAu1D,EAAAv1D,KAEAgwF,EAAAz9B,EAAAxC,iBAAAw7B,EAAAuE,GAAA,SAAAj4F,GACA,MAAAA,GAAA,GAAAmI,KAAAu1D,EAAAv1D,MAIA,GAAA+vF,IACAxE,EAAAsE,GAAAE,GAAA,GAAAx6B,EACAg2B,EAAAsE,GAAAE,GAAA,GAAAx6B,EAAAuJ,UAAA,GACAysB,EAAAsE,GAAAE,GAAA,GAAAx6B,EAAAuJ,UAAA,GAAAF,OAAA/rD,aAAA+nE,EAAAtO,eAIA0jB,GAAA,IACAzE,EAAAuE,GAAAz3F,OAAA23F,EAAA,GAEAz9B,EAAApC,UAAAo7B,EAAAxlB,GAAAxQ,IAAAuJ,UAAA,GAAAvJ,EAAAuJ,UAAA,GAAAF,OAAA/rD,aAAA+nE,EAAAtO,iBAGA/W,EAAAwyB,wBAUA3tF,KAAAisE,cAAA,SAAA4pB,EAAA5c,EAAA9d,EAAA26B,GACA,GAAAD,IAAA5c,EAAA,CAEA9d,EAAAE,SAAA4d,EACA9d,EAAApnD,OAAA+hF,EAGA39B,EAAAvC,mBAAAu7B,EAAA0E,GAAA,SAAA70F,GACA,MAAAA,GAAA,GAAA4E,KAAAu1D,EAAAv1D,IAGA,IAAAmwF,GAAA59B,EAAAxC,iBAAAw7B,EAAAh2B,EAAAG,UAAA,SAAA79D,GACA,MAAAA,GAAA,GAAAmI,KAAAu1D,EAAAv1D,IAEAmwF,IAAA,IACA5E,EAAAh2B,EAAAG,UAAAy6B,GAAA,GAAA56B,EACAg2B,EAAAh2B,EAAAG,UAAAy6B,GAAA,GAAA56B,EAAAuJ,UAAA,GACAysB,EAAAh2B,EAAAG,UAAAy6B,GAAA,GAAA56B,EAAAuJ,UAAA,GAAAF,OAAA/rD,aAAA+nE,EAAAtO,eAGA/Z,EAAApC,UAAAo7B,EAAAlY,GAAA9d,IAAAuJ,UAAA,GAAAvJ,EAAAuJ,UAAA,GAAAF,OAAA/rD,aAAA+nE,EAAAtO,gBAKA/W,EAAAuJ,UAAA,GAAAF,OAAAwtB,eACA72B,EAAApnD,SAAAonD,EAAAx5D,OACAw5D,EAAA7C,SAAAnnB,SAAAinC,cAAAjd,EAAAuJ,UAAA,GAAA5I,QAGA,MAAAX,EAAAuJ,UAAA,GAAA5I,OAAArgD,YACA0/C,EAAA7C,SAAAnnB,SAAAo/B,cAAApV,EAAAuJ,UAAA,GAAA5I,SAKAX,EAAAwyB,yBAaA3tF,KAAAomF,eAAA,SAAAnnB,EAAA+2B,EAAAnhE,GACA,GAAA6+C,GAAA+c,EAAAuF,OACAnvB,EAAAjJ,EAAAnD,MAAA5lC,EAEA,IAAAgyC,IAAAmvB,EAAA,CACA,GAAA9xE,GAAAwvD,EAAA11E,QAAAihE,EACA,IAAA/6C,GAAA,GACA,GAAA2rD,GAAA6D,EAAAz1E,OAAAimB,EAAA,KACA8qB,GAAAtmC,IAAAmnE,EAAAhJ,IAIA,OAAAppE,GAAA,EAA2BA,EAAAwhE,EAAAgB,YAAAviE,OAA2BD,IACtDwhE,EAAAgB,YAAAxiE,GAAA49D,UAAA26B,EAGAhnD,EAAAi9B,cAAA+pB,EAAA/2B,EAAA4H,UAAA5H,EAAAgB,YAAAxiE,GAAAwhE,EAAApqC,SAEAoqC,EAAAgB,YAAAxiE,GAAA69D,UAAA06B,IACA/2B,EAAAgB,YAAAxiE,GAAA69D,SAAA2D,EAAA4H,UACA5H,EAAAgB,YAAAxiE,GAAAkE,OAAAs9D,EAAApqC,QACAma,EAAAm9B,oBAAAlN,EAAAgB,YAAAxiE,GAAA49D,SAAA26B,EAAA/2B,EAAA4H,UAAA5H,EAAAgB,YAAAxiE,MAKAuC,KAAA2hE,OAAA,SAAAkF,EAAA3F,EAAArI,EAAAo9B,EAAA90B,EAAA+0B,GAEA,IAAAt4B,EAAAJ,mBAAA,CAEA,GAAAyB,GAAAwxB,EAAA5pB,OACAsvB,EAAAhF,EAAAtqB,OACAuvB,KACAnB,KACAoB,IAEAx9B,MAAA+E,EAAA/E,YAIAo9B,MAA4C1lE,KAAA,EAAAE,IAAA,GAC5CywC,IACAA,GACA3wC,KAAA2wC,EAAA3wC,KAAA0lE,EAAA1lE,KACAE,IAAAywC,EAAAzwC,IAAAwlE,EAAAxlE,KAYA,QAPAm5C,GAAAhM,EAAAuT,cAA6DzR,KAAAmH,EAAApF,OAAAP,EAAAzD,QAAA,EAAA5E,cAC7Dy9B,KAMA74F,EAAA,EAA+BA,EAAA04F,EAAAz4F,OAAgCD,IAAA,CAC/D,GAAAqhE,GAAAq3B,EAAA14F,GAAA,GACA49D,EAAAyD,EAAAzD,SACAC,EAAAwD,EAAAxD,SACAi7B,EAAAz3B,EAAA4F,UAAA,GAAAF,OAAAwtB,aACAwE,EAAA13B,EAAA4F,UAAA,GAAAF,OAAAwtB,YAEA,IAAAuE,GAAAC,EAAA,CACA,GAAAC,GAAAp7B,EAAA,IAAAC,EACAjK,EAAAilC,EAAAG,GACA1P,EAAAjoB,EAAAzD,UAAAwL,EAAA,GAEA0vB,KAAAnF,EAAA/1B,KAAA+1B,EAAA/1B,IAAiG5qC,OAAAke,SAAA0iC,UAAA9gD,UACjGimE,IAAApF,EAAA91B,KAAA81B,EAAA91B,IAAiG7qC,OAAAke,SAAA0iC,UAAA9gD,UAEjGs2C,GAAAvL,GAAAsC,EAAAuT,cAAiFzR,KAAApE,EAAAzC,cACjFgO,GAAAxL,GAAAuC,EAAAuT,cAAiFzR,KAAArE,EAAAxC,aAEjF,IAAAxjB,GAAAuoB,EAAAsc,cAAA5e,GACAg2B,EAAA1zB,EAAAsc,cAAA7e,EAEAC,IAAAD,IAAAk7B,GAAAC,IAKA7B,EAAAvD,EAAA/1B,IAAAx3D,KAAAs3C,GAAA,IAAA2jB,GAAA,EAAAxD,EAAA,WAAAD,EAAA+6B,EAAAnB,GACAN,EAAAvD,EAAA91B,IAAAz3D,KAAAs3C,GAAA,IAAA2jB,GAAA,EAAAzD,EAAA,WAAAC,EAAA86B,EAAAnB,KAGA5jC,IACAA,EAAAggC,EAAAh2B,EAAAC,EAAAg2B,EAAAjgC,EAAAhc,EAAAgc,EAAAyN,EAAA4F,UAAA,GAAAF,OAAA1F,EAAA4F,UAAA,GAAAF,QACA8xB,EAAAG,GAAAplC,GAUAklC,GAAA5B,EAAAvD,EAAA/1B,GAAAhK,EAAAnW,MAAA,EAAA4jB,GAAA,EAAAxD,EAAA,KAAAjK,EAAAj3D,EAAA,GAAAihE,EAAA+6B,EAAAnB,GACAuB,GAAA7B,EAAAvD,EAAA91B,GAAAjK,EAAAhV,QAAA,EAAAyiB,GAAA,EAAAzD,EAAA,KAAAhK,EAAAj3D,EAAA,GAAAkhE,EAAA86B,EAAAnB,IAGAsB,GAAAp+B,EAAAtC,gBAAAwgC,EAAAh7B,EAAA,SAAAjhE,GACA,MAAAA,KAAAihE,IAEAm7B,GAAAr+B,EAAAtC,gBAAAwgC,EAAA/6B,EAAA,SAAAlhE,GACA,MAAAA,KAAAkhE,IAEAnD,EAAAtC,gBAAAugC,EAAAt3B,EAAA,SAAA5+D,GACA,MAAAA,GAAA0F,IAAAk5D,EAAAl5D,MAEA2wF,GAAA,IAAAxP,GAAAyP,GAAA,IAAAzP,IACA5uB,EAAAtC,gBAAAo/B,EAAAn2B,EAAA4F,UAAAqiB,GAAA,SAAAnnF,GACA,MAAAA,GAAAgG,IAAAk5D,EAAA4F,UAAAqiB,GAAAnhF,MAMA,IAAAnI,EAAA,EAA2BA,EAAAwhE,EAAAvhE,OAAeD,IAC1C,IAAAwhE,EAAAxhE,GAAAwiE,YAAAviE,QAAAuhE,EAAAxhE,GAAA+mE,OAAAwtB,eACAZ,EAAAvqB,KAAAuqB,EAAAvqB,IAA+Ep2C,OAAAke,SAAA0iC,UAAA9gD,UAC/EokE,EAAAvD,EAAAvqB,IAAAhjE,KAAAs3C,GAAA,KAAoFupB,WAAAzF,EAAAxhE,GAAAwhE,EAAAxhE,IAAAosE,MAAA,eAC1D,EAAAhD,EAAA,KAAA5H,EAAAxhE,GAAA+mE,OAAAkyB,iBAAA7vB,EAAAuvB,EAAAnB,GAC1B98B,EAAAtC,gBAAAwgC,EAAAxvB,EAAA,SAAAzsE,GACA,MAAAA,KAAAysE,IAOA,KAAAppE,EAAA,EAA2BA,EAAA44F,EAAA34F,OAA4BD,IACvDw1F,EAAAoD,EAAA54F,GAAA2zF,EAAAiF,EAAA54F,IAMA,KAAAA,EAAA,EAA2BA,EAAAwhE,EAAAvhE,OAAeD,IAC1CwhE,EAAAxhE,GAAAosE,OAAiChR,YAAA4I,OAAAmI,EAAAid,WAAAjd,EAAA5+C,EAAAyyC,QAAA,IAAAy4B,GAIjC,KAAAz4F,EAAA,EAA2BA,EAAAw3F,EAAAv3F,OAA6BD,IAAA,CACxD,GAAA01F,GAAAv1B,EAAAsc,cAAA+a,EAAAx3F,GAAAopE,UACAouB,GAAAx3F,GAAAosE,OAA+ChR,YAAA4I,OAAA0xB,EAAAtM,WAAAsM,EAAAnoE,IAO/C,IAAAvtB,EAAA,EAA2BA,EAAA04F,EAAAz4F,OAAgCD,IAAA,CAC3D,GAAAy2F,GAAAiC,EAAA14F,GAAA,EACA,IAAAy2F,EAAA1vB,OAAA/rD,aAAA+nE,EAAAtO,cAAA,CACAgiB,EAAArqB,OAA6Cqa,sBAAArd,EAAAhO,cAC7CV,EAAAtC,gBAAAugC,EAAAD,EAAA14F,GAAA,YAAAyC,GACA,MAAAA,GAAA0F,IAAAuwF,EAAA14F,GAAA,GAAAmI,IAGA,QAAA8vC,GAAA,EAAuCA,EAAAw+C,EAAAj0B,YAAAviE,OAAsCg4C,IAC7Ew+C,EAAAj0B,YAAAvqB,KAAAygD,EAAA14F,GAAA,IACA06D,EAAAtC,gBAAAugC,EAAAlC,EAAAj0B,YAAAvqB,GAAA,SAAAx1C,GACA,MAAAA,GAAA0F,IAAAsuF,EAAAj0B,YAAAvqB,GAAA9vC,SAGqBsuF,GAAA1vB,OAAA/rD,aAAA+nE,EAAAnO,QACrBla,EAAAtC,gBAAAugC,EAAAD,EAAA14F,GAAA,YAAAyC,GACA,MAAAA,GAAA0F,IAAAuwF,EAAA14F,GAAA,GAAAmI,KAMA,GAAA+wF,GAAAxe,EAAAtR,EAKA,KAJA8vB,GACAA,EAAA9sB,OAA8BhR,YAAA4E,QAAA,EAAAiC,KAAAmH,IAG9BppE,EAAA,EAA2BA,EAAA24F,EAAA14F,OAA+BD,IAC1D24F,EAAA34F,GAAAosE,OAAiDnK,KAAAmH,EAAAhO,YAAA4E,QAAA,EAAA0D,gBAKjD,IAAAy1B,GAAA,SAAAzkB,GACAha,EAAAvB,eAAAh4D,MAAAoB,MACAA,KAAAjF,KAAA,aACAiF,KAAA8mF,WAAA,EACA9mF,KAAAgyF,cAAA,CAWA,QAVA6E,GAAA1kB,EAAA0kB,QAAA,+BACAC,KAAA,IAAA3kB,EAAA2kB,WACAC,KACAC,GAA6BvmE,IAAA,SAAAke,MAAA,OAAApe,KAAA,QAAA8gD,OAAA,OAC7B4lB,GAAoCxmE,IAAA,QAAAke,MAAA,SAAApe,KAAA,MAAA8gD,OAAA,QACpC6lB,GAAwCzmE,IAAA,OAAAke,MAAA,MAAApe,KAAA,SAAA8gD,OAAA,SACxC8lB,EAAAL,EAAAG,EAAAC,EACAE,EAAAN,EAAAI,EAAAD,EACAp7B,EAAAsW,EAAAtW,UAAA,GAEAp+D,EAAA,EAA2BA,EAAAo5F,EAAAn5F,OAAkBD,IAC7Cs5F,EAAAF,EAAAp5F,KAAA,CAGAuC,MAAA02F,eAAA,WACA,WAAAG,EAAAn5F,OAAA,MAAAm5F,EAAA,IAKA72F,KAAAq3F,WAAA,SAAAC,GACA,MAAAP,GAAAO,KACAP,EAAAC,EAAAM,IAAAN,EAAAM,GACAP,EAAAI,EAAAG,IAAAH,EAAAG,GACAP,EAAAK,EAAAE,IAAAF,EAAAE,GACAA,GAGAt3F,KAAAiyF,gBAAA,SAAAqF,GACA,WAAAP,EAAAO,IAGAt3F,KAAA+pE,QAAA,SAAAvnB,GACA,MAAAmuC,GAAAnuC,EAAA3tB,QAAAjvB,KAAA8qF,EAAAluC,EAAA3tB,QAAAjvB,MAAA,MAEA5F,KAAAsjF,mBAAA,SAAA9gC,GACA,MAAAmuC,GAAAnuC,EAAA3tB,QAAAjvB,KAAA8qF,EAAAluC,EAAA3tB,QAAAjvB,MAAA,MAEA5F,KAAAiyE,eAAA,SAAApO,GACA,MAAA+sB,GAAA/sB,EAAAj+D,MAAA,MAEA5F,KAAAu3F,yBAAA,iBACA5G,GAAAxe,EAAAtL,YAEA7mE,KAAAw3F,uBAAA,SAAAlR,GACAqK,EAAAxe,EAAAtL,WAAAyf,GAEAtmF,KAAAglF,YAAA,WACA,MAAAnpB,IAKA+B,GAAAynB,yBACAlrF,IAAA,SAAAqoD,GACA,UAAAo0C,GAAAp0C,IAEArxC,MAAA,SAAA01D,SACA8pB,GAAA9pB,SACA6pB,GAAA7pB,MAWA2Z,EAAAnO,OAAA,SAAA7vB,GACAxiD,KAAAyzC,EAAA+O,EAAA/O,GAAA,EACAzzC,KAAA8zC,EAAA0O,EAAA1O,GAAA,EACA9zC,KAAA6mE,UAAArkB,EAAAqkB,UACA7mE,KAAA67D,SAAArZ,EAAAqZ,UAAA,GACA77D,KAAAy3F,oBAAA,KACAz3F,KAAAoyE,YAAA5vB,EAAA4vB,cAAA,KACApyE,KAAA03F,gBAAA,KACA13F,KAAAogE,QAAA5d,EAAA4d,UAAA,KACApgE,KAAA64D,UAAA,KAEAV,EAAAvB,eAAAh4D,MAAAoB,MAEAA,KAAA+pE,QAAA,SAAAvnB,GAEA,GAAAwnB,GAAAxnB,EAAAwnB,GAAAC,EAAAznB,EAAAynB,GAAApR,EAAArW,EAAAqW,SAKA,OAHArW,GAAA+0C,2BACAv3F,KAAAy3F,oBAAA,MAEA5+B,OAAA74D,KAAA64D,UACA74D,KAAA03F,iBAEA,MAAA13F,KAAAy3F,oBACAz3F,KAAA03F,gBAAA13F,KAAAy3F,oBAGAz3F,KAAA03F,iBAAA1tB,EAAA,GAAAhqE,KAAAyzC,EAAAw2B,EAAA,GAAAjqE,KAAAogE,QAAA,GAAA4J,EAAA,GAAAhqE,KAAA8zC,EAAAm2B,EAAA,GAAAjqE,KAAAogE,QAAA,IAGApgE,KAAA64D,YACA74D,KAAA03F,kBAGA13F,KAAAsjF,mBAAA,SAAA9gC,GAEA,MADAA,SACA,MAAAxiD,KAAA03F,iBAAA,MAAAl1C,EAAAqW,WAAA74D,KAAA64D,WAAArW,EAAAqW,UAAA74D,KAAA+pE,QAAAvnB,GAAAxiD,KAAA03F,kBAGAv/B,EAAAj5D,OAAAshF,EAAAnO,OAAAla,EAAAvB,gBACAi0B,OAAA,SAAArmB,GACA,IAAAA,EAAA,QACA,IAAAmzB,GAAAnzB,EAAAyN,iBACA5gB,EAAArxD,KAAAiyE,gBACA,OAAAjyE,MAAAyzC,GAAA+wB,EAAA/wB,GAAAzzC,KAAA8zC,GAAA0wB,EAAA1wB,GAAA9zC,KAAAogE,QAAA,IAAAoE,EAAApE,QAAA,IAAApgE,KAAAogE,QAAA,IAAAoE,EAAApE,QAAA,IAAA/O,EAAA,IAAAsmC,EAAA,IAAAtmC,EAAA,IAAAsmC,EAAA,IAEAC,uBAAA,WACA,MAAA53F,MAAAy3F,qBAEAD,uBAAA,SAAA94F,GACAsB,KAAAy3F,oBAAA/4F,GAEA64F,yBAAA,WACAv3F,KAAAy3F,oBAAA,MAEAxlB,eAAA,WACA,MAAAjyE,MAAAoyE,aAEA4S,YAAA,WACA,MAAAhlF,MAAA67D,YAWA2kB,EAAAsD,eAAA,SAAAthC,GAEAg+B,EAAAnO,OAAAzzE,MAAAoB,KAAArB,UAIA,IAAAof,GAAAykC,EAAAuhC,UAEA8T,EAAAr1C,EAAAqhC,gBACAh5B,EAAA21B,EAAAryB,QAAA0pC,GASAzlB,EAAA,KACA0lB,EAAA,IAGA93F,MAAAoyE,YAAA,KAKApyE,KAAAyzC,EAAA,EACAzzC,KAAA8zC,EAAA,EAEA9zC,KAAAu7E,YAAA,EAEAv7E,KAAA+pE,QAAA,SAAAvnB,GACA,GAAAwnB,GAAAxnB,EAAAwnB,GACAx2D,GAAAw2D,EAAA,GAAAnf,EAAA,KAAAmf,EAAA,GAAAnf,EAAA,KAEA,OADAitC,GAAAtkF,EACAA,GAGAxT,KAAAiyE,eAAA,SAAA8lB,GACA,GAAA3lB,EAAA,MAAAA,EAEA,IAAA/gB,GAAAtzC,EAAAk0D,eAAA8lB,EAIA,QA/BA,EA+BAl0F,KAAAo1C,IAAAoY,EAAA,OA/BA,EAgCAxtD,KAAAo1C,IAAAoY,EAAA,SASArxD,KAAAqgD,KAAA,SAAAmkB,EAAAX,GACAuO,EAAA5N,EAAAyN,eAAApO,IAQA7jE,KAAAmyC,IAAA,WACAigC,EAAA,MAGApyE,KAAAsjF,mBAAA,SAAA9gC,GACA,aAAAs1C,EAAA93F,KAAA+pE,QAAAvnB,GAAAs1C,IAGA3/B,EAAAj5D,OAAAshF,EAAAsD,eAAAtD,EAAAnO,OAEA,IAAA2lB,GAAA,SAAAxzB,EAAA5G,EAAAiJ,GACA,MAAArC,GAAA/rD,aAAA+nE,EAAAnO,OAAA7N,EAAA5G,EAAA+T,WAAAnN,EAAAqC,EAAAjJ,GAYA4iB,GAAAtO,cAAA,SAAA1vB,GACAg+B,EAAAnO,OAAAzzE,MAAAoB,KAAArB,WAEAqB,KAAA8mF,WAAA,EACA9mF,KAAAykE,WACAzkE,KAAA6mE,UAAArkB,EAAAqkB,UACA7mE,KAAA49D,gBAAApb,EAAAob,eAEA,QAAAngE,GAAA,EAAuBA,EAAA+kD,EAAAiiB,QAAA/mE,OAA2BD,IAClDuC,KAAAykE,QAAAhnE,GAAAu6F,EAAAx1C,EAAAiiB,QAAAhnE,GAAAuC,KAAA49D,gBAAA59D,KAAA6mE,UAEA7mE,MAAAi4F,WAAA,WACA,MAAAj4F,MAAAykE,SAEAzkE,KAAAuzE,QAAA,CACA,IAAA2kB,GAAAl4F,KAAAykE,QAAA/mE,OAAA,EAAAsC,KAAAykE,QAAA,QACA0zB,EAAAD,EACAlpD,EAAAhvC,KAGAo4F,EAAA,SAAA5zB,EAAA6zB,EAAAC,EAAAtuB,EAAAC,GACA,GAAAsuB,GAAAvuB,EAAA,GAAAxF,EAAA/wB,EAAAw2B,EAAA,GAAAuuB,EAAAxuB,EAAA,GAAAxF,EAAA1wB,EAAAm2B,EAAA,GACAwuB,EAAAzuB,EAAA,GAAAC,EAAA,KAAAyuB,EAAA1uB,EAAA,GAAAC,EAAA,IACA,OAAApmE,MAAAmwC,KAAAnwC,KAAAswC,IAAAkkD,EAAAE,EAAA,GAAA10F,KAAAswC,IAAAmkD,EAAAE,EAAA,IACA30F,KAAAmwC,KAAAnwC,KAAAswC,IAAAskD,EAAAF,EAAA,GAAA10F,KAAAswC,IAAAukD,EAAAF,EAAA,KASAG,EAAAn2C,EAAA/F,UAAA,SAAAutB,EAAAC,EAAAmd,EAAAC,EAAA5iB,GAGA,OAFA4zB,GAAAjR,EAAA,GAAAC,EAAA,KAAAiR,EAAAlR,EAAA,GAAAC,EAAA,KACAuR,GAAA,EAAAC,EAAAx/C,IACA57C,EAAA,EAA+BA,EAAAgnE,EAAA/mE,OAAoBD,IAAA,CACnD,GAAA2W,GAAAgkF,EAAA3zB,EAAAhnE,GAAA46F,EAAAC,EAAAtuB,EAAAC,EACA71D,GAAAykF,IACAD,EAAAn7F,EAAA,EACAo7F,EAAAzkF,GAGA,MAAAqwD,GAAAm0B,GAGA54F,MAAA+pE,QAAA,SAAAvnB,GACA,GAAAwnB,GAAAxnB,EAAAwnB,GAAAC,EAAAznB,EAAAynB,GAAAmd,EAAA5kC,EAAA4kC,IAAAC,EAAA7kC,EAAA6kC,GAEArnF,MAAA64D,UAAArW,EAAAqW,SAEA,IAAAigC,GAAA9pD,EAAA4oD,wBACA,cAAAkB,EACAA,EAMA94F,KAAAuzE,QAAA,MAAA6T,GAAA,MAAAC,EACA6Q,EAAAnuB,QAAAvnB,IAEAA,EAAAqW,UAAA,KAEAq/B,EAAAS,EAAA3uB,EAAAC,EAAAmd,EAAAC,EAAArnF,KAAAykE,SACAzkE,KAAAyzC,EAAAykD,EAAAzkD,EACAzzC,KAAA8zC,EAAAokD,EAAApkD,EAEAokD,GAAAC,GACAn4F,KAAAm3D,KAAA,gBAAA+gC,GAEAC,EAAAD,EAEAA,EAAAnuB,QAAAvnB,KAGAxiD,KAAAsjF,mBAAA,SAAA9gC,GACA,MAAAxiD,MAAA43F,2BAAA,MAAAM,IAAA5U,mBAAA9gC,GAAA,OAGAxiD,KAAAiyE,eAAA,SAAA8lB,GACA,aAAAG,IAAAjmB,eAAA8lB,IAAA,MAEA/3F,KAAAqgD,KAAA,SAAAmkB,EAAAX,GACA,MAAAq0B,KAAA73C,KAAAmkB,EAAAX,IAEA7jE,KAAAmyC,IAAA,WACA,MAAA+lD,KAAA/lD,OAGAnyC,KAAAglF,YAAA,WACA,MAAAkT,MAAAlT,eAAA,KAGA7sB,EAAAj5D,OAAAshF,EAAAtO,cAAAsO,EAAAnO,OAGA,IAAA0mB,GAAA,SAAAtlD,EAAAK,EAAAklD,EAAAC,EAAAl+F,EAAAm+F,GACA1Y,EAAAtX,QAAAnuE,GAAA,SAAAynD,GACA,GAAApoD,GAAAooD,EAAAob,gBAAA+T,YAAAl+B,EAAAK,EAAAklD,EAAAC,EAAA,KAAAz2C,EAAAqkB,UAAArkB,EAAAob,gBAGA,OAFAxjE,GAAAW,OACAm+F,KAAA9+F,EAAAooD,GACApoD,GAIA2+F,GAAA,uBACAA,EAAA,yBACAA,EAAA,wBACAA,EAAA,wBAEAA,EAAA,iBACAA,EAAA,mBACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,oBACAA,EAAA,qBACAA,EAAA,uBACAA,EAAA,oBACAA,EAAA,sBAKAvY,EAAApmB,SAAA++B,eAAA,SAAA32C,GACA,MAAAA,GAAAob,gBAAA0U,aAAA,uDAAA9vB,EAAAqkB,UAAArkB,EAAAob,kBAIA4iB,EAAAtX,QAAAkwB,YAAA,SAAA52C,GACA,GAAApoD,GAAAooD,EAAAob,gBAAA2U,kBAAAiO,EAAApmB,SAAA++B,eAAA32C,GAEA,OADApoD,GAAAW,KAAA,cACAX,EAKA,IAAAi/F,GAAA,SAAAt+F,EAAA87F,GACArW,EAAAtX,QAAAnuE,GAAA,SAAAynD,GACA,GAAApoD,GAAAooD,EAAAob,gBAAA+T,YAAA,cAAsEklB,UAAer0C,EAAAqkB,UAAArkB,EAAAob,gBAErF,OADAxjE,GAAAW,OACAX,GAIAomF,GAAAtX,QAAAowB,WAAA,SAAA92C,GACA,MAAAA,GAAAob,gBAAAynB,wBAAAlrF,IAAAqoD,IAGA62C,EAAA,2BACAA,EAAA,yBACAA,EAAA,+BACAA,EAAA,6BAKAN,EAAA,0BAAAv0B,EAAAhiB,GAIA,GAAA+2C,GAAA/2C,EAAA0J,UAAA,OACAsY,GAAAqP,eAAA0lB,EAAA9gF,aAAA3b,OAAA0lD,EAAAob,gBAAA47B,sBAAAD,KAGA/0B,EAAA0P,kBAAA1xB,IAMA/sB,EAAAmoC,gBAAA7zD,UAAAyvF,uBACAC,MAAA,SAAAC,EAAAz6B,EAAAoxB,GACA,QAAAqJ,EAAAnpE,KAAA0uC,EAAA1uC,MAAA8/D,EAAA,IAAAqJ,EAAAjpE,IAAAwuC,EAAAxuC,KAAA4/D,EAAA,KAEAsJ,KAAA,SAAAD,EAAAz6B,EAAAoxB,EAAA7tC,GACA,GAAAlyB,GAAAopE,EAAAnpE,KAAA0uC,EAAA1uC,KAAAC,EAAAkpE,EAAAjpE,IAAAwuC,EAAAxuC,IACAmpE,EAAAvJ,EAAA,GAAA7tC,EAAA2H,KAAA,GAAA0vC,EAAAxJ,EAAA,GAAA7tC,EAAA2H,KAAA,GACA2vC,EAAAj2F,KAAA6lD,MAAAp5B,EAAAspE,GAAAG,EAAAl2F,KAAA6lD,MAAAl5B,EAAAqpE,EACA,SAAAC,EAAAF,IAAA,GAAAvJ,EAAA,IAAA0J,EAAAF,IAAA,GAAAxJ,EAAA,MAMA7P,EAAAtX,QAAA8wB,UAAA,SAAAx3C,GACAA,OACA,IAAAy3C,GAAAz3C,EAAAy3C,aAAA,GACAC,EAAA13C,EAAA03C,KAEA,KAAAA,EAAA,SAAAC,OAAA,6CAEA,IAAAC,GAAA,WAEA,OADA5vB,GAAA,EAAA3mE,KAAAs3C,GAAA8+C,EAAA/+E,EAAA,EAAA9gB,KACAqD,EAAA,EAA+BA,EAAAw8F,EAAiBx8F,IAAA,CAChD,GAAAg2C,GAFA,MAEA5vC,KAAA61C,IAAAx+B,GACA44B,EAHA,MAGAjwC,KAAA81C,IAAAz+B,EACA9gB,GAAAyH,MAAA4xC,EAAAK,EAAA,MACA54B,GAAAsvD,EAEA,MAAApwE,IAEAigG,EAAA,SAAAz5F,GAeA,OAdA05F,GAAAL,EAAAr5F,EAAAlD,OAAAtD,KACAmgG,EAAA,SAAAh/C,EAAAE,EAAAD,EAAAE,EAAA8+C,GACAF,EAAAL,EAAAO,CAEA,QADAlqE,IAAAkrB,EAAAD,GAAA++C,EAAA9pE,GAAAkrB,EAAAD,GAAA6+C,EACA78F,EAAA,EAAuCA,EAAA68F,EAAoB78F,IAC3DrD,EAAAyH,MACA05C,EAAAjrB,EAAA7yB,EACAg+C,EAAAjrB,EAAA/yB,EACA,EACA,KAKAA,EAAA,EAA+BA,EAAAmD,EAAAlD,OAAqBD,IACpD88F,EAAA37F,MAAA,KAAAgC,EAAAnD,GAEA,OAAArD,IAEAqgG,EAAA,SAAA5D,GAEA,OADA7rE,MACAvtB,EAAA,EAA+BA,EAAAo5F,EAAAn5F,OAAkBD,IACjDutB,EAAAnpB,MAAAg1F,EAAAp5F,GAAA,GAAAo5F,EAAAp5F,GAAA,GAAAo5F,EAAAp5F,GAAA,GAAAo5F,EAAAp5F,GAAA,KAAAo5F,EAAAn5F,QAEA,OAAA28F,GAAArvE,IAEA0vE,EAAA,WACA,MAAAD,KACA,UACA,UACA,UACA,YAIAE,GACAC,OAAAR,EACAS,QAAAT,EACAU,QAAA,WACA,MAAAL,KACA,YACA,YACA,YACA,cAGAM,UAAAL,EACAM,OAAAN,EACAO,SAAA,WACA,MAAAR,KACA,WACA,UACA,aAGAS,KAAA,SAAA14C,GAEA,OADA24C,GAAA34C,EAAA24C,OAAAp5E,KAAAq5E,EAAA,EACA39F,EAAA,EAAmCA,EAAA09F,EAAAz9F,OAAA,EAAuBD,IAAA,CAC1D,GAAAiB,GAAAmF,KAAAmwC,KAAAnwC,KAAAswC,IAAAgnD,EAAA19F,GAAA,GAAA09F,EAAA19F,GAAA,IAAAoG,KAAAswC,IAAAgnD,EAAA19F,GAAA,GAAA09F,EAAA19F,GAAA,IACA29F,IAAA18F,EACAqjB,EAAAlgB,MAAAs5F,EAAA19F,GAAA,GAAA09F,EAAA19F,GAAA,GAAA09F,EAAA19F,EAAA,MAAA09F,EAAA19F,EAAA,MAAAiB,IAEA,OAAAiR,GAAA,EAAmCA,EAAAoS,EAAArkB,OAAciS,IACjDoS,EAAApS,GAAA,GAAAoS,EAAApS,GAAA,GAAAyrF,CAEA,OAAAf,GAAAt4E,IAmBA,KAAA44E,EAAAT,GAAA,SAAAC,OAAA,UAAAD,EAAA,wCAEA,IAAAmB,GAAAV,EAAAT,GAAA13C,EACAA,GAAA84C,WAAAD,EAnBA,SAAAF,EAAAI,GAEA,OADAlqC,MAAAnW,EAAAqgD,EAAA,IAAA13F,KAAAs3C,GACA19C,EAAA,EAA+BA,EAAA09F,EAAAz9F,OAAmBD,IAAA,CAClD,GAAA86C,GAAA4iD,EAAA19F,GAAA,MACA+6C,EAAA2iD,EAAA19F,GAAA,KAEA4zD,GAAAxvD,MACA02C,EAAA10C,KAAA81C,IAAAuB,GAAA1C,EAAA30C,KAAA61C,IAAAwB,GAAA,GACA3C,EAAA10C,KAAA61C,IAAAwB,GAAA1C,EAAA30C,KAAA81C,IAAAuB,GAAA,GACAigD,EAAA19F,GAAA,GACA09F,EAAA19F,GAAA,KAGA,MAAA4zD,IAMAgqC,EAAA74C,EAAA84C,UACA,IAAAlhG,GAAAooD,EAAAob,gBAAA2U,kBAAA8oB,EAEA,OADAjhG,GAAAW,KAAA,YACAX,IAECoC,KAAA,mBAAA8f,eAAAtc,MAkBD,WAEA,YACA,IAAAy1B,GAAAz1B,KAAAwgF,EAAA/qD,EAAAijC,QAAAP,EAAA1iC,EAAAu+B,YAAAwnC,EAAA/lE,EAAA6kB,OAEAkmC,GAAAib,UAYAC,gBAAA,SAAAl5C,GACAxiD,KAAAwiD,SAWAxiD,KAAA27F,uBAAA,SAAAloD,EAAAK,GACA,OACA1/B,EAAAilC,IACA5F,EAAA,KACAK,EAAA,KACAp1C,EAAA,OAIAsB,KAAA47F,UAAA,WACA,OACAnM,KAAA5rF,KAAAgyC,IAAA2M,EAAAjH,GAAAiH,EAAAhH,IACAk0C,KAAA7rF,KAAAgyC,IAAA2M,EAAA/G,GAAA+G,EAAA9G,IACAi0C,KAAA9rF,KAAAC,IAAA0+C,EAAAjH,GAAAiH,EAAAhH,IACAo0C,KAAA/rF,KAAAC,IAAA0+C,EAAA/G,GAAA+G,EAAA9G,OAIAmgD,SAAA,SAAAr5C,GACA,GACA9kD,GAAA6kB,EAAAu5E,EAAAvgD,EAAAC,EAAAC,EAAAC,EACAqgD,GAFAvb,EAAAib,SAAAC,gBAAA98F,MAAAoB,KAAArB,WAEA,WACAjB,EAAAmG,KAAAmwC,KAAAnwC,KAAAswC,IAAAqH,EAAAD,EAAA,GAAA13C,KAAAswC,IAAAuH,EAAAD,EAAA,IACAl5B,EAAAi5E,EAAA9gD,UAAsCjH,EAAA8H,EAAAzH,EAAA2H,IAAgBhI,EAAA+H,EAAA1H,EAAA4H,IACtDogD,GAAA,EAAAv5E,GAGAviB,MAAAjF,KAAA,WAEAiF,KAAAq6C,UAAA,WACA,MAAA38C,IAEAsC,KAAAg8F,YAAA,WACA,MAAAz5E,IAGAviB,KAAAi8F,eAAA,WACA,OAAwB1gD,KAAAE,KAAAD,KAAAE,OAExB17C,KAAAk8F,eAAA,SAAAC,GACA5gD,EAAA4gD,EAAA5gD,GACAE,EAAA0gD,EAAA1gD,GACAD,EAAA2gD,EAAA3gD,GACAE,EAAAygD,EAAAzgD,GACAqgD,KAEA/7F,KAAAk8F,gBAAiC3gD,GAAAiH,EAAAjH,GAAAE,GAAA+G,EAAA/G,GAAAD,GAAAgH,EAAAhH,GAAAE,GAAA8G,EAAA9G,KAEjC17C,KAAA47F,UAAA,WACA,OACAnM,KAAA5rF,KAAAgyC,IAAA0F,EAAAC,GACAk0C,KAAA7rF,KAAAgyC,IAAA4F,EAAAC,GACAi0C,KAAA9rF,KAAAC,IAAAy3C,EAAAC,GACAo0C,KAAA/rF,KAAAC,IAAA23C,EAAAC,KAQA17C,KAAAo8F,YAAA,SAAAlnD,EAAAmnD,GACA,OAAAnnD,GAAAmnD,EAEA,OAAAnnD,GAAAmnD,EAEA,CACA,GAAA39F,GAAA29F,EAAAnnD,EAAA,EAAAA,EAAAx3C,EAAAw3C,IAAAx3C,CACA,OAAA89F,GAAAx/C,aAA4CvI,EAAA8H,EAAAzH,EAAA2H,IAAgBhI,EAAA+H,EAAA1H,EAAA4H,GAAah9C,GAHzE,OAA4B+0C,EAAA+H,EAAA1H,EAAA4H,GAF5B,OAA4BjI,EAAA8H,EAAAzH,EAAA2H,IAY5Bz7C,KAAA85C,gBAAA,SAAAt3B,GACA,MAAAD,IAQAviB,KAAAs8F,mBAAA,SAAApnD,EAAAC,EAAAknD,GACA,GAAAt6E,GAAA/hB,KAAAo8F,YAAAlnD,EAAAmnD,GACAE,EAAApnD,GAAA,GAAoD1B,EAAA8H,EAAAzH,EAAA2H,IAAiBhI,EAAA+H,EAAA1H,EAAA4H,EAWrE,OAFAvG,IAAA,GAAAtxC,KAAAo1C,IAAA9D,GAAA,IAAAA,IAAA,GAEAqmD,EAAAx/C,YAAAj6B,EAAAw6E,EAAApnD,GAIA,IAAAqnD,GAAA,SAAApiG,EAAAqF,EAAAS,GACA,MAAAA,IAAA2D,KAAAgyC,IAAAz7C,EAAAqF,IAAAS,GAAA2D,KAAAC,IAAA1J,EAAAqF,IAGAg9F,EAAA,SAAAriG,EAAAqF,EAAAS,GACA,MAAA2D,MAAAo1C,IAAA/4C,EAAA9F,GAAAyJ,KAAAo1C,IAAA/4C,EAAAT,GAAArF,EAAAqF,EAQAO,MAAA27F,uBAAA,SAAAloD,EAAAK,GACA,GAAA3B,IACA/9B,EAAAilC,IACA5F,EAAA,KACAK,EAAA,KACAp1C,EAAA,KACA68C,KACAC,KACAC,KACAC,KAGA,QAAAn5B,EACA4vB,EAAA2B,EAAA2H,EACAtJ,EAAAsB,EAAA+oD,EAAAjhD,EAAAC,EAAA/H,KAAAgpD,EAAAlhD,EAAAC,EAAA/H,OAEA,IAAAlxB,GAAA82B,KAAA92B,IAAA82B,IACAlH,EAAAsB,EAAA8H,EACApJ,EAAA2B,EAAA0oD,EAAA/gD,EAAAC,EAAA5H,KAAA2oD,EAAAhhD,EAAAC,EAAA5H,OAEA,CAEA,GAAAr0C,GAAAg8C,EAAAl5B,EAAAg5B,EACApE,EAAArD,EAAAgoD,EAAAroD,EAKAipD,GAAAvlD,EAAA13C,IAAA8iB,EAAAu5E,GACAa,EAAAp6E,EAAAm6E,EAAAj9F,CAEA0yC,GAAAsB,EAAA+oD,EAAAjhD,EAAAC,EAAAkhD,KAAAD,EAAAlhD,EAAAC,EAAAkhD,GACAvqD,EAAA2B,EAAA0oD,EAAA/gD,EAAAC,EAAAihD,KAAAF,EAAAhhD,EAAAC,EAAAihD,GAGA,GAAAC,GAAApB,EAAAzgD,YAAA5I,EAAAsB,EAAAtB,EAAA2B,IAAAyH,EAAAE,GAGA,OAFAtJ,GAAA/9B,EAAAonF,EAAAzgD,YAAAtH,EAAAK,IAAA3B,EAAAsB,EAAAtB,EAAA2B,IACA3B,EAAAzzC,EAAAk+F,EAAAl/F,EACAy0C,IAyBA0qD,IAAA,SAAAr6C,GACA,GACAs6C,IADAtc,EAAAib,SAAAC,gBAAA98F,MAAAoB,KAAArB,WACA,SAAA45C,EAAAC,GACA,MAAAgjD,GAAAtgD,OAAAsH,EAAA61C,GAAA71C,EAAA81C,KAAA//C,EAAAC,MAEAukD,EAAA,SAAAC,EAAA9nD,GACA,GAAA8nD,EAAAC,cAAA,CACA,GAAAC,GAAAF,EAAAG,WAAAH,EAAAI,SAAAJ,EAAAG,WAAAE,EAAAL,EAAAG,UAEA,OAAAD,GADAr5F,KAAAo1C,IAAAikD,EAAAF,EAAAI,UACAloD,EAGA,GAAAooD,GAAAN,EAAAI,SAAAJ,EAAAG,WAAAH,EAAAI,SAAAC,EAAAL,EAAAI,SACA3uB,EAAA5qE,KAAAo1C,IAAAqkD,EAAAN,EAAAG,WAEA,OAAAH,GAAAG,WAAA1uB,EAAAv5B,GAGAmoD,EAAA,EAAAx5F,KAAAs3C,EAEAn7C,MAAAu9F,OAAA/6C,EAAAuN,EACA/vD,KAAAi9F,cAAAz6C,EAAAg7C,GACAx9F,KAAAjF,KAAA,MAEAynD,EAAA26C,YAAA36C,EAAA46C,UACAp9F,KAAAm9F,WAAA36C,EAAA26C,WACAn9F,KAAAo9F,SAAA56C,EAAA46C,SACAp9F,KAAAu7C,GAAAiH,EAAA61C,GAAAr4F,KAAAu9F,OAAA15F,KAAA81C,IAAA6I,EAAA26C,YACAn9F,KAAAy7C,GAAA+G,EAAA81C,GAAAt4F,KAAAu9F,OAAA15F,KAAA61C,IAAA8I,EAAA26C,YACAn9F,KAAAw7C,GAAAgH,EAAA61C,GAAAr4F,KAAAu9F,OAAA15F,KAAA81C,IAAA6I,EAAA46C,UACAp9F,KAAA07C,GAAA8G,EAAA81C,GAAAt4F,KAAAu9F,OAAA15F,KAAA61C,IAAA8I,EAAA46C,YAGAp9F,KAAAm9F,WAAAL,EAAAt6C,EAAAjH,GAAAiH,EAAA/G,IACAz7C,KAAAo9F,SAAAN,EAAAt6C,EAAAhH,GAAAgH,EAAA9G,IACA17C,KAAAu7C,GAAAiH,EAAAjH,GACAv7C,KAAAy7C,GAAA+G,EAAA/G,GACAz7C,KAAAw7C,GAAAgH,EAAAhH,GACAx7C,KAAA07C,GAAA8G,EAAA9G,IAGA17C,KAAAo9F,SAAA,IAAAp9F,KAAAo9F,UAAAC,GACAr9F,KAAAm9F,WAAA,IAAAn9F,KAAAm9F,YAAAE,EASA,IAAAC,GAAAt9F,KAAAo9F,SAAAp9F,KAAAm9F,WAAAn9F,KAAAo9F,SAAAC,EAAAr9F,KAAAo9F,QACAp9F,MAAAy9F,MAAA55F,KAAAo1C,IAAAqkD,EAAAt9F,KAAAm9F,YACAn9F,KAAAi9F,gBAAAj9F,KAAAy9F,MAAAJ,EAAAr9F,KAAAy9F,MACA,IAAAC,GAAA,EAAA75F,KAAAs3C,GAAAn7C,KAAAu9F,OACAI,EAAA39F,KAAAy9F,MAAAJ,EACA3/F,EAAAggG,EAAAC,CAEA39F,MAAAq6C,UAAA,WACA,MAAA38C,IAGAsC,KAAA47F,UAAA,WACA,OACAnM,KAAAjtC,EAAA61C,GAAA71C,EAAAuN,EACA4/B,KAAAntC,EAAA61C,GAAA71C,EAAAuN,EACA2/B,KAAAltC,EAAA81C,GAAA91C,EAAAuN,EACA6/B,KAAAptC,EAAA81C,GAAA91C,EAAAuN,GAIA,IACA6tC,GAAA,SAAA5gG,GACA,GAAA6zC,GAAAhtC,KAAA6lD,MAAA1sD,GAAA+yD,EAAAlsD,KAAAg6F,KAAA7gG,EACA,OAAAA,GAAA6zC,EAHA,MAIAA,EACAkf,EAAA/yD,EALA,MAMA+yD,EACA/yD,EAOAgD,MAAAo8F,YAAA,SAAAlnD,EAAAmnD,GAEA,OAAAnnD,EACA,OAA4BzB,EAAAzzC,KAAAu7C,GAAAzH,EAAA9zC,KAAAy7C,GAAAP,MAAAl7C,KAAAm9F,WAE5B,OAAAjoD,EACA,OAA4BzB,EAAAzzC,KAAAw7C,GAAA1H,EAAA9zC,KAAA07C,GAAAR,MAAAl7C,KAAAo9F,SAG5Bf,KACAnnD,GAAAx3C,EAGA,IAAAogG,GAAAf,EAAA/8F,KAAAk1C,GACAqD,EAAAiK,EAAA61C,GAAA71C,EAAAuN,EAAAlsD,KAAA81C,IAAAmkD,GACAtlD,EAAAgK,EAAA81C,GAAA91C,EAAAuN,EAAAlsD,KAAA61C,IAAAokD,EAEA,QAAwBrqD,EAAAmqD,EAAArlD,GAAAzE,EAAA8pD,EAAAplD,GAAA0C,MAAA4iD,IAMxB99F,KAAA85C,gBAAA,SAAA5E,EAAAmnD,GACA,GAAAt6E,GAAA/hB,KAAAo8F,YAAAlnD,EAAAmnD,GACA95E,EAAAi5E,EAAA1gD,QAAA0H,EAAA61C,GAAA71C,EAAA81C,KAAAv2E,EAAA0xB,EAAA1xB,EAAA+xB,GAEA,OADA9zC,MAAAi9F,eAAA16E,GAAA82B,KAAA92B,IAAA82B,MAAA92B,IAAA,GACAA,GAGAviB,KAAAs8F,mBAAA,SAAApnD,EAAAC,EAAAknD,GACA,GAAAt6E,GAAA/hB,KAAAo8F,YAAAlnD,EAAAmnD,GACA0B,EAAA5oD,EAAAuoD,EAAA,EAAA75F,KAAAs3C,GACAz8B,EAAA1e,KAAAi9F,eAAA,IACAE,EAAAp7E,EAAAm5B,MAAAx8B,EAAAq/E,CAIA,QAAwBtqD,EAHxB+O,EAAA61C,GAAAr4F,KAAAu9F,OAAA15F,KAAA81C,IAAAwjD,GAGwBrpD,EAFxB0O,EAAA81C,GAAAt4F,KAAAu9F,OAAA15F,KAAA61C,IAAAyjD,MAMAa,OAAA,SAAAx7C,GACAxiD,KAAAs0C,QACiBb,EAAA+O,EAAAjH,GAAAzH,EAAA0O,EAAA/G,KACAhI,EAAA+O,EAAAy7C,KAAAnqD,EAAA0O,EAAA07C,OACAzqD,EAAA+O,EAAA27C,KAAArqD,EAAA0O,EAAA47C,OACA3qD,EAAA+O,EAAAhH,GAAA1H,EAAA0O,EAAA9G,IAGjB8kC,GAAAib,SAAAC,gBAAA98F,MAAAoB,KAAArB,UAIAqB,MAAAiwF,QACAR,KAAA5rF,KAAAgyC,IAAA2M,EAAAjH,GAAAiH,EAAAhH,GAAAgH,EAAAy7C,KAAAz7C,EAAA27C,MACAzO,KAAA7rF,KAAAgyC,IAAA2M,EAAA/G,GAAA+G,EAAA9G,GAAA8G,EAAA07C,KAAA17C,EAAA47C,MACAzO,KAAA9rF,KAAAC,IAAA0+C,EAAAjH,GAAAiH,EAAAhH,GAAAgH,EAAAy7C,KAAAz7C,EAAA27C,MACAvO,KAAA/rF,KAAAC,IAAA0+C,EAAA/G,GAAA+G,EAAA9G,GAAA8G,EAAA07C,KAAA17C,EAAA47C,OAGAp+F,KAAAjF,KAAA,QAEA,IAAAsjG,GAAA,SAAAC,EAAAppD,EAAAmnD,GAIA,MAHAA,KACAnnD,EAAAzf,EAAAmkB,SAAAQ,uBAAAkkD,EAAAppD,EAAA,MAAAA,IAEAA,EAOAl1C,MAAAo8F,YAAA,SAAAlnD,EAAAmnD,GAEA,MADAnnD,GAAAmpD,EAAAr+F,KAAAs0C,MAAAY,EAAAmnD,GACA5mE,EAAAmkB,SAAAK,aAAAj6C,KAAAs0C,MAAAY,IAMAl1C,KAAA85C,gBAAA,SAAA5E,EAAAmnD,GAEA,MADAnnD,GAAAmpD,EAAAr+F,KAAAs0C,MAAAY,EAAAmnD,GACA5mE,EAAAmkB,SAAAE,gBAAA95C,KAAAs0C,MAAAY,IAGAl1C,KAAAs8F,mBAAA,SAAApnD,EAAAC,EAAAknD,GAEA,MADAnnD,GAAAmpD,EAAAr+F,KAAAs0C,MAAAY,EAAAmnD,GACA5mE,EAAAmkB,SAAAM,oBAAAl6C,KAAAs0C,MAAAY,EAAAC,IAGAn1C,KAAAq6C,UAAA,WACA,MAAA5kB,GAAAmkB,SAAAS,UAAAr6C,KAAAs0C,QAGAt0C,KAAA47F,UAAA,WACA,MAAA57F,MAAAiwF,UAKAzP,EAAA+d,iBACAC,QAAA,SAAAxB,GACA,OACAnB,SAAA,WACA,GAAAznF,GAAA4oF,EAAAf,gBACA,YAAA7nF,EAAAmnC,GAAA,IAAAnnC,EAAAqnC,GAAA,MAAArnC,EAAAonC,GAAA,IAAApnC,EAAAsnC,IAEAsiD,OAAA,WACA,GAAA5pF,GAAA4oF,EAAAx6C,MACA,YAAApuC,EAAAmnC,GAAA,IAAAnnC,EAAAqnC,GACA,MAAArnC,EAAA6pF,KAAA,IAAA7pF,EAAA8pF,KAAA,IAAA9pF,EAAA+pF,KAAA,IAAA/pF,EAAAgqF,KAAA,IAAAhqF,EAAAonC,GAAA,IAAApnC,EAAAsnC,IAEAmhD,IAAA,WACA,GAAAzoF,GAAA4oF,EAAAx6C,OACAi8C,EAAAzB,EAAAS,MAAA55F,KAAAs3C,GAAA,IACAy2C,EAAAoL,EAAAC,cAAA,GAEA,WAAAD,EAAAzhD,GAAA,IAAAyhD,EAAAvhD,GAAA,MAAAuhD,EAAAO,OAAA,IAAAnpF,EAAA27C,EAAA,MAAA0uC,EAAA,IAAA7M,EAAA,IAAAoL,EAAAxhD,GAAA,IAAAwhD,EAAAthD,KAEashD,EAAAjiG,SAQb,IAAA2jG,GAAA,WACA1+F,KAAAovF,YAAA,WACApvF,KAAAiwF,QAA2BR,KAAAp2C,IAAAq2C,KAAAr2C,IAAAs2C,MAAAt2C,IAAAu2C,MAAAv2C,MAE3Br5C,KAAAovF,cAaA5O,GAAArX,WAAAw1B,kBAAA,SAAAn8C,GAEAk8C,EAAA9/F,MAAAoB,KAAArB,UAEA,IAAAiC,MACAg+F,EAAA,EACAC,KACAC,KACAC,EAAAv8C,EAAAu8C,MAAA,EACAC,EAAA7mC,EAAAv1D,QAAAm8F,KAAA,GAAAA,EACAE,EAAA9mC,EAAAv1D,QAAAm8F,KAAA,GAAAA,EACAG,EAAA18C,EAAA08C,KAAA,EACAC,EAAAhnC,EAAAv1D,QAAAs8F,KAAA,GAAAA,EACAE,EAAAjnC,EAAAv1D,QAAAs8F,KAAA,GAAAA,EACAG,EAAA,KACAC,GAAA,EACAC,EAAA,KACAhS,EAAA,KACArB,GAAA,IAAA1pC,EAAA0pC,UAAA,MAAA1L,EAAAgf,kBAAA,MAAAhf,EAAAgf,iBAAAx/F,KAAAjF,MAEA0kG,EAAAz/F,KAAAwtF,YAAA,SAAAz/C,EAAA2xD,GACAJ,GAAAI,EACAnS,EAAAx/C,GAEA4xD,EAAA3/F,KAAAouF,YAAA,WACA,MAAAb,GAGAvtF,MAAA4/F,YAAA,WAEA,OADA79E,GAAA,GACAtkB,EAAA,EAA2BA,EAAAmD,EAAAlD,OAAqBD,IAChDskB,GAAAy+D,EAAA+d,gBAAAC,QAAA59F,EAAAnD,IACAskB,GAAA,GAEA,OAAAA,IAGA/hB,KAAA6/F,cAAA,WAAyC,MAAAP,IACzCt/F,KAAAysF,UAAA,WAAqC,aAAAzsF,KAAA8/F,QAAA9/F,KAAA8/F,OAAAC,YACrC//F,KAAAusF,YAAA,SAAA3sF,GASA,MAJAssF,MADAtsF,GAAA,MAAA4gF,EAAAgf,kBAAA,MAAAhf,EAAAgf,iBAAAx/F,KAAAjF,OAAA,MAAAiF,KAAAggG,sBAAAhgG,KAAAggG,wBACApgG,GAMAI,KAAAwsF,WAAA,WAAsC,MAAAN,IActClsF,KAAAigG,oBAAA,SAAAxsD,EAAAK,GAEA,OADA3B,IAAuB/9B,EAAAilC,IAAAruB,EAAA,KAAAyoB,EAAA,KAAAK,EAAA,KAAAp1C,EAAA,MACvBjB,EAAA,EAA2BA,EAAAmD,EAAAlD,OAAqBD,IAAA,CAChD,GAAAynC,GAAAtkC,EAAAnD,GAAAk+F,uBAAAloD,EAAAK,EACA5O,GAAA9wB,EAAA+9B,EAAA/9B,IACA+9B,EAAA/9B,EAAA8wB,EAAA9wB,EACA+9B,EAAAzzC,EAAAwmC,EAAAxmC,EACAyzC,EAAAsB,EAAAvO,EAAAuO,EACAtB,EAAA2B,EAAA5O,EAAA4O,EACA3B,EAAAnnB,EAAApqB,EAAAnD,GACA00C,EAAAoJ,GAAArW,EAAAqW,GACApJ,EAAAqJ,GAAAtW,EAAAsW,GACArJ,EAAAsJ,GAAAvW,EAAAuW,GACAtJ,EAAAuJ,GAAAxW,EAAAwW,GACAvJ,EAAAp0C,MAAAN,GAIA,MAAA00C,GAGA,IAAA+tD,GAAA,WAEA,OADAnnD,GAAA,EACAt7C,EAAA,EAA+BA,EAAAmD,EAAAlD,OAAqBD,IAAA,CACpD,GAAA6lD,GAAA1iD,EAAAnD,GAAA48C,WACAykD,GAAArhG,GAAA6lD,EAAAs7C,EACAC,EAAAphG,IAAAs7C,KAAAuK,EAAAs7C,KAaAuB,EAAA,SAAAjrD,EAAAmnD,GACAA,IACAnnD,IAAA,EAAAA,EAAA0pD,KAAA1pD,GAAA0pD,EAGA,QADA16E,GAAA26E,EAAAnhG,OAAA,EAAA0iG,EAAA,EACA3iG,EAAA,EAA+BA,EAAAohG,EAAAnhG,OAA+BD,IAC9D,GAAAohG,EAAAphG,GAAA,IAAAy3C,EAAA,CACAhxB,EAAAzmB,EAEA2iG,EAAA,GAAAlrD,EAAA,MAAAA,EAAA,GAAAA,EAAA2pD,EAAAphG,GAAA,IAAAqhG,EAAArhG,EACA,OAGA,OAAwBu/F,QAAAp8F,EAAAsjB,GAAAm8E,WAAAD,EAAAriG,MAAAmmB,IAExBo8E,EAAA,SAAAxhC,EAAA/jE,EAAAynD,GACA,GAAAA,EAAAjH,IAAAiH,EAAAhH,IAAAgH,EAAA/G,IAAA+G,EAAA9G,GAAA,CACA,GAAA1wB,GAAA,GAAAw1D,GAAAib,SAAA1gG,GAAAynD,EACA5hD,GAAAiB,KAAAmpB,GACA4zE,GAAA5zE,EAAAqvB,YACAykB,EAAAyhC,aAAAv1E,KAEAw1E,EAAA,WACA5B,EAAAh+F,EAAAlD,OAAAmhG,EAAAnhG,OAAAohG,EAAAphG,OAAA,EAGAsC,MAAAygG,YAAA,SAAAC,GACArB,KACAT,EAAA,CACA,QAAAnhG,GAAA,EAA2BA,EAAAijG,EAAAhjG,OAAkBD,IAC7C4hG,EAAAx9F,KAAA6+F,EAAAjjG,IACAmhG,GAAA8B,EAAAjjG,GAAA48C,aAIAr6C,KAAAq6C,UAAA,WACA,MAAAukD,GAGA,IAAA+B,GAAA,SAAAn+C,GACAxiD,KAAAuvF,YAAA/sC,EAAA+sC,WACA,IAAAyN,GAAAxB,EAAAxgD,SAAAwH,EAAA6sC,UAAA7sC,EAAA8sC,WACAsR,EAAAp+C,EAAA8sC,UAAA,GAAA9sC,EAAA6sC,UAAA,GACAwR,EAAAr+C,EAAA8sC,UAAA,GAAA9sC,EAAA6sC,UAAA,GACAyR,EAAAt+C,EAAA+sC,aAAA,EACAwR,EAAAv+C,EAAAshB,eAAAU,OAAAyN,eAAAzvB,EAAAshB,gBACA3kE,EAAAqjD,EAAAuhB,eAAAS,OAAAyN,eAAAzvB,EAAAuhB,gBACAtwB,EAAAmtD,EAAAp+C,EAAA8sC,UAAA,GAAA9sC,EAAA6sC,UAAA,GACAv7C,EAAA+sD,EAAAr+C,EAAA8sC,UAAA,GAAA9sC,EAAA6sC,UAAA,GACA76C,EAAA3wC,KAAAo1C,IAAAuJ,EAAA8sC,UAAA,GAAA9sC,EAAA6sC,UAAA,IACAl7E,EAAAtQ,KAAAo1C,IAAAuJ,EAAA8sC,UAAA,GAAA9sC,EAAA6sC,UAAA,GAKA,QAAA0R,EAAA,QAAAA,EAAA,QAAA5hG,EAAA,QAAAA,EAAA,IACA,GAAApB,GAAAy2C,EAAArgC,EAAA,IAAA6sF,GAAA,KAAAjjG,EACAgjG,MACA5hG,KACA4hG,EAAAhjG,GAAAykD,EAAA6sC,UAAAtxF,GAAAykD,EAAA8sC,UAAAvxF,IAAA,IACAoB,EAAApB,GAAAykD,EAAA6sC,UAAAtxF,GAAAykD,EAAA8sC,UAAAvxF,GAAA,KACAgjG,EAAAC,GAAA,EACA7hG,EAAA6hG,GAAA,EAGA,GAAAC,GAAAL,EAAApsD,EAAA2qD,EAAA4B,EAAA,GAAA5B,EAAA4B,EAAA,GACAG,EAAAL,EAAA1sF,EAAAgrF,EAAA4B,EAAA,GAAA5B,EAAA4B,EAAA,GACAI,EAAAP,EAAAxB,EAAAjgG,EAAA,GAAAq1C,EAAA4qD,EAAAjgG,EAAA,GACAiiG,EAAAP,EAAAzB,EAAAjgG,EAAA,GAAAgV,EAAAirF,EAAAjgG,EAAA,GACAkiG,EAAAN,EAAA,GAAA5hG,EAAA,GAAA4hG,EAAA,GAAA5hG,EAAA,GAEAqU,GACAytF,KAAAC,KAAAC,KAAAC,KAAAN,KACAQ,MAAAz9F,KAAAo1C,IAAAkoD,EAAAF,GACAM,MAAA19F,KAAAo1C,IAAAmoD,EAAAF,GACApH,IAAAmH,EAAAE,GAAA,EACApH,IAAAmH,EAAAE,GAAA,EACAL,KAAA5hG,KAAAs0C,IAAAK,IAAAU,IAAArgC,IACA6oF,UACAwE,WAAAP,EAAAF,EAAA,GAAA/B,EACAyC,WAAAP,EAAAH,EAAA,GAAA/B,EACA0C,SAAAP,EAAAhiG,EAAA,GAAA8/F,EACA0C,SAAAP,EAAAjiG,EAAA,GAAA8/F,EACA2C,yBAAA/9F,KAAAo1C,IAAAgoD,EAAAE,GAAAnC,EAAAC,EACA4C,yBAAAh+F,KAAAo1C,IAAAioD,EAAAE,GAAApC,EAAAC,EACA6C,UAAA,GAAAT,EACAU,cAAA,IAAAV,EACAW,WAAA,GAAAX,EACAY,WAAA,IAAAlB,EAAA,WACA5F,QAAA1nD,EAAAK,EAAAU,EAAArgC,EAAA8sF,EAAAC,EAAAC,EAAAC,GAGA,OADA5tF,GAAA0uF,kBAAA1uF,EAAAsuF,SAAA,WAAAtuF,EAAAwuF,WAAA,6BACAxuF,EAGAxT,MAAAmiG,YAAA,WACA,MAAAvhG,IAGAZ,KAAAugG,aAAA,SAAAvD,GACA,GAAAoF,GAAApF,EAAApB,WACA57F,MAAAiwF,OAAAR,KAAA5rF,KAAAgyC,IAAA71C,KAAAiwF,OAAAR,KAAA2S,EAAA3S,MACAzvF,KAAAiwF,OAAAN,KAAA9rF,KAAAC,IAAA9D,KAAAiwF,OAAAN,KAAAyS,EAAAzS,MACA3vF,KAAAiwF,OAAAP,KAAA7rF,KAAAgyC,IAAA71C,KAAAiwF,OAAAP,KAAA0S,EAAA1S,MACA1vF,KAAAiwF,OAAAL,KAAA/rF,KAAAC,IAAA9D,KAAAiwF,OAAAL,KAAAwS,EAAAxS,MAuCA,OA7BA5vF,MAAAo8F,YAAA,SAAAlnD,EAAAmnD,GACA,GAAAgG,GAAAlC,EAAAjrD,EAAAmnD,EACA,OAAAgG,GAAArF,SAAAqF,EAAArF,QAAAZ,YAAAiG,EAAAhC,YAAA,WAGArgG,KAAA85C,gBAAA,SAAA5E,EAAAmnD,GACA,GAAAgG,GAAAlC,EAAAjrD,EAAAmnD,EACA,OAAAgG,GAAArF,SAAAqF,EAAArF,QAAAljD,gBAAAuoD,EAAAhC,YAAA,OAGArgG,KAAAs8F,mBAAA,SAAApnD,EAAAC,EAAAknD,GACA,GAAAgG,GAAAlC,EAAAjrD,EAAAmnD,EAEA,OAAAgG,GAAArF,SAAAqF,EAAArF,QAAAV,mBAAA+F,EAAAhC,WAAAlrD,GAAA,WAGAn1C,KAAA+pE,QAAA,SAAAvnB,GACA+8C,EAAAoB,EAAAnkG,KAAAwD,KAAAwiD,GAEAg+C,IACAxgG,KAAAsiG,SAAA/C,EAAA/8C,GACAxiD,KAAAyzC,EAAA8rD,EAAApE,OAAA,GACAn7F,KAAA8zC,EAAAyrD,EAAApE,OAAA,GACAn7F,KAAAw0C,EAAA+qD,EAAApE,OAAA,GACAn7F,KAAAmU,EAAAorF,EAAApE,OAAA,GACAn7F,KAAAg9F,QAAAuC,EAAAvC,QACAkD,MAIAqC,WAAAjC,EACAkC,eAAA7B,EACA3B,aACAC,aACAwD,QAAA5+F,KAAAC,IAAAk7F,EAAAC,GACAE,YACAC,YACAsD,OAAA7+F,KAAAC,IAAAq7F,EAAAC,GACA5R,YAAAiS,EACArR,YAAAuR,IAGAxnC,EAAAj5D,OAAAshF,EAAArX,WAAAw1B,kBAAAD,GAOAle,EAAApX,UAAAu5B,iBAAA,SAAAngD,GAcA,MAbAk8C,GAAA9/F,MAAAoB,KAAArB,YAcAorE,QAbA/pE,KAAA+pE,QAAA,SAAAsZ,EAAAjR,EAAAxN,EAAAgiB,GACA,GAAAz0C,GAAAnyC,KAAAsiG,SAAA1jG,MAAAoB,KAAArB,UASA,OARAqB,MAAAyzC,EAAAtB,EAAA,GACAnyC,KAAA8zC,EAAA3B,EAAA,GACAnyC,KAAAw0C,EAAArC,EAAA,GACAnyC,KAAAmU,EAAAg+B,EAAA,GACAnyC,KAAAiwF,OAAAR,KAAAzvF,KAAAyzC,EACAzzC,KAAAiwF,OAAAP,KAAA1vF,KAAA8zC,EACA9zC,KAAAiwF,OAAAN,KAAA3vF,KAAAyzC,EAAAzzC,KAAAw0C,EACAx0C,KAAAiwF,OAAAL,KAAA5vF,KAAA8zC,EAAA9zC,KAAAmU,EACAg+B,GAIA0pB,SAAArZ,EAAAqZ,WAGA1D,EAAAj5D,OAAAshF,EAAApX,UAAAu5B,iBAAAjE,GAcAle,EAAApX,UAAAw5B,IAAA,SAAApgD,GACAxiD,KAAAjF,KAAA,KACAylF,GAAApX,UAAAu5B,iBAAA/jG,MAAAoB,KAAArB,UACA6jD,SACAxiD,KAAAu9F,OAAA/6C,EAAA+6C,QAAA,GACAv9F,KAAA6iG,cAAA,GAAA7iG,KAAAu9F,OACAv9F,KAAA8iG,mBAAA9iG,KAAAu9F,OAAA,EAEAv9F,KAAAsiG,SAAA,SAAAjf,EAAAjR,EAAAxN,EAAAgiB,GACA5mF,KAAAu9F,OAAA34B,EAAA24B,QAAAv9F,KAAAu9F,MACA,IAAA9pD,GAAA4vC,EAAA,GAAArjF,KAAAu9F,OACAzpD,EAAAuvC,EAAA,GAAArjF,KAAAu9F,OACA/oD,EAAA,EAAAx0C,KAAAu9F,OACAppF,EAAA,EAAAnU,KAAAu9F,MAEA,IAAA34B,EAAA0X,OAAA,CACA,GAAAwkB,GAAAl8B,EAAA2qB,aAAA,CACA97C,IAAAqtD,EACAhtD,GAAAgtD,EACAtsD,GAAA,EAAAssD,EACA3sF,GAAA,EAAA2sF,EAEA,OAAArtD,EAAAK,EAAAU,EAAArgC,EAAAnU,KAAAu9F,UAGAplC,EAAAj5D,OAAAshF,EAAApX,UAAAw5B,IAAApiB,EAAApX,UAAAu5B,kBAEAniB,EAAApX,UAAA2xB,UAAA,SAAAv4C,GACAxiD,KAAAjF,KAAA,WACAylF,GAAApX,UAAAu5B,iBAAA/jG,MAAAoB,KAAArB,UACA6jD,SACAxiD,KAAAg4D,MAAAxV,EAAAwV,OAAA,GACAh4D,KAAA+3D,OAAAvV,EAAAuV,QAAA,GAEA/3D,KAAAsiG,SAAA,SAAAjf,EAAAjR,EAAAxN,EAAAgiB,GACA,GAAA5uB,GAAA4M,EAAA5M,OAAAh4D,KAAAg4D,MACAD,EAAA6M,EAAA7M,QAAA/3D,KAAA+3D,MAIA,QAHAsrB,EAAA,GAAArrB,EAAA,EACAqrB,EAAA,GAAAtrB,EAAA,EAEAC,EAAAD,KAGAI,EAAAj5D,OAAAshF,EAAApX,UAAA2xB,UAAAva,EAAApX,UAAAu5B,iBAEA,IAAAI,GAAA,SAAAvgD,GACAg+B,EAAA3mB,mBAAAj7D,MAAAoB,KAAArB,WACAqB,KAAAs4D,SAAA0qC,mBAEA7qC,GAAAj5D,OAAA6jG,EAAAviB,EAAA3mB,oBACAopC,mBAAA,WACA,MAAAjjG,MAAAs4D,SAAA0qC,iBAEAE,qBAAA,SAAAn1F,GACA/N,KAAAs4D,SAAA0qC,gBAAAnhG,KAAAkM,MAqBAyyE,EAAApX,UAAA+5B,MAAA,SAAA3gD,GAEAxiD,KAAAjF,KAAA,QACAgoG,EAAAnkG,MAAAoB,KAAArB,WACA6hF,EAAApX,UAAAu5B,iBAAA/jG,MAAAoB,KAAArB,UAEA,IAAAykG,GAAA5gD,EAAA6gD,OACAphG,EAAAugD,EAAAvgD,KAAAugD,EAAA8gD,IACAjnC,EAAA7Z,EAAAqZ,SAAA,IAAArZ,EAAAqZ,SAAA,EAEA77D,MAAAs4D,SAAAirC,IAAA,GAAAJ,OACAnjG,KAAAs4D,SAAAtB,OAAA,EACAh3D,KAAAs4D,SAAAuH,aAAA,EACA7/D,KAAAs4D,SAAAkrC,SAAA,EACAxjG,KAAAs4D,SAAAmrC,WAAAjhD,EAAAwV,MACAh4D,KAAAs4D,SAAAorC,YAAAlhD,EAAAuV,OACA/3D,KAAAs4D,SAAAuL,SAAArhB,EAAAqhB,SAEA7jE,KAAAs4D,SAAAirC,IAAAF,OAAA,WACA,MAAArjG,KAAAs4D,WACAt4D,KAAAs4D,SAAAtB,OAAA,EACAh3D,KAAAs4D,SAAAmrC,WAAAzjG,KAAAs4D,SAAAmrC,YAAAzjG,KAAAs4D,SAAAirC,IAAAvrC,MACAh4D,KAAAs4D,SAAAorC,YAAA1jG,KAAAs4D,SAAAorC,aAAA1jG,KAAAs4D,SAAAirC,IAAAxrC,OACAqrC,GACAA,EAAApjG,QAGSzB,KAAAyB,MAUTA,KAAAs4D,SAAAuL,SAAA8/B,SAAA,SAAAC,EAAAP,GACA,GAAAr4E,GAAA44E,EAAAnrF,aAAA3b,OAAA8mG,IAAA3hG,GACAmhG,GAAAC,EACArjG,KAAAs4D,SAAAirC,IAAAthG,IAAA+oB,EAEA,MAAAhrB,KAAA87D,QACA97D,KAAA87D,OAAA/+C,aAAA,MAAA/c,KAAAs4D,SAAAirC,IAAAthG,MACS1D,KAAAyB,MAETA,KAAAs4D,SAAAuL,SAAA8/B,SAAA1hG,EAAAmhG,GACApjG,KAAAsiG,SAAA,SAAAjf,EAAAjR,EAAAxN,EAAAgiB,GAEA,MADA5mF,MAAAqjF,cACArjF,KAAAs4D,SAAAtB,OAAAqsB,EAAA,GAAArjF,KAAAs4D,SAAAmrC,WAAA,EAAApgB,EAAA,GAAArjF,KAAAs4D,SAAAorC,YAAA,EACA1jG,KAAAs4D,SAAAmrC,WAAAzjG,KAAAs4D,SAAAorC,cACA,UAGA1jG,KAAA87D,OAAA0kB,EAAAnsE,cAAA,OACA63C,SAAA,WACA23C,OAAA,EACAC,QAAA,EACAC,QAAA,GACS/jG,KAAAs4D,SAAAnnB,SAAAo3B,cAAAlM,GAETr8D,KAAAs4D,SAAAmrC,YAAAzjG,KAAA87D,OAAA/+C,aAAA,QAAA/c,KAAAs4D,SAAAmrC,YACAzjG,KAAAs4D,SAAAorC,aAAA1jG,KAAA87D,OAAA/+C,aAAA,SAAA/c,KAAAs4D,SAAAorC,aACA1jG,KAAAs4D,SAAAnnB,SAAAo/B,cAAAvwE,KAAA87D,QAEA97D,KAAAgkG,cAAA,SAAA5vF,EAAAmT,EAAAi9C,GACA,IAAAxkE,KAAAs4D,SAAAkrC,QAAA,CACAxjG,KAAAs4D,SAAAuH,cACA7/D,KAAA87D,OAAA/+C,aAAA,MAAA/c,KAAAs4D,SAAAirC,IAAAthG,KACAjC,KAAAkjG,qBAAAljG,KAAA87D,QACA97D,KAAAs4D,SAAAuH,aAAA,EAEA,IAAApsB,GAAAzzC,KAAAqjF,YAAA,GAAArjF,KAAAs4D,SAAAmrC,WAAA,EACA3vD,EAAA9zC,KAAAqjF,YAAA,GAAArjF,KAAAs4D,SAAAorC,YAAA,CACAvrC,GAAAL,YAAA93D,KAAA87D,OAAAroB,EAAAK,EAAA9zC,KAAAs4D,SAAAmrC,WAAAzjG,KAAAs4D,SAAAorC,eAIA1jG,KAAA6pE,MAAA,SAAAtiD,EAAAi9C,GACA,MAAAxkE,KAAAs4D,WACAt4D,KAAAs4D,SAAAtB,MACAh3D,KAAAgkG,cAAAz8E,EAAAi9C,GAGA/uC,EAAA9pB,WAAA,WACA3L,KAAA6pE,MAAAtiD,EAAAi9C,IACqBjmE,KAAAyB,MAAA,QAKrBm4D,EAAAj5D,OAAAshF,EAAApX,UAAA+5B,OAAAJ,EAAAviB,EAAApX,UAAAu5B,mBACA9qC,QAAA,SAAAnK,GACAA,IACA1tD,KAAAs4D,SAAAkrC,SAAA,EACAxjG,KAAA87D,QAAA97D,KAAA87D,OAAArgD,WAAA+B,YAAAxd,KAAA87D,QACA97D,KAAA87D,OAAA,SASA0kB,EAAApX,UAAA66B,MAAA,SAAAzhD,GACAg+B,EAAApX,UAAAu5B,iBAAA/jG,MAAAoB,KAAArB,UACAqB,MAAAjF,KAAA,QACAgoG,EAAAnkG,MAAAoB,KAAArB,WACAqB,KAAAsiG,SAAA,SAAAjf,EAAAjR,EAAAxN,EAAAgiB,GACA,OAAAvD,EAAA,GAAAA,EAAA,SAGA,IAAAhnB,GAAA7Z,EAAAqZ,SAAA,IAAArZ,EAAAqZ,SAAA,EAEA77D,MAAA87D,OAAA0kB,EAAAnsE,cAAA,OACA03B,QAAA,QACAisB,MAAA,MACAD,OAAA,MACAmsC,WAAA,cACAh4C,SAAA,YACSlsD,KAAAs4D,SAAAnnB,SAAAo3B,cAAAlM,GAETr8D,KAAAs4D,SAAAnnB,SAAAo/B,cAAAvwE,KAAA87D,QAEA97D,KAAA6pE,MAAA,SAAAtiD,EAAAi9C,GACArM,EAAAL,YAAA93D,KAAA87D,OAAA97D,KAAAyzC,EAAAzzC,KAAA8zC,EAAA9zC,KAAAw0C,EAAAx0C,KAAAmU,KAGAgkD,EAAAj5D,OAAAshF,EAAApX,UAAA66B,OAAAzjB,EAAApX,UAAAu5B,iBAAAI,IACAlrC,QAAA,WACA73D,KAAA87D,QAAA97D,KAAA87D,OAAArgD,YACAzb,KAAA87D,OAAArgD,WAAA+B,YAAAxd,KAAA87D,WAiBA0kB,EAAApX,UAAA6xB,SAAA,SAAAz4C,GACAxiD,KAAAjF,KAAA,WACAylF,EAAApX,UAAAu5B,iBAAA/jG,MAAAoB,KAAArB,WACA6jD,QACAA,EAAAwV,MAAAxV,EAAAwV,OAAA,GACAxV,EAAAuV,OAAAvV,EAAAuV,QAAA,GACA/3D,KAAAg4D,MAAAxV,EAAAwV,MACAh4D,KAAA+3D,OAAAvV,EAAAuV,OACA/3D,KAAAsiG,SAAA,SAAAjf,EAAAjR,EAAAxN,EAAAgiB,GACA,GAAA5uB,GAAA4M,EAAA5M,OAAAhpB,KAAAgpB,MACAD,EAAA6M,EAAA7M,QAAA/oB,KAAA+oB,MAGA,QAFAsrB,EAAA,GAAArrB,EAAA,EACAqrB,EAAA,GAAAtrB,EAAA,EACAC,EAAAD,IAQA,IAAAosC,GAAA3jB,EAAAnX,SAAA86B,gBAAA,SAAA3hD,GACAxiD,KAAAukF,SAAA,EACAvkF,KAAAuiF,sBAAA,EACAviF,KAAAyL,UAAA+2C,EAAA/2C,UACAzL,KAAAsmF,IAAA,MAAA9jC,EAAAtN,SAAA,GAAAsN,EAAAtN,SACAl1C,KAAAokG,YAAA,MAAA5hD,EAAA6hD,kBAAA,OAAA7hD,EAAA6hD,iBACArkG,KAAAukF,SAAA,IAAA/hC,EAAA+hC,QAEA4f,GAAAp6F,WACA8tD,QAAA,SAAAnK,GACAA,IACA1tD,KAAAyL,UAAA,KACAzL,KAAA87D,OAAA,KACA97D,KAAAokG,YAAA,OAGA5iB,SAAA,SAAArwC,KAGAq2B,WAAA,SAAA7qE,GACAqD,KAAAukF,QAAA5nF,EACAqD,KAAAyL,UAAAmuD,WAEA8N,UAAA,WACA,MAAA1nE,MAAAukF,SAEAvyC,KAAA,WACAhyC,KAAAwnE,YAAA,IAEAl6C,KAAA,WACAttB,KAAAwnE,YAAA,IAEA88B,kBAAA,SAAAC,GACAvkG,KAAAsmF,KAAAie,EACAvkG,KAAAyL,UAAAmuD,WAEAgpB,YAAA,SAAAlkF,GACAsB,KAAAsmF,IAAA5nF,EACAsB,KAAAyL,UAAAmuD,WAEA4qC,YAAA,WACA,MAAAxkG,MAAAsmF,KAEA/E,WAAA,cAyBAf,EAAAnX,SAAAo7B,MAAA,SAAAjiD,GACAxiD,KAAAjF,KAAA,QACAopG,EAAAvlG,MAAAoB,KAAArB,WACAqB,KAAAuiF,sBAAA,EACA//B,QAEAxiD,KAAAtC,OAAA8kD,EAAA9kD,QAAA,GACAsC,KAAAg4D,MAAAxV,EAAAwV,OAAA,GACAh4D,KAAA4F,GAAA48C,EAAA58C,EACA,IAAAozC,IAAAwJ,EAAAxJ,WAAA,UACAuf,EAAA/V,EAAA+V,aAA+C8jB,eAAA,GAE/CqoB,EAAAliD,EAAAkiD,UAAA,IAEA1kG,MAAA2kG,eAAA,WACA,WAAA31D,KAAAgpB,OAGAh4D,KAAA4kG,eAAA,SAAA7iF,EAAAtW,GAEA,GADAzL,KAAAS,KAAAshB,EACAygC,EAAAx/B,OACA,OAAAvlB,KAAA+kD,GAAAx/B,OACAw9D,EAAAh4E,GAAAuZ,EAAAtkB,EAAA+kD,EAAAx/B,OAAAvlB,KAKAuC,KAAAunF,KAAA,SAAA97E,EAAAo5F,GAEA,GAAAC,GAAAC,EAAA3d,EAAA4d,EAAAC,CACA,IAAAx5F,EAAA6wF,mBAAA,CAEA,GAAAnkC,EAAAlE,SAAAj0D,KAAAsmF,MAAAtmF,KAAAsmF,IAAA,GAAAtmF,KAAAsmF,IAAA,GACA,GAAA5nF,GAAAi8B,SAAA36B,KAAAsmF,IAAA,IACA4e,EAAAllG,KAAAsmF,IAAA,KACAwe,GAAAr5F,EAAA6wF,mBAAA4I,EAAAxmG,GAAA,GACAqmG,EAAAt5F,EAAA6wF,mBAAA4I,EAAAxmG,EAAAs6C,EAAAh5C,KAAAtC,OAAA,MACA0pF,EAAAoU,EAAAx/C,YAAA8oD,EAAAC,EAAA/kG,KAAAtC,YAEA,OAAAsC,KAAAsmF,KAKA,GAJAwe,EAAAr5F,EAAA2wF,YAAAp8F,KAAAsmF,KACAye,EAAAt5F,EAAA6wF,mBAAAt8F,KAAAsmF,KAAAtmF,KAAA,QACAonF,EAAAoU,EAAAx/C,YAAA8oD,EAAAC,EAAA/kG,KAAAtC,SAEA,GAAAs7C,EAAA,CACA,GAAAx2B,GAAA4kE,CACAA,GAAA0d,EACAA,EAAAtiF,OAGA,QAAAxiB,KAAAsmF,KAIA,GAHAc,EAAA37E,EAAA2wF,YAAAp8F,KAAAsmF,KACAye,EAAAt5F,EAAA6wF,mBAAAt8F,KAAAsmF,IAAAtmF,KAAAtC,QACAonG,EAAAtJ,EAAAx/C,YAAAorC,EAAA2d,EAAA/kG,KAAAtC,SACA,GAAAs7C,EAAA,CACA,GAAAmsD,GAAA/d,CACAA,GAAA0d,EACAA,EAAAK,OAIAL,GAAAr5F,EAAA6wF,mBAAAt8F,KAAAsmF,IAAAttC,EAAAh5C,KAAAtC,OAAA,GACAqnG,EAAAt5F,EAAA2wF,YAAAp8F,KAAAsmF,KACAc,EAAAoU,EAAAx/C,YAAA8oD,EAAAC,EAAA/kG,KAAAtC,OAGAsnG,GAAAxJ,EAAAp/C,oBAAA0oD,EAAA1d,EAAApnF,KAAAg4D,OACAitC,EAAAzJ,EAAAx/C,YAAA8oD,EAAA1d,EAAAsd,EAAA1kG,KAAAtC,OAEA,IAAA0W,IAAyB0wF,MAAAE,OAAAC,OACzB3oB,EAAA/jB,EAAA+jB,QAAAuoB,EAAAvoB,OACA3jB,EAAAJ,EAAAI,MAAAksC,EAAAvoB,MAGA,QACA7wE,YACA2I,IACAioE,eALA9jB,EAAAg3B,aAAAsV,EAAAtV,YAMAjT,SACA3jB,OACA82B,KAAA5rF,KAAAgyC,IAAAivD,EAAArxD,EAAAuxD,EAAA,GAAAvxD,EAAAuxD,EAAA,GAAAvxD,GACAk8C,KAAA9rF,KAAAC,IAAAghG,EAAArxD,EAAAuxD,EAAA,GAAAvxD,EAAAuxD,EAAA,GAAAvxD,GACAi8C,KAAA7rF,KAAAgyC,IAAAivD,EAAAhxD,EAAAkxD,EAAA,GAAAlxD,EAAAkxD,EAAA,GAAAlxD,GACA87C,KAAA/rF,KAAAC,IAAAghG,EAAAhxD,EAAAkxD,EAAA,GAAAlxD,EAAAkxD,EAAA,GAAAlxD,IAGA,OAAyBroC,YAAAgkF,KAAA,EAAAE,KAAA,EAAAD,KAAA,EAAAE,KAAA,KAGzBz3B,EAAAj5D,OAAAshF,EAAAnX,SAAAo7B,MAAAN,GACA5iB,WAAA,SAAAntE,GACApU,KAAAtC,OAAA0W,EAAA1W,QAAAsC,KAAAtC,OACAsC,KAAAg4D,MAAA5jD,EAAA4jD,OAAAh4D,KAAAg4D,MACAh4D,KAAAg5C,UAAA,MAAA5kC,EAAA4kC,UAAA5kC,EAAA4kC,UAAAh5C,KAAAg5C,UACAh5C,KAAA0kG,SAAAtwF,EAAAswF,UAAA1kG,KAAA0kG,YAeAlkB,EAAAnX,SAAA+7B,WAAA,SAAA5iD,GACAA,OACA,IAAAzgC,GAAAy+D,EAAAthF,OAAAsjD,GAAoCkiD,SAAA,GACpClkB,GAAAnX,SAAAo7B,MAAAjoG,KAAAwD,KAAA+hB,GACA/hB,KAAAjF,KAAA,cAEAo9D,EAAAj5D,OAAAshF,EAAAnX,SAAA+7B,WAAA5kB,EAAAnX,SAAAo7B,OAiBAjkB,EAAAnX,SAAAyxB,QAAA,SAAAt4C,GACAA,OACA,IAAA9jD,GAAA8jD,EAAA9kD,QAAA,GACAqkB,EAAAy+D,EAAAthF,OAAAsjD,GAAoC9kD,OAAAgB,EAAA,EAAAgmG,SAAA,GACpClkB,GAAAnX,SAAAo7B,MAAAjoG,KAAAwD,KAAA+hB,GACA/hB,KAAAjF,KAAA,WAEAo9D,EAAAj5D,OAAAshF,EAAAnX,SAAAyxB,QAAAta,EAAAnX,SAAAo7B,MAEA,IAAAY,GAAA,SAAA55F,EAAA65F,GAGA,OAFA,MAAA75F,EAAA6sD,SAAAitC,kBAAAD,KACA75F,EAAA6sD,SAAAitC,iBAAA95F,EAAA+5F,iBACA/5F,EAAA6sD,SAAAitC,kBAIAE,EAAA,SAAAjjD,GACAg+B,EAAA3mB,mBAAAj7D,MAAAoB,KAAArB,WACAwlG,EAAAvlG,MAAAoB,KAAArB,UAGA,IAAA6mC,GAAAxlC,KAAAm3D,IACAn3D,MAAAm3D,KAAA,WACA3xB,EAAA5mC,MAAAoB,KAAArB,WACAqB,KAAAyL,WAAAzL,KAAAyL,UAAA0rD,KAAAv4D,MAAAoB,KAAAyL,UAAA9M,YAGAqB,KAAA0lG,UAAA,EACA1lG,KAAA4F,GAAA48C,EAAA58C,GACA5F,KAAAs4D,SAAA3qB,IAAA,KACA3tC,KAAAs4D,SAAAqtC,aAAA,EACA3lG,KAAAs4D,SAAA7sD,UAAA+2C,EAAA/2C,UACAzL,KAAAs4D,SAAAitC,iBAAA,KACAvlG,KAAAs4D,SAAAh9D,OAAAknD,EAAAlnD,OACA0E,KAAAs4D,SAAAstC,oBAAA,IAAApjD,EAAA+hC,QAEAvkF,KAAAs+D,WAAA,WACA,SAAAt+D,KAAAs4D,SAAA3qB,IAAA,CACA,GAAAA,GAAA3tC,KAAAs4D,SAAA3qB,IAAA6yC,EAAAliB,WAAAt+D,KAAAs4D,SAAAh9D,OAAA0E,KAAAs4D,SAAA7sD,WACAkiC,GAAApmB,MAAA2kC,SAAA,WACAve,EAAA6wC,UAAAx+E,KAAAs4D,SAAAnnB,SAAAy3B,aAAA,KACA5oE,KAAA67D,SAAA77D,KAAA67D,SACArZ,EAAAqZ,SAAArZ,EAAAqZ,SAAA,IACA77D,KAAAs4D,SAAAnnB,SAAAo/B,cAAA5iC,GACA3tC,KAAAs4D,SAAAnnB,SAAAspB,MAAA9sB,GACA3tC,KAAA87D,OAAAnuB,CAIA,IAAA0T,GAAA,uBACA1T,GAAApmB,MAAAs+E,gBAAAxkD,EACA1T,EAAApmB,MAAAu+E,aAAAzkD,EACA1T,EAAApmB,MAAAw+E,YAAA1kD,EACA1T,EAAApmB,MAAAy+E,WAAA3kD,EACA1T,EAAApmB,MAAAoJ,UAAA0wB,EAGA1T,EAAA2qB,SAAAt4D,MAEA,IAAAwiD,EAAA+hC,UACA52C,EAAApmB,MAAAwkB,QAAA,QAEA,MAAA/rC,MAAAs4D,SAAA3qB,KAGA3tC,KAAAunF,KAAA,SAAA97E,EAAAo5F,EAAAoB,GACA,GAAA5wD,GAAAgwD,EAAArlG,KACA,UAAAq1C,GAAA,GAAAA,EAAA33C,OAAA,CACA,GAAAunG,IAA2BxxD,EAAA,EAAAK,EAAA,EAG3B,IAAAmyD,EACAhB,GAA2BxxD,EAAAwyD,EAAA,GAAAnyD,EAAAmyD,EAAA,QAE3B,IAAAx6F,EAAA2wF,YAAA,CACA,GAAA9V,GAAAtmF,KAAAsmF,IAAA+V,GAAA,GACAlkC,EAAAlE,SAAAj0D,KAAAsmF,MAAAtmF,KAAAsmF,IAAA,GAAAtmF,KAAAsmF,IAAA,KACAA,EAAA3rD,SAAA36B,KAAAsmF,IAAA,IACA+V,GAAA,GAEA4I,EAAAx5F,EAAA2wF,YAAA9V,EAAA+V,OAEA,CACA,GAAA6J,GAAAlmG,KAAAsmF,IAAA7tE,aAAAxZ,MAAAe,KAAAsmF,IAAAtmF,KAAAokG,WACAa,IAA2BxxD,EAAAyyD,EAAA,GAAAz6F,EAAA+oC,EAC3BV,EAAAoyD,EAAA,GAAAz6F,EAAA0I,GAGA,GAAAgyF,GAAAlB,EAAAxxD,EAAA4B,EAAA,KACA+wD,EAAAnB,EAAAnxD,EAAAuB,EAAA,IAEA,QACA5pC,YACA2I,GAAwB+xF,OAAAC,OAAA/wD,KAAA4vD,OACxBxV,KAAA0W,EACAxW,KAAAwW,EAAA9wD,EAAA,GACAq6C,KAAA0W,EACAxW,KAAAwW,EAAA/wD,EAAA,IAGA,OAAyBo6C,KAAA,EAAAE,KAAA,EAAAD,KAAA,EAAAE,KAAA,IAGzBz3B,GAAAj5D,OAAAumG,GAAAjlB,EAAA3mB,mBAAAsqC,IACAqB,cAAA,WACA,aAEAh+B,WAAA,SAAAjU,GACAvzD,KAAAs4D,SAAA3qB,MACA3tC,KAAAs4D,SAAA3qB,IAAApmB,MAAAwkB,QAAAwnB,EAAA,eAEAA,GAAAvzD,KAAAs4D,SAAAstC,qBACAP,EAAArlG,MAAA,GACAA,KAAAyL,UAAAmuD,UACA55D,KAAAs4D,SAAAstC,oBAAA,KAWAS,sBAAA,WACArmG,KAAAs4D,SAAAitC,iBAAA,MAEA1tC,QAAA,SAAAnK,GACAA,EACA,MAAA1tD,KAAAs4D,SAAA3qB,MACA3tC,KAAAs4D,SAAA3qB,IAAA2qB,SAAA,KACAt4D,KAAAs4D,SAAAnnB,SAAAinC,cAAAp4E,KAAAs4D,SAAA3qB,OAKA3tC,KAAAs4D,UAAAt4D,KAAAs4D,SAAA3qB,KAAA3tC,KAAAs4D,SAAA3qB,IAAAlyB,YACAzb,KAAAs4D,SAAA3qB,IAAAlyB,WAAA+B,YAAAxd,KAAAs4D,SAAA3qB,KACA3tC,KAAA0lG,UAAA,IAIAlkB,SAAA,SAAArwC,GACA,MAAAnxC,KAAAs4D,SAAA3qB,KAAAwD,EAAAyuB,eAAAniD,YAAAzd,KAAAs4D,SAAA3qB,KACA3tC,KAAA0lG,UAAA,GAEAf,eAAA,WACA,GAAAtvD,GAAAgwD,EAAArlG,KACA,OAAA6D,MAAAC,IAAAuxC,EAAA,GAAAA,EAAA,KAEAw0B,MAAA,SAAA9nD,EAAAukF,GACAtmG,KAAAs4D,SAAAqtC,cACA3lG,KAAAs+D,aACAv8C,EAAAtW,UAAAy3F,qBAAAljG,KAAAs4D,SAAA3qB,KACA3tC,KAAAs4D,SAAAqtC,aAAA,EACA3lG,KAAA0lG,UAAA1lG,KAAAs4D,SAAA3qB,IAAAlyB,WAAA+B,YAAAxd,KAAAs4D,SAAA3qB,MAEA3tC,KAAAs4D,SAAA3qB,IAAApmB,MAAAgJ,KAAAxO,EAAAtW,UAAAgoC,EAAA1xB,EAAA3N,EAAA+xF,KAAA,KACAnmG,KAAAs4D,SAAA3qB,IAAApmB,MAAAkJ,IAAA1O,EAAAtW,UAAAqoC,EAAA/xB,EAAA3N,EAAAgyF,KAAA,QAkBA5lB,EAAAnX,SAAAk9B,OAAA,SAAA/jD,GACAxiD,KAAAjF,KAAA,SACA0qG,EAAA7mG,MAAAoB,KAAArB,YAEAw5D,EAAAj5D,OAAAshF,EAAAnX,SAAAk9B,OAAAd,GAEAjlB,EAAAnX,SAAAm9B,WAAA,WACA,GAAAx3D,GAAAhvC,IACAgvC,GAAAtxC,OAAA,GACAsxC,EAAAugD,YAAA,EACAvvF,KAAAjF,KAAA,aACAopG,EAAAvlG,MAAAoB,KAAArB,WACA6hF,EAAA3mB,mBAAAj7D,MAAAoB,KAAArB,WACAqB,KAAAunF,KAAA,SAAA3W,EAAAi0B,GAEA,GAAA1/C,GAAAyrB,EAAA0rB,mBAAAttD,EAAAs3C,IAAAt3C,EAAAtxC,OAAA,GACAqnG,EAAAn0B,EAAAwrB,YAAAptD,EAAAs3C,KACA0e,EAAAxJ,EAAAx/C,YAAAmJ,EAAA4/C,EAAA/1D,EAAAtxC,QACA+oG,EAAAjL,EAAAp/C,oBAAA+I,EAAA6/C,EAAA,IACA0B,EAAAlL,EAAAp/C,oBAAA4oD,EAAA7/C,EAAA,GAEA,QACAyrB,YACAzrB,OACA6/C,OACA0B,WACAD,WACAhX,KAAA5rF,KAAAgyC,IAAAsP,EAAA1R,EAAAuxD,EAAAvxD,EAAAizD,EAAA,GAAAjzD,EAAAizD,EAAA,GAAAjzD,GACAi8C,KAAA7rF,KAAAgyC,IAAAsP,EAAArR,EAAAkxD,EAAAlxD,EAAA4yD,EAAA,GAAA5yD,EAAA4yD,EAAA,GAAA5yD,GACA67C,KAAA9rF,KAAAC,IAAAqhD,EAAA1R,EAAAuxD,EAAAvxD,EAAAizD,EAAA,GAAAjzD,EAAAizD,EAAA,GAAAjzD,GACAm8C,KAAA/rF,KAAAC,IAAAqhD,EAAArR,EAAAkxD,EAAAlxD,EAAA4yD,EAAA,GAAA5yD,EAAA4yD,EAAA,GAAA5yD,MAwBA0sC,EAAAnX,SAAAwX,MAAA,SAAAr+B,GACAxiD,KAAA2gF,WAAAn+B,EAAAm+B,UAGA3gF,MAAA67D,SAAA,MAAA77D,KAAA2gF,WAAA3gF,KAAA2gF,WAAA9kB,SAAA,IACA,IAAA95C,GAAAy+D,EAAAthF,QACA5D,OAAA,WACA,MAAAklF,GAAAnsE,cAAA,SACcmuC,EAKd,IAJAg+B,EAAAnX,SAAAk9B,OAAA/pG,KAAAwD,KAAA+hB,GACA/hB,KAAAjF,KAAA,QACAiF,KAAAkhF,MAAA1+B,EAAA0+B,OAAA,GACAlhF,KAAA2mG,UAAA,KACA3mG,KAAA2gF,WAAA,CACA,GAAA5yE,GAAA/N,KAAAs+D,YAKA,IAJAt+D,KAAA2gF,WAAAimB,KAAA5mG,KAAA2gF,WAAAimB,MAAA,kBACA74F,EAAAwZ,MAAAq/E,KAAA5mG,KAAA2gF,WAAAimB,KACA74F,EAAAwZ,MAAA20D,MAAAl8E,KAAA2gF,WAAAzE,OAAA,QACAl8E,KAAA2gF,WAAAhoB,OAAA5qD,EAAAwZ,MAAA28E,WAAAlkG,KAAA2gF,WAAAhoB,MACA34D,KAAA2gF,WAAAkmB,YAAA,GACA,GAAAC,GAAA9mG,KAAA2gF,WAAAomB,YAAA/mG,KAAA2gF,WAAAomB,YAAA,OACAh5F,GAAAwZ,MAAAy/E,OAAAhnG,KAAA2gF,WAAAkmB,YAAA,YAAAC,EAEA9mG,KAAA2gF,WAAAmjB,UAAA/1F,EAAAwZ,MAAAu8E,QAAA9jG,KAAA2gF,WAAAmjB,WAIA3rC,EAAAj5D,OAAAshF,EAAAnX,SAAAwX,MAAAL,EAAAnX,SAAAk9B,QACA1uC,QAAA,SAAAnK,GACAA,IACA1tD,KAAA2tC,IAAA,KACA3tC,KAAAkhF,MAAA,KACAlhF,KAAA2mG,UAAA,KACA3mG,KAAA67D,SAAA,KACA77D,KAAA2gF,WAAA,OAGA6B,SAAA,WACA,MAAAxiF,MAAAkhF,OASAyB,SAAA,SAAAjkF,GACAsB,KAAAkhF,MAAAxiF,EACAsB,KAAA2mG,UAAA,KACA3mG,KAAAqmG,wBACArmG,KAAAgF,SACAhF,KAAAyL,UAAAmuD,WAEA4rC,cAAA,WAEA,MADAxlG,MAAAgF,SACAygG,EAAA17F,UAAAy7F,cAAA5mG,MAAAoB,KAAArB,YAEAqG,OAAA,WACA,qBAAAhF,MAAAkhF,MAAA,CACA,GAAA+lB,GAAAjnG,KAAAkhF,MAAAlhF,KACAA,MAAAs+D,aAAArtC,UAAAg2E,EAAAt+E,QAAA,qBAGA,OAAA3oB,KAAA2mG,YACA3mG,KAAA2mG,UAAA3mG,KAAAkhF,MACAlhF,KAAAs+D,aAAArtC,UAAAjxB,KAAA2mG,UAAAh+E,QAAA,mBAIA44D,WAAA,SAAAntE,GACA,MAAAA,EAAA8sE,OACAlhF,KAAA2iF,SAAAvuE,EAAA8sE,WAOC1kF,KAAA,mBAAA8f,eAAAtc,MAkBA,WACD,YACA,IAAAy1B,GAAAz1B,KAGAknG,EAAA,SAAA/1D,GACA,GAAAvxC,GAAAuxC,EAAAg2D,OAIA,OAHAvnG,KACAA,EAAAuxC,EAAAg2D,QAAA,GAAA1xE,GAAA8sB,QAEA3iD,EAPA61B,GAAAijC,QAUAx5D,OAAAu2B,EAAAmoC,gBAAA7zD,WACAq9F,gBAAA,WACA,MAAAF,GAAAlnG,OAEAwI,GAAA,SAAAuF,EAAAjF,EAAAmN,GAOA,MADAjW,MAAAonG,kBAAA5+F,GAAA5J,MAAAoB,KAAArB,WACAqB,MAEA8iD,IAAA,SAAA/0C,EAAAjF,EAAAmN,GAEA,MADAjW,MAAAonG,kBAAAtkD,IAAAlkD,MAAAoB,KAAArB,WACAqB,SAKCxD,KAAA,mBAAA8f,eAAAtc,MAiBA,WACD,YAEA,IAAAy1B,GAAAz1B,KACAm4D,EAAA1iC,EAAAu+B,YACAqzC,EAAA5xE,EAAAmoC,gBAMA0pC,EAAA,OACAC,EAAA,SAEAC,EAAA,gBAcAC,EAAA,OACAC,EAAA,OAEAC,EAAA,SAAArvC,GAoBA,QAAAsvC,GAAA9oC,SACAA,GAAAyP,OACA,IAAA19B,GAAAg3D,EAAAC,EAAAhpC,EAAAl5D,GACA,OAAAiiG,IACAh3D,EAAA,SAAA3wC,GAAiC,MAAAA,GAAA0F,KAAAk5D,EAAAl5D,IACjCuyD,EAAAvC,mBAAAiyC,EAAA5nC,YAAAlsD,OAAA88B,GACAsnB,EAAAvC,mBAAAiyC,EAAA5nC,YAAAt+D,OAAAkvC,SACAi3D,GAAAhpC,EAAAl5D,KAIA,OADAiiG,EAAAE,EAAAjpC,EAAAl5D,OAEAirC,EAAA,SAAA3wC,GAAiC,MAAAA,GAAA0F,KAAAk5D,EAAAl5D,IACjCuyD,EAAAvC,mBAAAiyC,EAAA5nC,YAAAlsD,OAAA88B,GACAsnB,EAAAvC,mBAAAiyC,EAAA5nC,YAAAt+D,OAAAkvC,SACAk3D,GAAAjpC,EAAAl5D,KAgIA,QAAA0hE,GAAAugC,EAAAt0C,GAEA,OADAhxC,GAAAslF,EAAAG,aACAvqG,EAAA,EAA2BA,EAAA8kB,EAAA7kB,OAAcD,IACzC66D,EAAA/E,EAAAk0C,EAAAC,GAAAnlF,EAAA9kB,IAAA,GA+JA,QAAAwqG,GAAAJ,GACA,GAAAj2C,GAAAi2C,EAAAG,aACA/wD,EAAAqhB,EAAA6V,gBAA8Cp6D,OAAA69C,IAAe,GAC7Dxa,EAAAkhB,EAAA6V,gBAA8CxsE,OAAAiwD,IAAe,GAC7Ds2C,IACAL,GAAA5nC,YAAAlsD,OAAArW,OAAA,EACAmqG,EAAA5nC,YAAAt+D,OAAAjE,OAAA,CACA,IAAAyqG,GAAA,SAAAjoG,GACA,OAAAzC,GAAA,EAA+BA,EAAAyC,EAAAxC,OAAcD,IAC7CyqG,EAAAhoG,EAAAzC,GAAAmI,MACAsiG,EAAAhoG,EAAAzC,GAAAmI,KAAA,EACA1F,EAAAzC,GAAAsW,OAAAq0F,gBAAAP,GACA3nG,EAAAzC,GAAAkE,OAAAymG,gBAAAP,GACAA,EAAA5nC,YAAAlsD,OAAAlS,KAAA3B,EAAAzC,IAEAqqG,EAAA5nG,EAAAzC,GAAAmI,IAAAiiG,GAEA3nG,EAAAzC,GAAAkE,OAAAymG,gBAAAP,IACAA,EAAA5nC,YAAAt+D,OAAAE,KAAA3B,EAAAzC,IACAsqG,EAAA7nG,EAAAzC,GAAAmI,IAAAiiG,IAIAM,GAAAlxD,GAAuBkxD,EAAA/wD,GA3VvB,GAAAixD,MAA+BP,KAA2BC,KAA2B/4D,EAAAhvC,IAErFs4D,GAAA/5D,KAAA,sBAAAwjB,GACA,MAAAA,EAAAhO,OAAAyzF,IAAA,MAAAzlF,EAAApgB,OAAA6lG,IAAAzlF,EAAAhO,OAAAyzF,KAAAzlF,EAAApgB,OAAA6lG,IACAM,EAAA/lF,EAAAo5C,WAAAv1D,IAAAmc,EAAAhO,OAAAyzF,GACAO,EAAAhmF,EAAAo5C,WAAAv1D,IAAAmc,EAAAhO,OAAAyzF,KAGA,MAAAzlF,EAAAhO,OAAAyzF,KACArvC,EAAAlC,QAAAl0C,EAAAhO,OAAAyzF,GAAAvnC,YAAAlsD,OAAAgO,EAAAo5C,YACA2sC,EAAA/lF,EAAAo5C,WAAAv1D,IAAAmc,EAAAhO,OAAAyzF,IAEA,MAAAzlF,EAAApgB,OAAA6lG,KACArvC,EAAAlC,QAAAl0C,EAAApgB,OAAA6lG,GAAAvnC,YAAAt+D,OAAAogB,EAAAo5C,YACA4sC,EAAAhmF,EAAAo5C,WAAAv1D,IAAAmc,EAAApgB,OAAA6lG,OAwBAlvC,EAAA/5D,KA9CA,8BA8CA,SAAAwjB,GACA6lF,EAAA7lF,EAAAo5C,cAGA7C,EAAA/5D,KAnDA,kBAmDA,SAAAwjB,GACA,GAAAumF,GAAA,IAAAvmF,EAAAhkB,MAAA+pG,EAAAC,EACAF,EAAAS,EAAAvmF,EAAAo5C,WAAAv1D,GACA,IAAAiiG,EAAA,CACA,GAAAtqG,GAAAsqG,EAAA5nC,YAAA,IAAAl+C,EAAAhkB,MAAA,mBACAmmB,EAAA3mB,EAAAS,QAAA+jB,EAAAo5C,aACA,GAAAj3C,GACA3mB,EAAAU,OAAAimB,EAAA,MAKAlkB,KAAAuoG,SAAA,SAAAV,GACAvvC,EAAAhwC,SAAAu/E,EAAAW,QA/EA,sBAgFAH,EAAAR,EAAAjiG,IAAAiiG,EACAA,EAAAY,QAAAzoG,KACAioG,EAAAJ,GACAvvC,EAAAnB,KAzEA,aAyE4C0wC,WAG5C7nG,KAAA0oG,WAAA,SAAAb,EAAA95F,EAAA46F,GAEA,GADAd,EAAA7nG,KAAA4oG,SAAAf,GACA,CAEA,GAAAgB,GAAAhB,EAAAW,OAEA,IAAAz6F,EAAA2mE,gBAAA,MACA,IAAAo0B,GAAA/6F,EAAAq6F,aAEA,IAAAU,IAAAjB,EAAA,CACA,GAAAkB,GAAAzwC,EAAA8Y,UAAArjE,GAAA,GACAi7F,EAAAnB,EAAAoB,UAAA3wC,EAAA8Y,UAAAy3B,GAAA,GAAAvwC,EAAA8Y,UAAAy2B,EAAAqB,eAAA,EAGA,OAAAJ,IACAA,EAAAlrG,OAAAmQ,EAAA46F,GACA35D,EAAAm6D,0BAAAL,IAEAjB,EAAAn/F,IAAAqF,EAAA46F,EAEA,IAAAS,GAAA,SAAA7rG,EAAAQ,GACA,GAAA0pE,GAAA,GAAA1pE,EAAA,GACAR,GAAAshE,KAAA,SAAA3+D,GACAA,EAAAsnE,YAAA,GACAtnE,EAAAwkE,UAAA+C,GAAA5yC,QAAAuzE,gBAAAP,GACA3nG,EAAAwkE,UAAA+C,GAAAD,YAAA,GACAx4B,EAAAq6D,iBAAAnpG,EAAAunE,EAAAogC,KAGA3nG,EAAAwkE,UAAA3mE,GAAAypE,YAAA,GACAx4B,EAAAs6D,mBAAAppG,EAAAnC,EAAA8pG,MAKAA,GAAAoB,YACAG,EAAA9wC,EAAA9G,QAAkEz9C,OAAAhG,IAAW,GAC7Eq7F,EAAA9wC,EAAA9G,QAAkE7vD,OAAAoM,IAAW,GAG7E,IAAA2xD,GAAApH,EAAAmC,MAAA1sD,EACAuqD,GAAA2mB,YAAApE,UAAA9sE,EAAA2xD,EAAAmpC,EAAAvwC,EAAAmC,MAAAouC,GAAAE,EAEA,IAAAQ,IAAuCh5E,KAAAw4E,EAAAx4E,KAAAy4E,EAAAz4E,KAAAE,IAAAs4E,EAAAt4E,IAAAu4E,EAAAv4E,IAEvC6nC,GAAAhO,YAAAv8C,EAAAw7F,GAEAjxC,EAAA2mB,YAAAjB,iBAAAjwE,EAAA2xD,EAAAqpC,GAEA/5D,EAAAm6D,0BAAAtB,GAEAvvC,EAAAqS,WAAAjL,GAEA/zD,WAAA,WACA2sD,EAAAnB,KApIA,mBAoIwD0wC,QAAA95F,QACnC,MAKrB/N,KAAAwpG,gBAAA,SAAA3B,EAAA95F,EAAA46F,IACAd,EAAA7nG,KAAA4oG,SAAAf,KAEAA,EAAAjqG,OAAAmQ,EAAA,KAAA46F,IAIA3oG,KAAA4oG,SAAA,SAAAa,GACA,GAAA5B,GAAA4B,CACA,IAAAtxC,EAAAlE,SAAAw1C,IAEA,OADA5B,EAAAQ,EAAAoB,IACA,SAAAx4D,WAAA,kBAAAw4D,EAAA,IAEA,OAAA5B,IAGA7nG,KAAA0pG,UAAA,WACA,GAAAr4C,KACA,QAAAtjB,KAAAs6D,GACAh3C,EAAAxvD,KAAAwmG,EAAAt6D,GAEA,OAAAsjB,IAGArxD,KAAA2pG,YAAA,SAAA9B,EAAA+B,EAAAC,EAAAlB,GACAd,EAAA7nG,KAAA4oG,SAAAf,GACA7nG,KAAA8pG,YAAAjC,GAAA,GACAA,EAAA+B,EA3JA,YACA,aA0JAC,EAAAlB,GACArwC,EAAA16D,OAAAiqG,EAAAW,eACAH,GAAAR,EAAAjiG,UACA0yD,GAAAyxC,QAAAlC,EAAAjiG,IACA0yD,EAAAnB,KAtKA,gBAsK8C0wC,WAG9C7nG,KAAAw4E,gBAAA,SAAAoxB,EAAAC,EAAAlB,GACA,OAAA56D,KAAAs6D,GACAroG,KAAA2pG,YAAAtB,EAAAt6D,GAAA67D,EAAAC,EAAAlB,GAWA,IAAAqB,GAAAhqG,KAAAspG,mBAAA,SAAAppG,EAAAnC,EAAA8pG,GAEA,GAAAoC,GAAApB,EAAAhB,EAAAW,QAAA0B,EAAA5xC,EAAAmC,MAAAouC,GACAsB,EAAAjqG,EAAAwkE,UAAA3mE,GAAA8oE,UAEAujC,EAAAlqG,EAAAwkE,UAAA,IAAA3mE,EAAA,KAAA82B,OACAu1E,GAAA5C,KAAA4C,EAAA5C,GAAA6C,eAAAD,EAAA5C,GAAAyB,YAIA/oG,EAAAquE,QAAAruE,EAAAquE,YAEA07B,EADA/pG,EAAAquE,QAAAxwE,GACAmC,EAAAquE,QAAAxwE,GAAAkhE,GAEA3G,EAAAiM,YAAAskC,GACAhlC,SAAAgkC,EAAA13B,YAAAjwE,EAAAnC,GACAymE,OAAAqjC,EAAAyC,UAAApqG,EAAAnC,GACAg8D,YACAwwC,iBAAA,KAIAN,EAAA5kC,kBAAA,GAGAnlE,EAAAquE,QAAAxwE,IAAgCkhE,GAAAgrC,EAAAz7B,WAAAtuE,EAAAwkE,UAAA3mE,IAGhC,IAAAA,EAGAu6D,EAAAoJ,cAAAuK,cAAAk+B,EAAAD,EAAAhqG,EAAA2oG,IAGAvwC,EAAAoJ,cAAAyK,oBAAAjsE,EAAAwkE,UAAA,GAAAmC,UAAAsjC,EAAAD,EAAAhqG,GACAA,EAAAyB,OAAAknG,EACA3oG,EAAAo7D,SAAA4uC,GAKAhqG,EAAAquE,QAAAxwE,GAAAywE,WAAA1C,qBAAA5rE,EAAA,SAGA+pG,EAAAhqC,aAAA//D,GACAA,EAAAwkE,UAAA3mE,GAAAksG,EAEA/pG,EAAAsnE,YAAA,IAGAxnE,MAAAwqG,cAAA,SAAA3C,GAEA,UADAA,EAAA7nG,KAAA4oG,SAAAf,MACAA,EAAAoB,UAAA,CACA,GAAAJ,GAAAhB,EAAAW,OAQA,IAFAlhC,EAAAugC,GAAA,GAEAA,EAAAwC,cAAA,CAEA,GAAAI,GAAA,SAAAC,EAAA3sG,GACA,OAAAN,GAAA,EAAmCA,EAAAitG,EAAAhtG,OAAkBD,IAAA,CACrD,GAAAyC,GAAAwqG,EAAAjtG,EACAusG,GAAA9pG,EAAAnC,EAAA8pG,IAKA4C,GAAA5C,EAAA5nC,YAAAlsD,OAAA,GACA02F,EAAA5C,EAAA5nC,YAAAt+D,OAAA,GAGAkmG,EAAAoB,WAAA,EACA3wC,EAAA7vC,YAAAogF,EA7QA,sBA8QAvwC,EAAAhwC,SAAAugF,EA/QA,uBAgRAvwC,EAAAqS,WAAAk+B,GACAvwC,EAAAnB,KAnQA,kBAmQyC0wC,WAGzC,IAAA8C,GAAA3qG,KAAAqpG,iBAAA,SAAAnpG,EAAAnC,EAAA8pG,GAGA,SAAA3nG,EAAAquE,SAAA,MAAAruE,EAAAquE,QAAAxwE,GAAA,CAEA,GAAAmsG,GAAA5xC,EAAAmC,MAAAotC,EAAAW,SACAoC,EAAA1qG,EAAAquE,QAAAxwE,GAAAywE,WAAA35C,QACAs1E,EAAAjqG,EAAAquE,QAAAxwE,GAAAywE,WAAA3H,SAEA3mE,GAAAwkE,UAAA3mE,GAAAmC,EAAAquE,QAAAxwE,GAAAywE,WAEA,IAAAzwE,EAGAu6D,EAAAoJ,cAAAuK,cAAAi+B,EAAAC,EAAAjqG,EAAA0qG,IAGAtyC,EAAAoJ,cAAAyK,oBAAAjsE,EAAAwkE,UAAA,GAAAmC,UAAAqjC,EAAAC,EAAAjqG,GACAA,EAAAyB,OAAAipG,EACA1qG,EAAAo7D,SAAA6uC,GAIAjqG,EAAAquE,QAAAxwE,GAAAkhE,GAAA6M,qBAAA5rE,EAAA,MAEAA,EAAAquE,QAAAxwE,GAAAywE,WAAA5C,cAAA1rE,SAGAA,GAAAquE,QAAAxwE,IAGAiC,MAAA8pG,YAAA,SAAAjC,EAAAc,GAIA,UAFAd,EAAA7nG,KAAA4oG,SAAAf,KAEAA,EAAAoB,UAAA,CACA,GAAAJ,GAAAhB,EAAAW,OAIA,IAFAlhC,EAAAugC,GAAA,GAEAA,EAAAwC,cAAA,CAEA,GAAAQ,GAAA,SAAAH,EAAA3sG,GACA,OAAAN,GAAA,EAAmCA,EAAAitG,EAAAhtG,OAAkBD,IAAA,CACrD,GAAAyC,GAAAwqG,EAAAjtG,EACAktG,GAAAzqG,EAAAnC,EAAA8pG,IAKAgD,GAAAhD,EAAA5nC,YAAAlsD,OAAA,GACA82F,EAAAhD,EAAA5nC,YAAAt+D,OAAA,GAGAkmG,EAAAoB,WAAA,EACA3wC,EAAAhwC,SAAAugF,EA1UA,sBA2UAvwC,EAAA7vC,YAAAogF,EA5UA,uBA6UAvwC,EAAAqS,WAAAk+B,GACA7oG,KAAA8qG,aAAAjD,GACAc,GACArwC,EAAAnB,KAnUA,gBAmU2C0wC,YAI3C7nG,KAAA8qG,aAAA,SAAAjD,GACAA,EAAA7nG,KAAA4oG,SAAAf,EAEA,QADAtlF,GAAAslF,EAAAG,aACAvqG,EAAA,EAA2BA,EAAA8kB,EAAA7kB,OAAcD,IACzC66D,EAAAqS,WAAApoD,EAAA9kB,KA+BAuC,KAAAmpG,0BAAAlB,EACAjoG,KAAA+qG,iBAAA,WACA,OAAAh9D,KAAAs6D,GACAJ,EAAAI,EAAAt6D,IACAuqB,EAAA2mB,YAAAtH,cAAArf,EAAAmC,MAAA4tC,EAAAt6D,GAAAy6D,YAkBAwC,EAAA,SAAA1yC,EAAA9V,GAwJA,QAAAyoD,GAAA9oD,GACA,MAAAA,GAAA4uB,aAGA,QAAAm6B,GAAA/oD,EAAA9xB,GACA,GAAAtO,GAAAkpF,EAAA9oD,GACAn3B,EAAAstC,EAAAnK,QAAApsC,GACA0sD,EAAAnW,EAAAnK,QAAAhM,GACAgpD,EAAA96E,EAAA,GACA+6E,EAAAD,EAAA18B,EAAA,GACA48B,EAAAh7E,EAAA,GACAi7E,EAAAD,EAAA58B,EAAA,EAEA,OAAA28B,GAAA,GAAAD,EAAAngF,EAAA,IAAAsgF,EAAA,GAAAD,EAAArgF,EAAA,GAMA,QAAAugF,GAAAppD,GACA,GAAAv8C,GAAA0yD,EAAAmC,MAAAtY,GACA9xB,EAAAioC,EAAA8Y,UAAAjvB,EACAA,GAAA1mC,WAAA+B,YAAA2kC,GACAmW,EAAAsH,eAAAniD,YAAA0kC,GACAmW,EAAAhO,YAAAnI,EAAA9xB,SACA8xB,GAAAimD,cACAoD,EAAArpD,GACAmW,EAAA2mB,YAAAlB,YAAA57B,EAAAv8C,GAMA,QAAA6lG,GAAA1pF,GACA,IAAAmpF,EAAAnpF,EAAAhU,GAAAgU,EAAAsO,KAAA,CACA,GAAAw3E,GAAA9lF,EAAAhU,GAAAq6F,aACAsD,GACApzC,EAAA16D,OAAAmkB,EAAAhU,IAEAw9F,EAAAxpF,EAAAhU,IAGA85F,EAAAjqG,OAAAmkB,EAAAhU,KAOA,QAAA49F,GAAAxpD,GACA,GAAAv8C,GAAA0yD,EAAAmC,MAAAtY,EACAmW,GAAAqS,WAAAxoB,GACAmW,EAAA2mB,YAAAjB,iBAAA77B,EAAAv8C,GAMA,QAAA4lG,GAAArpD,GACAA,EAAAmP,kBACAo6C,GAAAE,IACAzpD,EAAAmP,eAAAxO,IAAAwkD,EAAAmE,GAEAC,GAAAE,IAAAp+C,IACArL,EAAAmP,eAAAxO,IAAAykD,EAAAoE,GACAxpD,EAAAmP,eAAArG,UAAA,QAIA,QAAA4gD,GAAA1pD,GACAA,EAAAmP,kBACAo6C,GAAAE,IACAzpD,EAAAmP,eAAA9oD,GAAA8+F,EAAAmE,GAGAjhD,GACArI,EAAAmP,eAAAvG,cAAA,GAGA+gD,GACA3pD,EAAAmP,eAAA/G,kBAAA,GAGAmhD,GAAAE,IAAAp+C,IACArL,EAAAmP,eAAA9oD,GAAA++F,EAAAoE,GACAxpD,EAAAmP,eAAArG,UAAA,SAAA8gD,EAAA17E,GACA,OAAA66E,EAAAa,EAAA17E,OA7OA,GAAA2e,GAAAhvC,KACA+N,EAAAy0C,EAAAz0C,EACA/N,MAAAwoG,MAAA,WAAiC,MAAAz6F,IACjC/N,KAAA4F,GAAA48C,EAAA58C,IAAAuyD,EAAAzQ,OACA35C,EAAA2mE,iBAAA,CAEA,IAAAw0B,GAAAlpG,KAAAkpG,YAAA,WACA,GAAA7N,GAAA/iC,EAAAua,YAAA9kE,EAnZA,sBAoZA,OAAAstF,MAAA39F,OAAA,EAAA29F,EAAA,GAAAttF,GAGA+9F,GAAA,IAAAtpD,EAAAspD,MACAthD,EAAAshD,IAAA,IAAAtpD,EAAAgI,UACAgD,GAAA,IAAAhL,EAAAgL,OACAo+C,GAAA,IAAAppD,EAAAopD,OACAF,GAAA,IAAAlpD,EAAAkpD,MACAM,GAAA,IAAAxpD,EAAAwpD,aACAC,GAAA,IAAAzpD,EAAAypD,QACA/oC,IAcA,IAbAljE,KAAAigE,aAA4BlsD,UAAApS,UAAAuqG,aAI5BlsG,KAAAsqG,UAAA,SAAAxrC,EAAAqtC,GACA,MAAA3pD,GAAAgiB,QAAA,cAGAxkE,KAAAmwE,YAAA,SAAArR,EAAAqtC,GACA,MAAA3pD,GAAAqhB,WAAA,OAAgD05B,OAAA,MAGhDv9F,KAAAipG,WAAA,GACA,IAAAzmD,EAAA8D,UAAA,CACA,GAAAz0C,IACAi9B,KAAA,SAAA0T,GACA8V,EAAAnB,KAlaA,gBAkaAuB,QAAAx5D,OAAAsjD,GAA+EqlD,MAAA74D,MAE/E1R,MA3aA,oBA6aAklB,GAAAuf,aACAtsC,EAAAijC,QAAAx5D,OAAA2S,EAAA2wC,EAAAuf,aAEAzJ,EAAAhS,UAAA9D,EAAAz0C,GAAA8D,IAEA,IAAA2wC,EAAA+D,WACA+R,EAAA/R,UAAA/D,EAAAz0C,IACA6gD,KAAA,SAAA7sC,GACA,GAAAhU,GAAAgU,EAAAykC,KAAAz4C,EACA,KAAAA,EAAA2mE,gBAAA,CACA,GAAAo0B,GAAA/6F,EAAAq6F,aACA,IAAAU,IAAA95D,EAAA,CACA,SAAA85D,GACAA,EAAAsD,aAAAr+F,EAAAihC,GACA,MAGAspB,GAAA+zC,kBAAA3D,WAAA15D,EAAAjhC,GAAA,OAMA,IAAAm0C,GAAA,SAAAC,EAAA9jD,GAEA,OADAiuG,GAAA,MAAAnqD,EAAA32B,SAAA22B,MACA1kD,EAAA,EAA2BA,EAAA6uG,EAAA5uG,OAAgBD,IAC3CY,EAAAiuG,EAAA7uG,IAIAuC,MAAAosG,aAAA,SAAAjqD,EAAAoqD,GACA,MAAAP,KAAAx+C,GAAAk+C,GAAAE,IAGA5rG,KAAA0I,IAAA,SAAAy5C,EAAAwmD,GACA,GAAA6D,GAAAtD,GACAhnD,GAAAC,EAAA,SAAA4pD,GAEA,SAAAA,EAAA3D,cAAA,CACA,GAAA2D,EAAA3D,gBAAAp5D,EACA,MAEA+8D,GAAA3D,cAAAxqG,OAAAmuG,GAAA,EAAApD,GAAA,GAIAoD,EAAA3D,cAAAp5D,EACAk0B,EAAArhE,KAAAkqG,GAEAzzC,EAAA6J,mBAAA4pC,IACAF,EAAAE,GAGAA,EAAAtwF,YAAA+wF,GACAA,EAAA/uF,YAAAsuF,GAGApD,GACArwC,EAAAnB,KAteA,mBAseoD0wC,MAAA74D,EAAAjhC,GAAAg+F,MAIpDzzC,EAAA+zC,kBAAAlD,0BAAAn6D,IAGAhvC,KAAApC,OAAA,SAAAmQ,EAAA87F,EAAAlB,EAAA8D,GAEAvqD,EAAAn0C,EAAA,SAAAg+F,GAMA,SALAA,GAAA3D,cACAjwC,EAAAvC,mBAAAsN,EAAA,SAAAtjE,GACA,MAAAA,KAAAmsG,IAGAlC,EACA,IAAyB76D,EAAAk6D,cAAA1rF,YAAAuuF,GACzB,MAAAnsG,GACAo0D,YAAAuC,IAAA,uCAAA32D,GAGA4rG,EAAAO,GACApD,GACArwC,EAAAnB,KA5fA,sBA4fsD0wC,MAAA74D,EAAAjhC,GAAAg+F,MAGtDU,GACAn0C,EAAA+zC,kBAAAlD,0BAAAn6D,IAGAhvC,KAAA0sG,UAAA,SAAA7C,EAAAlB,GACA,OAAAlrG,GAAA,EAAAiB,EAAAwkE,EAAAxlE,OAAgDD,EAAAiB,EAAOjB,IACvDuxC,EAAApxC,OAAAslE,EAAA,GAAA2mC,EAAAlB,GAAA,EAEAzlC,GAAAxlE,OAAA,EACA46D,EAAA+zC,kBAAAlD,0BAAAn6D,IAEAhvC,KAAA2sG,UAAA,WACA,OAAAlvG,GAAA,EAA2BA,EAAAylE,EAAAxlE,OAAqBD,IAChD8tG,EAAAroC,EAAAzlE,GAEAylE,GAAAxlE,OAAA,GAEAsC,KAAAgoG,WAAA,WAAsC,MAAA9kC,IAEtCn1D,EAAAy5F,GAAAxnG,KAEAs4D,EAAA/5D,KA3hBA,mBA2hBA,SAAAquG,GAEAA,EAAA7+F,GAAAq6F,eAAApoG,MACA6rG,EAAAe,EAAA7+F,KAESxP,KAAAyB,OA6FTA,KAAAqqG,YAAA,WACA,MAAA4B,IAGA3zC,EAAA+zC,kBAAA9D,SAAAvoG,MASAqnG,GAAAt9F,UAAAw+F,SAAA,SAAA/lD,GACA,GAAA7yC,GAAA3P,IAEA,IADA2P,EAAAo6F,QAAAp6F,EAAAo6F,YACA,MAAAp6F,EAAAo6F,QAAAvnD,EAAA58C,IACA,SAAAqrC,WAAA,wBAAAuR,EAAA58C,GAAA,iCAEA,UAAA48C,EAAAz0C,GAAAy5F,GACA,SAAAv2D,WAAA,wBAAAuR,EAAA58C,GAAA,0CAEA,IAAAiiG,GAAA,GAAAmD,GAAAr7F,EAAA6yC,EAKA,OAJA7yC,GAAAo6F,QAAAlC,EAAAjiG,IAAAiiG,EACArlD,EAAAymD,WACAjpG,KAAAwqG,cAAA3C,GAEAA,GASAR,EAAAt9F,UAAA2+F,WAAA,SAAAb,EAAA95F,EAAA46F,GAEA,GAAA1rD,GAAA,SAAAkF,GACA,GAAAv8C,GAAA5F,KAAAy6D,MAAAtY,EACAniD,MAAAixE,OAAArrE,EAAAu8C,GACAniD,KAAAqsG,kBAAA3D,WAAAb,EAAA1lD,EAAAwmD,IACSpqG,KAAAyB,KAET,IAAAf,MAAA2D,QAAAmL,GACA,OAAAtQ,GAAA,EAA2BA,EAAAsQ,EAAArQ,OAAeD,IAC1Cw/C,EAAAlvC,EAAAtQ,QAGAw/C,GAAAlvC,IAUAs5F,EAAAt9F,UAAAy/F,gBAAA,SAAA3B,EAAA95F,EAAA46F,GACA3oG,KAAAqsG,kBAAA7C,gBAAA3B,EAAA95F,EAAA46F,IAUAtB,EAAAt9F,UAAA4/F,YAAA,SAAA9B,EAAA+B,EAAAC,EAAAlB,GACA3oG,KAAAqsG,kBAAA1C,YAAA9B,EAAA+B,EAAAC,EAAAlB,IASAtB,EAAAt9F,UAAAyuE,gBAAA,SAAAoxB,EAAAC,EAAAlB,GACA3oG,KAAAqsG,kBAAA7zB,gBAAAoxB,EAAAC,EAAAlB,IASAtB,EAAAt9F,UAAA6+F,SAAA,SAAAa,GACA,MAAAzpG,MAAAqsG,kBAAAzD,SAAAa,IAOApC,EAAAt9F,UAAA2/F,UAAA,WACA,MAAA1pG,MAAAqsG,kBAAA3C,aAiBArC,EAAAt9F,UAAA+/F,YAAA,SAAAjC,GACA7nG,KAAAqsG,kBAAAvC,YAAAjC,IAiBAR,EAAAt9F,UAAAygG,cAAA,SAAAf,GACAzpG,KAAAqsG,kBAAA7B,cAAAf,IAIApC,EAAAt9F,UAAA+gG,aAAA,SAAAjD,GACA7nG,KAAAqsG,kBAAAvB,aAAAjD,IASAR,EAAAt9F,UAAA8iG,YAAA,SAAAhF,GAEA,OADAA,EAAA7nG,KAAAqsG,kBAAAzD,SAAAf,KAEA7nG,KAAAqsG,kBAAAxE,EAAAoB,UAAA,+BAAApB,IAOAR,EAAAt9F,UAAAsiG,gBAAA,WACA,GAAAS,GAAA9sG,KAAA,aAIA,OAHA,OAAA8sG,IACAA,EAAA9sG,KAAA,iBAAA2nG,GAAA3nG,OAEA8sG,GAGAzF,EAAAt9F,UAAA0uE,mBAAA,iBACAz4E,MAAA,eASAqnG,EAAAt9F,UAAAgjG,YAAA,SAAAh/F,GAEA,GADAA,EAAA/N,KAAAs+D,WAAAvwD,GAEA,MAAAA,GAAAy5F,KAIChrG,KAAA,mBAAA8f,eAAAtc,MAoBD,WAEA,YACA,IAAAy1B,GAAAz1B,KAAAwgF,EAAA/qD,EAAAijC,QAAAP,EAAA1iC,EAAAu+B,YAEAg5C,EAAA,SAAAxqD,GACAxiD,KAAAjF,KAAA,YACAynD,QACAA,EAAAu8C,KAAA,MAAAv8C,EAAAu8C,KAAA,GAAAv8C,EAAAu8C,IACA,IAAAn+F,GAIAqsG,EAHAC,EAAA1sB,EAAArX,WAAAw1B,kBAAA//F,MAAAoB,KAAArB,WACAwuG,EAAA,MAAA3qD,EAAA2qD,SAAA,GAAA3qD,EAAA2qD,SACAC,GAAA,IAAA5qD,EAAA4qD,mBACAC,EAAA,KAAAC,EAAA,KACAC,EAAA,MAAA/qD,EAAA+qD,aAAA/qD,EAAA+qD,aAAA,EAMA/5D,GAHAgP,EAAAgrD,eAGA,SAAAxwG,GACA,MAAAA,GAAA,SAAAA,EAAA,MAKAulG,EAAA,SAAA3hG,EAAA6yC,EAAAK,EAAAyrD,GACA,GAAA8N,GAAA55D,GAAA65D,GAAAx5D,EAAA,CACA,GAAA25D,GAAA,MAAAJ,EAAA9N,EAAA0B,GAAAoM,EACAK,EAAA,MAAAJ,EAAA/N,EAAA2B,GAAAoM,EACAj8C,EAAAo8C,GAAAh6D,EAAA,QACAk6D,EAAAn6D,EAAAC,EAAAg6D,GACAG,EAAAp6D,EAAAM,EAAA45D,EAEAL,GAAA55D,EACA65D,EAAAx5D,EACAlzC,EAAAiB,MAAA4rG,EAAAC,EAAAj6D,EAAAK,EAAAud,EAAAs8C,EAAAC,MAEAC,EAAA,SAAA7iF,GACA,MAAAnnB,MAAAmwC,KAAAnwC,KAAAswC,IAAAnpB,EAAA,GAAAA,EAAA,MAAAnnB,KAAAswC,IAAAnpB,EAAA,GAAAA,EAAA,QAEA8iF,EAAA,SAAA1zG,GACA,GAAAy3E,KAEA,OADAA,GAAAhwE,KAAAjD,MAAAizE,EAAAz3E,GACAy3E,GAEAk8B,EAAA,SAAAjvC,EAAAl+D,EAAA2+F,GAEA,OADA96E,GAAAvJ,EAAA,KACAzd,EAAA,EAA+BA,EAAAmD,EAAAlD,OAAA,EAAyBD,IAAA,CAIxD,GAFAyd,KAAA4yF,EAAAltG,EAAAnD,IACAgnB,EAAAqpF,EAAAltG,EAAAnD,EAAA,IACA8vG,EAAA,GAAAryF,EAAA,IAAAuJ,EAAA,IACA,GAAAupF,GAAAnqG,KAAAgyC,IAAA03D,EAAAM,EAAA3yF,GAAA2yF,EAAAppF,GAEAvJ,GAAA,IAAAA,EAAA,GAAA8yF,EACA9yF,EAAA,IAAAA,EAAA,GAAA8yF,EACAvpF,EAAA,IAAAA,EAAA,GAAAupF,EACAvpF,EAAA,IAAAA,EAAA,GAAAupF,CACA,IAAAxQ,GAAAtiF,EAAA,IAAAuJ,EAAA,OAAAA,EAAA,IACAvJ,EAAA,IAAAuJ,EAAA,QAAAA,EAAA,IAAAvJ,EAAA,IAAAuJ,EAAA,IACAvJ,EAAA,IAAAuJ,EAAA,QAAAA,EAAA,GACAmpF,EAAAnpF,EAAA,GAAAvJ,EAAA,QACAyyF,EAAAlpF,EAAA,GAAAvJ,EAAA,QACA+yF,EAAAL,GAAAD,EACAtV,EAAA4V,GAAAzQ,IAAAyQ,IAAAzQ,EAAA/4E,EAAA,GAAAvJ,EAAA,GACAo9E,EAAA2V,GAAAzQ,IAAAyQ,IAAAzQ,EAAAtiF,EAAA,GAAAuJ,EAAA,EAEAyoF,GAAA3K,WAAAzjC,EAAA,YACAvjB,GAAArgC,EAAA,GAAAugC,GAAAvgC,EAAA,GAAAsgC,GAAAtgC,EAAA,GAAAwgC,GAAAxgC,EAAA,KAGAgyF,EAAA3K,WAAAzjC,EAAA,OACA/O,EAAAi+C,EACAzyD,GAAArgC,EAAA,GACAugC,GAAAvgC,EAAA,GACAsgC,GAAA/2B,EAAA,GACAi3B,GAAAj3B,EAAA,GACA4zE,KACAC,KACAkF,WAGA,CAEA,GAAAltE,GAAApV,EAAA,IAAAA,EAAA,KAAAA,EAAA,GAAAA,EAAA,GAAAqkF,EAAAuB,GAAA,GAAAvB,EAAAuB,GAAA,EACAtwE,EAAAtV,EAAA,IAAAA,EAAA,KAAAA,EAAA,GAAAA,EAAA,GAAAqkF,EAAAuB,GAAA,GAAAvB,EAAAuB,GAAA,CACAoM,GAAA3K,WAAAzjC,EAAA,YACAvjB,GAAArgC,EAAA,GAAAoV,EAAAmrB,GAAAvgC,EAAA,GAAAsV,EAAAgrB,GAAAtgC,EAAA,GAAAoV,EAAAorB,GAAAxgC,EAAA,GAAAsV,IAGAtV,EAAAuJ,EAEA,MAAAA,GAEAyoF,EAAA3K,WAAAzjC,EAAA,YACAvjB,GAAA92B,EAAA,GAAAg3B,GAAAh3B,EAAA,GAAA+2B,GAAA/2B,EAAA,GAAAi3B,GAAAj3B,EAAA,KAKAzkB,MAAAsiG,SAAA,SAAA/C,EAAA/8C,GAEA5hD,KACAysG,EAAA,KACAC,EAAA,KACAL,EAAA,IAEA,IAAAiB,GAAA,WACA,OAAA3O,EAAAiC,WAAAjC,EAAAkC,WAAAlC,EAAAmC,SAAAnC,EAAAoC,WAEAwM,GACApM,cAAAmM,EACAlM,WAAAkM,EACApM,SAAA,SAAAsM,GACA,GAAAC,GAAA9O,EACAr7E,EAAA,KAAAkqF,EAAA,IACAE,GACA76D,EAAA,WACA,UAAA46D,EAAAtN,GAAA78E,KACAmqF,EAAA7M,WAAA6M,EAAA3M,UAAA2M,EAAAlN,GAAAkN,EAAA7M,YACA6M,EAAApN,GAAAoN,EAAA3M,UAAA2M,EAAAlN,GAAAkN,EAAApN,MAEA,GAAAoN,EAAAtN,GAAA78E,KACAmqF,EAAA7M,WAAA6M,EAAA3M,UAAA2M,EAAAlN,GAAAkN,EAAA7M,YACA6M,EAAApN,GAAAoN,EAAA3M,UAAA2M,EAAAlN,GAAAkN,EAAApN,KAEAntD,EAAA,WACA,UAAAu6D,EAAAtN,GAAA78E,KACAmqF,EAAA5M,WAAA4M,EAAA1M,UAAA0M,EAAAjN,GAAAiN,EAAA5M,YACA4M,EAAAnN,GAAAmN,EAAA1M,UAAA0M,EAAAjN,GAAAiN,EAAAnN,MAEA,GAAAmN,EAAAtN,GAAA78E,KACAmqF,EAAA5M,WAAA4M,EAAA1M,UAAA0M,EAAAjN,GAAAiN,EAAA5M,YACA4M,EAAAnN,GAAAmN,EAAA1M,UAAA0M,EAAAjN,GAAAiN,EAAAnN,KAIA,QAAAkM,GAAAkB,EAAAF,MAEA36D,IAAA8rD,EAAA0B,GAAA1B,EAAA4B,IAAA,EAAA5B,EAAAkC,YAAAlC,EAAA0B,GAAA1B,EAAA4B,IAAA,EAAA5B,EAAAoC,UACA7tD,GAAAyrD,EAAAiC,YAAAjC,EAAA2B,GAAA3B,EAAA6B,IAAA,EAAA7B,EAAAmC,UAAAnC,EAAA2B,GAAA3B,EAAA6B,IAAA,IAC6BgN,IAG7B7O,EAAAiC,WAAAjC,EAAAkC,WAAAlC,EAAAmC,SAAAnC,EAAAoC,YAMA4M,EAAAJ,EAAA5O,EAAA2C,mBAAA3C,EAAA0C,YACA/9E,EAAA,KAAAq7E,EAAA0C,WAAA,IACAx6B,EAAA,KAAA83B,EAAA0C,WAAA,IACAxzB,EAAA8/B,EAAArqF,GACAsqF,EAAAD,EAAA9mC,GACA4oB,EAAAke,EAAArqF,EAAA,GACAuqF,EAAAF,EAAA9mC,EAAA,EAIA86B,GAAA3hG,EAAA2tG,EAAA,GAAAA,EAAA,GAAAhP,EAkBA,IAAAmP,GAAAnP,EAAAiC,YAAAjC,EAAAmC,SAAAnC,EAAAiC,YAAA2L,EACAwB,EAAApP,EAAAkC,YAAAlC,EAAAoC,SAAApC,EAAAkC,YAAA0L,EAEAyB,GAAoCn7D,GAAA,KAAAK,GAAA,MACpC+6D,GACA9M,cAAA,SAAAqM,GACA,GAAAC,GAAA9O,EACAuP,GACAr7D,KACA,yBACA,OACA,0BAEAK,KACA,yBACA,OACA,2BAGAy6D,GACA96D,IAAA46D,EAAA7M,WAAA6M,EAAA3M,UAAA,MAAA2M,EAAA3M,SAAA2M,EAAA7M,aACA1tD,IAAAu6D,EAAA5M,WAAA4M,EAAA1M,UAAA,MAAA0M,EAAA1M,SAAA0M,EAAA5M,cAEAsN,GACAt7D,IAAAi7D,EAAAL,EAAA5M,aAAAiN,EAAAL,EAAA1M,WACA7tD,IAAAu6D,EAAA7M,WAAAmN,IAAAN,EAAA3M,SAAAiN,KAEAK,GACAv7D,IAAA46D,EAAA3M,SAAA2M,EAAA5M,aACA3tD,IAAAu6D,EAAA7M,WAAA6M,EAAA1M,YAEAsN,GACAx7D,IAAA46D,EAAA7M,WAAA6M,EAAA1M,WAAA0M,EAAA3M,SAAA2M,EAAA1M,WACA7tD,IAAAu6D,EAAA3M,SAAA2M,EAAA5M,aAAA4M,EAAA3M,SAAA2M,EAAA1M,YAEAuN,GACAz7D,IAAA46D,EAAA7M,WAAAmN,IAAAN,EAAA3M,SAAAiN,IAAAN,EAAA3M,SAAA2M,EAAA1M,WACA7tD,IAAA46D,EAAAL,EAAA5M,aAAAiN,EAAAL,EAAA1M,WAAA0M,EAAA3M,SAAA2M,EAAA1M,YAEAwN,GACA17D,GAAA46D,EAAA5M,WAAA4M,EAAA1M,UACA7tD,GAAAu6D,EAAA7M,WAAA6M,EAAA3M,WAEA0N,EAAAR,EAAAR,GAAA,GAAAiB,EAAAT,EAAAR,GAAA,GACAkB,EAAAjB,EAAAtN,GAAAqO,GAAA,EACAG,EAAAlB,EAAAlvG,GAAAkwG,GAAA,EACAG,GAAA,GAAAnB,EAAAlvG,GAAAkwG,IAAAF,EAAAf,GAAA,GAAAe,EAAAf,GAAA,OAAAC,EAAAlvG,GAAAkwG,IAAAF,EAAAf,GAAA,GAAAe,EAAAf,GAAA,GACAqB,EAAAlB,EAAAH,GAAAkB,GAAA,GACAI,EAAAnB,EAAAH,GAAAkB,GAAA,GACAK,EAAAb,EAAAV,GAAAkB,GAAAC,EAEA,OAAAlB,GAAArR,SAAA2S,EAAA,IAAAtB,EAAArR,SAAA2S,EAAA,IAAAH,EACAT,EAAAX,GAEAC,EAAArR,SAAA2S,EAAA,IAAAD,EAAAD,EACAT,EAAAZ,GAEAC,EAAArR,SAAA2S,EAAA,IAAAD,GAAAD,GAAApB,EAAArR,SAAA2S,EAAA,KAAAH,EACAN,EAAAd,GAEAC,EAAArR,SAAA2S,EAAA,IAAAtB,EAAArR,SAAA2S,EAAA,IAAAH,EACAP,EAAAb,OADA,IAIApM,WAAA,SAAAoM,EAAAwB,EAAAC,EAAAC,EAAAC,GACA,GAAA1B,GAAA9O,EACAyQ,GACAv8D,GAAA,GAAA46D,EAAAtN,GAAA,GAAAl9F,KAAAgyC,IAAA+5D,EAAAE,GAAAjsG,KAAAC,IAAA8rG,EAAAE,GACAh8D,GAAA,GAAAu6D,EAAAtN,GAAA,GAAAl9F,KAAAgyC,IAAA+5D,EAAAE,GAAAjsG,KAAAC,IAAA8rG,EAAAE,IACiC1B,EAEjC,QACA36D,IACAu8D,EAAAH,IACAG,EAAAD,IACAD,EAAAC,IAEAj8D,IACA+7D,EAAAG,IACAD,EAAAC,IACAD,EAAAD,KAE6B1B,IAE7BtM,SAAA,SAAAsM,EAAA3/B,EAAA+/B,EAAAne,GACA,GAAAge,GAAA9O,EACA0Q,GAA6Cx8D,EAAA,IAAAK,EAAA,KAAmBs6D,GAChEzc,GAAuCl+C,EAAA,SAAAK,EAAA,SAA4Bs6D,GACnE8B,EAAA7B,EAAA,KAAAD,EAAApvE,cAAA,wBAEA,IAAAwjB,EAAAshB,eAAA+C,WAAArkB,EAAAuhB,eAAA8C,UAAA,CACA,GAAAspC,GAAA3B,GAAA,EAAAhsD,EAAAshB,eAAAU,OAAAyrC,IAAAztD,EAAAssC,WAAA6C,GAAAub,EAAAzK,OACA,QACAhvD,IACAg7B,EAAA0hC,IACA9f,EAAA8f,IAEAr8D,IACAq8D,EAAA1hC,IACA0hC,EAAA9f,KAEiC+d,GAGjC,OAAA8B,GAAA,GAAA7B,EAAAtN,GAAA78E,IAAAuqD,EAAA4hB,IAAA,GAAAge,EAAAtN,GAAA78E,IAAAuqD,EAAA4hB,GAEA58C,IACAg7B,EAAAkgC,IACAte,EAAAse,IAEA76D,IACA46D,EAAAjgC,IACAigC,EAAAre,KAEiC+d,GAEjC,GAAAC,EAAAtN,GAAA78E,IAAAuqD,EAAA4hB,IAAA,GAAAge,EAAAtN,GAAA78E,IAAAuqD,EAAA4hB,GAEA58C,IACAi7D,EAAAL,EAAAnN,KACAwN,EAAAL,EAAAjN,KAEAttD,IACAu6D,EAAApN,GAAA0N,IACAN,EAAAlN,GAAAwN,KAEiCP,OAVjC,KAgBArsF,EAAA8sF,EAAAtP,EAAA2C,mBAAA3C,EAAA0C,WAAAxzB,EAAA+/B,EAAAne,EAAAoe,EACA,IAAA1sF,EACA,OAAAtkB,GAAA,EAAmCA,EAAAskB,EAAArkB,OAAcD,IACjD8kG,EAAA3hG,EAAAmhB,EAAAtkB,GAAA,GAAAskB,EAAAtkB,GAAA,GAAA8hG,EAKAgD,GAAA3hG,EAAA2tG,EAAA,GAAAA,EAAA,GAAAhP,GAKAgD,EAAA3hG,EAAA2+F,EAAA4B,GAAA5B,EAAA6B,GAAA7B,GAGAwO,EAAA/tG,KAAAY,EAAA2+F,IAyBApnC,GAAAj5D,OAAA8tG,EAAAxsB,EAAArX,WAAAw1B,mBACAne,EAAA7P,sBAAAq8B,EAAA,cACCxwG,KAAA,mBAAA8f,eAAAtc,MAkBD,WAEA,YACA,IAAAy1B,GAAAz1B,KAAAwgF,EAAA/qD,EAAAijC,QAAAP,EAAA1iC,EAAAu+B,WAEAwsB,GAAArX,WAAAinC,wBAAA,SAAA5tD,GACAA,OACA,IAOA0qD,GAPAmD,GAAA,IAAA7tD,EAAA6tD,aAEAxM,GADArhD,EAAA8tD,UACA9tD,EAAAqhD,QAAA,GAEA/M,GADAt0C,EAAA+tD,eACA/tD,EAAA4vB,aAAA,cAAA5vB,EAAA4vB,aACAo7B,EAAAhrD,EAAAgrD,gBAAA,GACAgD,GAAA,CAkDA,OA/CAxwG,MAAAggG,oBAAA,WAA+C,OAAAwQ,GAE/CxwG,KAAAsiG,SAAA,SAAA/C,EAAAx9E,GAEA,GAAA0uF,GAAA1uF,EAAAstE,UACAqhB,EAAA3uF,EAAAutE,UACAqhB,EAAA9sG,KAAAo1C,IAAAw3D,EAAA,GAAAC,EAAA,IACAE,EAAA/sG,KAAAo1C,IAAAw3D,EAAA,GAAAC,EAAA,GAEA,IAAAL,GAAAtuF,EAAA+hD,eAAA+C,YAAA9kD,EAAAgiD,eAAA8C,UAGa,CACb2pC,GAAA,CAEA,IAAAj1D,GAAAx5B,EAAAstE,UAAA,GAAA5zC,EAAA15B,EAAAstE,UAAA,GAAAwU,EACAxL,EAAA98C,EAAA+8C,EAAA78C,EAAA+xD,EAEAj1D,EAAA8/C,EAAAmV,EACAh1D,EAAA8/C,EAAAkV,CAEAmD,GAAA,EAAAnD,EACAoD,EAAA,EAAApD,EAEAjO,EAAApE,OAAA,GAAA5iD,EACAgnD,EAAApE,OAAA,GAAA3iD,EACA+mD,EAAApE,OAAA,GAAAwV,EACApR,EAAApE,OAAA,GAAAyV,EAGA1D,EAAA3K,WAAAviG,KAAA,OACA6wG,UAAA,EACAt1D,KAAAhD,EAAA,EACAkD,KAAAjD,EACA2kD,WAAA,EACAC,SAAA,EAAAv5F,KAAAs3C,GACA4U,EAAAy9C,EACAhQ,IAAA1G,EACAt7C,GAAAD,EAAAhD,EAAA,EACAmD,GAAAD,EAAAjD,EACA6/C,KAAA9/C,EACA+/C,KAAA9/C,QA/BAg4D,IAAA,EACAxwG,KAAA8wG,eAAAvR,EAAAx9E,EAAA0uF,EAAAC,EAAAC,EAAAC,IAmCA1D,EAAA1sB,EAAArX,WAAAw1B,kBAAA//F,MAAAoB,KAAArB,YAGAw5D,EAAAj5D,OAAAshF,EAAArX,WAAAinC,wBAAA5vB,EAAArX,WAAAw1B,kBAEA,IAAAX,GAAA,SAAAx7C,GACAA,QACAxiD,KAAAjF,KAAA,QAEA,IAAAmyG,GAAA1sB,EAAArX,WAAAinC,wBAAAxxG,MAAAoB,KAAArB,WACAoyG,EAAAvuD,EAAA8tD,WAAA,GAGAtwG,MAAAgxG,aAAA,WACA,MAAAD,IAGA/wG,KAAAixG,kBAAA,SAAA58D,EAAA68D,EAAAC,EAAArtC,EAAAC,EAAAqtC,EAAAC,GAGA,GAAAtP,GAAAqP,EAAA,IAAAC,EAAA,IAAAD,EAAA,IAAAC,EAAA,GACAtvF,IAqBA,OAnBAggF,IAUA,IAAAsP,EAAA,GACAtvF,EAAAlgB,KAAAsvG,EAAA,GAAAD,EAAA,GAAA78D,EAAA,GAvBA,GAuBAA,EAAA,GAvBA,IAwBAtyB,EAAAlgB,KAAAwyC,EAAA,GAAA08D,EAAAM,EAAA,IAEA,IAAAA,EAAA,GACAtvF,EAAAlgB,KAAAsvG,EAAA,GAAAD,EAAA,GAAA78D,EAAA,GA3BA,GA2BAA,EAAA,GA3BA,IA4BAtyB,EAAAlgB,KAAAwyC,EAAA,GAAA08D,EAAAK,EAAA,MAfA,IAAAA,EAAA,GACArvF,EAAAlgB,KAAAqvG,EAAA,GAAAC,EAAA,GAAA98D,EAAA,GAdA,GAcAA,EAAA,GAdA,IAeAtyB,EAAAlgB,KAAAwyC,EAAA,GAAA08D,EAAAK,EAAA,IAEA,IAAAA,EAAA,GACArvF,EAAAlgB,KAAAqvG,EAAA,GAAAC,EAAA,GAAA98D,EAAA,GAlBA,GAkBAA,EAAA,GAlBA,IAmBAtyB,EAAAlgB,KAAAwyC,EAAA,GAAA08D,EAAAM,EAAA,KAYAtvF,GAGA/hB,KAAA8wG,eAAA,SAAAvR,EAAAx9E,EAAA0uF,EAAAC,EAAAC,EAAAC,GAEA,GAAAU,GAAAC,EAAAhkB,EAAAvtF,KAAAouF,cACAojB,EAAAf,EAAA,GAAAC,EAAA,GAAAC,EAAA,EACAc,EAAAhB,EAAA,GAAAC,EAAA,GAAAE,EAAA,EACAc,EAAAjB,EAAA,GAAAC,EAAA,KAAAC,EACAgB,EAAAlB,EAAA,GAAAC,EAAA,KAAAE,GAEA5wG,KAAA6/F,iBAAA7/F,KAAAysF,cAAA,MAAAc,GAAA,MAAAA,EAAAqkB,eAAA,MAAArkB,EAAAqkB,cAAA,UAAArkB,EAAAqkB,cAAA,IACAN,EAAA/jB,EAAAqkB,cAAA,GACAL,EAAAhkB,EAAAqkB,cAAA,KAGAN,EAAAtxG,KAAAixG,mBAAAO,EAAAC,GAAAhB,EAAAC,EAAA3uF,EAAA+hD,eAAA/hD,EAAAgiD,eAAAw7B,EAAAwB,GAAAxB,EAAApgG,IACAoyG,EAAAvxG,KAAAixG,mBAAAS,EAAAC,GAAAjB,EAAAD,EAAA1uF,EAAAgiD,eAAAhiD,EAAA+hD,eAAAy7B,EAAApgG,GAAAogG,EAAAwB,KAGAmM,EAAA1f,aAAgCokB,eAAAN,EAAAC,KAA0B,GAE1DrE,EAAA3K,WAAAviG,KAAA,UACAu7C,GAAAi2D,EAAA/1D,GAAAg2D,EAAAj2D,GAAAk2D,EAAAh2D,GAAAi2D,EACA1T,KAAAqT,EAAA,GAAApT,KAAAoT,EAAA,GAAAnT,KAAAoT,EAAA,GAAAnT,KAAAmT,EAAA,MAOAp5C,GAAAj5D,OAAA8+F,EAAAxd,EAAArX,WAAAinC,yBACA5vB,EAAA7P,sBAAAqtB,EAAA,WAECxhG,KAAA,mBAAA8f,eAAAtc,MAkBD,WAEA,YACA,IAAAy1B,GAAAz1B,KAAAwgF,EAAA/qD,EAAAijC,QAAAP,EAAA1iC,EAAAu+B,YAEA69C,EAAA,SAAAt2D,EAAAE,EAAAD,EAAAE,GACA,MAAAH,IAAAC,GAAAE,GAAAD,EAAA,EACAF,GAAAC,GAAAC,GAAAC,EAAA,EACAF,GAAAD,GAAAG,GAAAD,EAAA,EACA,GAiBAw1D,EAAA,SAAAvC,EAAAC,EAAA3R,EAAAlL,EAAAC,EAAAzhE,EAAAE,EAAA2kB,EAAAo7D,GAGA,MAAAp7D,IAAAo7D,GAAA7B,EAAAC,GAEA,IAAA3R,EACAlL,EAAA,OAAAC,EAAA,OAAA2c,GAAA5c,EAAA,SAAAxhE,KAAAq+E,GACA7c,EAAA,OAAAC,EAAA,OAAA2c,EAAAC,GAAA7c,EAAA,SAAAthE,OACAk+E,GAAA,EAAAp+E,EAAAq+E,GAAA,EAAAn+E,GAEA,IAAAwsE,EACAlL,EAAA,OAAAC,EAAA,OAAA2c,GAAA5c,EAAA,SAAAxhE,KAAAq+E,GACA7c,EAAA,OAAAC,EAAA,OAAA2c,EAAAC,GAAA7c,EAAA,SAAAthE,OACAk+E,EAAAp+E,EAAAq+E,GAAA,EAAAn+E,GAEA,IAAAwsE,EACAlL,EAAA,OAAAC,EAAA,OAAA2c,GAAA5c,EAAA,SAAAxhE,KAAAq+E,GACA7c,EAAA,OAAAC,EAAA,OAAA2c,EAAAC,GAAA7c,EAAA,SAAAthE,OACAk+E,GAAA,EAAAp+E,EAAAq+E,GAAA,EAAAn+E,GAEA,IAAAwsE,EACAlL,EAAA,OAAAC,EAAA,OAAA2c,GAAA5c,EAAA,SAAAxhE,KAAAq+E,GACA7c,EAAA,OAAAC,EAAA,OAAA2c,EAAAC,GAAA7c,EAAA,SAAAthE,OACAk+E,EAAAp+E,EAAAq+E,GAAA,EAAAn+E,OAHA,IAQAshF,EAAA,SAAAtvD,GACAA,QACAxiD,KAAAjF,KAAA,cAEA,IAKAg3G,GALA7E,EAAA1sB,EAAArX,WAAAinC,wBAAAxxG,MAAAoB,KAAArB,WACA2xG,EAAA9tD,EAAA8tD,WAAA,GACAzM,EAAArhD,EAAAqhD,QAAA,EACA0M,EAAA/tD,EAAA+tD,gBAAA,EACA/tD,GAAA4vB,aAAA5vB,EAAA4vB,WAGApyE,MAAA8wG,eAAA,SAAAvR,EAAA/8C,EAAAiuD,EAAAC,EAAAl8D,EAAArgC,GACA,GAAAq9F,GAAAhvD,EAAA6sC,UAAA,GAAA7sC,EAAA8sC,UAAA,KAAA96C,EACAi9D,EAAAjvD,EAAA6sC,UAAA,GAAA7sC,EAAA8sC,UAAA,KAAAn7E,EACAu9F,EAAAlvD,EAAA6sC,UAAA,GAAA7sC,EAAA8sC,UAAA,GAAA96C,EAAA,EACAm9D,EAAAnvD,EAAA6sC,UAAA,GAAA7sC,EAAA8sC,UAAA,GAAAn7E,EAAA,CAGA,KAAAquC,EAAA6sC,UAAA,KAAAmiB,GAAA3N,GACA,IAAArhD,EAAA6sC,UAAA,KAAAmiB,GAAA3N,GACA,IAAArhD,EAAA6sC,UAAA,KAAAoiB,GAAA5N,GACA,IAAArhD,EAAA6sC,UAAA,KAAAoiB,GAAA5N,GACA,IAAArhD,EAAA8sC,UAAA,KAAAoiB,GAAA7N,GACA,IAAArhD,EAAA8sC,UAAA,KAAAoiB,GAAA7N,GACA,IAAArhD,EAAA8sC,UAAA,KAAAqiB,GAAA9N,GACA,IAAArhD,EAAA8sC,UAAA,KAAAqiB,GAAA9N,EAsBA,IAIA5F,GAAAE,EAAAD,EAAAE,EAJA4T,GAAAR,EAAAE,GAAA,EACAO,GAAAR,EAAAE,GAAA,EACA3U,EAAA6U,EAAAL,EAAAC,EAAAC,EAAAC,GACAx8D,EAAAtxC,KAAAmwC,KAAAnwC,KAAAswC,IAAAu9D,EAAAF,EAAA,GAAA3tG,KAAAswC,IAAAw9D,EAAAF,EAAA,IAEAlkB,EAAA2f,EAAA9e,eAEApuF,KAAA6/F,iBAAA7/F,KAAAysF,cAAA,MAAAc,GACA0Q,EAAA1Q,EAAAqkB,cAAA,MACA1T,EAAA3Q,EAAAqkB,cAAA,MACAzT,EAAA5Q,EAAAqkB,cAAA,MACAxT,EAAA7Q,EAAAqkB,cAAA,QAKAG,EAAAd,EAAAe,EACAC,EACAjV,EACAx6C,EAAA6sC,UACA7sC,EAAA8sC,UACAghB,IACAn7D,EACAo7D,GAEAtS,EAAA8T,EAAA,GACA5T,EAAA4T,EAAA,GACA7T,EAAA6T,EAAA,GACA3T,EAAA2T,EAAA,GAEA7E,EAAA1f,aAAoCokB,eAAAG,OAA6C,IAGjF7E,EAAA3K,WAAAviG,KAAA,UACAu7C,GAAAm2D,EAAAj2D,GAAAk2D,EAAAn2D,GAAAg2D,EAAA91D,GAAA+1D,EACAxT,OAAAC,OACAC,OAAAC,UAKAjmC,GAAAj5D,OAAA4yG,EAAAtxB,EAAArX,WAAAinC,yBACA5vB,EAAA7P,sBAAAmhC,EAAA,iBAECt1G,KAAA,mBAAA8f,eAAAtc,MAkBD,WAEA,YACA,IAAAy1B,GAAAz1B,KAAAwgF,EAAA/qD,EAAAijC,QAAAP,EAAA1iC,EAAAu+B,YAGA6nC,EAAA,SAAAr5C,GACAxiD,KAAAjF,KAHA,UAIA,IAAAmyG,GAAA1sB,EAAArX,WAAAw1B,kBAAA//F,MAAAoB,KAAArB,UAEAqB,MAAAsiG,SAAA,SAAA/C,EAAA/8E,GACA0qF,EAAA3K,WAAAviG,KAPA,YAO+Cu7C,GAAAgkD,EAAA0B,GAAAxlD,GAAA8jD,EAAA2B,GAAA1lD,GAAA+jD,EAAAiC,WAAA9lD,GAAA6jD,EAAAkC,aAC/CyL,EAAA3K,WAAAviG,KARA,YAQ+Cu7C,GAAAgkD,EAAAiC,WAAA/lD,GAAA8jD,EAAAkC,WAAAjmD,GAAA+jD,EAAAmC,SAAAhmD,GAAA6jD,EAAAoC,WAC/CuL,EAAA3K,WAAAviG,KATA,YAS+Cu7C,GAAAgkD,EAAAmC,SAAAjmD,GAAA8jD,EAAAoC,SAAAnmD,GAAA+jD,EAAA4B,GAAAzlD,GAAA6jD,EAAA6B,MAI/CjpC,GAAAj5D,OAAA28F,EAAArb,EAAArX,WAAAw1B,mBACAne,EAAA7P,sBAAAkrB,EAdA,aAgBCr/F,KAAA,mBAAA8f,eAAAtc,MAkBD,WAIA,YACA,IAAAy1B,GAAAz1B,KAAAwgF,EAAA/qD,EAAAijC,QAAAP,EAAA1iC,EAAAu+B,YAEAk+C,GACAC,kBAAA,kBACAC,oBAAA,oBACAC,iBAAA,kBAeAxqG,GACA++B,IAAA,6BACA0rE,MAAA,gCAEAC,EAAA,SAAApoG,EAAAqoG,GACA,OAAA/0G,KAAA+0G,GACAroG,EAAA4S,aAAAtf,EAAA,GAAA+0G,EAAA/0G,KAEAg1G,EAAA,SAAA9tG,EAAA6tG,GAIA,MAHAA,SACAA,EAAAl4G,QAAA,MACAk4G,EAAAE,MAAA7qG,EAAAyqG,MACA9xB,EAAAxjE,gBAAAnV,EAAA++B,IAAAjiC,EAAA,UAAA6tG,IAEAG,EAAA,SAAAv+F,GACA,gCAAsCA,EAAA,aAAoBA,EAAA,SAE1Dw+F,EAAA,SAAA1tG,GAEA,OADAonG,GAAApnG,EAAAy3C,iBAAA,uCACAl/C,EAAA,EAA2BA,EAAA6uG,EAAA5uG,OAAgBD,IAC3C6uG,EAAA7uG,GAAAge,WAAA+B,YAAA8uF,EAAA7uG,KAEAo1G,EAAA,SAAA3tG,EAAAiF,EAAAod,EAAAs/D,EAAAisB,GACA,GAAAltG,GAzBA,oBAyBAktG,EAAAx6C,SAAAnnB,SAAAs/B,SAEAmiC,GAAA1tG,EAQA,IAAA6oC,EAIAA,GAHAxmB,EAAAmzB,SAAA+mB,OAGAgxC,EA/CA,kBA+C4C7sG,OAF5C6sG,EA9CA,kBA8C4C7sG,KAAAmtG,cAAA,kBAI5C,IAAA/tC,GAAAytC,EAhDA,OAiDAvtG,GAAAuY,YAAAunD,GACAA,EAAAvnD,YAAAswB,EAKA,QAAAtwC,GAAA,EAA2BA,EAAA8pB,EAAAmzB,SAAAs4D,MAAAt1G,OAAiCD,IAAA,CAC5D,GAAAw1G,GAAA,GAAAH,EAAA9V,SAAA,GAAA8V,EAAA9V,QAAAv/F,EAAA8pB,EAAAmzB,SAAAs4D,MAAAt1G,OAAA,EAAAD,EAEAy1G,EAAA3rF,EAAAmzB,SAAAs4D,MAAAC,GAAA,GACAjoF,EAAAynF,EAzDA,QAyDqChxC,OAAA59D,KAAA6lD,MAAA,IAAAniC,EAAAmzB,SAAAs4D,MAAAv1G,GAAA,QAAA01G,aAAAD,GAErCnlE,GAAAtwB,YAAAuN,GAEA,GAAAooF,GAAA7rF,EAAA+0D,OA5DA,SAFA,MA+DAnyE,GAAA4S,aAAAq2F,EAAA,QAAAxtG,EAAA,MAEAytG,EAAA,SAAAnuG,EAAAiF,EAAAod,EAAAs/D,EAAAisB,GA0BA,GAxBA3oG,EAAA4S,aAnEA,OAmEAwK,EAAAoxC,KAAApxC,EAAAoxC,KA9DA,QA+DAxuD,EAAA4S,aAlEA,SAkEAwK,EAAA+0D,OAAA/0D,EAAA+0D,OA/DA,QAiEA/0D,EAAAmzB,SACAm4D,EAAA3tG,EAAAiF,EAAAod,EAAAs/D,EAAAisB,IAIAF,EAAA1tG,GACAiF,EAAA4S,aAxEA,QAwEA,KAGAwK,EAAAgoE,aACAplF,EAAA4S,aA7EA,eA6EAwK,EAAAgoE,aAWAhoE,EAAA,WAAAA,EAAA,cAAAA,EAhGA,oBAgGA,CACA,GAAA4jD,IAAA,GAAA5jD,EAAA,UAAAvpB,QAAA,aACAs1G,EAAA/rF,EAAA,UAAA/pB,MAAA2tE,GACA8nC,EAAA,EACAK,GAAA93G,QAAA,SAAAumB,GACAkxF,GAAApvG,KAAA6lD,MAAA3nC,EAAAwF,EAAAgoE,aAAApkB,IAEAhhE,EAAA4S,aAvGA,mBAuGAk2F,OAEA1rF,GAzGA,qBA0GApd,EAAA4S,aA1GA,mBA0GAwK,EA1GA,oBA8GA,QAAA9pB,KAAAy0G,GACA3qF,EAAA9pB,IACA0M,EAAA4S,aAAAm1F,EAAAz0G,GAAA8pB,EAAA9pB,KAIA81G,EAAA,SAAA3sE,EAAAnmC,EAAAyjB,GACA0iB,EAAAmxC,WAAAr6E,OAAAwmB,EACA0iB,EAAAvpB,aAAA5c,EAAAmmC,EAAAmxC,WAAA7zD,IAEA0iB,EAAAnpB,YAAAhd,GAMA03D,GAAAvxB,KACAz8B,KAAAsoG,EACA/+E,KAAA6+E,EACAliF,IAAAsiF,EAQA,IAAAa,GAAA,SAAAhxD,GACA,GAAAixD,GAAAjxD,EAAAixD,mBAAA,MAAAhiC,IAEA+O,GAAA3mB,mBAAAj7D,MAAAoB,KAAAwiD,EAAAkxD,cACA1zG,KAAA87D,OAAA,KACA97D,KAAAS,KAAA,KACAT,KAAA4mC,IAAA,KACA5mC,KAAAsiF,SAAA,IAEA,IAAAjmB,GAAA7Z,EAAAqZ,SAAA,KAAArZ,EAAAkxD,aAAA,GAAA73C,UAAA,IACA83C,GACApsF,MAAA,GACAywC,MAAA,EACAD,OAAA,EACAo0B,iBAAAsnB,EACAvnD,SAAA,WAGAlsD,MAAA4mC,IAAA6rE,EAAA,MAAAkB,GAEAnxD,EAAAoxD,eACA5zG,KAAA87D,OAAA0kB,EAAAnsE,cAAA,OAAoD63C,SAAA,aACpDiM,EAAAL,YAAA93D,KAAA87D,OAAA,SACA97D,KAAA87D,OAAA0iB,UAAAniB,IAGAk2C,EAAAvyG,KAAA4mC,KAA6B9qB,MAAAugD,IAC7Br8D,KAAA87D,OAAA97D,KAAA4mC,KAGA4b,EAAA8V,SAAAiY,cAAAvwE,KAAA87D,OAAAtZ,EAAAkxD,aAAA,GAAAxuG,QACAs9C,EAAAoxD,eAAA5zG,KAAA87D,OAAAr+C,YAAAzd,KAAA4mC,IAEA,IAAAo8D,IAAAhjG,KAAA87D,OAuCA,OAtCA97D,MAAAijG,mBAAA,WACA,MAAAD,IAGAhjG,KAAAkjG,qBAAA,SAAAn1F,GACAi1F,EAAAnhG,KAAAkM,IAGA/N,KAAA6pE,MAAA,SAAAtiD,EAAAi9C,EAAAurB,GACA,SAAAxoE,EAAA,CAEA,GAAAxF,GAAAioD,GAAAhqE,KAAAyzC,EAAAzzC,KAAA8zC,GAAAm2B,GAAAjqE,KAAAw0C,EAAAx0C,KAAAmU,EACA,OAAA47E,IACAA,EAAAC,KAAA,IAAAhmB,EAAA,IAAA+lB,EAAAC,MACAD,EAAAG,KAAA,IAAAlmB,EAAA,IAAA+lB,EAAAG,MACAjmB,EAAA,GAAA8lB,EAAAI,MAAAJ,EAAAC,KAAA,GAAAD,EAAAC,KAAA,GACA/lB,EAAA,GAAA8lB,EAAAK,MAAAL,EAAAG,KAAA,GAAAH,EAAAG,KAAA,IAGA1tC,EAAAoxD,eACAz7C,EAAAL,YAAA93D,KAAA87D,OAAAkO,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAA,EAAA,IACAD,EAAA,KACAA,EAAA,KACAjoD,EAAA4wF,GAAA,OAGA5wF,EAAA4wF,GAAA3oC,EAAA,GAAAA,EAAA,KAEAyH,EAAA5H,MAAAjrE,MAAAoB,KAAArB,WAEA4zG,EAAAvyG,KAAA4mC,KACArf,MAAAxF,EACAi2C,MAAAiS,EAAA,MACAlS,OAAAkS,EAAA,WAMAwH,YAIAtZ,GAAAj5D,OAAAs0G,EAAAhzB,EAAA3mB,oBACAhC,QAAA,SAAAnK,GACAA,GAAA,MAAA1tD,KAAAm5D,QACAn5D,KAAA87D,SAAA97D,KAAA87D,OAAAxD,SAAA,MACAt4D,KAAA4mC,MAAA5mC,KAAA4mC,IAAA0xB,SAAA,MACAt4D,KAAAsiF,WAAAtiF,KAAAsiF,SAAAhqB,SAAA,MAEAt4D,KAAA87D,QAAA97D,KAAA87D,OAAArgD,YACAzb,KAAA87D,OAAArgD,WAAA+B,YAAAxd,KAAA87D,QACA97D,KAAAsiF,UAAAtiF,KAAAsiF,SAAA7mE,YACAzb,KAAA87D,OAAArgD,WAAA+B,YAAAxd,KAAA87D,QAEA97D,KAAA4mC,IAAA,KACA5mC,KAAA87D,OAAA,KACA97D,KAAAS,KAAA,KACAT,KAAA6nG,MAAA,OAIA7nG,KAAA87D,QAAA97D,KAAA87D,OAAArgD,YAAAzb,KAAA87D,OAAArgD,WAAA+B,YAAAxd,KAAA87D,QACA97D,KAAAsiF,UAAAtiF,KAAAsiF,SAAA7mE,YAAAzb,KAAAsiF,SAAA7mE,WAAA+B,YAAAxd,KAAAsiF,YAGAd,SAAA,SAAArwC,GACA,GAAAjxC,GAAAixC,EAAAyuB,cACA5/D,MAAA87D,QAAA,MAAA97D,KAAA87D,OAAArgD,YAAAvb,EAAAud,YAAAzd,KAAA87D,QACA97D,KAAAsiF,UAAA,MAAAtiF,KAAAsiF,SAAA7mE,YAAAvb,EAAAud,YAAAzd,KAAAsiF,WAEA9a,WAAA,SAAA3rE,GACAmE,KAAA87D,SACA97D,KAAA87D,OAAAv0C,MAAAwkB,QAAAlwC,EAAA,mBAQA2kF,EAAAlX,mBAAA1iC,IAAA,SAAA4b,GACA,GAAAxT,GAAAhvC,KACAktG,EAAAsG,EAAA50G,MAAAoB,OAEA67D,SAAArZ,EAAA8V,SAAA6P,gBAAAnoE,KAAAwsF,aAAA,IAAAhqC,EAAA8V,SAAA+P,uBAAA,IACAqrC,aAAA/0G,UACA80G,kBAAA,OACAn7C,SAAA9V,EAAA8V,YAIAu7C,EAAA7zG,KAAAusF,WACAvsF,MAAAusF,YAAA,SAAA3sF,GACA,GAAA4T,GAAAqgG,EAAAj1G,MAAAoB,MAAAJ,GACA4gF,GAAAhtE,EAAA,0BAAAxT,KAAA87D,OAAA97D,KAAAs4D,SAAAnnB,SAAAk3B,yBAGA6kC,EAAAz7B,SAAA5H,MAAA,SAAAtiD,EAAAi9C,EAAAurB,GAEA,GAAAnvF,GAAAouC,EAAAmzD,cAAApgF,EAAA,GAAA0/C,GAAA,IAIA,IAHAsuB,EAAAC,KAAA,IAAAvuB,EAAA,IAAAsuB,EAAAC,MACAD,EAAAG,KAAA,IAAAzuB,EAAA,IAAAsuB,EAAAG,MAEAtvF,EAAAlD,OAAA,GAEAqkB,EAAAitB,EAAA4wD,aAEA,IAAAxlG,IACAga,EAAA2N,EACA4O,UAAA,aAAA8wC,EAAA,OAAAA,EAAA,OACA0qB,iBAAA3pC,EAAA,oCAEAsxD,EAAA,IACA9kE,GAAAyE,EAAAzE,EAAA8E,EAAA9E,EAAAwF,EAAAxF,EAAA76B,CAGA,IAAAoT,EAAA+oE,cAAA,CACA,GAAAR,GAAAvoE,EAAAuoE,cAAA,EACAikB,EAAAxsF,EAAAgoE,YAAA,EAAAO,CACAgkB,GAAAtzB,EAAAthF,UAAgDqoB,SAChDusF,GAAAp5D,SACAo5D,EAAAx3B,OAAA/0D,EAAA+oE,cACAwjB,EAAAvkB,YAAAwkB,EAEA,MAAA/kE,EAAAglE,QACAhlE,EAAAglE,OAAAvB,EAAA,OAAAr4G,GACAomF,EAAAl4D,SAAA0mB,EAAAglE,OAAAxzB,EAAApY,uBACAmrC,EAAAvkE,EAAApI,IAAAoI,EAAAglE,OAAA,IAGAzB,EAAAvjE,EAAAglE,OAAA55G,GAGAi5G,EAAArkE,EAAApI,IAAAoI,EAAAglE,OAAAF,EAAA1/F,EAAA46B,GAGA,MAAAA,EAAAvuC,MACAuuC,EAAAvuC,KAAAgyG,EAAA,OAAAr4G,GACAm5G,EAAAvkE,EAAApI,IAAAoI,EAAAvuC,KAAA8mB,EAAA+oE,cAAA,MAGAiiB,EAAAvjE,EAAAvuC,KAAArG,GAGAi5G,EAAArkE,EAAApI,IAAAoI,EAAAvuC,KAAA8mB,EAAAnT,EAAA46B,MAIAmpB,EAAAj5D,OAAAshF,EAAAlX,mBAAA1iC,IAAA4sE,EAUA,IAAAS,GAAAzzB,EAAAyzB,YAAA,SAAAzxD,GACAgxD,EAAA50G,MAAAoB,OAEA67D,SAAArZ,EAAA8V,SAAAiQ,cACAmrC,aAAA/0G,UACA80G,kBAAA,MACAG,eAAA,EACAt7C,SAAA9V,EAAA8V,YAIAmZ,SAAA5H,MAAA,SAAAtiD,GACA,GAAAyD,GAAAw1D,EAAAthF,UAAiCqoB,EACjCyD,GAAAslE,gBACAtlE,EAAAukE,YAAAvkE,EAAAukE,YACAvkE,EAAAsxD,OAAAtxD,EAAAslE,eAGA,MAAAtwF,KAAAmK,MACAnK,KAAAmK,KAAAnK,KAAAk0G,SAAAlpF,GACAhrB,KAAA4mC,IAAAnpB,YAAAzd,KAAAmK,OAEA,MAAAnK,KAAAm0G,YACAn0G,KAAAm0G,WAAAn0G,KAAAmK,MAEAkpG,EAAArzG,KAAA4mC,IAAA5mC,KAAAmK,KAAA6gB,GAAAhrB,KAAAyzC,EAAAzzC,KAAA8zC,EAAA9zC,KAAAw0C,EAAAx0C,KAAAmU,GAAAnU,MACA2yG,EAAA3yG,KAAAmK,MAAAnK,KAAAyzC,EAAAzzC,KAAA8zC,KACSv1C,KAAAyB,MAGTm4D,GAAAj5D,OAAA+0G,EAAAT,GAKAhzB,EAAApX,UAAAxiC,IAAAg8D,IAAA,WACApiB,EAAApX,UAAAw5B,IAAAhkG,MAAAoB,KAAArB,WACAs1G,EAAAr1G,MAAAoB,KAAArB,WACAqB,KAAAk0G,SAAA,SAAA3sF,GACA,MAAAkrF,GAAA,UACApa,GAAAr4F,KAAAw0C,EAAA,EACA8jD,GAAAt4F,KAAAmU,EAAA,EACA47C,EAAA/vD,KAAAu9F,UAGAv9F,KAAAm0G,WAAA,SAAAhqG,GACAooG,EAAApoG,GACAkuF,GAAAr4F,KAAAw0C,EAAA,EACA8jD,GAAAt4F,KAAAmU,EAAA,EACA47C,EAAA/vD,KAAAu9F,WAIAplC,EAAAj5D,OAAAshF,EAAApX,UAAAxiC,IAAAg8D,KAAApiB,EAAApX,UAAAw5B,IAAAqR,IAKAzzB,EAAApX,UAAAxiC,IAAAm0D,UAAA,WACAva,EAAApX,UAAA2xB,UAAAn8F,MAAAoB,KAAArB,WACAs1G,EAAAr1G,MAAAoB,KAAArB,WACAqB,KAAAk0G,SAAA,SAAA3sF,GACA,MAAAkrF,GAAA,QACAz6C,MAAAh4D,KAAAw0C,EACAujB,OAAA/3D,KAAAmU,KAGAnU,KAAAm0G,WAAA,SAAAhqG,GACAooG,EAAApoG,GACA6tD,MAAAh4D,KAAAw0C,EACAujB,OAAA/3D,KAAAmU,MAIAgkD,EAAAj5D,OAAAshF,EAAApX,UAAAxiC,IAAAm0D,WAAAva,EAAApX,UAAA2xB,UAAAkZ,IAKAzzB,EAAApX,UAAAxiC,IAAAu8D,MAAA3iB,EAAApX,UAAA+5B,MAIA3iB,EAAApX,UAAAxiC,IAAAq9D,MAAAzjB,EAAApX,UAAA66B,MAIAzjB,EAAAnX,SAAAziC,IAAAi6C,MAAAL,EAAAnX,SAAAwX,MAIAL,EAAAnX,SAAAziC,IAAA2/D,OAAA/lB,EAAAnX,SAAAk9B,MAEA,IAAA6N,GAAA,SAAAC,EAAAX,GACAW,EAAAz1G,MAAAoB,KAAA0zG,GACAlzB,EAAA3mB,mBAAAj7D,MAAAoB,KAAA0zG,GACA1zG,KAAAuiF,sBAAA,CAEAviF,MAAAS,KAAA,KACAT,KAAA6pE,MAAA,SAAArnB,EAAA8jD,GAEA,GAAA9jD,EAAA/2C,UAAAm7B,KAAA0/D,EAAA,CACA,MAAAtmG,KAAAS,OACAT,KAAAS,KAAAgyG,EAAA,QACAtmB,iBAAA,QAEA3pC,EAAA/2C,UAAAm7B,IAAAnpB,YAAAzd,KAAAS,MACAT,KAAA4kG,gBACA5kG,KAAA4kG,eAAA5kG,KAAAS,KAAA+hD,EAAA/2C,WAGAzL,KAAA87D,OAAAtZ,EAAA/2C,UAAAm7B,IAEA,IAAAy1B,GAAAq3C,GAAA,GAAAA,EAAAh2G,OAAAg2G,EAAA,GAAA73C,UAAA,MACA4F,GAAA,IAEA6kC,GAAAtW,KAAA,IAAAvuB,EAAA,IAAA6kC,EAAAtW,MACAsW,EAAApW,KAAA,IAAAzuB,EAAA,IAAA6kC,EAAApW,MAEAqiB,EAAAvyG,KAAAS,MACA2T,EAAAkgG,EAAA9xD,EAAApuC,GACA0H,MAAAugD,EACAigB,OAAA95B,EAAA85B,OAAA95B,EAAA85B,OAAA,KACA3jB,KAAAnW,EAAAmW,KAAAnW,EAAAmW,KAAA,KACAhoC,UAAA,aAAA8wC,EAAA,OAAAA,EAAA,UAIA,IAAA6yC,GAAA,SAAAlgG,GACA,MAAAlX,OAAAkX,EAAA6wF,IAAAxxD,IAAAv2C,MAAAkX,EAAA6wF,IAAAnxD,GAAA,OAAA1/B,EAAA0wF,IAAArxD,EAAA,IAAAr/B,EAAA0wF,IAAAhxD,EACA,KAAA1/B,EAAA4wF,KAAA,GAAAvxD,EAAA,IAAAr/B,EAAA4wF,KAAA,GAAAlxD,EACA,KAAA1/B,EAAA6wF,IAAAxxD,EAAA,IAAAr/B,EAAA6wF,IAAAnxD,EACA,KAAA1/B,EAAA4wF,KAAA,GAAAvxD,EAAA,IAAAr/B,EAAA4wF,KAAA,GAAAlxD,EACA,KAAA1/B,EAAA0wF,IAAArxD,EAAA,IAAAr/B,EAAA0wF,IAAAhxD,EAEA9zC,MAAA2uF,SAAA,SAAAhtF,GACAA,EAAAm6D,QAAA97D,KAAAS,MAAAT,KAAAS,KAAAgb,aACAzb,KAAAS,KAAAgb,WAAA+B,YAAAxd,KAAAS,MACAkB,EAAAm6D,OAAAr+C,YAAAzd,KAAAS,QAIA03D,GAAAj5D,OAAAk1G,GAAA5zB,EAAA3mB,mBAAA2mB,EAAAnX,SAAA86B,kBACAtsC,QAAA,SAAAnK,GACA,MAAA1tD,KAAAS,OACAitD,EACA1tD,KAAAs4D,SAAAnnB,SAAAinC,cAAAp4E,KAAAS,MAEAT,KAAAS,KAAAgb,YACAzb,KAAAS,KAAAgb,WAAA+B,YAAAxd,KAAAS,QAGA+gF,SAAA,SAAArwC,GACAnxC,KAAAS,MAAAT,KAAA87D,QAAA,MAAA97D,KAAAS,KAAAgb,YACAzb,KAAA87D,OAAAr+C,YAAAzd,KAAAS,OAEA+mE,WAAA,SAAA3rE,GACA,MAAAmE,KAAAS,OAAAT,KAAAS,KAAA8mB,MAAAwkB,QAAAlwC,EAAA,mBAIA2kF,EAAAnX,SAAAziC,IAAA69D,MAAA,WACA2P,EAAAx1G,MAAAoB,MAAAwgF,EAAAnX,SAAAo7B,MAAA9lG,aAEAw5D,EAAAj5D,OAAAshF,EAAAnX,SAAAziC,IAAA69D,OAAAjkB,EAAAnX,SAAAo7B,MAAA2P,IAEA5zB,EAAAnX,SAAAziC,IAAAw+D,WAAA,WACAgP,EAAAx1G,MAAAoB,MAAAwgF,EAAAnX,SAAA+7B,WAAAzmG,aAEAw5D,EAAAj5D,OAAAshF,EAAAnX,SAAAziC,IAAAw+D,YAAA5kB,EAAAnX,SAAA+7B,WAAAgP,IAEA5zB,EAAAnX,SAAAziC,IAAAk0D,QAAA,WACAsZ,EAAAx1G,MAAAoB,MAAAwgF,EAAAnX,SAAAyxB,QAAAn8F,aAEAw5D,EAAAj5D,OAAAshF,EAAAnX,SAAAziC,IAAAk0D,SAAAta,EAAAnX,SAAAyxB,QAAAsZ,IAGA5zB,EAAAnX,SAAAziC,IAAA4/D,WAAA,WACA,GAAA+N,GAAAC,EAAA/zG,EAAA,KAAAuuC,EAAAhvC,IACAwgF,GAAAnX,SAAAm9B,WAAA5nG,MAAAoB,KAAArB,WACAqB,KAAA6pE,MAAA,SAAArnB,EAAA8jD,GACA,MAAA7lG,IACAA,EAAAgyG,EAAA,QACAjwD,EAAAouB,UAAAhqC,IAAAnpB,YAAAhd,GACAuuC,EAAAylE,gBAAAh0G,EAAA+hD,EAAAouB,WACA5hC,EAAAylE,gBAAAh0G,EAAAuuC,GAEAulE,EAAA9B,EAAA,QACAjwD,EAAAouB,UAAAhqC,IAAAnpB,YAAA82F,GACAvlE,EAAAylE,gBAAAF,EAAA/xD,EAAAouB,WACA5hC,EAAAylE,gBAAAF,EAAAvlE,GAEAwlE,EAAA/B,EAAA,QACAjwD,EAAAouB,UAAAhqC,IAAAnpB,YAAA+2F,GACAxlE,EAAAylE,gBAAAD,EAAAhyD,EAAAouB,WACA5hC,EAAAylE,gBAAAD,EAAAxlE,GAGA,IAAAyyB,IAAA,IACA6kC,GAAAtW,KAAA,IAAAvuB,EAAA,IAAA6kC,EAAAtW,MACAsW,EAAApW,KAAA,IAAAzuB,EAAA,IAAA6kC,EAAApW,MAEAqiB,EAAA9xG,GACA2T,EAAAkgG,EAAA9xD,EAAA2C,KAAA3C,EAAAwiD,MACA1oB,OAAA,MACA3jB,KAAA,KACAhoC,UAAA,aAAA8wC,EAAA,OAAAA,EAAA,SAGA8wC,EAAAgC,GACAngG,EAAAkgG,EAAA9xD,EAAAikD,SAAA,GAAAjkD,EAAAikD,SAAA,IACAnqB,OAAA,OACA3jB,KAAA,KACAhoC,UAAA,aAAA8wC,EAAA,OAAAA,EAAA,SAGA8wC,EAAAiC,GACApgG,EAAAkgG,EAAA9xD,EAAAkkD,SAAA,GAAAlkD,EAAAkkD,SAAA,IACApqB,OAAA,QACA3jB,KAAA,KACAhoC,UAAA,aAAA8wC,EAAA,OAAAA,EAAA,SAIA,IAAA6yC,GAAA,SAAAI,EAAAC,GACA,WAAAD,EAAAjhE,EAAA,IAAAihE,EAAA5gE,EACA,KAAA6gE,EAAAlhE,EAAA,IAAAkhE,EAAA7gE,IAGAqkB,EAAAj5D,OAAAshF,EAAAnX,SAAAziC,IAAA4/D,WAAAhmB,EAAAnX,SAAAm9B,aACChqG,KAAA,mBAAA8f,eAAAtc,MAmBD,WAEA,YACA,IAAAy1B,GAAAz1B,KAAAwgF,EAAA/qD,EAAAijC,QAAAP,EAAA1iC,EAAAu+B,YACA4gD,EAAAn/E,EAAAw6B,UAAAurC,EAAA/lE,EAAA6kB,QAEAu6D,EAAA,SAAA1jE,EAAA2jE,GAEAA,KAAA,MACA,IAAAr5G,GAAA,cAAAq5G,EACAp/D,EAAAvE,EAAA11C,GACAmE,EAAAuxC,EAAAi2D,iBAqCA,OAnCA1xD,KACAA,EAAA,GAAAk/D,IACAr2G,KAAAqB,EAAA4I,GACAwjC,OAAApsC,EAAAkjD,IACAqL,QAAAqyB,EAAAryB,QACA9D,YAAA,SAAAt8C,EAAA6xE,GAGA,GAAAvuB,GAAAlgB,EAAAigC,UAAArjE,EAAA6xE,EAAA7xE,EAAAujD,eAAAvjD,EAAAgjE,aAAA,KACA,QAAA1f,EAAA9gC,KAAA8gC,EAAA5gC,MAEA65B,YAAA,SAAAv8C,EAAAi8D,GACAj8D,EAAAwZ,MAAAgJ,KAAAy5C,EAAA,QACAj8D,EAAAwZ,MAAAkJ,IAAAu5C,EAAA,SAEA1hD,SAAAk4D,EAAAl4D,SACAG,YAAA+3D,EAAA/3D,YACA2yB,WAAAogD,EAAApgD,WACAp9C,QAAA,SAAAU,EAAAjB,GAAyC,MAAAiB,GAAAV,QAAAP,IACzC6/B,MAAA6T,EAAA6pB,kBACAlyC,KACA49B,SAAAvV,EAAA83B,gBACA1iB,UAAA,gBACAD,UAAA,gBACAE,KAAA,WACA9pC,SAAA,oBACAsmB,OAAA,kBACAyjB,MAAA,iBACAE,WAAA,qBAGAjR,EAAAoc,QAAA3gB,EAAAwb,WACAxb,EAAA11C,GAAAi6C,EACAvE,EAAA5yC,KAAA,OAAAm3C,EAAAoc,UAEApc,GAGAq/D,EAAA,SAAA1jD,EAAAtvC,GACA,GAAAk7B,GAAA,SAAA+3D,GACA,SAAAjzF,EAAAizF,GAAA,CACA,GAAA78C,EAAAlE,SAAAlyC,EAAAizF,IAAA,CACA,GAAAzyF,GAAAR,EAAAizF,GAAAjuG,MAAA,WACAlL,EAAAkmB,EAAAizF,GAAAnwF,UAAA,EACA,OAAAwsC,GAAA2jD,GAAAzyF,EAAA1mB,EAEA,MAAAkmB,GAAAizF,GAGA,MAAA3jD,GAAA2jD,GAEA,QAAA/3D,EAAA,QAAAA,EAAA,QAGAujC,GAAAthF,OAAAu2B,EAAAmoC,gBAAA7zD,WAEAsgE,oBAAA,EACA/L,WAAA,SAAAvwD,GACA,aAAAA,EAAA,MAKAA,EAAA,gBAAAA,KAAA,MAAAA,EAAArQ,QAAA,MAAAqQ,EAAAknG,QAAAlnG,EAAA,GAAAA,EACA,gBAAAA,GAAAsO,SAAAwgC,eAAA9uC,OAEAqqE,cAAA,SAAAvjD,GACAggF,EAAA70G,MAAAuyD,eAAA19B,GACA70B,KAAAonG,kBAAAxpG,OAAAi3B,IAYA+1C,UAAA,SAAA78D,EAAAq8D,EAAAnvE,GACAA,OACA,IAAAo2D,GAAArxD,KAAAoxE,UAAArjE,GACAkmE,EAAA8gC,EAAA1jD,EAAA+Y,GACA8qC,EAAAjhC,EAAA,GAAA5iB,EAAA9gC,KACA4kF,EAAAlhC,EAAA,GAAA5iB,EAAA5gC,IACArc,EAAAnZ,EAAAqxB,UAAA,IACA8oF,EAAAhhG,EAAA,GACAihG,EADA,GACAjhG,EAAA8gG,EACAI,EAFA,GAEAlhG,EAAA+gG,EACAjxF,EAAA,EACAqxF,EAAAC,YAAA,WACAh1B,EAAAl2B,YAAAv8C,GACAwiB,KAAA8gC,EAAA9gC,KAAA8kF,GAAAnxF,EAAA,GACAuM,IAAA4gC,EAAA5gC,IAAA6kF,GAAApxF,EAAA,KAEA,MAAAjpB,EAAAuvE,MAAAvvE,EAAAuvE,KAAAtmD,EAAArgB,KAAAg6F,KAAAuX,MACAlxF,GACAkxF,IACA94F,OAAAm5F,cAAAF,GACA,MAAAt6G,EAAAyvE,UAAAzvE,EAAAyvE,aAbA,KAkBAlY,iBAAA,SAAAzkD,EAAA+mG,GACAD,EAAA70G,KAAA80G,GAAAtiD,iBAAAzkD,IAEA0kD,iBAAA,SAAA1kD,EAAA+mG,GACAD,EAAA70G,KAAA80G,GAAAriD,iBAAA1kD,IAEAq0D,cAAA,SAAAr0D,EAAA9S,EAAA65G,GACAD,EAAA70G,KAAA80G,GAAAxuD,UAAAv4C,EAAA9S,IAEA0yE,cAAA,SAAA5/D,EAAA9S,EAAA65G,GACAD,EAAA70G,KAAA80G,GAAAvuD,UAAAx4C,EAAA9S,IAEAknE,mBAAA,SAAAp0D,GACA,aAAAA,EAAAujD,gBAEA2Q,gBAAA,SAAAl0D,EAAA9S,GACA,UAEA0uF,gBAAA,SAAA57E,EAAA9S,GACA,UAEAy6G,mBAAA,SAAA3nG,GAEA,MADAA,GAAAyyE,EAAAliB,WAAAvwD,GACAA,EAAAujD,gBAAAvjD,EAAAujD,eAAAxJ,aAEAiiC,cAAA,SAAAvjB,GACA,MAAAA,GAAA,GAAAhgB,KAAA8G,kBAEAo7B,aAAA,SAAA36E,GACA,MAAAA,GAAAujD,gBAAAvjD,EAAAujD,eAAAtJ,OAAApoC,KAAA,UAEAkpE,aAAA,SAAAjvE,GACA,MAAAA,GAAA,GAAAja,GAEAojE,cAAA,SAAAwD,EAAAuZ,GAMA,GAAAhyE,GAAAy4D,EAAA,GAAAz4D,EACA,UAAAA,EAAAgjE,aACA,WAEA,IAAA/iB,GAAAwY,EAAA,GAAAxY,UAAAwY,EAAA,GAAAn2C,IACAtO,GAAqBwO,KAAAy9B,EAAA,GAAAv9B,IAAAu9B,EAAA,GACrB,IAAAjgD,EAAAujD,gBAAAvjD,EAAAgjE,eAAA/wE,KAAA4/D,eAAA,CACA,GAAA+1C,GAAA31G,KAAAoxE,UAAArjE,EAAAgjE,aACAhvD,GAAAwO,MAAAolF,EAAAplF,KACAxO,EAAA0O,KAAAklF,EAAAllF,IAEA,MAAA1O,IAEAi0D,cAAA,SAAAjoE,EAAAoN,EAAAqwC,GACAz9C,EAAAujD,gBACAvjD,EAAAujD,eAAA/F,UAAApwC,EAAAqwC,IAGA6b,oBAAA,SAAAt5D,EAAAu4C,GACAv4C,EAAAyyE,EAAAliB,WAAAvwD,GACAA,EAAAujD,gBACAvjD,EAAAujD,eAAAzJ,WAAAvB,IAEAqwB,aAAA,SAAA5oE,EAAAuvB,GACAvvB,EAAAujD,gBACAvjD,EAAAujD,eAAA5b,EAAAihC,aAAA5oE,EAAAuvB,IAEAs5C,aAAA,SAAA7oE,EAAAuvB,GACAvvB,EAAAwjD,gBAAAxjD,EAAAwjD,eAAA7zD,OAAA,GACAqQ,EAAAwjD,eAAA,GAAA7b,EAAAkhC,aAAA7oE,EAAAuvB,IAGA01B,WAAA,SAAAjlD,EAAAklD,GACA,GAAA2iD,GAAA32G,MAAA8K,UAAAyG,MAAAhU,KAAAmC,UAAA,GACA0iE,EAAAwzC,EAAA70G,KACAwgF,GAAA3hB,KAAA9wD,EAAA,SAAAo0C,GACAA,GAAAq+B,EAAAliB,WAAAnc,IACAA,EAAAtgD,KAAAjD,MAAAujD,EAAAyzD,GACAv0C,EAAArO,WAAAp0D,MAAAyiE,EAAAlf,MAGA+Q,SAAA,SAAAnlD,EAAAklD,GACA,GAAA2iD,GAAA32G,MAAA8K,UAAAyG,MAAAhU,KAAAmC,UAAA,GACA0iE,EAAAwzC,EAAA70G,KACAwgF,GAAA3hB,KAAA9wD,EAAA,SAAAo0C,GACAA,GAAAq+B,EAAAliB,WAAAnc,IACAA,EAAAtgD,KAAAjD,MAAAujD,EAAAyzD,GACAv0C,EAAAnO,SAAAt0D,MAAAyiE,EAAAlf,MAGAiR,gBAAA,SAAArlD,EAAA+kD,GACA,GAAA8iD,GAAA32G,MAAA8K,UAAAyG,MAAAhU,KAAAmC,UAAA,GACA0iE,EAAAwzC,EAAA70G,KACAwgF,GAAA3hB,KAAA9wD,EAAA,SAAAo0C,GACAA,GAAAq+B,EAAAliB,WAAAnc,IACAA,EAAAtgD,KAAAjD,MAAAujD,EAAAyzD,GACAv0C,EAAAjO,gBAAAx0D,MAAAyiE,EAAAlf,MAGAkR,oBAAA,SAAAtlD,GACA,GAAAszD,GAAAwzC,EAAA70G,KACAwgF,GAAA3hB,KAAA9wD,EAAA,SAAAo0C,GAAwCkf,EAAAhO,oBAAAmtB,EAAAliB,WAAAnc,OAExCmR,cAAA,SAAAvlD,EAAA+kD,EAAAS,GACA,GAAA8N,GAAAwzC,EAAA70G,KACAwgF,GAAA3hB,KAAA9wD,EAAA,SAAAo0C,GAAwCkf,EAAA/N,cAAAktB,EAAAliB,WAAAnc,GAAA2Q,EAAAS,MAExC+O,YACAvjE,MAAA,QAAA+vC,KAAA,OAAA0X,KAAA,OAAAgkB,KAAA,OACAnqB,KAAA,OAAAlO,IAAA,MAAAyc,KAAA,OAAA8b,SAAA,WACAnd,YAAA,eAEAgd,YACAC,KAAA,OAAAE,SAAA,YAEA6Y,SAAA,SAAAx1E,GACAA,EAAAujD,gBACAvjD,EAAAujD,eAAAjE,SAEAwoD,mBAAA,SAAA5iD,GACA4hD,EAAA70G,MAAAwxD,OAAAyB,IAEA6iD,wBAAA,SAAA7iD,GACA4hD,EAAA70G,MAAAyxD,SAAAwB,IAEA8iD,mBAAA,WACAlB,EAAA70G,MAAA0xD,eAEA1iC,QAAA,SAAAjhB,EAAAjF,EAAAi6C,EAAAC,GACAhjD,KAAAonG,kBAAAp4E,QAAAjhB,EAAAjF,EAAAi6C,EAAAC,IAEA01B,QAAA,WAEA,OAAAj9E,KAAAuE,MACA,IAAAvE,EAAAuC,QAAA,gBACAgC,KAAAvE,GAAAi3D,YAMA,SAAA7hB,GACA,GAAAmlE,GAAA,WACA,8BAAAr1G,KAAA0b,SAAA45F,iBAAA,KAAA55F,SAAA,YAAAA,SAAA8wB,KACA0D,IAEAllC,WAAAqqG,EAAA,GAGAA,MAEAx1B,EAAA/8C,OAECjnC,KAAA,mBAAA8f,eAAAtc,OzBk2TO,CACA,CACA,CACA,CACA,CAEF,SAAUlG,EAAQ4B,EAAqB1B,GAE7C,Y0B77uBA,SAAA+oB,GAAAmV,EAAAg+E,IAqFA,QAAAC,GAAAC,EAAAn1G,GACA,aAAAA,IACA,gBACA,MACA,cACA,MAAAA,EACA,gBACA,MAAAA,GAAAm1G,EACA,eACA,MAAAn1G,GAAAm1G,EAAA5zD,WAAA1mD,IA2BA,QAAAu6G,GACA55F,EACA65F,EACAC,OAEA,KAAAD,SAEA,IACAE,GADA9hF,EAAA6hF,GAAAE,CAEA,KACAD,EAAA9hF,EAAAjY,GAAA,IACG,MAAA7c,GAEH42G,KAEA,OAAA/6G,KAAA66G,GAAA,CACA,GAAA35G,GAAA25G,EAAA76G,EACA+6G,GAAA/6G,GAAAwD,MAAA2D,QAAAjG,KAAA6T,QAAA7T,EAEA,MAAA65G,GAGA,QAAAC,GAAAh6F,GACA,GAAAnd,KAIA,QAFAmd,IAAA4E,OAAAsH,QAAA,kBAMAlM,EAAAjf,MAAA,KAAAhC,QAAA,SAAAk7G,GACA,GAAApD,GAAAoD,EAAA/tF,QAAA,WAAAnrB,MAAA,KACA/B,EAAAq1B,GAAAwiF,EAAA52E,SACA//B,EAAA22G,EAAA51G,OAAA,EACAozB,GAAAwiF,EAAA1zF,KAAA,MACA,SAEA9jB,KAAAwD,EAAA7D,GACA6D,EAAA7D,GAAAkB,EACKsC,MAAA2D,QAAAtD,EAAA7D,IACL6D,EAAA7D,GAAAoG,KAAAlF,GAEA2C,EAAA7D,IAAA6D,EAAA7D,GAAAkB,KAIA2C,GAnBAA,EAsBA,QAAAq3G,GAAAt6G,GACA,GAAAiD,GAAAjD,EAAApC,OAAAsB,KAAAc,GAAAiB,IAAA,SAAA7B,GACA,GAAAkB,GAAAN,EAAAZ,EAEA,QAAAK,KAAAa,EACA,QAGA,WAAAA,EACA,MAAAi6G,IAAAn7G,EAGA,IAAAwD,MAAA2D,QAAAjG,GAAA,CACA,GAAA6W,KAWA,OAVA7W,GAAA6T,QAAAhV,QAAA,SAAAq7G,OACA/6G,KAAA+6G,IAGA,OAAAA,EACArjG,EAAA3R,KAAA+0G,GAAAn7G,IAEA+X,EAAA3R,KAAA+0G,GAAAn7G,GAAA,IAAAm7G,GAAAC,OAGArjG,EAAAoM,KAAA,KAGA,MAAAg3F,IAAAn7G,GAAA,IAAAm7G,GAAAj6G,KACGwe,OAAA,SAAAs4B,GAAuB,MAAAA,GAAA/1C,OAAA,IAAuBkiB,KAAA,SACjD,OAAAtgB,GAAA,IAAAA,EAAA,GAQA,QAAAw3G,GACAC,EACA7hE,EACA8hE,EACAC,GAEA,GAAAC,GAAAD,KAAAh8G,QAAA07G,eACAP,GACAzxG,KAAAuwC,EAAAvwC,MAAAoyG,KAAApyG,KACAwqC,KAAA4nE,KAAA5nE,SACA1uC,KAAAy0C,EAAAz0C,MAAA,IACAmJ,KAAAsrC,EAAAtrC,MAAA,GACA6S,MAAAy4B,EAAAz4B,UACA+lC,OAAAtN,EAAAsN,WACA20D,SAAAC,EAAAliE,EAAAgiE,GACAG,QAAAN,EAAAO,EAAAP,MAKA,OAHAC,KACAZ,EAAAY,eAAAI,EAAAJ,EAAAE,IAEAj9G,OAAAylC,OAAA02E,GAQA,QAAAkB,GAAAP,GAEA,IADA,GAAAz3G,MACAy3G,GACAz3G,EAAAwa,QAAAi9F,GACAA,IAAA7xG,MAEA,OAAA5F,GAGA,QAAA83G,GACAr5F,EACAw5F,GAEA,GAAA92G,GAAAsd,EAAAtd,KACAgc,EAAAsB,EAAAtB,UAAwB,KAAAA,SACxB,IAAA7S,GAAAmU,EAAAnU,SAAsB,KAAAA,MAAA,GAEtB,IAAA/M,GAAA06G,GAAAZ,CACA,QAAAl2G,GAAA,KAAA5D,EAAA4f,GAAA7S,EAGA,QAAA4tG,GAAAp9G,EAAAqF,GACA,MAAAA,KAAAg4G,GACAr9G,IAAAqF,IACGA,IAEArF,EAAAqG,MAAAhB,EAAAgB,KAEHrG,EAAAqG,KAAAkoB,QAAA+uF,GAAA,MAAAj4G,EAAAgB,KAAAkoB,QAAA+uF,GAAA,KACAt9G,EAAAwP,OAAAnK,EAAAmK,MACA+tG,EAAAv9G,EAAAqiB,MAAAhd,EAAAgd,UAEGriB,EAAAuK,OAAAlF,EAAAkF,QAEHvK,EAAAuK,OAAAlF,EAAAkF,MACAvK,EAAAwP,OAAAnK,EAAAmK,MACA+tG,EAAAv9G,EAAAqiB,MAAAhd,EAAAgd,QACAk7F,EAAAv9G,EAAAooD,OAAA/iD,EAAA+iD,UAOA,QAAAm1D,GAAAv9G,EAAAqF,OACA,KAAArF,cACA,KAAAqF,SAEA,IAAAm4G,GAAA39G,OAAAsB,KAAAnB,GACAy9G,EAAA59G,OAAAsB,KAAAkE,EACA,OAAAm4G,GAAAl6G,SAAAm6G,EAAAn6G,QAGAk6G,EAAA7qG,MAAA,SAAAtR,GAAqC,MAAAqB,QAAA1C,EAAAqB,MAAAqB,OAAA2C,EAAAhE,MAGrC,QAAAq8G,GAAA58F,EAAAvZ,GACA,MAGA,KAFAuZ,EAAAza,KAAAkoB,QAAA+uF,GAAA,KAAA15G,QACA2D,EAAAlB,KAAAkoB,QAAA+uF,GAAA,SAEA/1G,EAAAiI,MAAAsR,EAAAtR,OAAAjI,EAAAiI,OACAmuG,EAAA78F,EAAAuB,MAAA9a,EAAA8a,OAIA,QAAAs7F,GAAA78F,EAAAvZ,GACA,OAAAlG,KAAAkG,GACA,KAAAlG,IAAAyf,IACA,QAGA,UA8GA,QAAA88F,GAAAp4G,GAEA,KAAAA,EAAAq4G,SAAAr4G,EAAAs4G,SAAAt4G,EAAAu4G,UAEAv4G,EAAAw4G,sBAEAt8G,KAAA8D,EAAAqsD,QAAA,IAAArsD,EAAAqsD,QAAA,CAEA,GAAArsD,EAAAggD,eAAAhgD,EAAAggD,cAAAp3B,aAAA,CAEA,iBAAA7nB,KADAf,EAAAggD,cAAAp3B,aAAA,WACqC,OAMrC,MAHA5oB,GAAAklD,gBACAllD,EAAAklD,kBAEA,GAGA,QAAAuzD,GAAA7wG,GACA,GAAAA,EAEA,OADArC,GACA1H,EAAA,EAAmBA,EAAA+J,EAAA9J,OAAqBD,IAAA,CAExC,GADA0H,EAAAqC,EAAA/J,GACA,MAAA0H,EAAAmC,IACA,MAAAnC,EAEA,IAAAA,EAAAqC,WAAArC,EAAAkzG,EAAAlzG,EAAAqC,WACA,MAAArC,IAQA,QAAA4U,GAAAN,GACA,IAAAM,EAAAH,UAAA,CACAG,EAAAH,WAAA,EAEA0+F,GAAA7+F,EAEAxf,OAAAC,eAAAuf,EAAA1P,UAAA,WACA5P,IAAA,WAA0B,MAAA6F,MAAAsN,MAAAirG,WAG1Bt+G,OAAAC,eAAAuf,EAAA1P,UAAA,UACA5P,IAAA,WAA0B,MAAA6F,MAAAsN,MAAAkrG,SAG1B,IAAAz8G,GAAA,SAAAF,GAA4B,WAAAC,KAAAD,GAE5B48G,EAAA,SAAA13G,EAAA23G,GACA,GAAAj7G,GAAAsD,EAAA6F,SAAAqI,YACAlT,GAAA0B,IAAA1B,EAAA0B,IAAA8J,OAAAxL,EAAA0B,IAAAk7G,wBACAl7G,EAAAsD,EAAA23G,GAIAj/F,GAAAQ,OACA2+F,aAAA,WACA78G,EAAAiE,KAAA4G,SAAAqwG,UACAj3G,KAAAu4G,QAAAv4G,KAAA4G,SAAAqwG,OACAj3G,KAAAu4G,QAAA90E,KAAAzjC,MACAyZ,EAAA6sB,KAAAC,eAAAvmC,KAAA,SAAAA,KAAAu4G,QAAAM,QAAA39F,UAEAu9F,EAAAz4G,YAEAmmC,UAAA,WACAsyE,EAAAz4G,SAIAyZ,EAAAhO,UAAA,cAAAqtG,IACAr/F,EAAAhO,UAAA,cAAAstG,GAEA,IAAAzzG,GAAAmU,EAAAxY,OAAAk+B,qBAEA75B,GAAA0zG,iBAAA1zG,EAAA2zG,iBAAA3zG,EAAA4gC,SASA,QAAAgzE,GACAC,EACA1uG,EACA2uG,GAEA,GAAAC,GAAAF,EAAAn3F,OAAA,EACA,UAAAq3F,EACA,MAAAF,EAGA,UAAAE,GAAA,MAAAA,EACA,MAAA5uG,GAAA0uG,CAGA,IAAAvnF,GAAAnnB,EAAAjN,MAAA,IAKA47G,IAAAxnF,IAAAl0B,OAAA,IACAk0B,EAAA7vB,KAKA,QADAnB,GAAAu4G,EAAAxwF,QAAA,UAAAnrB,MAAA,KACAC,EAAA,EAAiBA,EAAAmD,EAAAlD,OAAqBD,IAAA,CACtC,GAAAu/F,GAAAp8F,EAAAnD,EACA,QAAAu/F,EACAprE,EAAA7vB,MACK,MAAAi7F,GACLprE,EAAA/vB,KAAAm7F,GASA,MAJA,KAAAprE,EAAA,IACAA,EAAA9X,QAAA,IAGA8X,EAAAhS,KAAA,KAGA,QAAApf,GAAAC,GACA,GAAAmJ,GAAA,GACA6S,EAAA,GAEA68F,EAAA74G,EAAAzC,QAAA,IACAs7G,IAAA,IACA1vG,EAAAnJ,EAAA+P,MAAA8oG,GACA74G,IAAA+P,MAAA,EAAA8oG,GAGA,IAAAC,GAAA94G,EAAAzC,QAAA,IAMA,OALAu7G,IAAA,IACA98F,EAAAhc,EAAA+P,MAAA+oG,EAAA,GACA94G,IAAA+P,MAAA,EAAA+oG,KAIA94G,OACAgc,QACA7S,QAIA,QAAA4vG,GAAA/4G,GACA,MAAAA,GAAAkoB,QAAA,aAyCA,QAAA+L,GAAAt3B,EAAAnC,GAQA,IAPA,GAKAqE,GALAi1B,KACA94B,EAAA,EACAsC,EAAA,EACA0C,EAAA,GACAg5G,EAAAx+G,KAAAy+G,WAAA,IAGA,OAAAp6G,EAAAq6G,GAAAllF,KAAAr3B,KAAA,CACA,GAAAmlB,GAAAjjB,EAAA,GACAs6G,EAAAt6G,EAAA,GACAmiE,EAAAniE,EAAAvB,KAKA,IAJA0C,GAAArD,EAAAoT,MAAAzS,EAAA0jE,GACA1jE,EAAA0jE,EAAAl/C,EAAA7kB,OAGAk8G,EACAn5G,GAAAm5G,EAAA,OADA,CAKA,GAAAn1F,GAAArnB,EAAAW,GACAqjD,EAAA9hD,EAAA,GACAqF,EAAArF,EAAA,GACA0J,EAAA1J,EAAA,GACAuoG,EAAAvoG,EAAA,GACAu6G,EAAAv6G,EAAA,GACAw6G,EAAAx6G,EAAA,EAGAmB,KACA8zB,EAAA1yB,KAAApB,GACAA,EAAA,GAGA,IAAAs5G,GAAA,MAAA34D,GAAA,MAAA38B,OAAA28B,EACA44D,EAAA,MAAAH,GAAA,MAAAA,EACAI,EAAA,MAAAJ,GAAA,MAAAA,EACAH,EAAAp6G,EAAA,IAAAm6G,EACAz+F,EAAAhS,GAAA6+F,CAEAtzE,GAAA1yB,MACA8C,QAAAlJ,IACA2lD,UAAA,GACAs4D,YACAO,WACAD,SACAD,UACAD,aACA9+F,UAAAk/F,EAAAl/F,GAAA8+F,EAAA,UAAAK,EAAAT,GAAA,SAcA,MATA37G,GAAAX,EAAAM,SACA+C,GAAArD,EAAAg9G,OAAAr8G,IAIA0C,GACA8zB,EAAA1yB,KAAApB,GAGA8zB,EAUA,QAAAsb,GAAAzyC,EAAAnC,GACA,MAAAo/G,GAAA3lF,EAAAt3B,EAAAnC,IASA,QAAAq/G,GAAAl9G,GACA,MAAAm9G,WAAAn9G,GAAAurB,QAAA,mBAAAzoB,GACA,UAAAA,EAAAC,WAAA,GAAAzD,SAAA,IAAAsiC,gBAUA,QAAAw7E,GAAAp9G,GACA,MAAAm9G,WAAAn9G,GAAAurB,QAAA,iBAAAzoB,GACA,UAAAA,EAAAC,WAAA,GAAAzD,SAAA,IAAAsiC,gBAOA,QAAAq7E,GAAA9lF,GAKA,OAHAxZ,GAAA,GAAA9b,OAAAs1B,EAAA72B,QAGAD,EAAA,EAAiBA,EAAA82B,EAAA72B,OAAmBD,IACpC,gBAAA82B,GAAA92B,KACAsd,EAAAtd,GAAA,GAAAg1B,QAAA,OAAA8B,EAAA92B,GAAAud,QAAA,MAIA,iBAAA3e,EAAAwV,GAMA,OALApR,GAAA,GACA8G,EAAAlL,MACApB,EAAA4W,MACA+kG,EAAA37G,EAAAw/G,OAAAH,EAAAI,mBAEAj9G,EAAA,EAAmBA,EAAA82B,EAAA72B,OAAmBD,IAAA,CACtC,GAAAk9G,GAAApmF,EAAA92B,EAEA,oBAAAk9G,GAAA,CAMA,GACA3d,GADA7gG,EAAAoL,EAAAozG,EAAAh2G,KAGA,UAAAxI,EAAA,CACA,GAAAw+G,EAAAV,SAAA,CAEAU,EAAAZ,UACAt5G,GAAAk6G,EAAAv5D,OAGA,UAEA,SAAAnQ,WAAA,aAAA0pE,EAAAh2G,KAAA,mBAIA,GAAAwf,GAAAhoB,GAAA,CACA,IAAAw+G,EAAAX,OACA,SAAA/oE,WAAA,aAAA0pE,EAAAh2G,KAAA,kCAAA/H,KAAAC,UAAAV,GAAA,IAGA,QAAAA,EAAAuB,OAAA,CACA,GAAAi9G,EAAAV,SACA,QAEA,UAAAhpE,WAAA,aAAA0pE,EAAAh2G,KAAA,qBAIA,OAAAgL,GAAA,EAAuBA,EAAAxT,EAAAuB,OAAkBiS,IAAA,CAGzC,GAFAqtF,EAAA4Z,EAAAz6G,EAAAwT,KAEAoL,EAAAtd,GAAAkD,KAAAq8F,GACA,SAAA/rD,WAAA,iBAAA0pE,EAAAh2G,KAAA,eAAAg2G,EAAA3/F,QAAA,oBAAApe,KAAAC,UAAAmgG,GAAA,IAGAv8F,KAAA,IAAAkP,EAAAgrG,EAAAv5D,OAAAu5D,EAAAjB,WAAA1c,OApBA,CA4BA,GAFAA,EAAA2d,EAAAb,SAAAU,EAAAr+G,GAAAy6G,EAAAz6G,IAEA4e,EAAAtd,GAAAkD,KAAAq8F,GACA,SAAA/rD,WAAA,aAAA0pE,EAAAh2G,KAAA,eAAAg2G,EAAA3/F,QAAA,oBAAAgiF,EAAA,IAGAv8F,IAAAk6G,EAAAv5D,OAAA47C,OArDAv8F,IAAAk6G,EAwDA,MAAAl6G,IAUA,QAAA05G,GAAA/8G,GACA,MAAAA,GAAAurB,QAAA,6BAAmC,QASnC,QAAAuxF,GAAArS,GACA,MAAAA,GAAAl/E,QAAA,wBAUA,QAAAiyF,GAAAxpF,EAAA71B,GAEA,MADA61B,GAAA71B,OACA61B,EASA,QAAAypF,GAAA5/G,GACA,MAAAA,GAAA6/G,UAAA,OAUA,QAAAC,GAAAt6G,EAAAlF,GAEA,GAAAy/G,GAAAv6G,EAAAsT,OAAAhN,MAAA,YAEA,IAAAi0G,EACA,OAAAv9G,GAAA,EAAmBA,EAAAu9G,EAAAt9G,OAAmBD,IACtClC,EAAAsG,MACA8C,KAAAlH,EACA2jD,OAAA,KACAs4D,UAAA,KACAO,UAAA,EACAD,QAAA,EACAD,SAAA,EACAD,UAAA,EACA9+F,QAAA,MAKA,OAAA4/F,GAAAn6G,EAAAlF,GAWA,QAAA0/G,GAAAx6G,EAAAlF,EAAAN,GAGA,OAFAq4G,MAEA71G,EAAA,EAAiBA,EAAAgD,EAAA/C,OAAiBD,IAClC61G,EAAAzxG,KAAAq5G,EAAAz6G,EAAAhD,GAAAlC,EAAAN,GAAA8Y,OAKA,OAAA6mG,GAFA,GAAAnoF,QAAA,MAAA6gF,EAAA1zF,KAAA,SAAAi7F,EAAA5/G,IAEAM,GAWA,QAAA4/G,GAAA16G,EAAAlF,EAAAN,GACA,MAAAmgH,GAAA1mF,EAAAj0B,EAAAxF,GAAAM,EAAAN,GAWA,QAAAmgH,GAAA7mF,EAAAh5B,EAAAN,GACAkpB,GAAA5oB,KACAN,EAAiCM,GAAAN,EACjCM,MAGAN,OAOA,QALAogH,GAAApgH,EAAAogH,OACAxxF,GAAA,IAAA5uB,EAAA4uB,IACAusF,EAAA,GAGA34G,EAAA,EAAiBA,EAAA82B,EAAA72B,OAAmBD,IAAA,CACpC,GAAAk9G,GAAApmF,EAAA92B,EAEA,oBAAAk9G,GACAvE,GAAA+D,EAAAQ,OACK,CACL,GAAAv5D,GAAA+4D,EAAAQ,EAAAv5D,QACAp4C,EAAA,MAAA2xG,EAAA3/F,QAAA,GAEAzf,GAAAsG,KAAA84G,GAEAA,EAAAX,SACAhxG,GAAA,MAAAo4C,EAAAp4C,EAAA,MAOAA,EAJA2xG,EAAAV,SACAU,EAAAZ,QAGA34D,EAAA,IAAAp4C,EAAA,KAFA,MAAAo4C,EAAA,IAAAp4C,EAAA,MAKAo4C,EAAA,IAAAp4C,EAAA,IAGAotG,GAAAptG,GAIA,GAAA0wG,GAAAS,EAAAl/G,EAAAy+G,WAAA,KACA4B,EAAAlF,EAAA5lG,OAAAkpG,EAAAh8G,UAAAg8G,CAkBA,OAZA2B,KACAjF,GAAAkF,EAAAlF,EAAA5lG,MAAA,GAAAkpG,EAAAh8G,QAAA04G,GAAA,MAAAsD,EAAA,WAIAtD,GADAvsF,EACA,IAIAwxF,GAAAC,EAAA,SAAA5B,EAAA,MAGAkB,EAAA,GAAAnoF,QAAA,IAAA2jF,EAAAyE,EAAA5/G,IAAAM,GAeA,QAAA2/G,GAAAz6G,EAAAlF,EAAAN,GAQA,MAPAkpB,IAAA5oB,KACAN,EAAiCM,GAAAN,EACjCM,MAGAN,QAEAwF,YAAAgyB,QACAsoF,EAAAt6G,EAAkD,GAGlD0jB,GAAA1jB,GACAw6G,EAA2C,EAA8B,EAAAhgH,GAGzEkgH,EAA0C,EAA8B,EAAAlgH,GAYxE,QAAAsgH,GACA96G,EACA+hD,EACAg5D,GAEA,IAIA,OAFAC,GAAAh7G,KACAg7G,GAAAh7G,GAAA1C,GAAA8xC,QAAApvC,KACA+hD,OAAiCi4D,QAAA,IAC9B,MAAA76G,GAIH,UAMA,QAAA87G,GACAC,EACAC,EACAC,EACAC,GAGA,GAAAC,GAAAH,MACAI,EAAAH,GAAA5hH,OAAAqB,OAAA,MACA2gH,EAAAH,GAAA7hH,OAAAqB,OAAA,KAEAqgH,GAAAngH,QAAA,SAAA46G,GACA8F,EAAAH,EAAAC,EAAAC,EAAA7F,IAIA,QAAA34G,GAAA,EAAAiB,EAAAq9G,EAAAr+G,OAAsCD,EAAAiB,EAAOjB,IAC7C,MAAAs+G,EAAAt+G,KACAs+G,EAAAl6G,KAAAk6G,EAAA99G,OAAAR,EAAA,OACAiB,IACAjB,IAIA,QACAs+G,WACAC,UACAC,WAIA,QAAAC,GACAH,EACAC,EACAC,EACA7F,EACAlxG,EACAi3G,GAEA,GAAA17G,GAAA21G,EAAA31G,KACAkE,EAAAyxG,EAAAzxG,KAUAy3G,EAAAC,EAAA57G,EAAAyE,GACA6xG,GACAt2G,KAAA27G,EACAE,MAAAC,EAAAH,GACArjG,WAAAq9F,EAAAr9F,aAAqC/d,QAAAo7G,EAAA3qG,WACrC+wG,aACA73G,OACAO,SACAi3G,UACAM,SAAArG,EAAAqG,SACA1wF,YAAAqqF,EAAArqF,YACAojB,KAAAinE,EAAAjnE,SACAzqC,MAAA,MAAA0xG,EAAA1xG,SAEA0xG,EAAAr9F,WACAq9F,EAAA1xG,OACW1J,QAAAo7G,EAAA1xG,OA2BX,IAxBA0xG,EAAA5uG,UAgBA4uG,EAAA5uG,SAAAhM,QAAA,SAAA2J,GACA,GAAAu3G,GAAAP,EACA3C,EAAA2C,EAAA,IAAAh3G,EAAA,UACArJ,EACAogH,GAAAH,EAAAC,EAAAC,EAAA92G,EAAA4xG,EAAA2F,SAIA5gH,KAAAs6G,EAAAx+E,MACA,GAAA34B,MAAA2D,QAAAwzG,EAAAx+E,OACAw+E,EAAAx+E,MAAAp8B,QAAA,SAAAo8B,GACA,GAAA+kF,IACAl8G,KAAAm3B,EACApwB,SAAA4uG,EAAA5uG,SAEA00G,GAAAH,EAAAC,EAAAC,EAAAU,EAAAz3G,EAAA6xG,EAAAt2G,YAEK,CACL,GAAAk8G,IACAl8G,KAAA21G,EAAAx+E,MACApwB,SAAA4uG,EAAA5uG,SAEA00G,GAAAH,EAAAC,EAAAC,EAAAU,EAAAz3G,EAAA6xG,EAAAt2G,MAIAu7G,EAAAjF,EAAAt2G,QACAs7G,EAAAl6G,KAAAk1G,EAAAt2G,MACAu7G,EAAAjF,EAAAt2G,MAAAs2G,GAGApyG,IACAs3G,EAAAt3G,KACAs3G,EAAAt3G,GAAAoyG,IAWA,QAAAwF,GAAA97G,GACA,GAAA67G,GAAAv+G,GAAA0C,EAQA,OAAA67G,GAGA,QAAAD,GAAA57G,EAAAyE,GAEA,MADAzE,KAAAkoB,QAAA,UACA,MAAAloB,EAAA,GAAwBA,EACxB,MAAAyE,EAAuBzE,EACvB+4G,EAAAt0G,EAAA,SAAAzE,GAMA,QAAAm8G,GACAn6E,EACAvnB,EACAk+F,EACAnC,GAEA,GAAAxyF,GAAA,gBAAAge,IAAwChiC,KAAAgiC,GAAYA,CAEpD,IAAAhe,EAAA9f,MAAA8f,EAAAo4F,YACA,MAAAp4F,EAIA,KAAAA,EAAAhkB,MAAAgkB,EAAA+9B,QAAAtnC,EAAA,CACAuJ,EAAAq4F,KAAoBr4F,GACpBA,EAAAo4F,aAAA,CACA,IAAAr6D,GAAAs6D,OAAiC5hG,EAAAsnC,QAAA/9B,EAAA+9B,OACjC,IAAAtnC,EAAAvW,KACA8f,EAAA9f,KAAAuW,EAAAvW,KACA8f,EAAA+9B,aACK,IAAAtnC,EAAAm8F,QAAA,CACL,GAAA0F,GAAA7hG,EAAAm8F,QAAAn8F,EAAAm8F,QAAA35G,OAAA,GAAA+C,IACAgkB,GAAAhkB,KAAA86G,EAAAwB,EAAAv6D,EAAA,QAAAtnC,EAAA,MAIA,MAAAuJ,GAGA,GAAAu4F,GAAAx8G,EAAAikB,EAAAhkB,MAAA,IACAw8G,EAAA/hG,KAAAza,MAAA,IACAA,EAAAu8G,EAAAv8G,KACAy4G,EAAA8D,EAAAv8G,KAAAw8G,EAAA7D,GAAA30F,EAAA20F,QACA6D,EAEAxgG,EAAA45F,EACA2G,EAAAvgG,MACAgI,EAAAhI,MACAw6F,KAAAh8G,QAAAw7G,YAGA7sG,EAAA6a,EAAA7a,MAAAozG,EAAApzG,IAKA,OAJAA,IAAA,MAAAA,EAAAoY,OAAA,KACApY,EAAA,IAAAA,IAIAizG,aAAA,EACAp8G,OACAgc,QACA7S,QAIA,QAAAkzG,GAAA1iH,EAAAqF,GACA,OAAAhE,KAAAgE,GACArF,EAAAqB,GAAAgE,EAAAhE,EAEA,OAAArB,GAMA,QAAA8iH,GACAvB,EACA1E,GAOA,QAAAkG,GAAAxB,GACAD,EAAAC,EAAAI,EAAAC,EAAAC,GAGA,QAAAl1G,GACA07B,EACA26E,EACApG,GAEA,GAAA9hE,GAAA0nE,EAAAn6E,EAAA26E,GAAA,EAAAnG,GACAtyG,EAAAuwC,EAAAvwC,IAEA,IAAAA,EAAA,CACA,GAAAoyG,GAAAkF,EAAAt3G,GAIA04G,EAAAtG,EAAAuF,MAAA/gH,KACA4f,OAAA,SAAA1f,GAAgC,OAAAA,EAAAw+G,WAChC38G,IAAA,SAAA7B,GAA6B,MAAAA,GAAAkJ,MAM7B,IAJA,gBAAAuwC,GAAAsN,SACAtN,EAAAsN,WAGA46D,GAAA,gBAAAA,GAAA56D,OACA,OAAA/mD,KAAA2hH,GAAA56D,SACA/mD,IAAAy5C,GAAAsN,SAAA66D,EAAAr/G,QAAAvC,IAAA,IACAy5C,EAAAsN,OAAA/mD,GAAA2hH,EAAA56D,OAAA/mD,GAKA,IAAAs7G,EAEA,MADA7hE,GAAAz0C,KAAA86G,EAAAxE,EAAAt2G,KAAAy0C,EAAAsN,OAAA,gBAAA79C,EAAA,KACA24G,EAAAvG,EAAA7hE,EAAA8hE,OAEK,IAAA9hE,EAAAz0C,KAAA,CACLy0C,EAAAsN,SACA,QAAA/kD,GAAA,EAAqBA,EAAAs+G,EAAAr+G,OAAqBD,IAAA,CAC1C,GAAAgD,GAAAs7G,EAAAt+G,GACA8/G,EAAAvB,EAAAv7G,EACA,IAAA+8G,EAAAD,EAAAjB,MAAApnE,EAAAz0C,KAAAy0C,EAAAsN,QACA,MAAA86D,GAAAC,EAAAroE,EAAA8hE,IAKA,MAAAsG,GAAA,KAAApoE,GAGA,QAAAunE,GACA1F,EACA7hE,GAEA,GAAAuoE,GAAA1G,EAAA0F,SACAA,EAAA,kBAAAgB,GACAA,EAAA3G,EAAAC,EAAA7hE,EAAA,KAAA+hE,IACAwG,CAMA,IAJA,gBAAAhB,KACAA,GAAkBh8G,KAAAg8G,KAGlBA,GAAA,gBAAAA,GAMA,MAAAa,GAAA,KAAApoE,EAGA,IAAA9jB,GAAAqrF,EACA93G,EAAAysB,EAAAzsB,KACAlE,EAAA2wB,EAAA3wB,KACAgc,EAAAy4B,EAAAz4B,MACA7S,EAAAsrC,EAAAtrC,KACA44C,EAAAtN,EAAAsN,MAKA,IAJA/lC,EAAA2U,EAAAjzB,eAAA,SAAAizB,EAAA3U,QACA7S,EAAAwnB,EAAAjzB,eAAA,QAAAizB,EAAAxnB,OACA44C,EAAApxB,EAAAjzB,eAAA,UAAAizB,EAAAoxB,SAEA79C,EAAA,CAEAs3G,EAAAt3G,EAIA,OAAAoC,IACA81G,aAAA,EACAl4G,OACA8X,QACA7S,OACA44C,cACO1mD,GAAAo5C,GACF,GAAAz0C,EAAA,CAEL,GAAAs8G,GAAAW,EAAAj9G,EAAAs2G,EAIA,OAAAhwG,IACA81G,aAAA,EACAp8G,KAJA86G,EAAAwB,EAAAv6D,EAAA,6BAAAu6D,EAAA,KAKAtgG,QACA7S,YACO9N,GAAAo5C,GAKP,MAAAooE,GAAA,KAAApoE,GAIA,QAAAtd,GACAm/E,EACA7hE,EACAinE,GAEA,GAAAwB,GAAApC,EAAAY,EAAAjnE,EAAAsN,OAAA,4BAAA25D,EAAA,KACAyB,EAAA72G,GACA81G,aAAA,EACAp8G,KAAAk9G,GAEA,IAAAC,EAAA,CACA,GAAAvG,GAAAuG,EAAAvG,QACAwG,EAAAxG,IAAA35G,OAAA,EAEA,OADAw3C,GAAAsN,OAAAo7D,EAAAp7D,OACA86D,EAAAO,EAAA3oE,GAEA,MAAAooE,GAAA,KAAApoE,GAGA,QAAAooE,GACAvG,EACA7hE,EACA8hE,GAEA,MAAAD,MAAA0F,SACAA,EAAA1F,EAAAC,GAAA9hE,GAEA6hE,KAAAoF,QACAvkF,EAAAm/E,EAAA7hE,EAAA6hE,EAAAoF,SAEArF,EAAAC,EAAA7hE,EAAA8hE,EAAAC,GAvJA,GAAAl5F,GAAA29F,EAAAC,GACAI,EAAAh+F,EAAAg+F,SACAC,EAAAj+F,EAAAi+F,QACAC,EAAAl+F,EAAAk+F,OAuJA,QACAl1G,QACAo2G,aAIA,QAAAK,GACAlB,EACA77G,EACA+hD,GAEA,GAAAjgC,GAAA9hB,EAAAsG,MAAAu1G,EAEA,KAAA/5F,EACA,QACG,KAAAigC,EACH,QAGA,QAAA/kD,GAAA,EAAAuJ,EAAAub,EAAA7kB,OAAiCD,EAAAuJ,IAASvJ,EAAA,CAC1C,GAAAhC,GAAA6gH,EAAA/gH,KAAAkC,EAAA,GACAd,EAAA,gBAAA4lB,GAAA9kB,GAAAqgH,mBAAAv7F,EAAA9kB,IAAA8kB,EAAA9kB,EACAhC,KACA+mD,EAAA/mD,EAAAkJ,MAAAhI,GAIA,SAGA,QAAA+gH,GAAAj9G,EAAAs2G,GACA,MAAAmC,GAAAz4G,EAAAs2G,EAAA7xG,OAAA6xG,EAAA7xG,OAAAzE,KAAA,QAQA,QAAAs9G,KACAzhG,OAAAiK,iBAAA,oBAAA3mB,GACAo+G,IACAp+G,EAAA2zD,OAAA3zD,EAAA2zD,MAAA93D,KACAwiH,GAAAr+G,EAAA2zD,MAAA93D,OAKA,QAAAyiH,GACAjH,EACA93G,EACA8E,EACAk6G,GAEA,GAAAlH,EAAAmH,IAAA,CAIA,GAAAC,GAAApH,EAAAh8G,QAAAqjH,cACAD,IASApH,EAAAmH,IAAAr5E,UAAA,WACA,GAAAmnB,GAAAqyD,IACAC,EAAAH,EAAAl/G,EAAA8E,EAAAk6G,EAAAjyD,EAAA,KACA,IAAAsyD,EAAA,CAGA,GAAApiH,GAAA,gBAAAoiH,EACA,IAAApiH,GAAA,gBAAAoiH,GAAA/hE,SAAA,CACA,GAAA1uC,GAAAsO,SAAAM,cAAA6hG,EAAA/hE,SACA1uC,GACAm+C,EAAAuyD,EAAA1wG,GACO2wG,EAAAF,KACPtyD,EAAAyyD,EAAAH,QAEKpiH,IAAAsiH,EAAAF,KACLtyD,EAAAyyD,EAAAH,GAGAtyD,IACA5vC,OAAAsiG,SAAA1yD,EAAAzY,EAAAyY,EAAApY,OAKA,QAAAkqE,KACA,GAAAviH,GAAAojH,IACApjH,KACAqjH,GAAArjH,IACAg4C,EAAAn3B,OAAAwpC,YACAhS,EAAAx3B,OAAAupC,cAKA,QAAA04D,KACA,GAAA9iH,GAAAojH,IACA,IAAApjH,EACA,MAAAqjH,IAAArjH,GAIA,QAAAgjH,GAAA1wG,GACA,GAAAgxG,GAAA1iG,SAAAk0B,gBACAyuE,EAAAD,EAAA7uF,wBACA+uF,EAAAlxG,EAAAmiB,uBACA,QACAujB,EAAAwrE,EAAA1uF,KAAAyuF,EAAAzuF,KACAujB,EAAAmrE,EAAAxuF,IAAAuuF,EAAAvuF,KAIA,QAAAiuF,GAAAriH,GACA,MAAAk4D,GAAAl4D,EAAAo3C,IAAA8gB,EAAAl4D,EAAAy3C,GAGA,QAAA6qE,GAAAtiH,GACA,OACAo3C,EAAA8gB,EAAAl4D,EAAAo3C,GAAAp3C,EAAAo3C,EAAAn3B,OAAAwpC,YACAhS,EAAAygB,EAAAl4D,EAAAy3C,GAAAz3C,EAAAy3C,EAAAx3B,OAAAupC,aAIA,QAAA0O,GAAA14D,GACA,sBAAAA,GA2BA,QAAAqjH,KACA,MAAAC,IAAAC,MAAAC,QAAA,GAGA,QAAAR,MACA,MAAAS,IAGA,QAAArB,IAAAxiH,GACA6jH,GAAA7jH,EAGA,QAAA8jH,IAAAjc,EAAA36E,GACAq1F,GAGA,IAAAnF,GAAAv8F,OAAAu8F,OACA,KACAlwF,EACAkwF,EAAA2G,cAA4B/jH,IAAA6jH,IAAY,GAAAhc,IAExCgc,GAAAJ,IACArG,EAAA0G,WAAyB9jH,IAAA6jH,IAAY,GAAAhc,IAElC,MAAA1jG,GACH0c,OAAA44B,SAAAvsB,EAAA,oBAAA26E,IAIA,QAAAkc,IAAAlc,GACAic,GAAAjc,GAAA,GAKA,QAAAmc,IAAA3vG,EAAAzR,EAAAirB,GACA,GAAAkhD,GAAA,SAAAzsE,GACAA,GAAA+R,EAAApS,OACA4rB,IAEAxZ,EAAA/R,GACAM,EAAAyR,EAAA/R,GAAA,WACAysE,EAAAzsE,EAAA,KAGAysE,EAAAzsE,EAAA,GAIAysE,GAAA,GAyKA,QAAAk1C,IAAAj1G,GACA,IAAAA,EACA,GAAAtJ,GAAA,CAEA,GAAAw+G,GAAAtjG,SAAAM,cAAA,OACAlS,GAAAk1G,KAAAn3F,aAAA,iBAEA/d,GAAA,GAQA,OAJA,MAAAA,EAAAuX,OAAA,KACAvX,EAAA,IAAAA,GAGAA,EAAAke,QAAA,UAGA,QAAAi3F,IACA1kG,EACAuJ,GAEA,GAAAhnB,GACAqG,EAAAD,KAAAC,IAAAoX,EAAAxd,OAAA+mB,EAAA/mB,OACA,KAAAD,EAAA,EAAaA,EAAAqG,GACboX,EAAAzd,KAAAgnB,EAAAhnB,GADsBA,KAKtB,OACAwvC,QAAAxoB,EAAAjU,MAAA,EAAA/S,GACAoiH,UAAAp7F,EAAAjU,MAAA/S,GACAqiH,YAAA5kG,EAAA1K,MAAA/S,IAIA,QAAAsiH,IACAC,EACAr7G,EACApG,EACAg0F,GAEA,GAAA0tB,GAAAC,GAAAF,EAAA,SAAA5/G,EAAA+wC,EAAApqC,EAAAtL,GACA,GAAA0kH,GAAAC,GAAAhgH,EAAAuE,EACA,IAAAw7G,EACA,MAAAlhH,OAAA2D,QAAAu9G,GACAA,EAAA7iH,IAAA,SAAA6iH,GAAsC,MAAA5hH,GAAA4hH,EAAAhvE,EAAApqC,EAAAtL,KACtC8C,EAAA4hH,EAAAhvE,EAAApqC,EAAAtL,IAGA,OAAA4kH,IAAA9tB,EAAA0tB,EAAA1tB,UAAA0tB,GAGA,QAAAG,IACAhgH,EACA3E,GAMA,MAJA,kBAAA2E,KAEAA,EAAAk4G,GAAAp5G,OAAAkB,IAEAA,EAAAnF,QAAAQ,GAGA,QAAA6kH,IAAAR,GACA,MAAAC,IAAAD,EAAA,mBAAAS,IAAA,GAGA,QAAAC,IAAAvzE,GACA,MAAA8yE,IAAA9yE,EAAA,oBAAAszE,IAGA,QAAAA,IAAAJ,EAAAhvE,GACA,GAAAA,EACA,kBACA,MAAAgvE,GAAAvhH,MAAAuyC,EAAAxyC,YAKA,QAAA8hH,IACAZ,EACAp7E,EACAi8E,GAEA,MAAAX,IAAAF,EAAA,4BAAAM,EAAA39F,EAAAzb,EAAAtL,GACA,MAAAklH,IAAAR,EAAAp5G,EAAAtL,EAAAgpC,EAAAi8E,KAIA,QAAAC,IACAR,EACAp5G,EACAtL,EACAgpC,EACAi8E,GAEA,gBAAAvhH,EAAA8E,EAAAwgB,GACA,MAAA07F,GAAAhhH,EAAA8E,EAAA,SAAAqlB,GACA7E,EAAA6E,GACA,kBAAAA,IACAmb,EAAA5iC,KAAA,WAMA++G,GAAAt3F,EAAAviB,EAAAy1G,UAAA/gH,EAAAilH,QAOA,QAAAE,IACAt3F,EACAkzF,EACA/gH,EACAilH,GAEAlE,EAAA/gH,GACA6tB,EAAAkzF,EAAA/gH,IACGilH,KACH/0G,WAAA,WACAi1G,GAAAt3F,EAAAkzF,EAAA/gH,EAAAilH,IACK,IAIL,QAAAG,IAAAxJ,GACA,gBAAAl4G,EAAA8E,EAAAwgB,GACA,GAAAq8F,IAAA,EACArgF,EAAA,EACAp/B,EAAA,IAEA6+G,IAAA7I,EAAA,SAAAj3G,EAAAoiB,EAAAzb,EAAAtL,GAMA,qBAAA2E,QAAAtE,KAAAsE,EAAAsU,IAAA,CACAosG,GAAA,EACArgF,GAEA,IAuBAnhC,GAvBA+L,EAAAvL,GAAA,SAAAihH,GAEA3gH,EAAA0K,SAAA,kBAAAi2G,GACAA,EACAzI,GAAAp5G,OAAA6hH,GACAh6G,EAAAgS,WAAAtd,GAAAslH,IACAtgF,GACA,GACAhc,MAIAnZ,EAAAxL,GAAA,SAAAyL,GACA,GAAA6W,GAAA,qCAAA3mB,EAAA,KAAA8P,CAEAlK,KACAA,EAAA2/G,GAAAz1G,GACAA,EACA,GAAA4uF,OAAA/3E,GACAqC,EAAApjB,KAKA,KACA/B,EAAAc,EAAAiL,EAAAC,GACS,MAAA1L,GACT0L,EAAA1L,GAEA,GAAAN,EACA,qBAAAA,GAAAkM,KACAlM,EAAAkM,KAAAH,EAAAC,OACW,CAEX,GAAAd,GAAAlL,EAAAmM,SACAjB,IAAA,kBAAAA,GAAAgB,MACAhB,EAAAgB,KAAAH,EAAAC,OAOAw1G,GAAoBr8F,KAIpB,QAAAy7F,IACA7I,EACAh5G,GAEA,MAAAgiH,IAAAhJ,EAAA/5G,IAAA,SAAAilB,GACA,MAAAtoB,QAAAsB,KAAAgnB,EAAAxJ,YAAAzb,IAAA,SAAA7B,GAAyD,MAAA4C,GACzDkkB,EAAAxJ,WAAAtd,GACA8mB,EAAAi6F,UAAA/gH,GACA8mB,EAAA9mB,QAKA,QAAA4kH,IAAAxiH,GACA,MAAAoB,OAAA8K,UAAAxF,OAAA3F,SAAAf,GAOA,QAAAiC,IAAAzB,GACA,GAAA0B,IAAA,CACA,mBACA,IAAAA,EAEA,MADAA,IAAA,EACA1B,EAAAO,MAAAoB,KAAArB,YAIA,QAAAqiH,IAAAlgH,GACA,MAAA7G,QAAA8P,UAAArN,SAAAF,KAAAsE,GAAA9C,QAAA,YAyEA,QAAAwmG,IAAA/5F,GACA,GAAAhK,GAAA6b,OAAA44B,SAAA+rE,QAIA,OAHAx2G,IAAA,IAAAhK,EAAAzC,QAAAyM,KACAhK,IAAA+P,MAAA/F,EAAA/M,UAEA+C,GAAA,KAAA6b,OAAA44B,SAAAgsE,OAAA5kG,OAAA44B,SAAAtrC,KAmEA,QAAAu3G,IAAA12G,GACA,GAAAyqC,GAAAsvD,GAAA/5F,EACA,YAAA9J,KAAAu0C,GAIA,MAHA54B,QAAA44B,SAAAvsB,QACA6wF,EAAA/uG,EAAA,KAAAyqC,KAEA,EAIA,QAAAksE,MACA,GAAA3gH,GAAA4gH,IACA,aAAA5gH,EAAAuhB,OAAA,KAGAs/F,GAAA,IAAA7gH,IACA,GAGA,QAAA4gH,MAGA,GAAAE,GAAAjlG,OAAA44B,SAAAqsE,KACAxjH,EAAAwjH,EAAAvjH,QAAA,IACA,YAAAD,EAAA,GAAAwjH,EAAA/wG,MAAAzS,EAAA,GAGA,QAAAyjH,IAAA/gH,GACA6b,OAAA44B,SAAAtrC,KAAAnJ,EAGA,QAAA6gH,IAAA7gH,GACA,GAAAhD,GAAA6e,OAAA44B,SAAAqsE,KAAAvjH,QAAA,IACAse,QAAA44B,SAAAvsB,QACArM,OAAA44B,SAAAqsE,KAAA/wG,MAAA,EAAA/S,GAAA,EAAAA,EAAA,OAAAgD,GAuPA,QAAAghH,IAAAlkH,EAAAc,GAEA,MADAd,GAAAsE,KAAAxD,GACA,WACA,GAAAZ,GAAAF,EAAAS,QAAAK,EACAZ,IAAA,GAAiBF,EAAAU,OAAAR,EAAA,IAIjB,QAAAikH,IAAAj3G,EAAA0sG,EAAAhrE,GACA,GAAA1rC,GAAA,SAAA0rC,EAAA,IAAAgrE,GACA,OAAA1sG,GAAA+uG,EAAA/uG,EAAA,IAAAhK,KAl4EA,GA8bA63G,IA9bAQ,IACAn0G,KAAA,cACAmQ,YAAA,EACApQ,OACAC,MACA5J,KAAA+B,OACA9B,QAAA,YAGAE,OAAA,SAAAsnB,EAAAzE,GACA,GAAArZ,GAAAqZ,EAAArZ,MACA8C,EAAAuW,EAAAvW,SACAtC,EAAA6Y,EAAA7Y,OACAqC,EAAAwW,EAAAxW,IAEAA,GAAAo6G,YAAA,CAaA,KATA,GAAAxtG,GAAAjP,EAAAqT,eACA5T,EAAAD,EAAAC,KACAyxG,EAAAlxG,EAAA08G,OACAtjH,EAAA4G,EAAA28G,mBAAA38G,EAAA28G,qBAIA/rE,EAAA,EACAgsE,GAAA,EACA58G,GACAA,EAAAsJ,QAAAtJ,EAAAsJ,OAAAjH,KAAAo6G,YACA7rE,IAEA5wC,EAAAuI,YACAq0G,GAAA,GAEA58G,IAAAkI,OAKA,IAHA7F,EAAAw6G,gBAAAjsE,EAGAgsE,EACA,MAAA3tG,GAAA7V,EAAAqG,GAAA4C,EAAAC,EAGA,IAAA6vG,GAAAjB,EAAAiB,QAAAvhE,EAEA,KAAAuhE,EAEA,MADA/4G,GAAAqG,GAAA,KACAwP,GAGA,IAAA1I,GAAAnN,EAAAqG,GAAA0yG,EAAAt+F,WAAApU,EAwBA,OApBA4C,GAAAoxG,sBAAA,SAAA53G,EAAApE,GAEA,GAAAue,GAAAm8F,EAAAmF,UAAA73G,IAEAhI,GAAAue,IAAAna,IACApE,GAAAue,IAAAna,KAEAs2G,EAAAmF,UAAA73G,GAAAhI,KAMK4K,EAAA6B,OAAA7B,EAAA6B,UAA6By6B,SAAA,SAAArhB,EAAApb,GAClCiwG,EAAAmF,UAAA73G,GAAAyC,EAAAkU,mBAIA/T,EAAA7C,MAAAyxG,EAAAC,EAAAiB,EAAA3yG,OAAA2yG,EAAA3yG,MAAAC,IAEAwP,EAAA1I,EAAAlE,EAAAC,KA4BAw6G,GAAA,SAAA9hH,GAA0C,UAAAA,EAAAC,WAAA,GAAAzD,SAAA,KAM1Ck6G,GAAA,SAAAx5G,GAA6B,MAAAs9G,oBAAAt9G,GAC7BurB,QARA,WAQAq5F,IACAr5F,QAPA,OAOA,MAEAmI,GAAAgtF,mBAuFApG,GAAA,OA0BAD,GAAAX,EAAA,MACAr2G,KAAA,MAiFAwhH,IAAAnlH,OAAA7C,QACAioH,IAAAplH,OAAAmC,OAEA85G,IACAp0G,KAAA,cACAD,OACAvF,IACApE,KAAAknH,GACAE,UAAA,GAEA76G,KACAvM,KAAA+B,OACA9B,QAAA,KAEAonH,MAAA57G,QACA4yG,OAAA5yG,QACAmiB,QAAAniB,QACAomB,YAAA9vB,OACAulH,iBAAAvlH,OACAgM,OACA/N,KAAAmnH,GACAlnH,QAAA,UAGAE,OAAA,SAAAiZ,GACA,GAAAmvB,GAAAtjC,KAEAi3G,EAAAj3G,KAAAsiH,QACApnG,EAAAlb,KAAA4hH,OACA7jG,EAAAk5F,EAAA5rG,QAAArL,KAAAb,GAAA+b,EAAAlb,KAAAo5G,QACAlkE,EAAAn3B,EAAAm3B,SACAkhE,EAAAr4F,EAAAq4F,MACAmL,EAAAxjG,EAAAwjG,KAEAziC,KACAyjC,EAAAtL,EAAAh8G,QAAAunH,gBACAC,EAAAxL,EAAAh8G,QAAAynH,qBAEAC,EAAA,MAAAJ,EACA,qBACAA,EACAK,EAAA,MAAAH,EACA,2BACAA,EACA71F,EAAA,MAAA5sB,KAAA4sB,YACA+1F,EACA3iH,KAAA4sB,YACAy1F,EAAA,MAAAriH,KAAAqiH,iBACAO,EACA5iH,KAAAqiH,iBACAQ,EAAA3tE,EAAAz0C,KACAq2G,EAAA,KAAA5hE,EAAA,KAAA+hE,GACAb,CAEAt3B,GAAAujC,GAAA7K,EAAAt8F,EAAA2nG,GACA/jC,EAAAlyD,GAAA5sB,KAAAoiH,MACAtjC,EAAAujC,GACAvK,EAAA58F,EAAA2nG,EAEA,IAAA5vG,GAAA,SAAArT,GACAo4G,EAAAp4G,KACA0jC,EAAA3a,QACAsuF,EAAAtuF,QAAAusB,GAEA+hE,EAAAp1G,KAAAqzC,KAKA1sC,GAAcm2C,MAAAq5D,EACd/4G,OAAA2D,QAAA5C,KAAA8I,OACA9I,KAAA8I,MAAAtN,QAAA,SAAAoE,GAAuC4I,EAAA5I,GAAAqT,IAEvCzK,EAAAxI,KAAA8I,OAAAmK,CAGA,IAAA1L,IACAuU,MAAAgjE,EAGA,UAAA9+E,KAAAsH,IACAC,EAAAiB,KACAjB,EAAAkC,OAAoB83G,YACf,CAEL,GAAAnnH,GAAAi+G,EAAAr4G,KAAAqP,OAAArU,QACA,IAAAZ,EAAA,CAEAA,EAAA0N,UAAA,CACA,IAAA5I,GAAAo5G,GAAAhyE,KAAApnC,QACA9E,EAAAmN,KAAArI,KAAsC9E,EAAAmN,OACtCiB,MACApO,EAAAmN,KAAAkC,MAAAvK,KAA6C9E,EAAAmN,KAAAkC,QAC7C83G,WAGAh6G,GAAAiB,KAIA,MAAA2L,GAAAnU,KAAAsH,IAAAC,EAAAvH,KAAAqP,OAAArU,WAuFAmG,GAAA,mBAAAmb,QAyEA6H,GAAAllB,MAAA2D,SAAA,SAAA/E,GACA,wBAAA5D,OAAA8P,UAAArN,SAAAF,KAAAqB,IAMAE,GAAAm9G,EACA4H,GAAApuF,EACAquF,GAAAlzE,EACAmzE,GAAA3I,EACA4I,GAAA7H,EAOAzB,GAAA,GAAAlnF,SAGA,UAOA,0GACA7S,KAAA,SAgZA7hB,IAAA22B,MAAAouF,GACA/kH,GAAA8xC,QAAAkzE,GACAhlH,GAAAs8G,iBAAA2I,GACAjlH,GAAAq9G,eAAA6H,EAIA,IAAAxH,IAAAxhH,OAAAqB,OAAA,MAgbAwjH,GAAA7kH,OAAAqB,OAAA,MAmGA4nH,GAAA/hH,IAAA,WACA,GAAA6/C,GAAA1kC,OAAAujB,UAAAC,SAEA,SACA,IAAAkhB,EAAAhjD,QAAA,oBAAAgjD,EAAAhjD,QAAA,iBACA,IAAAgjD,EAAAhjD,QAAA,mBACA,IAAAgjD,EAAAhjD,QAAA,YACA,IAAAgjD,EAAAhjD,QAAA,oBAKAse,OAAAu8F,SAAA,aAAAv8F,QAAAu8F,YAIAsG,GAAAh+G,IAAAmb,OAAAgjB,aAAAhjB,OAAAgjB,YAAA8/E,IACA9iG,OAAAgjB,YACAk1B,KAEA8qD,GAAAJ,IAwDAiE,GAAA,SAAAlM,EAAAxsG,GACAzK,KAAAi3G,SACAj3G,KAAAyK,KAAAi1G,GAAAj1G,GAEAzK,KAAAkb,QAAAu8F,GACAz3G,KAAAygC,QAAA,KACAzgC,KAAAg3D,OAAA,EACAh3D,KAAAojH,YACApjH,KAAAqjH,iBACArjH,KAAAsjH,YAGAH,IAAAp5G,UAAAw5G,OAAA,SAAAj6F,GACAtpB,KAAAspB,MAGA65F,GAAAp5G,UAAAy5G,QAAA,SAAAl6F,EAAAm6F,GACAzjH,KAAAg3D,MACA1tC,KAEAtpB,KAAAojH,SAAAvhH,KAAAynB,GACAm6F,GACAzjH,KAAAqjH,cAAAxhH,KAAA4hH,KAKAN,GAAAp5G,UAAA25G,QAAA,SAAAD,GACAzjH,KAAAsjH,SAAAzhH,KAAA4hH,IAGAN,GAAAp5G,UAAA45G,aAAA,SAAAzuE,EAAA0uE,EAAAC,GACA,GAAAvgF,GAAAtjC,KAEAo2G,EAAAp2G,KAAAi3G,OAAAlwG,MAAAmuC,EAAAl1C,KAAAkb,QACAlb,MAAA8jH,kBAAA1N,EAAA,WACA9yE,EAAAygF,YAAA3N,GACAwN,KAAAxN,GACA9yE,EAAA0gF,YAGA1gF,EAAA0zB,QACA1zB,EAAA0zB,OAAA,EACA1zB,EAAA8/E,SAAA5nH,QAAA,SAAA8tB,GAA6CA,EAAA8sF,OAE1C,SAAAt1G,GACH+iH,GACAA,EAAA/iH,GAEAA,IAAAwiC,EAAA0zB,QACA1zB,EAAA0zB,OAAA,EACA1zB,EAAA+/E,cAAA7nH,QAAA,SAAA8tB,GAAkDA,EAAAxoB,SAKlDqiH,GAAAp5G,UAAA+5G,kBAAA,SAAA1N,EAAAwN,EAAAC,GACA,GAAAvgF,GAAAtjC,KAEAkb,EAAAlb,KAAAkb,QACAmyC,EAAA,SAAAvsD,GACAkgH,GAAAlgH,KACAwiC,EAAAggF,SAAA5lH,OACA4lC,EAAAggF,SAAA9nH,QAAA,SAAA8tB,GAA+CA,EAAAxoB,MAE/CiiB,GAAA,6CACA3hB,QAAAC,MAAAP,KAGA+iH,KAAA/iH,GAEA,IACA02G,EAAApB,EAAAl7F,IAEAk7F,EAAAiB,QAAA35G,SAAAwd,EAAAm8F,QAAA35G,OAGA,MADAsC,MAAAgkH,YACA32D,GAGA,IAAAtvC,GAAA6hG,GAAA5/G,KAAAkb,QAAAm8F,QAAAjB,EAAAiB,SACApqE,EAAAlvB,EAAAkvB,QACA6yE,EAAA/hG,EAAA+hG,YACAD,EAAA9hG,EAAA8hG,UAEA/vG,KAAAvL,OAEA+7G,GAAAR,GAEA9/G,KAAAi3G,OAAAgN,YAEAzD,GAAAvzE,GAEA4yE,EAAAviH,IAAA,SAAAilB,GAAgC,MAAAA,GAAAwJ,cAEhC80F,GAAAhB,GAGA7/G,MAAAygC,QAAA21E,CACA,IAAA8N,GAAA,SAAA96G,EAAAqb,GACA,GAAA6e,EAAA7C,UAAA21E,EACA,MAAA/oD,IAEA,KACAjkD,EAAAgtG,EAAAl7F,EAAA,SAAA/b,IACA,IAAAA,GAAA6hH,GAAA7hH,IAEAmkC,EAAA0gF,WAAA,GACA32D,EAAAluD,IAEA,gBAAAA,IACA,gBAAAA,KACA,gBAAAA,GAAAsB,MACA,gBAAAtB,GAAAwF,OAIA0oD,IACA,gBAAAluD,MAAAwpB,QACA2a,EAAA3a,QAAAxpB,GAEAmkC,EAAAzhC,KAAA1C,IAIAslB,EAAAtlB,KAGK,MAAAS,GACLytD,EAAAztD,IAIA6/G,IAAA3vG,EAAAo0G,EAAA,WACA,GAAAC,KAMA1E,IAFAgB,GAAAZ,EAAAsE,EAHA,WAA+B,MAAA7gF,GAAApoB,UAAAk7F,IAI/B7xG,OAAA++B,EAAA2zE,OAAAmN,cACAF,EAAA,WACA,GAAA5gF,EAAA7C,UAAA21E,EACA,MAAA/oD,IAEA/pB,GAAA7C,QAAA,KACAmjF,EAAAxN,GACA9yE,EAAA2zE,OAAAmH,KACA96E,EAAA2zE,OAAAmH,IAAAr5E,UAAA,WACAo/E,EAAA3oH,QAAA,SAAA8tB,GAA8CA,aAO9C65F,GAAAp5G,UAAAg6G,YAAA,SAAA3N,GACA,GAAA90F,GAAAthB,KAAAkb,OACAlb,MAAAkb,QAAAk7F,EACAp2G,KAAAspB,IAAAtpB,KAAAspB,GAAA8sF,GACAp2G,KAAAi3G,OAAAoN,WAAA7oH,QAAA,SAAA4N,GACAA,KAAAgtG,EAAA90F,KAyOA,IAAAgjG,IAAA,SAAAC,GACA,QAAAD,GAAArN,EAAAxsG,GACA,GAAA64B,GAAAtjC,IAEAukH,GAAA/nH,KAAAwD,KAAAi3G,EAAAxsG,EAEA,IAAA+5G,GAAAvN,EAAAh8G,QAAAqjH,cAEAkG,IACAzG,IAGAzhG,OAAAiK,iBAAA,oBAAA3mB,GACA0jC,EAAAqgF,aAAAnf,GAAAlhE,EAAA74B,MAAA,SAAA2rG,GACAoO,GACAtG,EAAAjH,EAAAb,EAAA9yE,EAAApoB,SAAA,OAiDA,MA3CAqpG,KAAAD,EAAApiH,UAAAqiH,GACAD,EAAAv6G,UAAA9P,OAAAqB,OAAAipH,KAAAx6G,WACAu6G,EAAAv6G,UAAA0O,YAAA6rG,EAEAA,EAAAv6G,UAAA06G,GAAA,SAAAznH,GACAsf,OAAAu8F,QAAA4L,GAAAznH,IAGAsnH,EAAAv6G,UAAAlI,KAAA,SAAAqzC,EAAA0uE,EAAAC,GACA,GAAAvgF,GAAAtjC,KAEA+d,EAAA/d,KACA0kH,EAAA3mG,EAAA7C,OACAlb,MAAA2jH,aAAAzuE,EAAA,SAAAkhE,GACAmJ,GAAA/F,EAAAl2E,EAAA74B,KAAA2rG,EAAAe,WACA+G,EAAA56E,EAAA2zE,OAAAb,EAAAsO,GAAA,GACAd,KAAAxN,IACKyN,IAGLS,EAAAv6G,UAAA4e,QAAA,SAAAusB,EAAA0uE,EAAAC,GACA,GAAAvgF,GAAAtjC,KAEA+d,EAAA/d,KACA0kH,EAAA3mG,EAAA7C,OACAlb,MAAA2jH,aAAAzuE,EAAA,SAAAkhE,GACAoJ,GAAAhG,EAAAl2E,EAAA74B,KAAA2rG,EAAAe,WACA+G,EAAA56E,EAAA2zE,OAAAb,EAAAsO,GAAA,GACAd,KAAAxN,IACKyN,IAGLS,EAAAv6G,UAAAi6G,UAAA,SAAAniH,GACA,GAAA2iG,GAAAxkG,KAAAyK,QAAAzK,KAAAkb,QAAAi8F,SAAA,CACA,GAAAj8F,GAAAs+F,EAAAx5G,KAAAyK,KAAAzK,KAAAkb,QAAAi8F,SACAt1G,GAAA09G,GAAArkG,GAAAskG,GAAAtkG,KAIAopG,EAAAv6G,UAAAu5E,mBAAA,WACA,MAAAkhB,IAAAxkG,KAAAyK,OAGA65G,GACCnB,IAaDwB,GAAA,SAAAJ,GACA,QAAAI,GAAA1N,EAAAxsG,EAAAoM,GACA0tG,EAAA/nH,KAAAwD,KAAAi3G,EAAAxsG,GAEAoM,GAAAsqG,GAAAnhH,KAAAyK,OAGA22G,KAmDA,MAhDAmD,KAAAI,EAAAziH,UAAAqiH,GACAI,EAAA56G,UAAA9P,OAAAqB,OAAAipH,KAAAx6G,WACA46G,EAAA56G,UAAA0O,YAAAksG,EAIAA,EAAA56G,UAAA66G,eAAA,WACA,GAAAthF,GAAAtjC,IAEAsc,QAAAiK,iBAAA,wBACA66F,MAGA99E,EAAAqgF,aAAAtC,KAAA,SAAAjL,GACAkL,GAAAlL,EAAAe,eAKAwN,EAAA56G,UAAAlI,KAAA,SAAAqzC,EAAA0uE,EAAAC,GACA7jH,KAAA2jH,aAAAzuE,EAAA,SAAAkhE,GACAoL,GAAApL,EAAAe,UACAyM,KAAAxN,IACKyN,IAGLc,EAAA56G,UAAA4e,QAAA,SAAAusB,EAAA0uE,EAAAC,GACA7jH,KAAA2jH,aAAAzuE,EAAA,SAAAkhE,GACAkL,GAAAlL,EAAAe,UACAyM,KAAAxN,IACKyN,IAGLc,EAAA56G,UAAA06G,GAAA,SAAAznH,GACAsf,OAAAu8F,QAAA4L,GAAAznH,IAGA2nH,EAAA56G,UAAAi6G,UAAA,SAAAniH,GACA,GAAAqZ,GAAAlb,KAAAkb,QAAAi8F,QACAkK,QAAAnmG,IACArZ,EAAA2/G,GAAAtmG,GAAAomG,GAAApmG,KAIAypG,EAAA56G,UAAAu5E,mBAAA,WACA,MAAA+9B,OAGAsD,GACCxB,IA2CD0B,GAAA,SAAAN,GACA,QAAAM,GAAA5N,EAAAxsG,GACA85G,EAAA/nH,KAAAwD,KAAAi3G,EAAAxsG,GACAzK,KAAA4xB,SACA5xB,KAAAjC,OAAA,EAiDA,MA9CAwmH,KAAAM,EAAA3iH,UAAAqiH,GACAM,EAAA96G,UAAA9P,OAAAqB,OAAAipH,KAAAx6G,WACA86G,EAAA96G,UAAA0O,YAAAosG,EAEAA,EAAA96G,UAAAlI,KAAA,SAAAqzC,EAAA0uE,EAAAC,GACA,GAAAvgF,GAAAtjC,IAEAA,MAAA2jH,aAAAzuE,EAAA,SAAAkhE,GACA9yE,EAAA1R,MAAA0R,EAAA1R,MAAAphB,MAAA,EAAA8yB,EAAAvlC,MAAA,GAAAwG,OAAA6xG,GACA9yE,EAAAvlC,QACA6lH,KAAAxN,IACKyN,IAGLgB,EAAA96G,UAAA4e,QAAA,SAAAusB,EAAA0uE,EAAAC,GACA,GAAAvgF,GAAAtjC,IAEAA,MAAA2jH,aAAAzuE,EAAA,SAAAkhE,GACA9yE,EAAA1R,MAAA0R,EAAA1R,MAAAphB,MAAA,EAAA8yB,EAAAvlC,OAAAwG,OAAA6xG,GACAwN,KAAAxN,IACKyN,IAGLgB,EAAA96G,UAAA06G,GAAA,SAAAznH,GACA,GAAAsmC,GAAAtjC,KAEA8kH,EAAA9kH,KAAAjC,MAAAf,CACA,MAAA8nH,EAAA,GAAAA,GAAA9kH,KAAA4xB,MAAAl0B,QAAA,CAGA,GAAA04G,GAAAp2G,KAAA4xB,MAAAkzF,EACA9kH,MAAA8jH,kBAAA1N,EAAA,WACA9yE,EAAAvlC,MAAA+mH,EACAxhF,EAAAygF,YAAA3N,OAIAyO,EAAA96G,UAAAu5E,mBAAA,WACA,GAAApoE,GAAAlb,KAAA4xB,MAAA5xB,KAAA4xB,MAAAl0B,OAAA,EACA,OAAAwd,KAAAi8F,SAAA,KAGA0N,EAAA96G,UAAAi6G,UAAA,aAIAa,GACC1B,IAID4B,GAAA,SAAA9pH,OACA,KAAAA,UAEA+E,KAAAo+G,IAAA,KACAp+G,KAAAglH,QACAhlH,KAAA/E,UACA+E,KAAAikH,eACAjkH,KAAAokH,gBACApkH,KAAAqkH,cACArkH,KAAAilH,QAAA/H,EAAAjiH,EAAA0gH,WAAA37G,KAEA,IAAAmsC,GAAAlxC,EAAAkxC,MAAA,MAUA,QATAnsC,KAAA6W,SAAA,YAAAs1B,IAAA+2E,GACAljH,KAAA6W,WACAs1B,EAAA,QAEAhrC,KACAgrC,EAAA,YAEAnsC,KAAAmsC,OAEAA,GACA,cACAnsC,KAAA64G,QAAA,GAAAyL,IAAAtkH,KAAA/E,EAAAwP,KACA,MACA,YACAzK,KAAA64G,QAAA,GAAA8L,IAAA3kH,KAAA/E,EAAAwP,KAAAzK,KAAA6W,SACA,MACA,gBACA7W,KAAA64G,QAAA,GAAAgM,IAAA7kH,KAAA/E,EAAAwP,QASAi4B,IAA0B06E,gBAE1B2H,IAAAh7G,UAAAhD,MAAA,SACA07B,EACAvnB,EACA87F,GAEA,MAAAh3G,MAAAilH,QAAAl+G,MAAA07B,EAAAvnB,EAAA87F,IAGAt0E,GAAA06E,aAAAjjH,IAAA,WACA,MAAA6F,MAAA64G,SAAA74G,KAAA64G,QAAA39F,SAGA6pG,GAAAh7G,UAAA05B,KAAA,SAAA26E,GACA,GAAA96E,GAAAtjC,IAWA,IAHAA,KAAAglH,KAAAnjH,KAAAu8G,IAGAp+G,KAAAo+G,IAAA,CAIAp+G,KAAAo+G,KAEA,IAAAvF,GAAA74G,KAAA64G,OAEA,IAAAA,YAAAyL,IACAzL,EAAA8K,aAAA9K,EAAAv1B,0BACG,IAAAu1B,YAAA8L,IAAA,CACH,GAAAO,GAAA,WACArM,EAAA+L,iBAEA/L,GAAA8K,aACA9K,EAAAv1B,qBACA4hC,EACAA,GAIArM,EAAA0K,OAAA,SAAAnN,GACA9yE,EAAA0hF,KAAAxpH,QAAA,SAAA4iH,GACAA,EAAA5F,OAAApC,QAKA2O,GAAAh7G,UAAAo7G,WAAA,SAAA9mH,GACA,MAAAojH,IAAAzhH,KAAAikH,YAAA5lH,IAGA0mH,GAAAh7G,UAAAq7G,cAAA,SAAA/mH,GACA,MAAAojH,IAAAzhH,KAAAokH,aAAA/lH,IAGA0mH,GAAAh7G,UAAAs7G,UAAA,SAAAhnH,GACA,MAAAojH,IAAAzhH,KAAAqkH,WAAAhmH,IAGA0mH,GAAAh7G,UAAAy5G,QAAA,SAAAl6F,EAAAm6F,GACAzjH,KAAA64G,QAAA2K,QAAAl6F,EAAAm6F,IAGAsB,GAAAh7G,UAAA25G,QAAA,SAAAD,GACAzjH,KAAA64G,QAAA6K,QAAAD,IAGAsB,GAAAh7G,UAAAlI,KAAA,SAAAqzC,EAAA0uE,EAAAC,GACA7jH,KAAA64G,QAAAh3G,KAAAqzC,EAAA0uE,EAAAC,IAGAkB,GAAAh7G,UAAA4e,QAAA,SAAAusB,EAAA0uE,EAAAC,GACA7jH,KAAA64G,QAAAlwF,QAAAusB,EAAA0uE,EAAAC,IAGAkB,GAAAh7G,UAAA06G,GAAA,SAAAznH,GACAgD,KAAA64G,QAAA4L,GAAAznH,IAGA+nH,GAAAh7G,UAAAu7G,KAAA,WACAtlH,KAAAykH,IAAA,IAGAM,GAAAh7G,UAAAw7G,QAAA,WACAvlH,KAAAykH,GAAA,IAGAM,GAAAh7G,UAAAy7G,qBAAA,SAAArmH,GACA,GAAAi3G,GAAAj3G,EACAA,EAAAk4G,QACAl4G,EACAa,KAAAqL,QAAAlM,GAAAi3G,MACAp2G,KAAAo9G,YACA,OAAAhH,MAGA7xG,OAAA3F,SAAAw3G,EAAAiB,QAAA/5G,IAAA,SAAAilB,GACA,MAAAtoB,QAAAsB,KAAAgnB,EAAAxJ,YAAAzb,IAAA,SAAA7B,GACA,MAAA8mB,GAAAxJ,WAAAtd,YAKAspH,GAAAh7G,UAAAsB,QAAA,SACAlM,EACA+b,EACAk+F,GAEA,GAAAlkE,GAAA0nE,EACAz9G,EACA+b,GAAAlb,KAAA64G,QAAA39F,QACAk+F,EACAp5G,MAEAo2G,EAAAp2G,KAAA+G,MAAAmuC,EAAAh6B,GACAi8F,EAAAf,EAAAY,gBAAAZ,EAAAe,QAGA,QACAjiE,WACAkhE,QACAmL,KAJAG,GADA1hH,KAAA64G,QAAApuG,KACA0sG,EAAAn3G,KAAAmsC,MAMAs5E,aAAAvwE,EACApqC,SAAAsrG,IAIA2O,GAAAh7G,UAAAozG,UAAA,SAAAxB,GACA37G,KAAAilH,QAAA9H,UAAAxB,GACA37G,KAAA64G,QAAA39F,UAAAu8F,IACAz3G,KAAA64G,QAAA8K,aAAA3jH,KAAA64G,QAAAv1B,uBAIArpF,OAAA0oC,iBAAAoiF,GAAAh7G,UAAA24B,IAeAqiF,GAAAhrG,UACAgrG,GAAAzqH,QAAA,QAEA6G,IAAAmb,OAAA7C,KACA6C,OAAA7C,IAAAC,IAAAqrG,IAGArpH,EAAA,M1Bg9uBM,SAAU5B,EAAQC,G2B32zBxBD,EAAAC,QAAA,SAAAmsF,EAAA3oF,GAGA,OAFAwsB,MACA27F,KACAjoH,EAAA,EAAiBA,EAAAF,EAAAG,OAAiBD,IAAA,CAClC,GAAAK,GAAAP,EAAAE,GACAmI,EAAA9H,EAAA,GACAgrB,EAAAhrB,EAAA,GACA6nH,EAAA7nH,EAAA,GACA8nH,EAAA9nH,EAAA,GACA+nH,GACAjgH,GAAAsgF,EAAA,IAAAzoF,EACAqrB,MACA68F,QACAC,YAEAF,GAAA9/G,GAGA8/G,EAAA9/G,GAAA0tG,MAAAzxG,KAAAgkH,GAFA97F,EAAAloB,KAAA6jH,EAAA9/G,IAAmCA,KAAA0tG,OAAAuS,KAKnC,MAAA97F,K3Bu3zBM,SAAUjwB,EAAQC,G4Bh5zBxB,GAAAg0C,EAGAA,GAAA,WACA,MAAA/tC,QAGA,KAEA+tC,KAAA1P,SAAA,qBAAAynF,MAAA,QACC,MAAAlmH,GAED,gBAAA0c,UACAyxB,EAAAzxB,QAOAxiB,EAAAC,QAAAg0C,G5Bu5zBM,SAAUj0C,EAAQC,G6B13zBxB,QAAAgsH,GAAAjoH,EAAAkoH,GACA,GAAAv4E,GAAA3vC,EAAA,OACAmoH,EAAAnoH,EAAA,EACA,KAAAmoH,EACA,MAAAx4E,EAGA,IAAAu4E,GAAA,kBAAAE,MAAA,CACA,GAAAC,GAAAC,EAAAH,EAKA,QAAAx4E,GAAAlpC,OAJA0hH,EAAA53C,QAAA/wE,IAAA,SAAAyW,GACA,uBAAAkyG,EAAAI,WAAAtyG,EAAA,SAGAxP,QAAA4hH,IAAAvmG,KAAA,MAGA,OAAA6tB,GAAA7tB,KAAA,MAIA,QAAAwmG,GAAAR,GAKA,yEAHAM,KAAAI,SAAA5L,mBAAA99G,KAAAC,UAAA+oH,MAGA,MArEA9rH,EAAAC,QAAA,SAAAisH,GACA,GAAAzoH,KAwCA,OArCAA,GAAAb,SAAA,WACA,MAAAsD,MAAA1C,IAAA,SAAAQ,GACA,GAAA2vC,GAAAs4E,EAAAjoH,EAAAkoH,EACA,OAAAloH,GAAA,GACA,UAAAA,EAAA,OAAmC2vC,EAAA,IAEnCA,IAEG7tB,KAAA,KAIHriB,EAAAE,EAAA,SAAA6kB,EAAAikG,GACA,gBAAAjkG,KACAA,IAAA,KAAAA,EAAA,KAEA,QADAkkG,MACA/oH,EAAA,EAAgBA,EAAAuC,KAAAtC,OAAiBD,IAAA,CACjC,GAAAmI,GAAA5F,KAAAvC,GAAA,EACA,iBAAAmI,KACA4gH,EAAA5gH,IAAA,GAEA,IAAAnI,EAAA,EAAYA,EAAA6kB,EAAA5kB,OAAoBD,IAAA,CAChC,GAAAK,GAAAwkB,EAAA7kB,EAKA,iBAAAK,GAAA,IAAA0oH,EAAA1oH,EAAA,MACAyoH,IAAAzoH,EAAA,GACAA,EAAA,GAAAyoH,EACKA,IACLzoH,EAAA,OAAAA,EAAA,aAAAyoH,EAAA,KAEAhpH,EAAAsE,KAAA/D,MAIAP,I7B+8zBM,SAAUzD,EAAQC,EAASC,G8B56zBjC,QAAAysH,GAAA18F,GACA,OAAAtsB,GAAA,EAAiBA,EAAAssB,EAAArsB,OAAmBD,IAAA,CACpC,GAAAK,GAAAisB,EAAAtsB,GACAipH,EAAAC,EAAA7oH,EAAA8H,GACA,IAAA8gH,EAAA,CACAA,EAAA1oG,MACA,QAAArO,GAAA,EAAqBA,EAAA+2G,EAAApT,MAAA51G,OAA2BiS,IAChD+2G,EAAApT,MAAA3jG,GAAA7R,EAAAw1G,MAAA3jG,GAEA,MAAYA,EAAA7R,EAAAw1G,MAAA51G,OAAuBiS,IACnC+2G,EAAApT,MAAAzxG,KAAA+kH,EAAA9oH,EAAAw1G,MAAA3jG,IAEA+2G,GAAApT,MAAA51G,OAAAI,EAAAw1G,MAAA51G,SACAgpH,EAAApT,MAAA51G,OAAAI,EAAAw1G,MAAA51G,YAEK,CAEL,OADA41G,MACA3jG,EAAA,EAAqBA,EAAA7R,EAAAw1G,MAAA51G,OAAuBiS,IAC5C2jG,EAAAzxG,KAAA+kH,EAAA9oH,EAAAw1G,MAAA3jG,IAEAg3G,GAAA7oH,EAAA8H,KAA8BA,GAAA9H,EAAA8H,GAAAoY,KAAA,EAAAs1F,WAK9B,QAAAuT,KACA,GAAAC,GAAAzqG,SAAAhI,cAAA,QAGA,OAFAyyG,GAAA/rH,KAAA,WACAoqD,EAAA1nC,YAAAqpG,GACAA,EAGA,QAAAF,GAAAvqH,GACA,GAAA2I,GAAApH,EACAkpH,EAAAzqG,SAAAM,cAAA,2BAAAtgB,EAAAuJ,GAAA,KAEA,IAAAkhH,EAAA,CACA,GAAAC,EAGA,MAAAxnH,EAOAunH,GAAArrG,WAAA+B,YAAAspG,GAIA,GAAAE,EAAA,CAEA,GAAAC,GAAAC,GACAJ,GAAAK,MAAAN,KACA7hH,EAAAoiH,EAAA7oH,KAAA,KAAAuoH,EAAAG,GAAA,GACArpH,EAAAwpH,EAAA7oH,KAAA,KAAAuoH,EAAAG,GAAA,OAGAH,GAAAD,IACA7hH,EAAAqiH,EAAA9oH,KAAA,KAAAuoH,GACAlpH,EAAA,WACAkpH,EAAArrG,WAAA+B,YAAAspG,GAMA,OAFA9hH,GAAA3I,GAEA,SAAAirH,GACA,GAAAA,EAAA,CACA,GAAAA,EAAAx+F,MAAAzsB,EAAAysB,KACAw+F,EAAA3B,QAAAtpH,EAAAspH,OACA2B,EAAA1B,YAAAvpH,EAAAupH,UACA,MAEA5gH,GAAA3I,EAAAirH,OAEA1pH,MAcA,QAAAwpH,GAAAN,EAAA/oH,EAAAH,EAAAvB,GACA,GAAAysB,GAAAlrB,EAAA,GAAAvB,EAAAysB,GAEA,IAAAg+F,EAAAS,WACAT,EAAAS,WAAApgF,QAAAqgF,EAAAzpH,EAAA+qB,OACG,CACH,GAAA2+F,GAAAprG,SAAAc,eAAA2L,GACAivD,EAAA+uC,EAAA/uC,UACAA,GAAAh6E,IAAA+oH,EAAAtpG,YAAAu6D,EAAAh6E,IACAg6E,EAAAr6E,OACAopH,EAAAzpG,aAAAoqG,EAAA1vC,EAAAh6E,IAEA+oH,EAAArpG,YAAAgqG,IAKA,QAAAJ,GAAAP,EAAAzqH,GACA,GAAAysB,GAAAzsB,EAAAysB,IACA68F,EAAAtpH,EAAAspH,MACAC,EAAAvpH,EAAAupH,SAcA,IAZAD,GACAmB,EAAA/pG,aAAA,QAAA4oG,GAGAC,IAGA98F,GAAA,mBAAA88F,EAAAv3C,QAAA,SAEAvlD,GAAA,uDAAyDo9F,KAAAI,SAAA5L,mBAAA99G,KAAAC,UAAA+oH,MAAA,OAGzDkB,EAAAS,WACAT,EAAAS,WAAApgF,QAAAre,MACG,CACH,KAAAg+F,EAAA17E,YACA07E,EAAAtpG,YAAAspG,EAAA17E,WAEA07E,GAAArpG,YAAApB,SAAAc,eAAA2L,KA9MA,GAAA4+F,GAAA,mBAAArrG,SAEA,uBAAAsrG,gBACAD,EACA,SAAAvtB,OACA,0JAKA,IAAAytB,GAAA5tH,EAAA,IAeA2sH,KAQAxhE,EAAAuiE,IAAArrG,SAAA8oC,MAAA9oC,SAAAwrG,qBAAA,YACAV,EAAA,KACAD,EAAA,EACAH,GAAA,EACAxnH,EAAA,aAIAynH,EAAA,mBAAAnnF,YAAA,eAAAl/B,KAAAk/B,UAAAC,UAAAniC,cAEA7D,GAAAC,QAAA,SAAAmsF,EAAA3oF,EAAAuqH,GACAf,EAAAe,CAEA,IAAA/9F,GAAA69F,EAAA1hC,EAAA3oF,EAGA,OAFAkpH,GAAA18F,GAEA,SAAAg+F,GAEA,OADAC,MACAvqH,EAAA,EAAmBA,EAAAssB,EAAArsB,OAAmBD,IAAA,CACtC,GAAAK,GAAAisB,EAAAtsB,GACAipH,EAAAC,EAAA7oH,EAAA8H,GACA8gH,GAAA1oG,OACAgqG,EAAAnmH,KAAA6kH,GAEAqB,GACAh+F,EAAA69F,EAAA1hC,EAAA6hC,GACAtB,EAAA18F,IAEAA,IAEA,QAAAtsB,GAAA,EAAmBA,EAAAuqH,EAAAtqH,OAAsBD,IAAA,CACzC,GAAAipH,GAAAsB,EAAAvqH,EACA,QAAAipH,EAAA1oG,KAAA,CACA,OAAArO,GAAA,EAAuBA,EAAA+2G,EAAApT,MAAA51G,OAA2BiS,IAClD+2G,EAAApT,MAAA3jG,WAEAg3G,GAAAD,EAAA9gH,OAwFA,IAAA4hH,GAAA,WACA,GAAAS,KAEA,iBAAAlqH,EAAAmqH,GAEA,MADAD,GAAAlqH,GAAAmqH,EACAD,EAAA9sG,OAAA3U,SAAAoZ,KAAA","file":"static/js/vendor.1afd0e9b73ea5b9e8cd8.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(5)(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nvar core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = Object.create(options.computed || null)\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n    options.computed = computed\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.3.3\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return typeof value === 'string' || typeof value === 'number'\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n */\nfunction noop () {}\n\n/**\n * Always return false.\n */\nvar no = function () { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      return JSON.stringify(a) === JSON.stringify(b)\n    } catch (e) {\n      // possible circular reference\n      return a === b\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"production\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = (null); // work around flow check\n\nif (false) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.error(\"[Vue warn]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var name = typeof vm === 'string'\n      ? vm\n      : typeof vm === 'function' && vm.options\n        ? vm.options.name\n        : vm._isVue\n          ? vm.$options.name || vm.$options._componentTag\n          : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  var generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (false) {\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    } )); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      \"production\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (false) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (false) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    valid = typeof value === expectedType.toLowerCase();\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (false) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function () {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  return cloned\n}\n\nfunction cloneVNodes (vnodes) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      for (var i = 0; i < fns.length; i++) {\n        fns[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      \"production\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (false) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        (last).text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"production\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 false\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && isDef(c.componentOptions)) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        this$1.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (false) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n      child.data && child.data.slot != null\n    ) {\n      var name = child.data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return node.isComment || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // remove reference to DOM nodes (prevents leak)\n    vm.$options._parentElm = vm.$options._refElm = null;\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (false) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (false) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    if (false) {\n      observerState.isSettingProps = true;\n    }\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    if (false) {\n      observerState.isSettingProps = false;\n    }\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (false) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdateHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdateHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"production\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  if (this.user) {\n    try {\n      value = this.getter.call(vm, vm);\n    } catch (e) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    }\n  } else {\n    value = this.getter.call(vm, vm);\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch) { initWatch(vm, opts.watch); }\n}\n\nvar isReservedProp = {\n  key: 1,\n  ref: 1,\n  slot: 1\n};\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (false) {\n      if (isReservedProp[key] || config.isReservedAttr(key)) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"production\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      \"production\" !== 'production' && warn(\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(keys[i])) {\n      proxy(vm, \"_data\", keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  var watchers = vm._computedWatchers = Object.create(null);\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (false) {\n      if (getter === undefined) {\n        warn(\n          (\"No getter function has been defined for computed property \\\"\" + key + \"\\\".\"),\n          vm\n        );\n        getter = noop;\n      }\n    }\n    // create internal watcher for the computed property.\n    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (false) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (target, key, userDef) {\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = createComputedGetter(key);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n    if (false) {\n      if (methods[key] == null) {\n        warn(\n          \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n    }\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (false) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (false) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    // isArray here\n    var isArray = Array.isArray(inject);\n    var result = Object.create(null);\n    var keys = isArray\n      ? inject\n      : hasSymbol\n        ? Reflect.ownKeys(inject)\n        : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = isArray ? key : inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || {});\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || {},\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (false) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  if (isUndef(Ctor.cid)) {\n    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);\n    if (Ctor === undefined) {\n      // return nothing if this is indeed an async component\n      // wait for the callback to trigger parent update.\n      return\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\n  );\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"production\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      extend(props, bindObject);\n    }\n    return scopedSlotFn(props) || fallback\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && \"production\" !== 'production') {\n      slotNodes._rendered && warn(\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n        \"- this will likely cause render errors.\",\n        this\n      );\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1\n  } else {\n    return keyCodes !== eventKeyCode\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      for (var key in value) {\n        if (key === 'class' || key === 'style') {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n        }\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] =\n    this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (false) {\n        vnode = vm.$options.renderError\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n          : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (false) {\n      startTag = \"vue-perf-init:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (false) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(((vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (false\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return this\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (false) {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.3.3';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction genClassFromData (data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (isUndef(value)) {\n    return ''\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  var res = '';\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (isDef(value[i])) {\n        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1)\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) { res += key + ' '; }\n    }\n    return res.slice(0, -1)\n  }\n  /* istanbul ignore next */\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"production\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key &&\n    a.tag === b.tag &&\n    a.isComment === b.isComment &&\n    isDef(a.data) === isDef(b.data) &&\n    sameInputType(a, b)\n  )\n}\n\n// Some browsers do not support dynamically changing type for <input>\n// so they need to be treated as different nodes\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref) {\n    if (isDef(parent)) {\n      if (isDef(ref)) {\n        if (ref.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (false) {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (false\n            ) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (isDef(vnode.tag)) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    false\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers && modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\nfunction getAndRemoveAttr (el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return \"var $$exp = \" + (modelRs.exp) + \", $$idx = \" + (modelRs.idx) + \";\" +\n      \"if (!Array.isArray($$exp)){\" +\n        value + \"=\" + assignment + \"}\" +\n      \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\"\n  }\n}\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\nfunction parseModel (val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    }\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (false) {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$1(\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\n      );\n    }\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (false) {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n        trueValueBinding === 'true'\n          ? (\":(\" + value + \")\")\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n      )\n  );\n  addHandler(el, CHECKBOX_RADIO_TOKEN,\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number || type === 'number') {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  if (once$$1) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      var res = arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(elm, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal\n}\n\nfunction isInputChanged (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in testEl.style)) {\n    return prop\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likley wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      var cb = function () {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"production\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag; });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      if (this._hasMove != null) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (false) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (false\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode (content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\n  return div.innerHTML.indexOf(encoded) > 0\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/*  */\n\nvar decoder;\n\nfunction decode (html) {\n  decoder = decoder || document.createElement('div');\n  decoder.innerHTML = html;\n  return decoder.textContent\n}\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\nvar singleAttrAssign = /(?:=)/;\nvar singleAttrValues = [\n  // attr value double quotes\n  /\"([^\"]*)\"+/.source,\n  // attr value, single quotes\n  /'([^']*)'+/.source,\n  // attr value, no quotes\n  /([^\\s\"'=<>`]+)/.source\n];\nvar attribute = new RegExp(\n  '^\\\\s*' + singleAttrIdentifier.source +\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\n);\n\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\nvar startTagOpen = new RegExp('^<' + qnameCapture);\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          continue\n        }\n      }\n\n      var text = (void 0), rest$1 = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest$1 = html.slice(textEnd);\n        while (\n          !endTag.test(rest$1) &&\n          !startTagOpen.test(rest$1) &&\n          !comment.test(rest$1) &&\n          !conditionalComment.test(rest$1)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest$1.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest$1 = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var endTagLength = 0;\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest.length;\n      html = rest;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (false) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(\n          value,\n          options.shouldDecodeNewlines\n        )\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (false\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+')\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformIsPreTag = options.isPreTag || no;\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function endPre (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        \"production\" !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints (el) {\n        if (false) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (false) {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        endPre(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      endPre(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (false) {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (false) {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      \"production\" !== 'production' && warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n      return\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (false) {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (false) {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (false) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (false) {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (false) {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      false\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\n    }\n  }\n}\n\nfunction walkThroughConditionsBlocks (conditionBlocks, isInFor) {\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n    markStaticRoots(conditionBlocks[i].block, isInFor);\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    var handler = events[name];\n    // #5330: warn click.right, since right clicks do not actually fire click events.\n    if (false\n    ) {\n      warn(\n        \"Use \\\"contextmenu\\\" instead of \\\"click.right\\\" since right clicks \" +\n        \"do not actually fire \\\"click\\\" events.\"\n      );\n    }\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, handler)) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    return isMethodPath || isFunctionExpression\n      ? handler.value\n      : (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var alias = keyCodes[key];\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n// configurable state\nvar warn$3;\nvar transforms$1;\nvar dataGenFns;\nvar platformDirectives$1;\nvar isPlatformReservedTag$1;\nvar staticRenderFns;\nvar onceCount;\nvar currentOptions;\n\nfunction generate (\n  ast,\n  options\n) {\n  // save previous staticRenderFns so generate calls can be nested\n  var prevStaticRenderFns = staticRenderFns;\n  var currentStaticRenderFns = staticRenderFns = [];\n  var prevOnceCount = onceCount;\n  onceCount = 0;\n  currentOptions = options;\n  warn$3 = options.warn || baseWarn;\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  platformDirectives$1 = options.directives || {};\n  isPlatformReservedTag$1 = options.isReservedTag || no;\n  var code = ast ? genElement(ast) : '_c(\"div\")';\n  staticRenderFns = prevStaticRenderFns;\n  onceCount = prevOnceCount;\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: currentStaticRenderFns\n  }\n}\n\nfunction genElement (el) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      var data = el.plain ? undefined : genData(el);\n\n      var children = el.inlineTemplate ? null : genChildren(el, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < transforms$1.length; i++) {\n      code = transforms$1[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el) {\n  el.staticProcessed = true;\n  staticRenderFns.push((\"with(this){return \" + (genElement(el)) + \"}\"));\n  return (\"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      \"production\" !== 'production' && warn$3(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el)\n    }\n    return (\"_o(\" + (genElement(el)) + \",\" + (onceCount++) + (key ? (\",\" + key) : \"\") + \")\")\n  } else {\n    return genStatic(el)\n  }\n}\n\nfunction genIf (el) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice())\n}\n\nfunction genIfConditions (conditions) {\n  if (!conditions.length) {\n    return '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return el.once ? genOnce(el) : genElement(el)\n  }\n}\n\nfunction genFor (el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (\n    false\n  ) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genElement(el)) +\n    '})'\n}\n\nfunction genData (el) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < dataGenFns.length; i++) {\n    data += dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, warn$3)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, warn$3)) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  return data\n}\n\nfunction genDirectives (el) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, warn$3);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el) {\n  var ast = el.children[0];\n  if (false) {\n    warn$3('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, currentOptions);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (slots) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (key, el) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el)\n  }\n  return \"{key:\" + key + \",fn:function(\" + (String(el.attrsMap.scope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? genChildren(el) || 'void 0'\n      : genElement(el)) + \"}}\"\n}\n\nfunction genForScopedSlot (key, el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el)) +\n    '})'\n}\n\nfunction genChildren (el, checkSkip) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return genElement(el$1)\n    }\n    var normalizationType = checkSkip ? getNormalizationType(children) : 0;\n    return (\"[\" + (children.map(genNode).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (children) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction maybeComponent (el) {\n  return !isPlatformReservedTag$1(el.tag)\n}\n\nfunction genNode (node) {\n  if (node.type === 1) {\n    return genElement(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genSlot (el) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (componentName, el) {\n  var children = el.inlineTemplate ? null : genChildren(el, true);\n  return (\"_c(\" + componentName + \",\" + (genData(el)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n      );\n    } else {\n      errors.push((\"invalid expression: \" + (text.trim())));\n    }\n  }\n}\n\n/*  */\n\nfunction baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n}\n\nfunction makeFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompiler (baseOptions) {\n  var functionCompileCache = Object.create(null);\n\n  function compile (\n    template,\n    options\n  ) {\n    var finalOptions = Object.create(baseOptions);\n    var errors = [];\n    var tips = [];\n    finalOptions.warn = function (msg, tip$$1) {\n      (tip$$1 ? tips : errors).push(msg);\n    };\n\n    if (options) {\n      // merge custom modules\n      if (options.modules) {\n        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\n      }\n      // merge custom directives\n      if (options.directives) {\n        finalOptions.directives = extend(\n          Object.create(baseOptions.directives),\n          options.directives\n        );\n      }\n      // copy other options\n      for (var key in options) {\n        if (key !== 'modules' && key !== 'directives') {\n          finalOptions[key] = options[key];\n        }\n      }\n    }\n\n    var compiled = baseCompile(template, finalOptions);\n    if (false) {\n      errors.push.apply(errors, detectErrors(compiled.ast));\n    }\n    compiled.errors = errors;\n    compiled.tips = tips;\n    return compiled\n  }\n\n  function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = options || {};\n\n    /* istanbul ignore if */\n    if (false) {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (functionCompileCache[key]) {\n      return functionCompileCache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (false) {\n      if (compiled.errors && compiled.errors.length) {\n        warn(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = makeFunction(compiled.render, fnGenErrors);\n    var l = compiled.staticRenderFns.length;\n    res.staticRenderFns = new Array(l);\n    for (var i = 0; i < l; i++) {\n      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);\n    }\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (false) {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (functionCompileCache[key] = res)\n  }\n\n  return {\n    compile: compile,\n    compileToFunctions: compileToFunctions\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (false) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData$1\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (false) {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$2 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$2\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    \"production\" !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (false) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile end');\n        measure(((this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue$3);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(41)))\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject       = __webpack_require__(21)\n  , IE8_DOM_DEFINE = __webpack_require__(26)\n  , toPrimitive    = __webpack_require__(28)\n  , dP             = Object.defineProperty;\n\nexports.f = __webpack_require__(0) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};\n\n/***/ }),\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(18), __esModule: true };\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(19), __esModule: true };\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _defineProperty = __webpack_require__(15);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar core  = __webpack_require__(1)\n  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});\nmodule.exports = function stringify(it){ // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(29);\nvar $Object = __webpack_require__(1).Object;\nmodule.exports = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(2);\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// optional / simple context binding\nvar aFunction = __webpack_require__(20);\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(2)\n  , document = __webpack_require__(6).document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global    = __webpack_require__(6)\n  , core      = __webpack_require__(1)\n  , ctx       = __webpack_require__(22)\n  , hide      = __webpack_require__(25)\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP         = __webpack_require__(7)\n  , createDesc = __webpack_require__(27);\nmodule.exports = __webpack_require__(0) ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = !__webpack_require__(0) && !__webpack_require__(5)(function(){\n  return Object.defineProperty(__webpack_require__(23)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(2);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(24);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !__webpack_require__(0), 'Object', {defineProperty: __webpack_require__(7).f});\n\n/***/ }),\n/* 30 */,\n/* 31 */,\n/* 32 */,\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * jsBezier\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * licensed under the MIT license.\n *\n * a set of Bezier curve functions that deal with Beziers, used by jsPlumb, and perhaps useful for other people.  These functions work with Bezier\n * curves of arbitrary degree.\n *\n * - functions are all in the 'jsBezier' namespace.\n *\n * - all input points should be in the format {x:.., y:..}. all output points are in this format too.\n *\n * - all input curves should be in the format [ {x:.., y:..}, {x:.., y:..}, {x:.., y:..}, {x:.., y:..} ]\n *\n * - 'location' as used as an input here refers to a decimal in the range 0-1 inclusive, which indicates a point some proportion along the length\n * of the curve.  location as output has the same format and meaning.\n *\n *\n * Function List:\n * --------------\n *\n * distanceFromCurve(point, curve)\n *\n * \tCalculates the distance that the given point lies from the given Bezier.  Note that it is computed relative to the center of the Bezier,\n * so if you have stroked the curve with a wide pen you may wish to take that into account!  The distance returned is relative to the values\n * of the curve and the point - it will most likely be pixels.\n *\n * gradientAtPoint(curve, location)\n *\n * \tCalculates the gradient to the curve at the given location, as a decimal between 0 and 1 inclusive.\n *\n * gradientAtPointAlongCurveFrom (curve, location)\n *\n *\tCalculates the gradient at the point on the given curve that is 'distance' units from location.\n *\n * nearestPointOnCurve(point, curve)\n *\n *\tCalculates the nearest point to the given point on the given curve.  The return value of this is a JS object literal, containing both the\n *point's coordinates and also the 'location' of the point (see above), for example:  { point:{x:551,y:150}, location:0.263365 }.\n *\n * pointOnCurve(curve, location)\n *\n * \tCalculates the coordinates of the point on the given Bezier curve at the given location.\n *\n * pointAlongCurveFrom(curve, location, distance)\n *\n * \tCalculates the coordinates of the point on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate\n * space as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\n *\n * locationAlongCurveFrom(curve, location, distance)\n *\n * \tCalculates the location on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate\n * space as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\n *\n * perpendicularToCurveAt(curve, location, length, distance)\n *\n * \tCalculates the perpendicular to the given curve at the given location.  length is the length of the line you wish for (it will be centered\n * on the point at 'location'). distance is optional, and allows you to specify a point along the path from the given location as the center of\n * the perpendicular returned.  The return value of this is an array of two points: [ {x:...,y:...}, {x:...,y:...} ].\n *\n *\n */\n\n(function() {\n\n    var root = this;\n\n    if(typeof Math.sgn == \"undefined\") {\n        Math.sgn = function(x) { return x == 0 ? 0 : x > 0 ? 1 :-1; };\n    }\n\n    var Vectors = {\n            subtract \t: \tfunction(v1, v2) { return {x:v1.x - v2.x, y:v1.y - v2.y }; },\n            dotProduct\t: \tfunction(v1, v2) { return (v1.x * v2.x)  + (v1.y * v2.y); },\n            square\t\t:\tfunction(v) { return Math.sqrt((v.x * v.x) + (v.y * v.y)); },\n            scale\t\t:\tfunction(v, s) { return {x:v.x * s, y:v.y * s }; }\n        },\n\n        maxRecursion = 64,\n        flatnessTolerance = Math.pow(2.0,-maxRecursion-1);\n\n    /**\n     * Calculates the distance that the point lies from the curve.\n     *\n     * @param point a point in the form {x:567, y:3342}\n     * @param curve a Bezier curve in the form [{x:..., y:...}, {x:..., y:...}, {x:..., y:...}, {x:..., y:...}].  note that this is currently\n     * hardcoded to assume cubiz beziers, but would be better off supporting any degree.\n     * @return a JS object literal containing location and distance, for example: {location:0.35, distance:10}.  Location is analogous to the location\n     * argument you pass to the pointOnPath function: it is a ratio of distance travelled along the curve.  Distance is the distance in pixels from\n     * the point to the curve.\n     */\n    var _distanceFromCurve = function(point, curve) {\n        var candidates = [],\n            w = _convertToBezier(point, curve),\n            degree = curve.length - 1, higherDegree = (2 * degree) - 1,\n            numSolutions = _findRoots(w, higherDegree, candidates, 0),\n            v = Vectors.subtract(point, curve[0]), dist = Vectors.square(v), t = 0.0;\n\n        for (var i = 0; i < numSolutions; i++) {\n            v = Vectors.subtract(point, _bezier(curve, degree, candidates[i], null, null));\n            var newDist = Vectors.square(v);\n            if (newDist < dist) {\n                dist = newDist;\n                t = candidates[i];\n            }\n        }\n        v = Vectors.subtract(point, curve[degree]);\n        newDist = Vectors.square(v);\n        if (newDist < dist) {\n            dist = newDist;\n            t = 1.0;\n        }\n        return {location:t, distance:dist};\n    };\n    /**\n     * finds the nearest point on the curve to the given point.\n     */\n    var _nearestPointOnCurve = function(point, curve) {\n        var td = _distanceFromCurve(point, curve);\n        return {point:_bezier(curve, curve.length - 1, td.location, null, null), location:td.location};\n    };\n    var _convertToBezier = function(point, curve) {\n        var degree = curve.length - 1, higherDegree = (2 * degree) - 1,\n            c = [], d = [], cdTable = [], w = [],\n            z = [ [1.0, 0.6, 0.3, 0.1], [0.4, 0.6, 0.6, 0.4], [0.1, 0.3, 0.6, 1.0] ];\n\n        for (var i = 0; i <= degree; i++) c[i] = Vectors.subtract(curve[i], point);\n        for (var i = 0; i <= degree - 1; i++) {\n            d[i] = Vectors.subtract(curve[i+1], curve[i]);\n            d[i] = Vectors.scale(d[i], 3.0);\n        }\n        for (var row = 0; row <= degree - 1; row++) {\n            for (var column = 0; column <= degree; column++) {\n                if (!cdTable[row]) cdTable[row] = [];\n                cdTable[row][column] = Vectors.dotProduct(d[row], c[column]);\n            }\n        }\n        for (i = 0; i <= higherDegree; i++) {\n            if (!w[i]) w[i] = [];\n            w[i].y = 0.0;\n            w[i].x = parseFloat(i) / higherDegree;\n        }\n        var n = degree, m = degree-1;\n        for (var k = 0; k <= n + m; k++) {\n            var lb = Math.max(0, k - m),\n                ub = Math.min(k, n);\n            for (i = lb; i <= ub; i++) {\n                j = k - i;\n                w[i+j].y += cdTable[j][i] * z[j][i];\n            }\n        }\n        return w;\n    };\n    /**\n     * counts how many roots there are.\n     */\n    var _findRoots = function(w, degree, t, depth) {\n        var left = [], right = [],\n            left_count, right_count,\n            left_t = [], right_t = [];\n\n        switch (_getCrossingCount(w, degree)) {\n            case 0 : {\n                return 0;\n            }\n            case 1 : {\n                if (depth >= maxRecursion) {\n                    t[0] = (w[0].x + w[degree].x) / 2.0;\n                    return 1;\n                }\n                if (_isFlatEnough(w, degree)) {\n                    t[0] = _computeXIntercept(w, degree);\n                    return 1;\n                }\n                break;\n            }\n        }\n        _bezier(w, degree, 0.5, left, right);\n        left_count  = _findRoots(left,  degree, left_t, depth+1);\n        right_count = _findRoots(right, degree, right_t, depth+1);\n        for (var i = 0; i < left_count; i++) t[i] = left_t[i];\n        for (var i = 0; i < right_count; i++) t[i+left_count] = right_t[i];\n        return (left_count+right_count);\n    };\n    var _getCrossingCount = function(curve, degree) {\n        var n_crossings = 0, sign, old_sign;\n        sign = old_sign = Math.sgn(curve[0].y);\n        for (var i = 1; i <= degree; i++) {\n            sign = Math.sgn(curve[i].y);\n            if (sign != old_sign) n_crossings++;\n            old_sign = sign;\n        }\n        return n_crossings;\n    };\n    var _isFlatEnough = function(curve, degree) {\n        var  error,\n            intercept_1, intercept_2, left_intercept, right_intercept,\n            a, b, c, det, dInv, a1, b1, c1, a2, b2, c2;\n        a = curve[0].y - curve[degree].y;\n        b = curve[degree].x - curve[0].x;\n        c = curve[0].x * curve[degree].y - curve[degree].x * curve[0].y;\n\n        var max_distance_above = max_distance_below = 0.0;\n\n        for (var i = 1; i < degree; i++) {\n            var value = a * curve[i].x + b * curve[i].y + c;\n            if (value > max_distance_above)\n                max_distance_above = value;\n            else if (value < max_distance_below)\n                max_distance_below = value;\n        }\n\n        a1 = 0.0; b1 = 1.0; c1 = 0.0; a2 = a; b2 = b;\n        c2 = c - max_distance_above;\n        det = a1 * b2 - a2 * b1;\n        dInv = 1.0/det;\n        intercept_1 = (b1 * c2 - b2 * c1) * dInv;\n        a2 = a; b2 = b; c2 = c - max_distance_below;\n        det = a1 * b2 - a2 * b1;\n        dInv = 1.0/det;\n        intercept_2 = (b1 * c2 - b2 * c1) * dInv;\n        left_intercept = Math.min(intercept_1, intercept_2);\n        right_intercept = Math.max(intercept_1, intercept_2);\n        error = right_intercept - left_intercept;\n        return (error < flatnessTolerance)? 1 : 0;\n    };\n    var _computeXIntercept = function(curve, degree) {\n        var XLK = 1.0, YLK = 0.0,\n            XNM = curve[degree].x - curve[0].x, YNM = curve[degree].y - curve[0].y,\n            XMK = curve[0].x - 0.0, YMK = curve[0].y - 0.0,\n            det = XNM*YLK - YNM*XLK, detInv = 1.0/det,\n            S = (XNM*YMK - YNM*XMK) * detInv;\n        return 0.0 + XLK * S;\n    };\n    var _bezier = function(curve, degree, t, left, right) {\n        var temp = [[]];\n        for (var j =0; j <= degree; j++) temp[0][j] = curve[j];\n        for (var i = 1; i <= degree; i++) {\n            for (var j =0 ; j <= degree - i; j++) {\n                if (!temp[i]) temp[i] = [];\n                if (!temp[i][j]) temp[i][j] = {};\n                temp[i][j].x = (1.0 - t) * temp[i-1][j].x + t * temp[i-1][j+1].x;\n                temp[i][j].y = (1.0 - t) * temp[i-1][j].y + t * temp[i-1][j+1].y;\n            }\n        }\n        if (left != null)\n            for (j = 0; j <= degree; j++) left[j]  = temp[j][0];\n        if (right != null)\n            for (j = 0; j <= degree; j++) right[j] = temp[degree-j][j];\n\n        return (temp[degree][0]);\n    };\n\n    var _curveFunctionCache = {};\n    var _getCurveFunctions = function(order) {\n        var fns = _curveFunctionCache[order];\n        if (!fns) {\n            fns = [];\n            var f_term = function() { return function(t) { return Math.pow(t, order); }; },\n                l_term = function() { return function(t) { return Math.pow((1-t), order); }; },\n                c_term = function(c) { return function(t) { return c; }; },\n                t_term = function() { return function(t) { return t; }; },\n                one_minus_t_term = function() { return function(t) { return 1-t; }; },\n                _termFunc = function(terms) {\n                    return function(t) {\n                        var p = 1;\n                        for (var i = 0; i < terms.length; i++) p = p * terms[i](t);\n                        return p;\n                    };\n                };\n\n            fns.push(new f_term());  // first is t to the power of the curve order\n            for (var i = 1; i < order; i++) {\n                var terms = [new c_term(order)];\n                for (var j = 0 ; j < (order - i); j++) terms.push(new t_term());\n                for (var j = 0 ; j < i; j++) terms.push(new one_minus_t_term());\n                fns.push(new _termFunc(terms));\n            }\n            fns.push(new l_term());  // last is (1-t) to the power of the curve order\n\n            _curveFunctionCache[order] = fns;\n        }\n\n        return fns;\n    };\n\n\n    /**\n     * calculates a point on the curve, for a Bezier of arbitrary order.\n     * @param curve an array of control points, eg [{x:10,y:20}, {x:50,y:50}, {x:100,y:100}, {x:120,y:100}].  For a cubic bezier this should have four points.\n     * @param location a decimal indicating the distance along the curve the point should be located at.  this is the distance along the curve as it travels, taking the way it bends into account.  should be a number from 0 to 1, inclusive.\n     */\n    var _pointOnPath = function(curve, location) {\n        var cc = _getCurveFunctions(curve.length - 1),\n            _x = 0, _y = 0;\n        for (var i = 0; i < curve.length ; i++) {\n            _x = _x + (curve[i].x * cc[i](location));\n            _y = _y + (curve[i].y * cc[i](location));\n        }\n\n        return {x:_x, y:_y};\n    };\n\n    var _dist = function(p1,p2) {\n        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    };\n\n    var _isPoint = function(curve) {\n        return curve[0].x == curve[1].x && curve[0].y == curve[1].y;\n    };\n\n    /**\n     * finds the point that is 'distance' along the path from 'location'.  this method returns both the x,y location of the point and also\n     * its 'location' (proportion of travel along the path); the method below - _pointAlongPathFrom - calls this method and just returns the\n     * point.\n     */\n    var _pointAlongPath = function(curve, location, distance) {\n\n        if (_isPoint(curve)) {\n            return {\n                point:curve[0],\n                location:location\n            };\n        }\n\n        var prev = _pointOnPath(curve, location),\n            tally = 0,\n            curLoc = location,\n            direction = distance > 0 ? 1 : -1,\n            cur = null;\n\n        while (tally < Math.abs(distance)) {\n            curLoc += (0.005 * direction);\n            cur = _pointOnPath(curve, curLoc);\n            tally += _dist(cur, prev);\n            prev = cur;\n        }\n        return {point:cur, location:curLoc};\n    };\n\n    var _length = function(curve) {\n        if (_isPoint(curve)) return 0;\n\n        var prev = _pointOnPath(curve, 0),\n            tally = 0,\n            curLoc = 0,\n            direction = 1,\n            cur = null;\n\n        while (curLoc < 1) {\n            curLoc += (0.005 * direction);\n            cur = _pointOnPath(curve, curLoc);\n            tally += _dist(cur, prev);\n            prev = cur;\n        }\n        return tally;\n    };\n\n    /**\n     * finds the point that is 'distance' along the path from 'location'.\n     */\n    var _pointAlongPathFrom = function(curve, location, distance) {\n        return _pointAlongPath(curve, location, distance).point;\n    };\n\n    /**\n     * finds the location that is 'distance' along the path from 'location'.\n     */\n    var _locationAlongPathFrom = function(curve, location, distance) {\n        return _pointAlongPath(curve, location, distance).location;\n    };\n\n    /**\n     * returns the gradient of the curve at the given location, which is a decimal between 0 and 1 inclusive.\n     *\n     * thanks // http://bimixual.org/AnimationLibrary/beziertangents.html\n     */\n    var _gradientAtPoint = function(curve, location) {\n        var p1 = _pointOnPath(curve, location),\n            p2 = _pointOnPath(curve.slice(0, curve.length - 1), location),\n            dy = p2.y - p1.y, dx = p2.x - p1.x;\n        return dy == 0 ? Infinity : Math.atan(dy / dx);\n    };\n\n    /**\n     returns the gradient of the curve at the point which is 'distance' from the given location.\n     if this point is greater than location 1, the gradient at location 1 is returned.\n     if this point is less than location 0, the gradient at location 0 is returned.\n     */\n    var _gradientAtPointAlongPathFrom = function(curve, location, distance) {\n        var p = _pointAlongPath(curve, location, distance);\n        if (p.location > 1) p.location = 1;\n        if (p.location < 0) p.location = 0;\n        return _gradientAtPoint(curve, p.location);\n    };\n\n    /**\n     * calculates a line that is 'length' pixels long, perpendicular to, and centered on, the path at 'distance' pixels from the given location.\n     * if distance is not supplied, the perpendicular for the given location is computed (ie. we set distance to zero).\n     */\n    var _perpendicularToPathAt = function(curve, location, length, distance) {\n        distance = distance == null ? 0 : distance;\n        var p = _pointAlongPath(curve, location, distance),\n            m = _gradientAtPoint(curve, p.location),\n            _theta2 = Math.atan(-1 / m),\n            y =  length / 2 * Math.sin(_theta2),\n            x =  length / 2 * Math.cos(_theta2);\n        return [{x:p.point.x + x, y:p.point.y + y}, {x:p.point.x - x, y:p.point.y - y}];\n    };\n\n    var jsBezier = this.jsBezier = {\n        distanceFromCurve : _distanceFromCurve,\n        gradientAtPoint : _gradientAtPoint,\n        gradientAtPointAlongCurveFrom : _gradientAtPointAlongPathFrom,\n        nearestPointOnCurve : _nearestPointOnCurve,\n        pointOnCurve : _pointOnPath,\n        pointAlongCurveFrom : _pointAlongPathFrom,\n        perpendicularToCurveAt : _perpendicularToPathAt,\n        locationAlongCurveFrom:_locationAlongPathFrom,\n        getLength:_length,\n        version:\"0.9.0\"\n    };\n\n    if (true) {\n        exports.jsBezier = jsBezier;\n    }\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/**\n * Biltong v0.4.0\n *\n * Various geometry functions written as part of jsPlumb and perhaps useful for others.\n *\n * Copyright (c) 2017 jsPlumb\n * https://jsplumbtoolkit.com\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n;(function() {\n\n    \"use strict\";\n    var root = this;\n\n    var Biltong = root.Biltong = {\n        version:\"0.4.0\"\n    };\n\n    if (true) {\n        exports.Biltong = Biltong;\n    }\n\n    var _isa = function(a) { return Object.prototype.toString.call(a) === \"[object Array]\"; },\n        _pointHelper = function(p1, p2, fn) {\n            p1 = _isa(p1) ? p1 : [p1.x, p1.y];\n            p2 = _isa(p2) ? p2 : [p2.x, p2.y];\n            return fn(p1, p2);\n        },\n        /**\n         * @name Biltong.gradient\n         * @function\n         * @desc Calculates the gradient of a line between the two points.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Float} The gradient of a line between the two points.\n         */\n        _gradient = Biltong.gradient = function(p1, p2) {\n            return _pointHelper(p1, p2, function(_p1, _p2) {\n                if (_p2[0] == _p1[0])\n                    return _p2[1] > _p1[1] ? Infinity : -Infinity;\n                else if (_p2[1] == _p1[1])\n                    return _p2[0] > _p1[0] ? 0 : -0;\n                else\n                    return (_p2[1] - _p1[1]) / (_p2[0] - _p1[0]);\n            });\n        },\n        /**\n         * @name Biltong.normal\n         * @function\n         * @desc Calculates the gradient of a normal to a line between the two points.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Float} The gradient of a normal to a line between the two points.\n         */\n        _normal = Biltong.normal = function(p1, p2) {\n            return -1 / _gradient(p1, p2);\n        },\n        /**\n         * @name Biltong.lineLength\n         * @function\n         * @desc Calculates the length of a line between the two points.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Float} The length of a line between the two points.\n         */\n        _lineLength = Biltong.lineLength = function(p1, p2) {\n            return _pointHelper(p1, p2, function(_p1, _p2) {\n                return Math.sqrt(Math.pow(_p2[1] - _p1[1], 2) + Math.pow(_p2[0] - _p1[0], 2));\n            });\n        },\n        /**\n         * @name Biltong.quadrant\n         * @function\n         * @desc Calculates the quadrant in which the angle between the two points lies.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Integer} The quadrant - 1 for upper right, 2 for lower right, 3 for lower left, 4 for upper left.\n         */\n        _quadrant = Biltong.quadrant = function(p1, p2) {\n            return _pointHelper(p1, p2, function(_p1, _p2) {\n                if (_p2[0] > _p1[0]) {\n                    return (_p2[1] > _p1[1]) ? 2 : 1;\n                }\n                else if (_p2[0] == _p1[0]) {\n                    return _p2[1] > _p1[1] ? 2 : 1;\n                }\n                else {\n                    return (_p2[1] > _p1[1]) ? 3 : 4;\n                }\n            });\n        },\n        /**\n         * @name Biltong.theta\n         * @function\n         * @desc Calculates the angle between the two points.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Float} The angle between the two points.\n         */\n        _theta = Biltong.theta = function(p1, p2) {\n            return _pointHelper(p1, p2, function(_p1, _p2) {\n                var m = _gradient(_p1, _p2),\n                    t = Math.atan(m),\n                    s = _quadrant(_p1, _p2);\n                if ((s == 4 || s== 3)) t += Math.PI;\n                if (t < 0) t += (2 * Math.PI);\n\n                return t;\n            });\n        },\n        /**\n         * @name Biltong.intersects\n         * @function\n         * @desc Calculates whether or not the two rectangles intersect.\n         * @param {Rectangle} r1 First rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\n         * @param {Rectangle} r2 Second rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\n         * @return {Boolean} True if the rectangles intersect, false otherwise.\n         */\n        _intersects = Biltong.intersects = function(r1, r2) {\n            var x1 = r1.x, x2 = r1.x + r1.w, y1 = r1.y, y2 = r1.y + r1.h,\n                a1 = r2.x, a2 = r2.x + r2.w, b1 = r2.y, b2 = r2.y + r2.h;\n\n            return  ( (x1 <= a1 && a1 <= x2) && (y1 <= b1 && b1 <= y2) ) ||\n                ( (x1 <= a2 && a2 <= x2) && (y1 <= b1 && b1 <= y2) ) ||\n                ( (x1 <= a1 && a1 <= x2) && (y1 <= b2 && b2 <= y2) ) ||\n                ( (x1 <= a2 && a1 <= x2) && (y1 <= b2 && b2 <= y2) ) ||\n                ( (a1 <= x1 && x1 <= a2) && (b1 <= y1 && y1 <= b2) ) ||\n                ( (a1 <= x2 && x2 <= a2) && (b1 <= y1 && y1 <= b2) ) ||\n                ( (a1 <= x1 && x1 <= a2) && (b1 <= y2 && y2 <= b2) ) ||\n                ( (a1 <= x2 && x1 <= a2) && (b1 <= y2 && y2 <= b2) );\n        },\n        /**\n         * @name Biltong.encloses\n         * @function\n         * @desc Calculates whether or not r2 is completely enclosed by r1.\n         * @param {Rectangle} r1 First rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\n         * @param {Rectangle} r2 Second rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\n         * @param {Boolean} [allowSharedEdges=false] If true, the concept of enclosure allows for one or more edges to be shared by the two rectangles.\n         * @return {Boolean} True if r1 encloses r2, false otherwise.\n         */\n        _encloses = Biltong.encloses = function(r1, r2, allowSharedEdges) {\n            var x1 = r1.x, x2 = r1.x + r1.w, y1 = r1.y, y2 = r1.y + r1.h,\n                a1 = r2.x, a2 = r2.x + r2.w, b1 = r2.y, b2 = r2.y + r2.h,\n                c = function(v1, v2, v3, v4) { return allowSharedEdges ? v1 <= v2 && v3>= v4 : v1 < v2 && v3 > v4; };\n\n            return c(x1,a1,x2,a2) && c(y1,b1,y2,b2);\n        },\n        _segmentMultipliers = [null, [1, -1], [1, 1], [-1, 1], [-1, -1] ],\n        _inverseSegmentMultipliers = [null, [-1, -1], [-1, 1], [1, 1], [1, -1] ],\n        /**\n         * @name Biltong.pointOnLine\n         * @function\n         * @desc Calculates a point on the line from `fromPoint` to `toPoint` that is `distance` units along the length of the line.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Point} Point on the line, in the form `{ x:..., y:... }`.\n         */\n        _pointOnLine = Biltong.pointOnLine = function(fromPoint, toPoint, distance) {\n            var m = _gradient(fromPoint, toPoint),\n                s = _quadrant(fromPoint, toPoint),\n                segmentMultiplier = distance > 0 ? _segmentMultipliers[s] : _inverseSegmentMultipliers[s],\n                theta = Math.atan(m),\n                y = Math.abs(distance * Math.sin(theta)) * segmentMultiplier[1],\n                x =  Math.abs(distance * Math.cos(theta)) * segmentMultiplier[0];\n            return { x:fromPoint.x + x, y:fromPoint.y + y };\n        },\n        /**\n         * @name Biltong.perpendicularLineTo\n         * @function\n         * @desc Calculates a line of length `length` that is perpendicular to the line from `fromPoint` to `toPoint` and passes through `toPoint`.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Line} Perpendicular line, in the form `[ { x:..., y:... }, { x:..., y:... } ]`.\n         */\n        _perpendicularLineTo = Biltong.perpendicularLineTo = function(fromPoint, toPoint, length) {\n            var m = _gradient(fromPoint, toPoint),\n                theta2 = Math.atan(-1 / m),\n                y =  length / 2 * Math.sin(theta2),\n                x =  length / 2 * Math.cos(theta2);\n            return [{x:toPoint.x + x, y:toPoint.y + y}, {x:toPoint.x - x, y:toPoint.y - y}];\n        };\n}).call(typeof window !== 'undefined' ? window : this);\n;\n(function () {\n\n    \"use strict\";\n\n    var root = this,\n        Sniff = {\n            android: navigator.userAgent.toLowerCase().indexOf(\"android\") > -1\n        },\n        matchesSelector = function (el, selector, ctx) {\n            ctx = ctx || el.parentNode;\n            var possibles = ctx.querySelectorAll(selector);\n            for (var i = 0; i < possibles.length; i++) {\n                if (possibles[i] === el) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        _gel = function (el) {\n            return (typeof el == \"string\" || el.constructor === String) ? document.getElementById(el) : el;\n        },\n        _t = function (e) {\n            return e.srcElement || e.target;\n        },\n    //\n    // gets path info for the given event - the path from target to obj, in the event's bubble chain. if doCompute\n    // is false we just return target for the path.\n    //\n        _pi = function(e, target, obj, doCompute) {\n            if (!doCompute) return { path:[target], end:1 };\n            else if (typeof e.path !== \"undefined\" && e.path.indexOf) {\n                return { path: e.path, end: e.path.indexOf(obj) };\n            } else {\n                var out = { path:[], end:-1 }, _one = function(el) {\n                    out.path.push(el);\n                    if (el === obj) {\n                        out.end = out.path.length - 1;\n                    }\n                    else if (el.parentNode != null) {\n                        _one(el.parentNode)\n                    }\n                };\n                _one(target);\n                return out;\n            }\n        },\n        _d = function (l, fn) {\n            for (var i = 0, j = l.length; i < j; i++) {\n                if (l[i] == fn) break;\n            }\n            if (i < l.length) l.splice(i, 1);\n        },\n        guid = 1,\n    //\n    // this function generates a guid for every handler, sets it on the handler, then adds\n    // it to the associated object's map of handlers for the given event. this is what enables us\n    // to unbind all events of some type, or all events (the second of which can be requested by the user,\n    // but it also used by Mottle when an element is removed.)\n        _store = function (obj, event, fn) {\n            var g = guid++;\n            obj.__ta = obj.__ta || {};\n            obj.__ta[event] = obj.__ta[event] || {};\n            // store each handler with a unique guid.\n            obj.__ta[event][g] = fn;\n            // set the guid on the handler.\n            fn.__tauid = g;\n            return g;\n        },\n        _unstore = function (obj, event, fn) {\n            obj.__ta && obj.__ta[event] && delete obj.__ta[event][fn.__tauid];\n            // a handler might have attached extra functions, so we unbind those too.\n            if (fn.__taExtra) {\n                for (var i = 0; i < fn.__taExtra.length; i++) {\n                    _unbind(obj, fn.__taExtra[i][0], fn.__taExtra[i][1]);\n                }\n                fn.__taExtra.length = 0;\n            }\n            // a handler might have attached an unstore callback\n            fn.__taUnstore && fn.__taUnstore();\n        },\n        _curryChildFilter = function (children, obj, fn, evt) {\n            if (children == null) return fn;\n            else {\n                var c = children.split(\",\"),\n                    _fn = function (e) {\n                        _fn.__tauid = fn.__tauid;\n                        var t = _t(e), target = t;  // t is the target element on which the event occurred. it is the\n                        // element we will wish to pass to any callbacks.\n                        var pathInfo = _pi(e, t, obj, children != null)\n                        if (pathInfo.end != -1) {\n                            for (var p = 0; p < pathInfo.end; p++) {\n                                target = pathInfo.path[p];\n                                for (var i = 0; i < c.length; i++) {\n                                    if (matchesSelector(target, c[i], obj)) {\n                                        fn.apply(target, arguments);\n                                    }\n                                }\n                            }\n                        }\n                    };\n                registerExtraFunction(fn, evt, _fn);\n                return _fn;\n            }\n        },\n    //\n    // registers an 'extra' function on some event listener function we were given - a function that we\n    // created and bound to the element as part of our housekeeping, and which we want to unbind and remove\n    // whenever the given function is unbound.\n        registerExtraFunction = function (fn, evt, newFn) {\n            fn.__taExtra = fn.__taExtra || [];\n            fn.__taExtra.push([evt, newFn]);\n        },\n        DefaultHandler = function (obj, evt, fn, children) {\n            if (isTouchDevice && touchMap[evt]) {\n                var tfn = _curryChildFilter(children, obj, fn, touchMap[evt]);\n                _bind(obj, touchMap[evt], tfn , fn);\n            }\n            if (evt === \"focus\" && obj.getAttribute(\"tabindex\") == null) {\n                obj.setAttribute(\"tabindex\", \"1\");\n            }\n            _bind(obj, evt, _curryChildFilter(children, obj, fn, evt), fn);\n        },\n        SmartClickHandler = function (obj, evt, fn, children) {\n            if (obj.__taSmartClicks == null) {\n                var down = function (e) {\n                        obj.__tad = _pageLocation(e);\n                    },\n                    up = function (e) {\n                        obj.__tau = _pageLocation(e);\n                    },\n                    click = function (e) {\n                        if (obj.__tad && obj.__tau && obj.__tad[0] === obj.__tau[0] && obj.__tad[1] === obj.__tau[1]) {\n                            for (var i = 0; i < obj.__taSmartClicks.length; i++)\n                                obj.__taSmartClicks[i].apply(_t(e), [ e ]);\n                        }\n                    };\n                DefaultHandler(obj, \"mousedown\", down, children);\n                DefaultHandler(obj, \"mouseup\", up, children);\n                DefaultHandler(obj, \"click\", click, children);\n                obj.__taSmartClicks = [];\n            }\n\n            // store in the list of callbacks\n            obj.__taSmartClicks.push(fn);\n            // the unstore function removes this function from the object's listener list for this type.\n            fn.__taUnstore = function () {\n                _d(obj.__taSmartClicks, fn);\n            };\n        },\n        _tapProfiles = {\n            \"tap\": {touches: 1, taps: 1},\n            \"dbltap\": {touches: 1, taps: 2},\n            \"contextmenu\": {touches: 2, taps: 1}\n        },\n        TapHandler = function (clickThreshold, dblClickThreshold) {\n            return function (obj, evt, fn, children) {\n                // if event is contextmenu, for devices which are mouse only, we want to\n                // use the default bind.\n                if (evt == \"contextmenu\" && isMouseDevice)\n                    DefaultHandler(obj, evt, fn, children);\n                else {\n                    // the issue here is that this down handler gets registered only for the\n                    // child nodes in the first registration. in fact it should be registered with\n                    // no child selector and then on down we should cycle through the registered\n                    // functions to see if one of them matches. on mouseup we should execute ALL of\n                    // the functions whose children are either null or match the element.\n                    if (obj.__taTapHandler == null) {\n                        var tt = obj.__taTapHandler = {\n                            tap: [],\n                            dbltap: [],\n                            contextmenu: [],\n                            down: false,\n                            taps: 0,\n                            downSelectors: []\n                        };\n                        var down = function (e) {\n                                var target = _t(e), pathInfo = _pi(e, target, obj, children != null), finished = false;\n                                for (var p = 0; p < pathInfo.end; p++) {\n                                    if (finished) return;\n                                    target = pathInfo.path[p];\n                                    for (var i = 0; i < tt.downSelectors.length; i++) {\n                                        if (tt.downSelectors[i] == null || matchesSelector(target, tt.downSelectors[i], obj)) {\n                                            tt.down = true;\n                                            setTimeout(clearSingle, clickThreshold);\n                                            setTimeout(clearDouble, dblClickThreshold);\n                                            finished = true;\n                                            break; // we only need one match on mousedown\n                                        }\n                                    }\n                                }\n                            },\n                            up = function (e) {\n                                if (tt.down) {\n                                    var target = _t(e), currentTarget, pathInfo;\n                                    tt.taps++;\n                                    var tc = _touchCount(e);\n                                    for (var eventId in _tapProfiles) {\n                                        if (_tapProfiles.hasOwnProperty(eventId)) {\n                                            var p = _tapProfiles[eventId];\n                                            if (p.touches === tc && (p.taps === 1 || p.taps === tt.taps)) {\n                                                for (var i = 0; i < tt[eventId].length; i++) {\n                                                    pathInfo = _pi(e, target, obj, tt[eventId][i][1] != null);\n                                                    for (var pLoop = 0; pLoop < pathInfo.end; pLoop++) {\n                                                        currentTarget = pathInfo.path[pLoop];\n                                                        // this is a single event registration handler.\n                                                        if (tt[eventId][i][1] == null || matchesSelector(currentTarget, tt[eventId][i][1], obj)) {\n                                                            tt[eventId][i][0].apply(currentTarget, [ e ]);\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            clearSingle = function () {\n                                tt.down = false;\n                            },\n                            clearDouble = function () {\n                                tt.taps = 0;\n                            };\n\n                        DefaultHandler(obj, \"mousedown\", down);\n                        DefaultHandler(obj, \"mouseup\", up);\n                    }\n                    // add this child selector (it can be null, that's fine).\n                    obj.__taTapHandler.downSelectors.push(children);\n\n                    obj.__taTapHandler[evt].push([fn, children]);\n                    // the unstore function removes this function from the object's listener list for this type.\n                    fn.__taUnstore = function () {\n                        _d(obj.__taTapHandler[evt], fn);\n                    };\n                }\n            };\n        },\n        meeHelper = function (type, evt, obj, target) {\n            for (var i in obj.__tamee[type]) {\n                if (obj.__tamee[type].hasOwnProperty(i)) {\n                    obj.__tamee[type][i].apply(target, [ evt ]);\n                }\n            }\n        },\n        MouseEnterExitHandler = function () {\n            var activeElements = [];\n            return function (obj, evt, fn, children) {\n                if (!obj.__tamee) {\n                    // __tamee holds a flag saying whether the mouse is currently \"in\" the element, and a list of\n                    // both mouseenter and mouseexit functions.\n                    obj.__tamee = { over: false, mouseenter: [], mouseexit: [] };\n                    // register over and out functions\n                    var over = function (e) {\n                            var t = _t(e);\n                            if ((children == null && (t == obj && !obj.__tamee.over)) || (matchesSelector(t, children, obj) && (t.__tamee == null || !t.__tamee.over))) {\n                                meeHelper(\"mouseenter\", e, obj, t);\n                                t.__tamee = t.__tamee || {};\n                                t.__tamee.over = true;\n                                activeElements.push(t);\n                            }\n                        },\n                        out = function (e) {\n                            var t = _t(e);\n                            // is the current target one of the activeElements? and is the\n                            // related target NOT a descendant of it?\n                            for (var i = 0; i < activeElements.length; i++) {\n                                if (t == activeElements[i] && !matchesSelector((e.relatedTarget || e.toElement), \"*\", t)) {\n                                    t.__tamee.over = false;\n                                    activeElements.splice(i, 1);\n                                    meeHelper(\"mouseexit\", e, obj, t);\n                                }\n                            }\n                        };\n\n                    _bind(obj, \"mouseover\", _curryChildFilter(children, obj, over, \"mouseover\"), over);\n                    _bind(obj, \"mouseout\", _curryChildFilter(children, obj, out, \"mouseout\"), out);\n                }\n\n                fn.__taUnstore = function () {\n                    delete obj.__tamee[evt][fn.__tauid];\n                };\n\n                _store(obj, evt, fn);\n                obj.__tamee[evt][fn.__tauid] = fn;\n            };\n        },\n        isTouchDevice = \"ontouchstart\" in document.documentElement,\n        isMouseDevice = \"onmousedown\" in document.documentElement,\n        touchMap = { \"mousedown\": \"touchstart\", \"mouseup\": \"touchend\", \"mousemove\": \"touchmove\" },\n        touchstart = \"touchstart\", touchend = \"touchend\", touchmove = \"touchmove\",\n        iev = (function () {\n            var rv = -1;\n            if (navigator.appName == 'Microsoft Internet Explorer') {\n                var ua = navigator.userAgent,\n                    re = new RegExp(\"MSIE ([0-9]{1,}[\\.0-9]{0,})\");\n                if (re.exec(ua) != null)\n                    rv = parseFloat(RegExp.$1);\n            }\n            return rv;\n        })(),\n        isIELT9 = iev > -1 && iev < 9,\n        _genLoc = function (e, prefix) {\n            if (e == null) return [ 0, 0 ];\n            var ts = _touches(e), t = _getTouch(ts, 0);\n            return [t[prefix + \"X\"], t[prefix + \"Y\"]];\n        },\n        _pageLocation = function (e) {\n            if (e == null) return [ 0, 0 ];\n            if (isIELT9) {\n                return [ e.clientX + document.documentElement.scrollLeft, e.clientY + document.documentElement.scrollTop ];\n            }\n            else {\n                return _genLoc(e, \"page\");\n            }\n        },\n        _screenLocation = function (e) {\n            return _genLoc(e, \"screen\");\n        },\n        _clientLocation = function (e) {\n            return _genLoc(e, \"client\");\n        },\n        _getTouch = function (touches, idx) {\n            return touches.item ? touches.item(idx) : touches[idx];\n        },\n        _touches = function (e) {\n            return e.touches && e.touches.length > 0 ? e.touches :\n                    e.changedTouches && e.changedTouches.length > 0 ? e.changedTouches :\n                    e.targetTouches && e.targetTouches.length > 0 ? e.targetTouches :\n                [ e ];\n        },\n        _touchCount = function (e) {\n            return _touches(e).length;\n        },\n    //http://www.quirksmode.org/blog/archives/2005/10/_and_the_winner_1.html\n        _bind = function (obj, type, fn, originalFn) {\n            _store(obj, type, fn);\n            originalFn.__tauid = fn.__tauid;\n            if (obj.addEventListener)\n                obj.addEventListener(type, fn, false);\n            else if (obj.attachEvent) {\n                var key = type + fn.__tauid;\n                obj[\"e\" + key] = fn;\n                // TODO look at replacing with .call(..)\n                obj[key] = function () {\n                    obj[\"e\" + key] && obj[\"e\" + key](window.event);\n                };\n                obj.attachEvent(\"on\" + type, obj[key]);\n            }\n        },\n        _unbind = function (obj, type, fn) {\n            if (fn == null) return;\n            _each(obj, function () {\n                var _el = _gel(this);\n                _unstore(_el, type, fn);\n                // it has been bound if there is a tauid. otherwise it was not bound and we can ignore it.\n                if (fn.__tauid != null) {\n                    if (_el.removeEventListener) {\n                        _el.removeEventListener(type, fn, false);\n                        if (isTouchDevice && touchMap[type]) _el.removeEventListener(touchMap[type], fn, false);\n                    }\n                    else if (this.detachEvent) {\n                        var key = type + fn.__tauid;\n                        _el[key] && _el.detachEvent(\"on\" + type, _el[key]);\n                        _el[key] = null;\n                        _el[\"e\" + key] = null;\n                    }\n                }\n\n                // if a touch event was also registered, deregister now.\n                if (fn.__taTouchProxy) {\n                    _unbind(obj, fn.__taTouchProxy[1], fn.__taTouchProxy[0]);\n                }\n            });\n        },\n        _each = function (obj, fn) {\n            if (obj == null) return;\n            // if a list (or list-like), use it. if a string, get a list\n            // by running the string through querySelectorAll. else, assume\n            // it's an Element.\n            // obj.top is \"unknown\" in IE8.\n            obj = (typeof Window !== \"undefined\" && (typeof obj.top !== \"unknown\" && obj == obj.top)) ? [ obj ] :\n                    (typeof obj !== \"string\") && (obj.tagName == null && obj.length != null) ? obj :\n                    typeof obj === \"string\" ? document.querySelectorAll(obj)\n                : [ obj ];\n\n            for (var i = 0; i < obj.length; i++)\n                fn.apply(obj[i]);\n        };\n\n    /**\n     * Mottle offers support for abstracting out the differences\n     * between touch and mouse devices, plus \"smart click\" functionality\n     * (don't fire click if the mouse has moved between mousedown and mouseup),\n     * and synthesized click/tap events.\n     * @class Mottle\n     * @constructor\n     * @param {Object} params Constructor params\n     * @param {Number} [params.clickThreshold=250] Threshold, in milliseconds beyond which a touchstart followed by a touchend is not considered to be a click.\n     * @param {Number} [params.dblClickThreshold=450] Threshold, in milliseconds beyond which two successive tap events are not considered to be a click.\n     * @param {Boolean} [params.smartClicks=false] If true, won't fire click events if the mouse has moved between mousedown and mouseup. Note that this functionality\n     * requires that Mottle consume the mousedown event, and so may not be viable in all use cases.\n     */\n    root.Mottle = function (params) {\n        params = params || {};\n        var clickThreshold = params.clickThreshold || 250,\n            dblClickThreshold = params.dblClickThreshold || 450,\n            mouseEnterExitHandler = new MouseEnterExitHandler(),\n            tapHandler = new TapHandler(clickThreshold, dblClickThreshold),\n            _smartClicks = params.smartClicks,\n            _doBind = function (obj, evt, fn, children) {\n                if (fn == null) return;\n                _each(obj, function () {\n                    var _el = _gel(this);\n                    if (_smartClicks && evt === \"click\")\n                        SmartClickHandler(_el, evt, fn, children);\n                    else if (evt === \"tap\" || evt === \"dbltap\" || evt === \"contextmenu\") {\n                        tapHandler(_el, evt, fn, children);\n                    }\n                    else if (evt === \"mouseenter\" || evt == \"mouseexit\")\n                        mouseEnterExitHandler(_el, evt, fn, children);\n                    else\n                        DefaultHandler(_el, evt, fn, children);\n                });\n            };\n\n        /**\n         * Removes an element from the DOM, and deregisters all event handlers for it. You should use this\n         * to ensure you don't leak memory.\n         * @method remove\n         * @param {String|Element} el Element, or id of the element, to remove.\n         * @return {Mottle} The current Mottle instance; you can chain this method.\n         */\n        this.remove = function (el) {\n            _each(el, function () {\n                var _el = _gel(this);\n                if (_el.__ta) {\n                    for (var evt in _el.__ta) {\n                        if (_el.__ta.hasOwnProperty(evt)) {\n                            for (var h in _el.__ta[evt]) {\n                                if (_el.__ta[evt].hasOwnProperty(h))\n                                    _unbind(_el, evt, _el.__ta[evt][h]);\n                            }\n                        }\n                    }\n                }\n                _el.parentNode && _el.parentNode.removeChild(_el);\n            });\n            return this;\n        };\n\n        /**\n         * Register an event handler, optionally as a delegate for some set of descendant elements. Note\n         * that this method takes either 3 or 4 arguments - if you supply 3 arguments it is assumed you have\n         * omitted the `children` parameter, and that the event handler should be bound directly to the given element.\n         * @method on\n         * @param {Element[]|Element|String} el Either an Element, or a CSS spec for a list of elements, or an array of Elements.\n         * @param {String} [children] Comma-delimited list of selectors identifying allowed children.\n         * @param {String} event Event ID.\n         * @param {Function} fn Event handler function.\n         * @return {Mottle} The current Mottle instance; you can chain this method.\n         */\n        this.on = function (el, event, children, fn) {\n            var _el = arguments[0],\n                _c = arguments.length == 4 ? arguments[2] : null,\n                _e = arguments[1],\n                _f = arguments[arguments.length - 1];\n\n            _doBind(_el, _e, _f, _c);\n            return this;\n        };\n\n        /**\n         * Cancel delegate event handling for the given function. Note that unlike with 'on' you do not supply\n         * a list of child selectors here: it removes event delegation from all of the child selectors for which the\n         * given function was registered (if any).\n         * @method off\n         * @param {Element[]|Element|String} el Element - or ID of element - from which to remove event listener.\n         * @param {String} event Event ID.\n         * @param {Function} fn Event handler function.\n         * @return {Mottle} The current Mottle instance; you can chain this method.\n         */\n        this.off = function (el, event, fn) {\n            _unbind(el, event, fn);\n            return this;\n        };\n\n        /**\n         * Triggers some event for a given element.\n         * @method trigger\n         * @param {Element} el Element for which to trigger the event.\n         * @param {String} event Event ID.\n         * @param {Event} originalEvent The original event. Should be optional of course, but currently is not, due\n         * to the jsPlumb use case that caused this method to be added.\n         * @param {Object} [payload] Optional object to set as `payload` on the generated event; useful for message passing.\n         * @return {Mottle} The current Mottle instance; you can chain this method.\n         */\n        this.trigger = function (el, event, originalEvent, payload) {\n            // MouseEvent undefined in old IE; that's how we know it's a mouse event.  A fine Microsoft paradox.\n            var originalIsMouse = isMouseDevice && (typeof MouseEvent === \"undefined\" || originalEvent == null || originalEvent.constructor === MouseEvent);\n\n            var eventToBind = (isTouchDevice && !isMouseDevice && touchMap[event]) ? touchMap[event] : event,\n                bindingAMouseEvent = !(isTouchDevice && !isMouseDevice && touchMap[event]);\n\n            var pl = _pageLocation(originalEvent), sl = _screenLocation(originalEvent), cl = _clientLocation(originalEvent);\n            _each(el, function () {\n                var _el = _gel(this), evt;\n                originalEvent = originalEvent || {\n                    screenX: sl[0],\n                    screenY: sl[1],\n                    clientX: cl[0],\n                    clientY: cl[1]\n                };\n\n                var _decorate = function (_evt) {\n                    if (payload) _evt.payload = payload;\n                };\n\n                var eventGenerators = {\n                    \"TouchEvent\": function (evt) {\n                        var touch = document.createTouch(window, _el, 0, pl[0], pl[1],\n                            sl[0], sl[1],\n                            cl[0], cl[1],\n                            0, 0, 0, 0);\n\n                        // https://gist.github.com/sstephenson/448808\n                        var touches = document.createTouchList(touch);\n                        var targetTouches = document.createTouchList(touch);\n                        var changedTouches = document.createTouchList(touch);\n                        evt.initTouchEvent(eventToBind, true, true, window, null, sl[0], sl[1],\n                            cl[0], cl[1], false, false, false, false,\n                            touches, targetTouches, changedTouches, 1, 0);\n                    },\n                    \"MouseEvents\": function (evt) {\n                        evt.initMouseEvent(eventToBind, true, true, window, 0,\n                            sl[0], sl[1],\n                            cl[0], cl[1],\n                            false, false, false, false, 1, _el);\n\n                        if (Sniff.android) {\n                            // Android's touch events are not standard.\n                            var t = document.createTouch(window, _el, 0, pl[0], pl[1],\n                                sl[0], sl[1],\n                                cl[0], cl[1],\n                                0, 0, 0, 0);\n\n                            evt.touches = evt.targetTouches = evt.changedTouches = document.createTouchList(t);\n                        }\n                    }\n                };\n\n                if (document.createEvent) {\n\n                    var ite = !bindingAMouseEvent && !originalIsMouse && (isTouchDevice && touchMap[event] && !Sniff.android),\n                        evtName = ite ? \"TouchEvent\" : \"MouseEvents\";\n\n                    evt = document.createEvent(evtName);\n                    eventGenerators[evtName](evt);\n                    _decorate(evt);\n                    _el.dispatchEvent(evt);\n                }\n                else if (document.createEventObject) {\n                    evt = document.createEventObject();\n                    evt.eventType = evt.eventName = eventToBind;\n                    evt.screenX = sl[0];\n                    evt.screenY = sl[1];\n                    evt.clientX = cl[0];\n                    evt.clientY = cl[1];\n                    _decorate(evt);\n                    _el.fireEvent('on' + eventToBind, evt);\n                }\n            });\n            return this;\n        }\n    };\n\n    /**\n     * Static method to assist in 'consuming' an element: uses `stopPropagation` where available, or sets\n     * `e.returnValue=false` where it is not.\n     * @method Mottle.consume\n     * @param {Event} e Event to consume\n     * @param {Boolean} [doNotPreventDefault=false] If true, does not call `preventDefault()` on the event.\n     */\n    root.Mottle.consume = function (e, doNotPreventDefault) {\n        if (e.stopPropagation)\n            e.stopPropagation();\n        else\n            e.returnValue = false;\n\n        if (!doNotPreventDefault && e.preventDefault)\n            e.preventDefault();\n    };\n\n    /**\n     * Gets the page location corresponding to the given event. For touch events this means get the page location of the first touch.\n     * @method Mottle.pageLocation\n     * @param {Event} e Event to get page location for.\n     * @return {Number[]} [left, top] for the given event.\n     */\n    root.Mottle.pageLocation = _pageLocation;\n\n    /**\n     * Forces touch events to be turned \"on\". Useful for testing: even if you don't have a touch device, you can still\n     * trigger a touch event when this is switched on and it will be captured and acted on.\n     * @method setForceTouchEvents\n     * @param {Boolean} value If true, force touch events to be on.\n     */\n    root.Mottle.setForceTouchEvents = function (value) {\n        isTouchDevice = value;\n    };\n\n    /**\n     * Forces mouse events to be turned \"on\". Useful for testing: even if you don't have a mouse, you can still\n     * trigger a mouse event when this is switched on and it will be captured and acted on.\n     * @method setForceMouseEvents\n     * @param {Boolean} value If true, force mouse events to be on.\n     */\n    root.Mottle.setForceMouseEvents = function (value) {\n        isMouseDevice = value;\n    };\n\n    root.Mottle.version = \"0.8.0\";\n\n    if (true) {\n        exports.Mottle = root.Mottle;\n    }\n\n}).call(typeof window === \"undefined\" ? this : window);\n\n/**\n drag/drop functionality for use with jsPlumb but with\n no knowledge of jsPlumb. supports multiple scopes (separated by whitespace), dragging\n multiple elements, constrain to parent, drop filters, drag start filters, custom\n css classes.\n\n a lot of the functionality of this script is expected to be plugged in:\n\n addClass\n removeClass\n\n addEvent\n removeEvent\n\n getPosition\n setPosition\n getSize\n\n indexOf\n intersects\n\n the name came from here:\n\n http://mrsharpoblunto.github.io/foswig.js/\n\n copyright 2016 jsPlumb\n */\n\n;(function() {\n\n    \"use strict\";\n    var root = this;\n\n    var _suggest = function(list, item, head) {\n        if (list.indexOf(item) === -1) {\n            head ? list.unshift(item) : list.push(item);\n            return true;\n        }\n        return false;\n    };\n\n    var _vanquish = function(list, item) {\n        var idx = list.indexOf(item);\n        if (idx != -1) list.splice(idx, 1);\n    };\n\n    var _difference = function(l1, l2) {\n        var d = [];\n        for (var i = 0; i < l1.length; i++) {\n            if (l2.indexOf(l1[i]) == -1)\n                d.push(l1[i]);\n        }\n        return d;\n    };\n\n    var _isString = function(f) {\n        return f == null ? false : (typeof f === \"string\" || f.constructor == String);\n    };\n\n    var getOffsetRect = function (elem) {\n        // (1)\n        var box = elem.getBoundingClientRect(),\n            body = document.body,\n            docElem = document.documentElement,\n        // (2)\n            scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop,\n            scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft,\n        // (3)\n            clientTop = docElem.clientTop || body.clientTop || 0,\n            clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        // (4)\n            top  = box.top +  scrollTop - clientTop,\n            left = box.left + scrollLeft - clientLeft;\n\n        return { top: Math.round(top), left: Math.round(left) };\n    };\n\n    var matchesSelector = function(el, selector, ctx) {\n        ctx = ctx || el.parentNode;\n        var possibles = ctx.querySelectorAll(selector);\n        for (var i = 0; i < possibles.length; i++) {\n            if (possibles[i] === el)\n                return true;\n        }\n        return false;\n    };\n\n    var iev = (function() {\n            var rv = -1;\n            if (navigator.appName == 'Microsoft Internet Explorer') {\n                var ua = navigator.userAgent,\n                    re = new RegExp(\"MSIE ([0-9]{1,}[\\.0-9]{0,})\");\n                if (re.exec(ua) != null)\n                    rv = parseFloat(RegExp.$1);\n            }\n            return rv;\n        })(),\n        DEFAULT_GRID_X = 50,\n        DEFAULT_GRID_Y = 50,\n        isIELT9 = iev > -1 && iev < 9,\n        isIE9 = iev == 9,\n        _pl = function(e) {\n            if (isIELT9) {\n                return [ e.clientX + document.documentElement.scrollLeft, e.clientY + document.documentElement.scrollTop ];\n            }\n            else {\n                var ts = _touches(e), t = _getTouch(ts, 0);\n                // for IE9 pageX might be null if the event was synthesized. We try for pageX/pageY first,\n                // falling back to clientX/clientY if necessary. In every other browser we want to use pageX/pageY.\n                return isIE9 ? [t.pageX || t.clientX, t.pageY || t.clientY] : [t.pageX, t.pageY];\n            }\n        },\n        _getTouch = function(touches, idx) { return touches.item ? touches.item(idx) : touches[idx]; },\n        _touches = function(e) {\n            return e.touches && e.touches.length > 0 ? e.touches :\n                    e.changedTouches && e.changedTouches.length > 0 ? e.changedTouches :\n                    e.targetTouches && e.targetTouches.length > 0 ? e.targetTouches :\n                [ e ];\n        },\n        _classes = {\n            draggable:\"katavorio-draggable\",    // draggable elements\n            droppable:\"katavorio-droppable\",    // droppable elements\n            drag : \"katavorio-drag\",            // elements currently being dragged\n            selected:\"katavorio-drag-selected\", // elements in current drag selection\n            active : \"katavorio-drag-active\",   // droppables that are targets of a currently dragged element\n            hover : \"katavorio-drag-hover\",     // droppables over which a matching drag element is hovering\n            noSelect : \"katavorio-drag-no-select\", // added to the body to provide a hook to suppress text selection\n            ghostProxy:\"katavorio-ghost-proxy\"  // added to a ghost proxy element in use when a drag has exited the bounds of its parent.\n        },\n        _defaultScope = \"katavorio-drag-scope\",\n        _events = [ \"stop\", \"start\", \"drag\", \"drop\", \"over\", \"out\", \"beforeStart\" ],\n        _devNull = function() {},\n        _true = function() { return true; },\n        _foreach = function(l, fn, from) {\n            for (var i = 0; i < l.length; i++) {\n                if (l[i] != from)\n                    fn(l[i]);\n            }\n        },\n        _setDroppablesActive = function(dd, val, andHover, drag) {\n            _foreach(dd, function(e) {\n                e.setActive(val);\n                if (val) e.updatePosition();\n                if (andHover) e.setHover(drag, val);\n            });\n        },\n        _each = function(obj, fn) {\n            if (obj == null) return;\n            obj = !_isString(obj) && (obj.tagName == null && obj.length != null) ? obj : [ obj ];\n            for (var i = 0; i < obj.length; i++)\n                fn.apply(obj[i], [ obj[i] ]);\n        },\n        _consume = function(e) {\n            if (e.stopPropagation) {\n                e.stopPropagation();\n                e.preventDefault();\n            }\n            else {\n                e.returnValue = false;\n            }\n        },\n        _defaultInputFilterSelector = \"input,textarea,select,button,option\",\n    //\n    // filters out events on all input elements, like textarea, checkbox, input, select.\n        _inputFilter = function(e, el, _katavorio) {\n            var t = e.srcElement || e.target;\n            return !matchesSelector(t, _katavorio.getInputFilterSelector(), el);\n        };\n\n    var Super = function(el, params, css, scope) {\n        this.params = params || {};\n        this.el = el;\n        this.params.addClass(this.el, this._class);\n        this.uuid = _uuid();\n        var enabled = true;\n        this.setEnabled = function(e) { enabled = e; };\n        this.isEnabled = function() { return enabled; };\n        this.toggleEnabled = function() { enabled = !enabled; };\n        this.setScope = function(scopes) {\n            this.scopes = scopes ? scopes.split(/\\s+/) : [ scope ];\n        };\n        this.addScope = function(scopes) {\n            var m = {};\n            _each(this.scopes, function(s) { m[s] = true;});\n            _each(scopes ? scopes.split(/\\s+/) : [], function(s) { m[s] = true;});\n            this.scopes = [];\n            for (var i in m) this.scopes.push(i);\n        };\n        this.removeScope = function(scopes) {\n            var m = {};\n            _each(this.scopes, function(s) { m[s] = true;});\n            _each(scopes ? scopes.split(/\\s+/) : [], function(s) { delete m[s];});\n            this.scopes = [];\n            for (var i in m) this.scopes.push(i);\n        };\n        this.toggleScope = function(scopes) {\n            var m = {};\n            _each(this.scopes, function(s) { m[s] = true;});\n            _each(scopes ? scopes.split(/\\s+/) : [], function(s) {\n                if (m[s]) delete m[s];\n                else m[s] = true;\n            });\n            this.scopes = [];\n            for (var i in m) this.scopes.push(i);\n        };\n        this.setScope(params.scope);\n        this.k = params.katavorio;\n        return params.katavorio;\n    };\n\n    var TRUE = function() { return true; };\n    var FALSE = function() { return false; };\n\n    var Drag = function(el, params, css, scope) {\n        this._class = css.draggable;\n        var k = Super.apply(this, arguments);\n        this.rightButtonCanDrag = this.params.rightButtonCanDrag;\n        var downAt = [0,0], posAtDown = null, pagePosAtDown = null, pageDelta = [0,0], moving = false,\n            consumeStartEvent = this.params.consumeStartEvent !== false,\n            dragEl = this.el,\n            clone = this.params.clone,\n            scroll = this.params.scroll,\n            _multipleDrop = params.multipleDrop !== false,\n            isConstrained = false,\n            useGhostProxy = params.ghostProxy === true ? TRUE : params.ghostProxy && typeof params.ghostProxy === \"function\" ? params.ghostProxy : FALSE,\n            ghostProxy = function(el) { return el.cloneNode(true); };\n\n        var snapThreshold = params.snapThreshold || 5,\n            _snap = function(pos, x, y, thresholdX, thresholdY) {\n                thresholdX = thresholdX || snapThreshold;\n                thresholdY = thresholdY || snapThreshold;\n                var _dx = Math.floor(pos[0] / x),\n                    _dxl = x * _dx,\n                    _dxt = _dxl + x,\n                    _x = Math.abs(pos[0] - _dxl) <= thresholdX ? _dxl : Math.abs(_dxt - pos[0]) <= thresholdX ? _dxt : pos[0];\n\n                var _dy = Math.floor(pos[1] / y),\n                    _dyl = y * _dy,\n                    _dyt = _dyl + y,\n                    _y = Math.abs(pos[1] - _dyl) <= thresholdY ? _dyl : Math.abs(_dyt - pos[1]) <= thresholdY ? _dyt : pos[1];\n\n                return [ _x, _y];\n            };\n\n        this.posses = [];\n        this.posseRoles = {};\n\n        this.toGrid = function(pos) {\n            if (this.params.grid == null) {\n                return pos;\n            }\n            else {\n                return _snap(pos, this.params.grid[0], this.params.grid[1]);\n            }\n        };\n\n        this.snap = function(x, y) {\n            if (dragEl == null) return;\n            x = x || (this.params.grid ? this.params.grid[0] : DEFAULT_GRID_X);\n            y = y || (this.params.grid ? this.params.grid[1] : DEFAULT_GRID_Y);\n            var p = this.params.getPosition(dragEl);\n            this.params.setPosition(dragEl, _snap(p, x, y, x, y));\n        };\n\n        this.setUseGhostProxy = function(val) {\n            useGhostProxy = val ? TRUE : FALSE;\n        };\n\n        var constrain;\n        var negativeFilter = function(pos) {\n            return (params.allowNegative === false) ? [ Math.max (0, pos[0]), Math.max(0, pos[1]) ] : pos;\n        };\n\n        var _setConstrain = function(value) {\n            constrain = typeof value === \"function\" ? value : value ? function(pos) {\n                return negativeFilter([\n                    Math.max(0, Math.min(constrainRect.w - this.size[0], pos[0])),\n                    Math.max(0, Math.min(constrainRect.h - this.size[1], pos[1]))\n                ]);\n            }.bind(this) : function(pos) { return negativeFilter(pos); };\n        }.bind(this);\n\n        _setConstrain(typeof this.params.constrain === \"function\" ? this.params.constrain  : (this.params.constrain || this.params.containment));\n\n\n        /**\n         * Sets whether or not the Drag is constrained. A value of 'true' means constrain to parent bounds; a function\n         * will be executed and returns true if the position is allowed.\n         * @param value\n         */\n        this.setConstrain = function(value) {\n            _setConstrain(value);\n        };\n\n        var revertFunction;\n        /**\n         * Sets a function to call on drag stop, which, if it returns true, indicates that the given element should\n         * revert to its position before the previous drag.\n         * @param fn\n         */\n        this.setRevert = function(fn) {\n            revertFunction = fn;\n        };\n\n        var _assignId = function(obj) {\n                if (typeof obj == \"function\") {\n                    obj._katavorioId = _uuid();\n                    return obj._katavorioId;\n                } else {\n                    return obj;\n                }\n            },\n        // a map of { spec -> [ fn, exclusion ] } entries.\n            _filters = {},\n            _testFilter = function(e) {\n                for (var key in _filters) {\n                    var f = _filters[key];\n                    var rv = f[0](e);\n                    if (f[1]) rv = !rv;\n                    if (!rv) return false;\n                }\n                return true;\n            },\n            _setFilter = this.setFilter = function(f, _exclude) {\n                if (f) {\n                    var key = _assignId(f);\n                    _filters[key] = [\n                        function(e) {\n                            var t = e.srcElement || e.target, m;\n                            if (_isString(f)) {\n                                m = matchesSelector(t, f, el);\n                            }\n                            else if (typeof f === \"function\") {\n                                m = f(e, el);\n                            }\n                            return m;\n                        },\n                            _exclude !== false\n                    ];\n\n                }\n            },\n            _addFilter = this.addFilter = _setFilter,\n            _removeFilter = this.removeFilter = function(f) {\n                var key = typeof f == \"function\" ? f._katavorioId : f;\n                delete _filters[key];\n            };\n\n        this.clearAllFilters = function() {\n            _filters = {};\n        };\n\n        this.canDrag = this.params.canDrag || _true;\n\n        var constrainRect,\n            matchingDroppables = [], intersectingDroppables = [];\n\n        this.downListener = function(e) {\n            var isNotRightClick = this.rightButtonCanDrag || (e.which !== 3 && e.button !== 2);\n            if (isNotRightClick && this.isEnabled() && this.canDrag()) {\n                var _f =  _testFilter(e) && _inputFilter(e, this.el, this.k);\n                if (_f) {\n                    if (!clone)\n                        dragEl = this.el;\n                    else {\n                        dragEl = this.el.cloneNode(true);\n                        dragEl.setAttribute(\"id\", null);\n                        dragEl.style.position = \"absolute\";\n                        // the clone node is added to the body; getOffsetRect gives us a value\n                        // relative to the body.\n                        var b = getOffsetRect(this.el);\n                        dragEl.style.left = b.left + \"px\";\n                        dragEl.style.top = b.top + \"px\";\n                        document.body.appendChild(dragEl);\n                    }\n                    consumeStartEvent && _consume(e);\n                    downAt = _pl(e);\n                    //\n                    this.params.bind(document, \"mousemove\", this.moveListener);\n                    this.params.bind(document, \"mouseup\", this.upListener);\n                    k.markSelection(this);\n                    k.markPosses(this);\n                    this.params.addClass(document.body, css.noSelect);\n                    _dispatch(\"beforeStart\", {el:this.el, pos:posAtDown, e:e, drag:this});\n                }\n                else if (this.params.consumeFilteredEvents) {\n                    _consume(e);\n                }\n            }\n        }.bind(this);\n\n        this.moveListener = function(e) {\n            if (downAt) {\n                if (!moving) {\n                    var _continue = _dispatch(\"start\", {el:this.el, pos:posAtDown, e:e, drag:this});\n                    if (_continue !== false) {\n                        if (!downAt) return;\n                        this.mark(true);\n                        moving = true;\n                    }\n                }\n\n                // it is possible that the start event caused the drag to be aborted. So we check\n                // again that we are currently dragging.\n                if (downAt) {\n                    intersectingDroppables.length = 0;\n                    var pos = _pl(e), dx = pos[0] - downAt[0], dy = pos[1] - downAt[1],\n                        z = this.params.ignoreZoom ? 1 : k.getZoom();\n                    dx /= z;\n                    dy /= z;\n                    this.moveBy(dx, dy, e);\n                    k.updateSelection(dx, dy, this);\n                    k.updatePosses(dx, dy, this);\n                }\n            }\n        }.bind(this);\n\n        this.upListener = function(e) {\n            if (downAt) {\n                downAt = null;\n                this.params.unbind(document, \"mousemove\", this.moveListener);\n                this.params.unbind(document, \"mouseup\", this.upListener);\n                this.params.removeClass(document.body, css.noSelect);\n                this.unmark(e);\n                k.unmarkSelection(this, e);\n                k.unmarkPosses(this, e);\n                this.stop(e);\n                k.notifySelectionDragStop(this, e);\n                k.notifyPosseDragStop(this, e);\n                moving = false;\n                if (clone) {\n                    dragEl && dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);\n                    dragEl = null;\n                }\n\n                intersectingDroppables.length = 0;\n\n                if (revertFunction && revertFunction(this.el, this.params.getPosition(this.el)) === true) {\n                    this.params.setPosition(this.el, posAtDown);\n                    _dispatch(\"revert\", this.el);\n                }\n            }\n        }.bind(this);\n\n        this.getFilters = function() { return _filters; };\n\n        this.abort = function() {\n            if (downAt != null)\n                this.upListener();\n        };\n\n        this.getDragElement = function() {\n            return dragEl || this.el;\n        };\n\n        var listeners = {\"start\":[], \"drag\":[], \"stop\":[], \"over\":[], \"out\":[], \"beforeStart\":[], \"revert\":[] };\n        if (params.events.start) listeners.start.push(params.events.start);\n        if (params.events.beforeStart) listeners.beforeStart.push(params.events.beforeStart);\n        if (params.events.stop) listeners.stop.push(params.events.stop);\n        if (params.events.drag) listeners.drag.push(params.events.drag);\n        if (params.events.revert) listeners.revert.push(params.events.revert);\n\n        this.on = function(evt, fn) {\n            if (listeners[evt]) listeners[evt].push(fn);\n        };\n\n        this.off = function(evt, fn) {\n            if (listeners[evt]) {\n                var l = [];\n                for (var i = 0; i < listeners[evt].length; i++) {\n                    if (listeners[evt][i] !== fn) l.push(listeners[evt][i]);\n                }\n                listeners[evt] = l;\n            }\n        };\n\n        var _dispatch = function(evt, value) {\n            if (listeners[evt]) {\n                for (var i = 0; i < listeners[evt].length; i++) {\n                    try {\n                        listeners[evt][i](value);\n                    }\n                    catch (e) { }\n                }\n            }\n        };\n\n        this.notifyStart = function(e) {\n            _dispatch(\"start\", {el:this.el, pos:this.params.getPosition(dragEl), e:e, drag:this});\n        };\n\n        this.stop = function(e, force) {\n            if (force || moving) {\n                var positions = [],\n                    sel = k.getSelection(),\n                    dPos = this.params.getPosition(dragEl);\n\n                if (sel.length > 1) {\n                    for (var i = 0; i < sel.length; i++) {\n                        var p = this.params.getPosition(sel[i].el);\n                        positions.push([ sel[i].el, { left: p[0], top: p[1] }, sel[i] ]);\n                    }\n                }\n                else {\n                    positions.push([ dragEl, {left:dPos[0], top:dPos[1]}, this ]);\n                }\n\n                _dispatch(\"stop\", {\n                    el: dragEl,\n                    pos: ghostProxyOffsets || dPos,\n                    finalPos:dPos,\n                    e: e,\n                    drag: this,\n                    selection:positions\n                });\n            }\n        };\n\n        this.mark = function(andNotify) {\n            posAtDown = this.params.getPosition(dragEl);\n            pagePosAtDown = this.params.getPosition(dragEl, true);\n            pageDelta = [pagePosAtDown[0] - posAtDown[0], pagePosAtDown[1] - posAtDown[1]];\n            this.size = this.params.getSize(dragEl);\n            matchingDroppables = k.getMatchingDroppables(this);\n            _setDroppablesActive(matchingDroppables, true, false, this);\n            this.params.addClass(dragEl, this.params.dragClass || css.drag);\n            //if (this.params.constrain || this.params.containment) {\n            var cs = this.params.getSize(dragEl.parentNode);\n            constrainRect = { w:cs[0], h:cs[1] };\n            //}\n            if (andNotify) {\n                k.notifySelectionDragStart(this);\n            }\n        };\n        var ghostProxyOffsets;\n        this.unmark = function(e, doNotCheckDroppables) {\n            _setDroppablesActive(matchingDroppables, false, true, this);\n\n\n            if (isConstrained && useGhostProxy(this.el)) {\n                ghostProxyOffsets = [dragEl.offsetLeft, dragEl.offsetTop];\n                this.el.parentNode.removeChild(dragEl);\n                dragEl = this.el;\n            }\n            else {\n                ghostProxyOffsets = null;\n            }\n\n            this.params.removeClass(dragEl, this.params.dragClass || css.drag);\n            matchingDroppables.length = 0;\n            isConstrained = false;\n            if (!doNotCheckDroppables) {\n                if (intersectingDroppables.length > 0 && ghostProxyOffsets) {\n                    params.setPosition(this.el, ghostProxyOffsets);\n                }\n                intersectingDroppables.sort(_rankSort);\n                for (var i = 0; i < intersectingDroppables.length; i++) {\n                    var retVal = intersectingDroppables[i].drop(this, e);\n                    if (retVal === true) break;\n                }\n            }\n        };\n        this.moveBy = function(dx, dy, e) {\n            intersectingDroppables.length = 0;\n            var desiredLoc = this.toGrid([posAtDown[0] + dx, posAtDown[1] + dy]),\n                cPos = constrain(desiredLoc, dragEl);\n\n            if (useGhostProxy(this.el)) {\n                if (desiredLoc[0] != cPos[0] || desiredLoc[1] != cPos[1]) {\n                    if (!isConstrained) {\n                        var gp = ghostProxy(this.el);\n                        params.addClass(gp, _classes.ghostProxy);\n                        this.el.parentNode.appendChild(gp);\n                        dragEl = gp;\n                        isConstrained = true;\n                    }\n                    cPos = desiredLoc;\n                }\n                else {\n                    if (isConstrained) {\n                        this.el.parentNode.removeChild(dragEl);\n                        dragEl = this.el;\n                        isConstrained = false;\n                    }\n                }\n            }\n\n            var rect = { x:cPos[0], y:cPos[1], w:this.size[0], h:this.size[1]},\n                pageRect = { x:rect.x + pageDelta[0], y:rect.y + pageDelta[1], w:rect.w, h:rect.h},\n                focusDropElement = null;\n\n\n\n            this.params.setPosition(dragEl, cPos);\n            for (var i = 0; i < matchingDroppables.length; i++) {\n                var r2 = { x:matchingDroppables[i].pagePosition[0], y:matchingDroppables[i].pagePosition[1], w:matchingDroppables[i].size[0], h:matchingDroppables[i].size[1]};\n                if (this.params.intersects(pageRect, r2) && (_multipleDrop || focusDropElement == null || focusDropElement == matchingDroppables[i].el) && matchingDroppables[i].canDrop(this)) {\n                    if (!focusDropElement) focusDropElement = matchingDroppables[i].el;\n                    intersectingDroppables.push(matchingDroppables[i]);\n                    matchingDroppables[i].setHover(this, true, e);\n                }\n                else if (matchingDroppables[i].isHover()) {\n                    matchingDroppables[i].setHover(this, false, e);\n                }\n            }\n\n            _dispatch(\"drag\", {el:this.el, pos:cPos, e:e, drag:this});\n\n            /* test to see if the parent needs to be scrolled (future)\n             if (scroll) {\n             var pnsl = dragEl.parentNode.scrollLeft, pnst = dragEl.parentNode.scrollTop;\n             console.log(\"scroll!\", pnsl, pnst);\n             }*/\n        };\n        this.destroy = function() {\n            this.params.unbind(this.el, \"mousedown\", this.downListener);\n            this.params.unbind(document, \"mousemove\", this.moveListener);\n            this.params.unbind(document, \"mouseup\", this.upListener);\n            this.downListener = null;\n            this.upListener = null;\n            this.moveListener = null;\n        };\n\n        // init:register mousedown, and perhaps set a filter\n        this.params.bind(this.el, \"mousedown\", this.downListener);\n\n        // if handle provded, use that.  otherwise, try to set a filter.\n        // note that a `handle` selector always results in filterExclude being set to false, ie.\n        // the selector defines the handle element(s).\n        if (this.params.handle)\n            _setFilter(this.params.handle, false);\n        else\n            _setFilter(this.params.filter, this.params.filterExclude);\n    };\n\n    var Drop = function(el, params, css, scope) {\n        this._class = css.droppable;\n        this.params = params || {};\n        this.rank = params.rank || 0;\n        this._activeClass = this.params.activeClass || css.active;\n        this._hoverClass = this.params.hoverClass || css.hover;\n        Super.apply(this, arguments);\n        var hover = false;\n        this.allowLoopback = this.params.allowLoopback !== false;\n\n        this.setActive = function(val) {\n            this.params[val ? \"addClass\" : \"removeClass\"](this.el, this._activeClass);\n        };\n\n        this.updatePosition = function() {\n            this.position = this.params.getPosition(this.el);\n            this.pagePosition = this.params.getPosition(this.el, true);\n            this.size = this.params.getSize(this.el);\n        };\n\n        this.canDrop = this.params.canDrop || function(drag) {\n            return true;\n        };\n\n        this.isHover = function() { return hover; };\n\n        this.setHover = function(drag, val, e) {\n            // if turning off hover but this was not the drag that caused the hover, ignore.\n            if (val || this.el._katavorioDragHover == null || this.el._katavorioDragHover == drag.el._katavorio) {\n                this.params[val ? \"addClass\" : \"removeClass\"](this.el, this._hoverClass);\n                //this.el._katavorioDragHover = val ? drag.el._katavorio : null;\n                this.el._katavorioDragHover = val ? drag.el._katavorio : null;\n                if (hover !== val)\n                    this.params.events[val ? \"over\" : \"out\"]({el:this.el, e:e, drag:drag, drop:this});\n                hover = val;\n            }\n        };\n\n        this.drop = function(drag, event) {\n            return this.params.events[\"drop\"]({ drag:drag, e:event, drop:this });\n        };\n\n        this.destroy = function() {\n            this._class = null;\n            this._activeClass = null;\n            this._hoverClass = null;\n            //this.params = null;\n            hover = null;\n            //this.el = null;\n        };\n    };\n\n    var _uuid = function() {\n        return ('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n            return v.toString(16);\n        }));\n    };\n\n    var _rankSort = function(a,b) {\n        return a.rank < b.rank ? 1 : a.rank > b.rank ? -1 : 0;\n    };\n\n    var _gel = function(el) {\n        if (el == null) return null;\n        el = (typeof el === \"string\" || el.constructor == String)  ? document.getElementById(el) : el;\n        if (el == null) return null;\n        el._katavorio = el._katavorio || _uuid();\n        return el;\n    };\n\n    root.Katavorio = function(katavorioParams) {\n\n        var _selection = [],\n            _selectionMap = {};\n\n        this._dragsByScope = {};\n        this._dropsByScope = {};\n        var _zoom = 1,\n            _reg = function(obj, map) {\n                _each(obj, function(_obj) {\n                    for(var i = 0; i < _obj.scopes.length; i++) {\n                        map[_obj.scopes[i]] = map[_obj.scopes[i]] || [];\n                        map[_obj.scopes[i]].push(_obj);\n                    }\n                });\n            },\n            _unreg = function(obj, map) {\n                var c = 0;\n                _each(obj, function(_obj) {\n                    for(var i = 0; i < _obj.scopes.length; i++) {\n                        if (map[_obj.scopes[i]]) {\n                            var idx = katavorioParams.indexOf(map[_obj.scopes[i]], _obj);\n                            if (idx != -1) {\n                                map[_obj.scopes[i]].splice(idx, 1);\n                                c++;\n                            }\n                        }\n                    }\n                });\n\n                return c > 0 ;\n            },\n            _getMatchingDroppables = this.getMatchingDroppables = function(drag) {\n                var dd = [], _m = {};\n                for (var i = 0; i < drag.scopes.length; i++) {\n                    var _dd = this._dropsByScope[drag.scopes[i]];\n                    if (_dd) {\n                        for (var j = 0; j < _dd.length; j++) {\n                            if (_dd[j].canDrop(drag) &&  !_m[_dd[j].uuid] && (_dd[j].allowLoopback || _dd[j].el !== drag.el)) {\n                                _m[_dd[j].uuid] = true;\n                                dd.push(_dd[j]);\n                            }\n                        }\n                    }\n                }\n                dd.sort(_rankSort);\n                return dd;\n            },\n            _prepareParams = function(p) {\n                p = p || {};\n                var _p = {\n                    events:{}\n                }, i;\n                for (i in katavorioParams) _p[i] = katavorioParams[i];\n                for (i in p) _p[i] = p[i];\n                // events\n\n                for (i = 0; i < _events.length; i++) {\n                    _p.events[_events[i]] = p[_events[i]] || _devNull;\n                }\n                _p.katavorio = this;\n                return _p;\n            }.bind(this),\n            _mistletoe = function(existingDrag, params) {\n                for (var i = 0; i < _events.length; i++) {\n                    if (params[_events[i]]) {\n                        existingDrag.on(_events[i], params[_events[i]]);\n                    }\n                }\n            }.bind(this),\n            _css = {},\n            overrideCss = katavorioParams.css || {},\n            _scope = katavorioParams.scope || _defaultScope;\n\n        // prepare map of css classes based on defaults frst, then optional overrides\n        for (var i in _classes) _css[i] = _classes[i];\n        for (var i in overrideCss) _css[i] = overrideCss[i];\n\n        var inputFilterSelector = katavorioParams.inputFilterSelector || _defaultInputFilterSelector;\n        /**\n         * Gets the selector identifying which input elements to filter from drag events.\n         * @method getInputFilterSelector\n         * @return {String} Current input filter selector.\n         */\n        this.getInputFilterSelector = function() { return inputFilterSelector; };\n\n        /**\n         * Sets the selector identifying which input elements to filter from drag events.\n         * @method setInputFilterSelector\n         * @param {String} selector Input filter selector to set.\n         * @return {Katavorio} Current instance; method may be chained.\n         */\n        this.setInputFilterSelector = function(selector) {\n            inputFilterSelector = selector;\n            return this;\n        };\n\n        this.draggable = function(el, params) {\n            var o = [];\n            _each(el, function(_el) {\n                _el = _gel(_el);\n                if (_el != null) {\n                    if (_el._katavorioDrag == null) {\n                        var p = _prepareParams(params);\n                        _el._katavorioDrag = new Drag(_el, p, _css, _scope);\n                        _reg(_el._katavorioDrag, this._dragsByScope);\n                        o.push(_el._katavorioDrag);\n                        katavorioParams.addClass(_el, _css.draggable);\n                    }\n                    else {\n                        _mistletoe(_el._katavorioDrag, params);\n                    }\n                }\n            }.bind(this));\n            return o;\n\n        };\n\n        this.droppable = function(el, params) {\n            var o = [];\n            _each(el, function(_el) {\n                _el = _gel(_el);\n                if (_el != null) {\n                    var drop = new Drop(_el, _prepareParams(params), _css, _scope);\n                    _el._katavorioDrop = _el._katavorioDrop || [];\n                    _el._katavorioDrop.push(drop);\n                    _reg(drop, this._dropsByScope);\n                    o.push(drop);\n                    katavorioParams.addClass(_el, _css.droppable);\n                }\n            }.bind(this));\n            return o;\n        };\n\n        /**\n         * @name Katavorio#select\n         * @function\n         * @desc Adds an element to the current selection (for multiple node drag)\n         * @param {Element|String} DOM element - or id of the element - to add.\n         */\n        this.select = function(el) {\n            _each(el, function() {\n                var _el = _gel(this);\n                if (_el && _el._katavorioDrag) {\n                    if (!_selectionMap[_el._katavorio]) {\n                        _selection.push(_el._katavorioDrag);\n                        _selectionMap[_el._katavorio] = [ _el, _selection.length - 1 ];\n                        katavorioParams.addClass(_el, _css.selected);\n                    }\n                }\n            });\n            return this;\n        };\n\n        /**\n         * @name Katavorio#deselect\n         * @function\n         * @desc Removes an element from the current selection (for multiple node drag)\n         * @param {Element|String} DOM element - or id of the element - to remove.\n         */\n        this.deselect = function(el) {\n            _each(el, function() {\n                var _el = _gel(this);\n                if (_el && _el._katavorio) {\n                    var e = _selectionMap[_el._katavorio];\n                    if (e) {\n                        var _s = [];\n                        for (var i = 0; i < _selection.length; i++)\n                            if (_selection[i].el !== _el) _s.push(_selection[i]);\n                        _selection = _s;\n                        delete _selectionMap[_el._katavorio];\n                        katavorioParams.removeClass(_el, _css.selected);\n                    }\n                }\n            });\n            return this;\n        };\n\n        this.deselectAll = function() {\n            for (var i in _selectionMap) {\n                var d = _selectionMap[i];\n                katavorioParams.removeClass(d[0], _css.selected);\n            }\n\n            _selection.length = 0;\n            _selectionMap = {};\n        };\n\n        this.markSelection = function(drag) {\n            _foreach(_selection, function(e) { e.mark(); }, drag);\n        };\n\n        this.markPosses = function(drag) {\n            if (drag.posses) {\n                _each(drag.posses, function(p) {\n                    if (drag.posseRoles[p] && _posses[p]) {\n                        _foreach(_posses[p].members, function (d) {\n                            d.mark();\n                        }, drag);\n                    }\n                })\n            }\n        };\n\n        this.unmarkSelection = function(drag, event) {\n            _foreach(_selection, function(e) { e.unmark(event); }, drag);\n        };\n\n        this.unmarkPosses = function(drag, event) {\n            if (drag.posses) {\n                _each(drag.posses, function(p) {\n                    if (drag.posseRoles[p] && _posses[p]) {\n                        _foreach(_posses[p].members, function (d) {\n                            d.unmark(event, true);\n                        }, drag);\n                    }\n                });\n            }\n        };\n\n        this.getSelection = function() { return _selection.slice(0); };\n\n        this.updateSelection = function(dx, dy, drag) {\n            _foreach(_selection, function(e) { e.moveBy(dx, dy); }, drag);\n        };\n\n        var _posseAction = function(fn, drag) {\n            if (drag.posses) {\n                _each(drag.posses, function(p) {\n                    if (drag.posseRoles[p] && _posses[p]) {\n                        _foreach(_posses[p].members, function (e) {\n                            fn(e);\n                        }, drag);\n                    }\n                });\n            }\n        };\n\n        this.updatePosses = function(dx, dy, drag) {\n            _posseAction(function(e) { e.moveBy(dx, dy); }, drag);\n        };\n\n        this.notifyPosseDragStop = function(drag, evt) {\n            _posseAction(function(e) { e.stop(evt, true); }, drag);\n        };\n\n        this.notifySelectionDragStop = function(drag, evt) {\n            _foreach(_selection, function(e) { e.stop(evt, true); }, drag);\n        };\n\n        this.notifySelectionDragStart = function(drag, evt) {\n            _foreach(_selection, function(e) { e.notifyStart(evt);}, drag);\n        };\n\n        this.setZoom = function(z) { _zoom = z; };\n        this.getZoom = function() { return _zoom; };\n\n        // does the work of changing scopes\n        var _scopeManip = function(kObj, scopes, map, fn) {\n            _each(kObj, function(_kObj) {\n                _unreg(_kObj, map);  // deregister existing scopes\n                _kObj[fn](scopes); // set scopes\n                _reg(_kObj, map); // register new ones\n            });\n        };\n\n        _each([ \"set\", \"add\", \"remove\", \"toggle\"], function(v) {\n            this[v + \"Scope\"] = function(el, scopes) {\n                _scopeManip(el._katavorioDrag, scopes, this._dragsByScope, v + \"Scope\");\n                _scopeManip(el._katavorioDrop, scopes, this._dropsByScope, v + \"Scope\");\n            }.bind(this);\n            this[v + \"DragScope\"] = function(el, scopes) {\n                _scopeManip(el.constructor === Drag ? el : el._katavorioDrag, scopes, this._dragsByScope, v + \"Scope\");\n            }.bind(this);\n            this[v + \"DropScope\"] = function(el, scopes) {\n                _scopeManip(el.constructor === Drop ? el : el._katavorioDrop, scopes, this._dropsByScope, v + \"Scope\");\n            }.bind(this);\n        }.bind(this));\n\n        this.snapToGrid = function(x, y) {\n            for (var s in this._dragsByScope) {\n                _foreach(this._dragsByScope[s], function(d) { d.snap(x, y); });\n            }\n        };\n\n        this.getDragsForScope = function(s) { return this._dragsByScope[s]; };\n        this.getDropsForScope = function(s) { return this._dropsByScope[s]; };\n\n        var _destroy = function(el, type, map) {\n            el = _gel(el);\n            if (el[type]) {\n\n                // remove from selection, if present.\n                var selIdx = _selection.indexOf(el[type]);\n                if (selIdx >= 0) {\n                    _selection.splice(selIdx, 1);\n                }\n\n                if (_unreg(el[type], map)) {\n                    _each(el[type], function(kObj) { kObj.destroy() });\n                }\n\n                delete el[type];\n            }\n        };\n\n        this.elementRemoved = function(el) {\n            this.destroyDraggable(el);\n            this.destroyDroppable(el);\n        };\n\n        this.destroyDraggable = function(el) {\n            _destroy(el, \"_katavorioDrag\", this._dragsByScope);\n        };\n\n        this.destroyDroppable = function(el) {\n            _destroy(el, \"_katavorioDrop\", this._dropsByScope);\n        };\n\n        this.reset = function() {\n            this._dragsByScope = {};\n            this._dropsByScope = {};\n            _selection = [];\n            _selectionMap = {};\n            _posses = {};\n        };\n\n        // ----- groups\n        var _posses = {};\n\n        var _processOneSpec = function(el, _spec, dontAddExisting) {\n            var posseId = _isString(_spec) ? _spec : _spec.id;\n            var active = _isString(_spec) ? true : _spec.active !== false;\n            var posse = _posses[posseId] || (function() {\n                var g = {name:posseId, members:[]};\n                _posses[posseId] = g;\n                return g;\n            })();\n            _each(el, function(_el) {\n                if (_el._katavorioDrag) {\n\n                    if (dontAddExisting && _el._katavorioDrag.posseRoles[posse.name] != null) return;\n\n                    _suggest(posse.members, _el._katavorioDrag);\n                    _suggest(_el._katavorioDrag.posses, posse.name);\n                    _el._katavorioDrag.posseRoles[posse.name] = active;\n                }\n            });\n            return posse;\n        };\n\n        /**\n         * Add the given element to the posse with the given id, creating the group if it at first does not exist.\n         * @method addToPosse\n         * @param {Element} el Element to add.\n         * @param {String...|Object...} spec Variable args parameters. Each argument can be a either a String, indicating\n         * the ID of a Posse to which the element should be added as an active participant, or an Object containing\n         * `{ id:\"posseId\", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\n         * true.\n         * @returns {Posse|Posse[]} The Posse(s) to which the element(s) was/were added.\n         */\n        this.addToPosse = function(el, spec) {\n\n            var posses = [];\n\n            for (var i = 1; i < arguments.length; i++) {\n                posses.push(_processOneSpec(el, arguments[i]));\n            }\n\n            return posses.length == 1 ? posses[0] : posses;\n        };\n\n        /**\n         * Sets the posse(s) for the element with the given id, creating those that do not yet exist, and removing from\n         * the element any current Posses that are not specified by this method call. This method will not change the\n         * active/passive state if it is given a posse in which the element is already a member.\n         * @method setPosse\n         * @param {Element} el Element to set posse(s) on.\n         * @param {String...|Object...} spec Variable args parameters. Each argument can be a either a String, indicating\n         * the ID of a Posse to which the element should be added as an active participant, or an Object containing\n         * `{ id:\"posseId\", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\n         * true.\n         * @returns {Posse|Posse[]} The Posse(s) to which the element(s) now belongs.\n         */\n        this.setPosse = function(el, spec) {\n\n            var posses = [];\n\n            for (var i = 1; i < arguments.length; i++) {\n                posses.push(_processOneSpec(el, arguments[i], true).name);\n            }\n\n            _each(el, function(_el) {\n                if (_el._katavorioDrag) {\n                    var diff = _difference(_el._katavorioDrag.posses, posses);\n                    var p = [];\n                    Array.prototype.push.apply(p, _el._katavorioDrag.posses);\n                    for (var i = 0; i < diff.length; i++) {\n                        this.removeFromPosse(_el, diff[i]);\n                    }\n                }\n            }.bind(this));\n\n            return posses.length == 1 ? posses[0] : posses;\n        };\n\n        /**\n         * Remove the given element from the given posse(s).\n         * @method removeFromPosse\n         * @param {Element} el Element to remove.\n         * @param {String...} posseId Varargs parameter: one value for each posse to remove the element from.\n         */\n        this.removeFromPosse = function(el, posseId) {\n            if (arguments.length < 2) throw new TypeError(\"No posse id provided for remove operation\");\n            for(var i = 1; i < arguments.length; i++) {\n                posseId = arguments[i];\n                _each(el, function (_el) {\n                    if (_el._katavorioDrag && _el._katavorioDrag.posses) {\n                        var d = _el._katavorioDrag;\n                        _each(posseId, function (p) {\n                            _vanquish(_posses[p].members, d);\n                            _vanquish(d.posses, p);\n                            delete d.posseRoles[p];\n                        });\n                    }\n                });\n            }\n        };\n\n        /**\n         * Remove the given element from all Posses to which it belongs.\n         * @method removeFromAllPosses\n         * @param {Element|Element[]} el Element to remove from Posses.\n         */\n        this.removeFromAllPosses = function(el) {\n            _each(el, function(_el) {\n                if (_el._katavorioDrag && _el._katavorioDrag.posses) {\n                    var d = _el._katavorioDrag;\n                    _each(d.posses, function(p) {\n                        _vanquish(_posses[p].members, d);\n                    });\n                    d.posses.length = 0;\n                    d.posseRoles = {};\n                }\n            });\n        };\n\n        /**\n         * Changes the participation state for the element in the Posse with the given ID.\n         * @param {Element|Element[]} el Element(s) to change state for.\n         * @param {String} posseId ID of the Posse to change element state for.\n         * @param {Boolean} state True to make active, false to make passive.\n         */\n        this.setPosseState = function(el, posseId, state) {\n            var posse = _posses[posseId];\n            if (posse) {\n                _each(el, function(_el) {\n                    if (_el._katavorioDrag && _el._katavorioDrag.posses) {\n                        _el._katavorioDrag.posseRoles[posse.name] = state;\n                    }\n                });\n            }\n        };\n\n    };\n\n    root.Katavorio.version = \"0.19.2\";\n\n    if (true) {\n        exports.Katavorio = root.Katavorio;\n    }\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains utility functions that run in both browsers and headless.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n\n;\n(function () {\n\n    var _isa = function (a) {\n            return Object.prototype.toString.call(a) === \"[object Array]\";\n        },\n        _isnum = function (n) {\n            return Object.prototype.toString.call(n) === \"[object Number]\";\n        },\n        _iss = function (s) {\n            return typeof s === \"string\";\n        },\n        _isb = function (s) {\n            return typeof s === \"boolean\";\n        },\n        _isnull = function (s) {\n            return s == null;\n        },\n        _iso = function (o) {\n            return o == null ? false : Object.prototype.toString.call(o) === \"[object Object]\";\n        },\n        _isd = function (o) {\n            return Object.prototype.toString.call(o) === \"[object Date]\";\n        },\n        _isf = function (o) {\n            return Object.prototype.toString.call(o) === \"[object Function]\";\n        },\n        _isNamedFunction = function(o) {\n            return _isf(o) && o.name != null && o.name.length > 0;\n        },\n        _ise = function (o) {\n            for (var i in o) {\n                if (o.hasOwnProperty(i)) return false;\n            }\n            return true;\n        };\n\n    var root = this;\n    root.jsPlumbUtil = {\n        isArray: _isa,\n        isString: _iss,\n        isBoolean: _isb,\n        isNull: _isnull,\n        isObject: _iso,\n        isDate: _isd,\n        isFunction: _isf,\n        isEmpty: _ise,\n        isNumber: _isnum,\n        clone: function (a) {\n            if (_iss(a)) return \"\" + a;\n            else if (_isb(a)) return !!a;\n            else if (_isd(a)) return new Date(a.getTime());\n            else if (_isf(a)) return a;\n            else if (_isa(a)) {\n                var b = [];\n                for (var i = 0; i < a.length; i++)\n                    b.push(this.clone(a[i]));\n                return b;\n            }\n            else if (_iso(a)) {\n                var c = {};\n                for (var j in a)\n                    c[j] = this.clone(a[j]);\n                return c;\n            }\n            else return a;\n        },\n        merge: function (a, b, collations) {\n            // first change the collations array - if present - into a lookup table, because its faster.\n            var cMap = {}, ar, i;\n            collations = collations || [];\n            for (i = 0; i < collations.length; i++)\n                cMap[collations[i]] = true;\n\n            var c = this.clone(a);\n            for (i in b) {\n                if (c[i] == null) {\n                    c[i] = b[i];\n                }\n                else if (_iss(b[i]) || _isb(b[i])) {\n                    if (!cMap[i]) {\n                        c[i] = b[i]; // if we dont want to collate, just copy it in.\n                    }\n                    else {\n                        ar = [];\n                        // if c's object is also an array we can keep its values.\n                        ar.push.apply(ar, _isa(c[i]) ? c[i] : [ c[i] ]);\n                        ar.push.apply(ar, _isa(b[i]) ? b[i] : [ b[i] ]);\n                        c[i] = ar;\n                    }\n                }\n                else {\n                    if (_isa(b[i])) {\n                        ar = [];\n                        // if c's object is also an array we can keep its values.\n                        if (_isa(c[i])) ar.push.apply(ar, c[i]);\n                        ar.push.apply(ar, b[i]);\n                        c[i] = ar;\n                    }\n                    else if (_iso(b[i])) {\n                        // overwite c's value with an object if it is not already one.\n                        if (!_iso(c[i]))\n                            c[i] = {};\n                        for (var j in b[i]) {\n                            c[i][j] = b[i][j];\n                        }\n                    }\n                }\n\n            }\n            return c;\n        },\n        replace: function (inObj, path, value) {\n            if (inObj == null) return;\n            var q = inObj, t = q;\n            path.replace(/([^\\.])+/g, function (term, lc, pos, str) {\n                var array = term.match(/([^\\[0-9]+){1}(\\[)([0-9+])/),\n                    last = pos + term.length >= str.length,\n                    _getArray = function () {\n                        return t[array[1]] || (function () {\n                            t[array[1]] = [];\n                            return t[array[1]];\n                        })();\n                    };\n\n                if (last) {\n                    // set term = value on current t, creating term as array if necessary.\n                    if (array)\n                        _getArray()[array[3]] = value;\n                    else\n                        t[term] = value;\n                }\n                else {\n                    // set to current t[term], creating t[term] if necessary.\n                    if (array) {\n                        var a = _getArray();\n                        t = a[array[3]] || (function () {\n                            a[array[3]] = {};\n                            return a[array[3]];\n                        })();\n                    }\n                    else\n                        t = t[term] || (function () {\n                            t[term] = {};\n                            return t[term];\n                        })();\n                }\n            });\n\n            return inObj;\n        },\n        //\n        // chain a list of functions, supplied by [ object, method name, args ], and return on the first\n        // one that returns the failValue. if none return the failValue, return the successValue.\n        //\n        functionChain: function (successValue, failValue, fns) {\n            for (var i = 0; i < fns.length; i++) {\n                var o = fns[i][0][fns[i][1]].apply(fns[i][0], fns[i][2]);\n                if (o === failValue) {\n                    return o;\n                }\n            }\n            return successValue;\n        },\n        // take the given model and expand out any parameters.\n        // 'functionPrefix' is optional, and if present, helps jsplumb figure out what to do if a value is a Function.\n        // if you do not provide it, jsplumb will run the given values through any functions it finds, and use the function's\n        // output as the value in the result. if you do provide the prefix, only functions that are named and have this prefix\n        // will be executed; other functions will be passed as values to the output.\n        populate: function (model, values, functionPrefix) {\n            // for a string, see if it has parameter matches, and if so, try to make the substitutions.\n            var getValue = function (fromString) {\n                    var matches = fromString.match(/(\\${.*?})/g);\n                    if (matches != null) {\n                        for (var i = 0; i < matches.length; i++) {\n                            var val = values[matches[i].substring(2, matches[i].length - 1)] || \"\";\n                            if (val != null) {\n                                fromString = fromString.replace(matches[i], val);\n                            }\n                        }\n                    }\n                    return fromString;\n                },\n            // process one entry.\n                _one = function (d) {\n                    if (d != null) {\n                        if (_iss(d)) {\n                            return getValue(d);\n                        }\n                        else if (_isf(d) && (functionPrefix == null || (d.name || \"\").indexOf(functionPrefix) === 0)) {\n                            return d(values);\n                        }\n                        else if (_isa(d)) {\n                            var r = [];\n                            for (var i = 0; i < d.length; i++)\n                                r.push(_one(d[i]));\n                            return r;\n                        }\n                        else if (_iso(d)) {\n                            var s = {};\n                            for (var j in d) {\n                                s[j] = _one(d[j]);\n                            }\n                            return s;\n                        }\n                        else {\n                            return d;\n                        }\n                    }\n                };\n\n            return _one(model);\n        },\n        findWithFunction: function (a, f) {\n            if (a)\n                for (var i = 0; i < a.length; i++) if (f(a[i])) return i;\n            return -1;\n        },\n        removeWithFunction: function (a, f) {\n            var idx = root.jsPlumbUtil.findWithFunction(a, f);\n            if (idx > -1) a.splice(idx, 1);\n            return idx != -1;\n        },\n        remove: function (l, v) {\n            var idx = l.indexOf(v);\n            if (idx > -1) l.splice(idx, 1);\n            return idx != -1;\n        },\n        // TODO support insert index\n        addWithFunction: function (list, item, hashFunction) {\n            if (root.jsPlumbUtil.findWithFunction(list, hashFunction) == -1) list.push(item);\n        },\n        addToList: function (map, key, value, insertAtStart) {\n            var l = map[key];\n            if (l == null) {\n                l = [];\n                map[key] = l;\n            }\n            l[insertAtStart ? \"unshift\" : \"push\"](value);\n            return l;\n        },\n        suggest : function(list, item, insertAtHead) {\n            if (list.indexOf(item) === -1) {\n                if (insertAtHead) {\n                    list.unshift(item);\n                } else {\n                    list.push(item);\n                }\n                return true;\n            }\n            return false;\n        },\n        //\n        // extends the given obj (which can be an array) with the given constructor function, prototype functions, and\n        // class members, any of which may be null.\n        //\n        extend: function (child, parent, _protoFn) {\n            var i;\n            parent = _isa(parent) ? parent : [ parent ];\n\n            for (i = 0; i < parent.length; i++) {\n                for (var j in parent[i].prototype) {\n                    if (parent[i].prototype.hasOwnProperty(j)) {\n                        child.prototype[j] = parent[i].prototype[j];\n                    }\n                }\n            }\n\n            var _makeFn = function (name, protoFn) {\n                return function () {\n                    for (i = 0; i < parent.length; i++) {\n                        if (parent[i].prototype[name])\n                            parent[i].prototype[name].apply(this, arguments);\n                    }\n                    return protoFn.apply(this, arguments);\n                };\n            };\n\n            var _oneSet = function (fns) {\n                for (var k in fns) {\n                    child.prototype[k] = _makeFn(k, fns[k]);\n                }\n            };\n\n            if (arguments.length > 2) {\n                for (i = 2; i < arguments.length; i++)\n                    _oneSet(arguments[i]);\n            }\n\n            return child;\n        },\n        uuid: function () {\n            return ('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n                return v.toString(16);\n            }));\n        },\n        logEnabled: true,\n        log: function () {\n            if (root.jsPlumbUtil.logEnabled && typeof console != \"undefined\") {\n                try {\n                    var msg = arguments[arguments.length - 1];\n                    console.log(msg);\n                }\n                catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Wraps one function with another, creating a placeholder for the\n         * wrapped function if it was null. this is used to wrap the various\n         * drag/drop event functions - to allow jsPlumb to be notified of\n         * important lifecycle events without imposing itself on the user's\n         * drag/drop functionality.\n         * @method jsPlumbUtil.wrap\n         * @param {Function} wrappedFunction original function to wrap; may be null.\n         * @param {Function} newFunction function to wrap the original with.\n         * @param {Object} [returnOnThisValue] Optional. Indicates that the wrappedFunction should\n         * not be executed if the newFunction returns a value matching 'returnOnThisValue'.\n         * note that this is a simple comparison and only works for primitives right now.\n         */\n        wrap: function (wrappedFunction, newFunction, returnOnThisValue) {\n            wrappedFunction = wrappedFunction || function () {\n            };\n            newFunction = newFunction || function () {\n            };\n            return function () {\n                var r = null;\n                try {\n                    r = newFunction.apply(this, arguments);\n                } catch (e) {\n                    root.jsPlumbUtil.log(\"jsPlumb function failed : \" + e);\n                }\n                if (returnOnThisValue == null || (r !== returnOnThisValue)) {\n                    try {\n                        r = wrappedFunction.apply(this, arguments);\n                    } catch (e) {\n                        root.jsPlumbUtil.log(\"wrapped function failed : \" + e);\n                    }\n                }\n                return r;\n            };\n        }\n    };\n\n    root.jsPlumbUtil.EventGenerator = function () {\n        var _listeners = {},\n            eventsSuspended = false,\n        // this is a list of events that should re-throw any errors that occur during their dispatch. it is current private.\n            eventsToDieOn = { \"ready\": true };\n\n        this.bind = function (event, listener, insertAtStart) {\n            var _one = function(evt) {\n                root.jsPlumbUtil.addToList(_listeners, evt, listener, insertAtStart);\n                listener.__jsPlumb = listener.__jsPlumb || {};\n                listener.__jsPlumb[root.jsPlumbUtil.uuid()] = evt;\n            };\n\n            if (typeof event === \"string\") _one(event);\n            else if (event.length != null) {\n                for (var i = 0; i < event.length; i++) {\n                    _one(event[i]);\n                }\n            }\n\n            return this;\n        };\n\n        this.fire = function (event, value, originalEvent) {\n            if (!eventsSuspended && _listeners[event]) {\n                var l = _listeners[event].length, i = 0, _gone = false, ret = null;\n                if (!this.shouldFireEvent || this.shouldFireEvent(event, value, originalEvent)) {\n                    while (!_gone && i < l && ret !== false) {\n                        // doing it this way rather than catching and then possibly re-throwing means that an error propagated by this\n                        // method will have the whole call stack available in the debugger.\n                        if (eventsToDieOn[event])\n                            _listeners[event][i].apply(this, [ value, originalEvent]);\n                        else {\n                            try {\n                                ret = _listeners[event][i].apply(this, [ value, originalEvent ]);\n                            } catch (e) {\n                                root.jsPlumbUtil.log(\"jsPlumb: fire failed for event \" + event + \" : \" + e);\n                            }\n                        }\n                        i++;\n                        if (_listeners == null || _listeners[event] == null)\n                            _gone = true;\n                    }\n                }\n            }\n            return this;\n        };\n\n        this.unbind = function (eventOrListener, listener) {\n\n            if (arguments.length === 0) {\n                _listeners = {};\n            }\n            else if (arguments.length === 1) {\n                if (typeof eventOrListener === \"string\")\n                    delete _listeners[eventOrListener];\n                else if (eventOrListener.__jsPlumb) {\n                    var evt;\n                    for (var i in eventOrListener.__jsPlumb) {\n                        evt = eventOrListener.__jsPlumb[i];\n                        root.jsPlumbUtil.remove(_listeners[evt] || [], eventOrListener);\n                    }\n                }\n            }\n            else if (arguments.length === 2) {\n                root.jsPlumbUtil.remove(_listeners[eventOrListener] || [], listener);\n            }\n\n            return this;\n        };\n\n        this.getListener = function (forEvent) {\n            return _listeners[forEvent];\n        };\n        this.setSuspendEvents = function (val) {\n            eventsSuspended = val;\n        };\n        this.isSuspendEvents = function () {\n            return eventsSuspended;\n        };\n        this.silently = function(fn) {\n            this.setSuspendEvents(true);\n            try {\n                fn();\n            }\n            catch (e) {\n                root.jsPlumbUtil.log(\"Cannot execute silent function \" + e);\n            }\n            this.setSuspendEvents(false);\n        };\n        this.cleanupListeners = function () {\n            for (var i in _listeners) {\n                _listeners[i] = null;\n            }\n        };\n    };\n\n    root.jsPlumbUtil.EventGenerator.prototype = {\n        cleanup: function () {\n            this.cleanupListeners();\n        }\n    };\n\n    if (true) {\n        exports.jsPlumbUtil = root.jsPlumbUtil;\n    }\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains utility functions that run in browsers only.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n ;(function() {\n\n  \"use strict\";\n\n   var root = this;\n\n    root.jsPlumbUtil.matchesSelector = function(el, selector, ctx) {\n       ctx = ctx || el.parentNode;\n       var possibles = ctx.querySelectorAll(selector);\n       for (var i = 0; i < possibles.length; i++) {\n           if (possibles[i] === el)\n               return true;\n       }\n       return false;\n   };\n\n    root.jsPlumbUtil.consume = function(e, doNotPreventDefault) {\n       if (e.stopPropagation)\n           e.stopPropagation();\n       else\n           e.returnValue = false;\n\n       if (!doNotPreventDefault && e.preventDefault)\n            e.preventDefault();\n   };\n\n   /*\n    * Function: sizeElement\n    * Helper to size and position an element. You would typically use\n    * this when writing your own Connector or Endpoint implementation.\n    *\n    * Parameters:\n    *  x - [int] x position for the element origin\n    *  y - [int] y position for the element origin\n    *  w - [int] width of the element\n    *  h - [int] height of the element\n    *\n    */\n    root.jsPlumbUtil.sizeElement = function(el, x, y, w, h) {\n       if (el) {\n           el.style.height = h + \"px\";\n           el.height = h;\n           el.style.width = w + \"px\";\n           el.width = w;\n           el.style.left = x + \"px\";\n           el.style.top = y + \"px\";\n       }\n   };\n\n }).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the core code.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n(function () {\n\n    \"use strict\";\n\n    var root = this;\n    var connectorTypes = [], rendererTypes;\n\n    var _ju = root.jsPlumbUtil,\n\n        /**\n         * creates a timestamp, using milliseconds since 1970, but as a string.\n         */\n        _timestamp = function () {\n            return \"\" + (new Date()).getTime();\n        },\n\n    // helper method to update the hover style whenever it, or paintStyle, changes.\n    // we use paintStyle as the foundation and merge hoverPaintStyle over the\n    // top.\n        _updateHoverStyle = function (component) {\n            if (component._jsPlumb.paintStyle && component._jsPlumb.hoverPaintStyle) {\n                var mergedHoverStyle = {};\n                jsPlumb.extend(mergedHoverStyle, component._jsPlumb.paintStyle);\n                jsPlumb.extend(mergedHoverStyle, component._jsPlumb.hoverPaintStyle);\n                delete component._jsPlumb.hoverPaintStyle;\n                // we want the fill of paintStyle to override a gradient, if possible.\n                if (mergedHoverStyle.gradient && component._jsPlumb.paintStyle.fill)\n                    delete mergedHoverStyle.gradient;\n                component._jsPlumb.hoverPaintStyle = mergedHoverStyle;\n            }\n        },\n        events = [\"tap\", \"dbltap\", \"click\", \"dblclick\", \"mouseover\", \"mouseout\", \"mousemove\", \"mousedown\", \"mouseup\", \"contextmenu\" ],\n        eventFilters = { \"mouseout\": \"mouseleave\", \"mouseexit\": \"mouseleave\" },\n        _updateAttachedElements = function (component, state, timestamp, sourceElement) {\n            var affectedElements = component.getAttachedElements();\n            if (affectedElements) {\n                for (var i = 0, j = affectedElements.length; i < j; i++) {\n                    if (!sourceElement || sourceElement != affectedElements[i])\n                        affectedElements[i].setHover(state, true, timestamp);\t\t\t// tell the attached elements not to inform their own attached elements.\n                }\n            }\n        },\n        _splitType = function (t) {\n            return t == null ? null : t.split(\" \");\n        },\n        _mapType = function(map, obj, typeId) {\n            for (var i in obj)\n                map[i] = typeId;\n        },\n        _each = function(fn, obj) {\n            obj = _ju.isArray(obj) || (obj.length != null && !_ju.isString(obj)) ? obj : [ obj ];\n            for (var i = 0; i < obj.length; i++) {\n                try {\n                    fn.apply(obj[i], [ obj[i] ]);\n                }\n                catch (e) {\n                    _ju.log(\".each iteration failed : \" + e);\n                }\n            }\n        },\n        _applyTypes = function (component, params, doNotRepaint) {\n            if (component.getDefaultType) {\n                var td = component.getTypeDescriptor(), map = {};\n                var defType = component.getDefaultType();\n                var o = _ju.merge({}, defType);\n                _mapType(map, defType, \"__default\");\n                for (var i = 0, j = component._jsPlumb.types.length; i < j; i++) {\n                    var tid = component._jsPlumb.types[i];\n                    if (tid !== \"__default\") {\n                        var _t = component._jsPlumb.instance.getType(tid, td);\n                        if (_t != null) {\n                            o = _ju.merge(o, _t, [ \"cssClass\" ]);\n                            _mapType(map, _t, tid);\n                        }\n                    }\n                }\n\n                if (params) {\n                    o = _ju.populate(o, params, \"_\");\n                }\n\n                component.applyType(o, doNotRepaint, map);\n                if (!doNotRepaint) component.repaint();\n            }\n        },\n\n// ------------------------------ BEGIN jsPlumbUIComponent --------------------------------------------\n\n        jsPlumbUIComponent = root.jsPlumbUIComponent = function (params) {\n\n            _ju.EventGenerator.apply(this, arguments);\n\n            var self = this,\n                a = arguments,\n                idPrefix = self.idPrefix,\n                id = idPrefix + (new Date()).getTime();\n\n            this._jsPlumb = {\n                instance: params._jsPlumb,\n                parameters: params.parameters || {},\n                paintStyle: null,\n                hoverPaintStyle: null,\n                paintStyleInUse: null,\n                hover: false,\n                beforeDetach: params.beforeDetach,\n                beforeDrop: params.beforeDrop,\n                overlayPlacements: [],\n                hoverClass: params.hoverClass || params._jsPlumb.Defaults.HoverClass,\n                types: [],\n                typeCache:{}\n            };\n\n            this.cacheTypeItem = function(key, item, typeId) {\n                this._jsPlumb.typeCache[typeId] = this._jsPlumb.typeCache[typeId] || {};\n                this._jsPlumb.typeCache[typeId][key] = item;\n            };\n            this.getCachedTypeItem = function(key, typeId) {\n                return this._jsPlumb.typeCache[typeId] ? this._jsPlumb.typeCache[typeId][key] : null;\n            };\n\n            this.getId = function () {\n                return id;\n            };\n\n// ----------------------------- default type --------------------------------------------\n\n\n            var o = params.overlays || [], oo = {};\n            if (this.defaultOverlayKeys) {\n                for (var i = 0; i < this.defaultOverlayKeys.length; i++)\n                    Array.prototype.push.apply(o, this._jsPlumb.instance.Defaults[this.defaultOverlayKeys[i]] || []);\n\n                for (i = 0; i < o.length; i++) {\n                    // if a string, convert to object representation so that we can store the typeid on it.\n                    // also assign an id.\n                    var fo = jsPlumb.convertToFullOverlaySpec(o[i]);\n                    oo[fo[1].id] = fo;\n                }\n            }\n\n            var _defaultType = {\n                overlays:oo,\n                parameters: params.parameters || {},\n                scope: params.scope || this._jsPlumb.instance.getDefaultScope()\n            };\n            this.getDefaultType = function() {\n                return _defaultType;\n            };\n            this.appendToDefaultType = function(obj) {\n                for (var i in obj) _defaultType[i] = obj[i];\n            };\n\n// ----------------------------- end default type --------------------------------------------\n\n            // all components can generate events\n\n            if (params.events) {\n                for (i in params.events)\n                    self.bind(i, params.events[i]);\n            }\n\n            // all components get this clone function.\n            // TODO issue 116 showed a problem with this - it seems 'a' that is in\n            // the clone function's scope is shared by all invocations of it, the classic\n            // JS closure problem.  for now, jsPlumb does a version of this inline where\n            // it used to call clone.  but it would be nice to find some time to look\n            // further at this.\n            this.clone = function () {\n                var o = Object.create(this.constructor.prototype);\n                this.constructor.apply(o, a);\n                return o;\n            }.bind(this);\n\n            // user can supply a beforeDetach callback, which will be executed before a detach\n            // is performed; returning false prevents the detach.\n            this.isDetachAllowed = function (connection) {\n                var r = true;\n                if (this._jsPlumb.beforeDetach) {\n                    try {\n                        r = this._jsPlumb.beforeDetach(connection);\n                    }\n                    catch (e) {\n                        _ju.log(\"jsPlumb: beforeDetach callback failed\", e);\n                    }\n                }\n                return r;\n            };\n\n            // user can supply a beforeDrop callback, which will be executed before a dropped\n            // connection is confirmed. user can return false to reject connection.\n            this.isDropAllowed = function (sourceId, targetId, scope, connection, dropEndpoint, source, target) {\n                var r = this._jsPlumb.instance.checkCondition(\"beforeDrop\", {\n                    sourceId: sourceId,\n                    targetId: targetId,\n                    scope: scope,\n                    connection: connection,\n                    dropEndpoint: dropEndpoint,\n                    source: source, target: target\n                });\n                if (this._jsPlumb.beforeDrop) {\n                    try {\n                        r = this._jsPlumb.beforeDrop({\n                            sourceId: sourceId,\n                            targetId: targetId,\n                            scope: scope,\n                            connection: connection,\n                            dropEndpoint: dropEndpoint,\n                            source: source, target: target\n                        });\n                    }\n                    catch (e) {\n                        _ju.log(\"jsPlumb: beforeDrop callback failed\", e);\n                    }\n                }\n                return r;\n            };\n\n            var domListeners = [];\n\n            // sets the component associated with listener events. for instance, an overlay delegates\n            // its events back to a connector. but if the connector is swapped on the underlying connection,\n            // then this component must be changed. This is called by setConnector in the Connection class.\n            this.setListenerComponent = function (c) {\n                for (var i = 0; i < domListeners.length; i++)\n                    domListeners[i][3] = c;\n            };\n\n\n        };\n\n    var _removeTypeCssHelper = function (component, typeIndex) {\n        var typeId = component._jsPlumb.types[typeIndex],\n            type = component._jsPlumb.instance.getType(typeId, component.getTypeDescriptor());\n\n        if (type != null) {\n\n            if (type.cssClass && component.canvas)\n                component._jsPlumb.instance.removeClass(component.canvas, type.cssClass);\n        }\n    };\n\n    _ju.extend(root.jsPlumbUIComponent, _ju.EventGenerator, {\n\n        getParameter: function (name) {\n            return this._jsPlumb.parameters[name];\n        },\n\n        setParameter: function (name, value) {\n            this._jsPlumb.parameters[name] = value;\n        },\n\n        getParameters: function () {\n            return this._jsPlumb.parameters;\n        },\n\n        setParameters: function (p) {\n            this._jsPlumb.parameters = p;\n        },\n\n        getClass:function() {\n            return jsPlumb.getClass(this.canvas);\n        },\n\n        hasClass:function(clazz) {\n            return jsPlumb.hasClass(this.canvas, clazz);\n        },\n\n        addClass: function (clazz) {\n            jsPlumb.addClass(this.canvas, clazz);\n        },\n\n        removeClass: function (clazz) {\n            jsPlumb.removeClass(this.canvas, clazz);\n        },\n\n        updateClasses: function (classesToAdd, classesToRemove) {\n            jsPlumb.updateClasses(this.canvas, classesToAdd, classesToRemove);\n        },\n\n        setType: function (typeId, params, doNotRepaint) {\n            this.clearTypes();\n            this._jsPlumb.types = _splitType(typeId) || [];\n            _applyTypes(this, params, doNotRepaint);\n        },\n\n        getType: function () {\n            return this._jsPlumb.types;\n        },\n\n        reapplyTypes: function (params, doNotRepaint) {\n            _applyTypes(this, params, doNotRepaint);\n        },\n\n        hasType: function (typeId) {\n            return this._jsPlumb.types.indexOf(typeId) != -1;\n        },\n\n        addType: function (typeId, params, doNotRepaint) {\n            var t = _splitType(typeId), _cont = false;\n            if (t != null) {\n                for (var i = 0, j = t.length; i < j; i++) {\n                    if (!this.hasType(t[i])) {\n                        this._jsPlumb.types.push(t[i]);\n                        _cont = true;\n                    }\n                }\n                if (_cont) _applyTypes(this, params, doNotRepaint);\n            }\n        },\n\n        removeType: function (typeId, params, doNotRepaint) {\n            var t = _splitType(typeId), _cont = false, _one = function (tt) {\n                var idx = this._jsPlumb.types.indexOf(tt);\n                if (idx != -1) {\n                    // remove css class if necessary\n                    _removeTypeCssHelper(this, idx);\n                    this._jsPlumb.types.splice(idx, 1);\n                    return true;\n                }\n                return false;\n            }.bind(this);\n\n            if (t != null) {\n                for (var i = 0, j = t.length; i < j; i++) {\n                    _cont = _one(t[i]) || _cont;\n                }\n                if (_cont) _applyTypes(this, params, doNotRepaint);\n            }\n        },\n        clearTypes: function (params, doNotRepaint) {\n            var i = this._jsPlumb.types.length;\n            for (var j = 0; j < i; j++) {\n                _removeTypeCssHelper(this, 0);\n                this._jsPlumb.types.splice(0, 1);\n            }\n            _applyTypes(this, params, doNotRepaint);\n        },\n\n        toggleType: function (typeId, params, doNotRepaint) {\n            var t = _splitType(typeId);\n            if (t != null) {\n                for (var i = 0, j = t.length; i < j; i++) {\n                    var idx = this._jsPlumb.types.indexOf(t[i]);\n                    if (idx != -1) {\n                        _removeTypeCssHelper(this, idx);\n                        this._jsPlumb.types.splice(idx, 1);\n                    }\n                    else\n                        this._jsPlumb.types.push(t[i]);\n                }\n\n                _applyTypes(this, params, doNotRepaint);\n            }\n        },\n        applyType: function (t, doNotRepaint) {\n            this.setPaintStyle(t.paintStyle, doNotRepaint);\n            this.setHoverPaintStyle(t.hoverPaintStyle, doNotRepaint);\n            if (t.parameters) {\n                for (var i in t.parameters)\n                    this.setParameter(i, t.parameters[i]);\n            }\n            this._jsPlumb.paintStyleInUse = this.getPaintStyle();\n        },\n        setPaintStyle: function (style, doNotRepaint) {\n//\t\t    \tthis._jsPlumb.paintStyle = jsPlumb.extend({}, style);\n// TODO figure out if we want components to clone paintStyle so as not to share it.\n            this._jsPlumb.paintStyle = style;\n            this._jsPlumb.paintStyleInUse = this._jsPlumb.paintStyle;\n            _updateHoverStyle(this);\n            if (!doNotRepaint) this.repaint();\n        },\n        getPaintStyle: function () {\n            return this._jsPlumb.paintStyle;\n        },\n        setHoverPaintStyle: function (style, doNotRepaint) {\n            //this._jsPlumb.hoverPaintStyle = jsPlumb.extend({}, style);\n// TODO figure out if we want components to clone paintStyle so as not to share it.\t\t    \t\n            this._jsPlumb.hoverPaintStyle = style;\n            _updateHoverStyle(this);\n            if (!doNotRepaint) this.repaint();\n        },\n        getHoverPaintStyle: function () {\n            return this._jsPlumb.hoverPaintStyle;\n        },\n        destroy: function (force) {\n            if (force || this.typeId == null) {\n                this.cleanupListeners(); // this is on EventGenerator\n                this.clone = null;\n                this._jsPlumb = null;\n            }\n        },\n\n        isHover: function () {\n            return this._jsPlumb.hover;\n        },\n\n        setHover: function (hover, ignoreAttachedElements, timestamp) {\n            // while dragging, we ignore these events.  this keeps the UI from flashing and\n            // swishing and whatevering.\n            if (this._jsPlumb && !this._jsPlumb.instance.currentlyDragging && !this._jsPlumb.instance.isHoverSuspended()) {\n\n                this._jsPlumb.hover = hover;\n\n                if (this.canvas != null) {\n                    if (this._jsPlumb.instance.hoverClass != null) {\n                        var method = hover ? \"addClass\" : \"removeClass\";\n                        this._jsPlumb.instance[method](this.canvas, this._jsPlumb.instance.hoverClass);\n                    }\n                    if (this._jsPlumb.hoverClass != null) {\n                        this._jsPlumb.instance[method](this.canvas, this._jsPlumb.hoverClass);\n                    }\n                }\n                if (this._jsPlumb.hoverPaintStyle != null) {\n                    this._jsPlumb.paintStyleInUse = hover ? this._jsPlumb.hoverPaintStyle : this._jsPlumb.paintStyle;\n                    if (!this._jsPlumb.instance.isSuspendDrawing()) {\n                        timestamp = timestamp || _timestamp();\n                        this.repaint({timestamp: timestamp, recalc: false});\n                    }\n                }\n                // get the list of other affected elements, if supported by this component.\n                // for a connection, its the endpoints.  for an endpoint, its the connections! surprise.\n                if (this.getAttachedElements && !ignoreAttachedElements)\n                    _updateAttachedElements(this, hover, _timestamp(), this);\n            }\n        }\n    });\n\n// ------------------------------ END jsPlumbUIComponent --------------------------------------------\n\n    var _jsPlumbInstanceIndex = 0,\n        getInstanceIndex = function () {\n            var i = _jsPlumbInstanceIndex + 1;\n            _jsPlumbInstanceIndex++;\n            return i;\n        };\n\n    var jsPlumbInstance = root.jsPlumbInstance = function (_defaults) {\n\n        this.version = \"2.4.2\";\n\n        if (_defaults) jsPlumb.extend(this.Defaults, _defaults);\n\n        this.logEnabled = this.Defaults.LogEnabled;\n        this._connectionTypes = {};\n        this._endpointTypes = {};\n\n        _ju.EventGenerator.apply(this);\n\n        var _currentInstance = this,\n            _instanceIndex = getInstanceIndex(),\n            _bb = _currentInstance.bind,\n            _initialDefaults = {},\n            _zoom = 1,\n            _info = function (el) {\n                if (el == null) return null;\n                else if (el.nodeType == 3 || el.nodeType == 8) {\n                    return { el:el, text:true };\n                }\n                else {\n                    var _el = _currentInstance.getElement(el);\n                    return { el: _el, id: (_ju.isString(el) && _el == null) ? el : _getId(_el) };\n                }\n            };\n\n        this.getInstanceIndex = function () {\n            return _instanceIndex;\n        };\n\n        this.setZoom = function (z, repaintEverything) {\n            _zoom = z;\n            _currentInstance.fire(\"zoom\", _zoom);\n            if (repaintEverything) _currentInstance.repaintEverything();\n            return true;\n        };\n        this.getZoom = function () {\n            return _zoom;\n        };\n\n        for (var i in this.Defaults)\n            _initialDefaults[i] = this.Defaults[i];\n\n        var _container, _containerDelegations = [];\n        this.unbindContainer = function() {\n            if (_container != null && _containerDelegations.length > 0) {\n                for (var i = 0; i < _containerDelegations.length; i++) {\n                    _currentInstance.off(_container, _containerDelegations[i][0], _containerDelegations[i][1]);\n                }\n            }\n        };\n        this.setContainer = function (c) {\n\n            this.unbindContainer();\n\n            // get container as dom element.\n            c = this.getElement(c);\n            // move existing connections and endpoints, if any.\n            this.select().each(function (conn) {\n                conn.moveParent(c);\n            });\n            this.selectEndpoints().each(function (ep) {\n                ep.moveParent(c);\n            });\n\n            // set container.\n            var previousContainer = _container;\n            _container = c;\n            _containerDelegations.length = 0;\n            var eventAliases = {\n                \"endpointclick\":\"endpointClick\",\n                \"endpointdblclick\":\"endpointDblClick\"\n            };\n\n            var _oneDelegateHandler = function (id, e, componentType) {\n                var t = e.srcElement || e.target,\n                    jp = (t && t.parentNode ? t.parentNode._jsPlumb : null) || (t ? t._jsPlumb : null) || (t && t.parentNode && t.parentNode.parentNode ? t.parentNode.parentNode._jsPlumb : null);\n                if (jp) {\n                    jp.fire(id, jp, e);\n                    var alias = componentType ? eventAliases[componentType + id] || id : id;\n                    // jsplumb also fires every event coming from components/overlays. That's what the test for `jp.component` is for.\n                    _currentInstance.fire(alias, jp.component || jp, e);\n                }\n            };\n\n            var _addOneDelegate = function(eventId, selector, fn) {\n                _containerDelegations.push([eventId, fn]);\n                _currentInstance.on(_container, eventId, selector, fn);\n            };\n\n            // delegate one event on the container to jsplumb elements. it might be possible to\n            // abstract this out: each of endpoint, connection and overlay could register themselves with\n            // jsplumb as \"component types\" or whatever, and provide a suitable selector. this would be\n            // done by the renderer (although admittedly from 2.0 onwards we're not supporting vml anymore)\n            var _oneDelegate = function (id) {\n                // connections.\n                _addOneDelegate(id, \".jtk-connector\", function (e) {\n                    _oneDelegateHandler(id, e);\n                });\n                // endpoints. note they can have an enclosing div, or not.\n                _addOneDelegate(id, \".jtk-endpoint\", function (e) {\n                    _oneDelegateHandler(id, e, \"endpoint\");\n                });\n                // overlays\n                _addOneDelegate(id, \".jtk-overlay\", function (e) {\n                    _oneDelegateHandler(id, e);\n                });\n            };\n\n            for (var i = 0; i < events.length; i++)\n                _oneDelegate(events[i]);\n\n            // managed elements\n            for (var elId in managedElements) {\n                var el = managedElements[elId].el;\n                if (el.parentNode === previousContainer) {\n                    previousContainer.removeChild(el);\n                    _container.appendChild(el);\n                }\n            }\n\n        };\n        this.getContainer = function () {\n            return _container;\n        };\n\n        this.bind = function (event, fn) {\n            if (\"ready\" === event && initialized) fn();\n            else _bb.apply(_currentInstance, [event, fn]);\n        };\n\n        _currentInstance.importDefaults = function (d) {\n            for (var i in d) {\n                _currentInstance.Defaults[i] = d[i];\n            }\n            if (d.Container)\n                _currentInstance.setContainer(d.Container);\n\n            return _currentInstance;\n        };\n\n        _currentInstance.restoreDefaults = function () {\n            _currentInstance.Defaults = jsPlumb.extend({}, _initialDefaults);\n            return _currentInstance;\n        };\n\n        var log = null,\n            initialized = false,\n        // TODO remove from window scope\n            connections = [],\n        // map of element id -> endpoint lists. an element can have an arbitrary\n        // number of endpoints on it, and not all of them have to be connected\n        // to anything.\n            endpointsByElement = {},\n            endpointsByUUID = {},\n            managedElements = {},\n            offsets = {},\n            offsetTimestamps = {},\n            draggableStates = {},\n            connectionBeingDragged = false,\n            sizes = [],\n            _suspendDrawing = false,\n            _suspendedAt = null,\n            DEFAULT_SCOPE = this.Defaults.Scope,\n            _curIdStamp = 1,\n            _idstamp = function () {\n                return \"\" + _curIdStamp++;\n            },\n\n        //\n        // appends an element to some other element, which is calculated as follows:\n        //\n        // 1. if Container exists, use that element.\n        // 2. if the 'parent' parameter exists, use that.\n        // 3. otherwise just use the root element.\n        //\n        //\n            _appendElement = function (el, parent) {\n                if (_container)\n                    _container.appendChild(el);\n                else if (!parent)\n                    this.appendToRoot(el);\n                else\n                    this.getElement(parent).appendChild(el);\n            }.bind(this),\n\n        //\n        // Draws an endpoint and its connections. this is the main entry point into drawing connections as well\n        // as endpoints, since jsPlumb is endpoint-centric under the hood.\n        //\n        // @param element element to draw (of type library specific element object)\n        // @param ui UI object from current library's event system. optional.\n        // @param timestamp timestamp for this paint cycle. used to speed things up a little by cutting down the amount of offset calculations we do.\n        // @param clearEdits defaults to false; indicates that mouse edits for connectors should be cleared\n        ///\n            _draw = function (element, ui, timestamp, clearEdits) {\n\n                if (!_suspendDrawing) {\n                    var id = _getId(element),\n                        repaintEls,\n                        dm = _currentInstance.getDragManager();\n\n                    if (dm) repaintEls = dm.getElementsForDraggable(id);\n\n                    if (timestamp == null) timestamp = _timestamp();\n\n                    // update the offset of everything _before_ we try to draw anything.\n                    var o = _updateOffset({ elId: id, offset: ui, recalc: false, timestamp: timestamp });\n\n                    if (repaintEls && o && o.o) {\n                        for (var i in repaintEls) {\n                            _updateOffset({\n                                elId: repaintEls[i].id,\n                                offset: {\n                                    left: o.o.left + repaintEls[i].offset.left,\n                                    top: o.o.top + repaintEls[i].offset.top\n                                },\n                                recalc: false,\n                                timestamp: timestamp\n                            });\n                        }\n                    }\n\n                    _currentInstance.anchorManager.redraw(id, ui, timestamp, null, clearEdits);\n\n                    if (repaintEls) {\n                        for (var j in repaintEls) {\n                            _currentInstance.anchorManager.redraw(repaintEls[j].id, ui, timestamp, repaintEls[j].offset, clearEdits, true);\n                        }\n                    }\n                }\n            },\n\n        //\n        // gets an Endpoint by uuid.\n        //\n            _getEndpoint = function (uuid) {\n                return endpointsByUUID[uuid];\n            },\n\n            /**\n             * inits a draggable if it's not already initialised.\n             * TODO: somehow abstract this to the adapter, because the concept of \"draggable\" has no\n             * place on the server.\n             */\n            _initDraggableIfNecessary = function (element, isDraggable, dragOptions, id, fireEvent) {\n                // move to DragManager?\n                if (!jsPlumb.headless) {\n                    var _draggable = isDraggable == null ? false : isDraggable;\n                    if (_draggable) {\n                        if (jsPlumb.isDragSupported(element, _currentInstance)) {\n                            var options = dragOptions || _currentInstance.Defaults.DragOptions;\n                            options = jsPlumb.extend({}, options); // make a copy.\n                            if (!jsPlumb.isAlreadyDraggable(element, _currentInstance)) {\n                                var dragEvent = jsPlumb.dragEvents.drag,\n                                    stopEvent = jsPlumb.dragEvents.stop,\n                                    startEvent = jsPlumb.dragEvents.start,\n                                    _started = false;\n\n                                _manage(id, element);\n\n                                options[startEvent] = _ju.wrap(options[startEvent], function () {\n                                    _currentInstance.setHoverSuspended(true);\n                                    _currentInstance.select({source: element}).addClass(_currentInstance.elementDraggingClass + \" \" + _currentInstance.sourceElementDraggingClass, true);\n                                    _currentInstance.select({target: element}).addClass(_currentInstance.elementDraggingClass + \" \" + _currentInstance.targetElementDraggingClass, true);\n                                    _currentInstance.setConnectionBeingDragged(true);\n                                    if (options.canDrag) return dragOptions.canDrag();\n                                }, false);\n\n                                options[dragEvent] = _ju.wrap(options[dragEvent], function () {\n                                    // TODO: here we could actually use getDragObject, and then compute it ourselves,\n                                    // since every adapter does the same thing. but i'm not sure why YUI's getDragObject\n                                    // differs from getUIPosition so much\n                                    var ui = _currentInstance.getUIPosition(arguments, _currentInstance.getZoom());\n                                    if (ui != null) {\n                                        _draw(element, ui, null, true);\n                                        if (_started) _currentInstance.addClass(element, \"jtk-dragged\");\n                                        _started = true;\n                                    }\n                                });\n                                options[stopEvent] = _ju.wrap(options[stopEvent], function () {\n                                    var elements = arguments[0].selection, uip;\n\n                                    var _one = function (_e) {\n                                        if (_e[1] != null) {\n                                            // run the reported offset through the code that takes parent containers\n                                            // into account, to adjust if necessary (issue 554)\n                                            uip = _currentInstance.getUIPosition([{\n                                                el:_e[2].el,\n                                                pos:[_e[1].left, _e[1].top]\n                                            }]);\n                                            _draw(_e[2].el, uip);\n                                        }\n                                        _currentInstance.removeClass(_e[0], \"jtk-dragged\");\n                                        _currentInstance.select({source: _e[2].el}).removeClass(_currentInstance.elementDraggingClass + \" \" + _currentInstance.sourceElementDraggingClass, true);\n                                        _currentInstance.select({target: _e[2].el}).removeClass(_currentInstance.elementDraggingClass + \" \" + _currentInstance.targetElementDraggingClass, true);\n                                        _currentInstance.getDragManager().dragEnded(_e[2].el);\n                                    };\n\n                                    for (var i = 0; i < elements.length; i++) {\n                                        _one(elements[i]);\n                                    }\n\n                                    _started = false;\n                                    _currentInstance.setHoverSuspended(false);\n                                    _currentInstance.setConnectionBeingDragged(false);\n                                });\n                                var elId = _getId(element); // need ID\n                                draggableStates[elId] = true;\n                                var draggable = draggableStates[elId];\n                                options.disabled = draggable == null ? false : !draggable;\n                                _currentInstance.initDraggable(element, options);\n                                _currentInstance.getDragManager().register(element);\n                                if (fireEvent) _currentInstance.fire(\"elementDraggable\", {el:element, options:options});\n                            }\n                            else {\n                                // already draggable. attach any start, drag or stop listeners to the current Drag.\n                                if (dragOptions.force) {\n                                    _currentInstance.initDraggable(element, options);\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n\n            _scopeMatch = function (e1, e2) {\n                var s1 = e1.scope.split(/\\s/), s2 = e2.scope.split(/\\s/);\n                for (var i = 0; i < s1.length; i++)\n                    for (var j = 0; j < s2.length; j++)\n                        if (s2[j] == s1[i]) return true;\n\n                return false;\n            },\n\n        /*\n         * prepares a final params object that can be passed to _newConnection, taking into account defaults, events, etc.\n         */\n            _prepareConnectionParams = function (params, referenceParams) {\n                var _p = jsPlumb.extend({ }, params);\n                if (referenceParams) jsPlumb.extend(_p, referenceParams);\n\n                // hotwire endpoints passed as source or target to sourceEndpoint/targetEndpoint, respectively.\n                if (_p.source) {\n                    if (_p.source.endpoint)\n                        _p.sourceEndpoint = _p.source;\n                    else\n                        _p.source = _currentInstance.getElement(_p.source);\n                }\n                if (_p.target) {\n                    if (_p.target.endpoint)\n                        _p.targetEndpoint = _p.target;\n                    else\n                        _p.target = _currentInstance.getElement(_p.target);\n                }\n\n                // test for endpoint uuids to connect\n                if (params.uuids) {\n                    _p.sourceEndpoint = _getEndpoint(params.uuids[0]);\n                    _p.targetEndpoint = _getEndpoint(params.uuids[1]);\n                }\n\n                // now ensure that if we do have Endpoints already, they're not full.\n                // source:\n                if (_p.sourceEndpoint && _p.sourceEndpoint.isFull()) {\n                    _ju.log(_currentInstance, \"could not add connection; source endpoint is full\");\n                    return;\n                }\n\n                // target:\n                if (_p.targetEndpoint && _p.targetEndpoint.isFull()) {\n                    _ju.log(_currentInstance, \"could not add connection; target endpoint is full\");\n                    return;\n                }\n\n                // if source endpoint mandates connection type and nothing specified in our params, use it.\n                if (!_p.type && _p.sourceEndpoint)\n                    _p.type = _p.sourceEndpoint.connectionType;\n\n                // copy in any connectorOverlays that were specified on the source endpoint.\n                // it doesnt copy target endpoint overlays.  i'm not sure if we want it to or not.\n                if (_p.sourceEndpoint && _p.sourceEndpoint.connectorOverlays) {\n                    _p.overlays = _p.overlays || [];\n                    for (var i = 0, j = _p.sourceEndpoint.connectorOverlays.length; i < j; i++) {\n                        _p.overlays.push(_p.sourceEndpoint.connectorOverlays[i]);\n                    }\n                }\n\n                // scope\n                if (_p.sourceEndpoint && _p.sourceEndpoint.scope) {\n                    _p.scope = _p.sourceEndpoint.scope;\n                }\n\n                // pointer events\n                if (!_p[\"pointer-events\"] && _p.sourceEndpoint && _p.sourceEndpoint.connectorPointerEvents)\n                    _p[\"pointer-events\"] = _p.sourceEndpoint.connectorPointerEvents;\n\n                var _mergeOverrides = function (def, values) {\n                    var m = jsPlumb.extend({}, def);\n                    for (var i in values) {\n                        if (values[i]) m[i] = values[i];\n                    }\n                    return m;\n                };\n\n                var _addEndpoint = function (el, def, idx) {\n                    return _currentInstance.addEndpoint(el, _mergeOverrides(def, {\n                        anchor: _p.anchors ? _p.anchors[idx] : _p.anchor,\n                        endpoint: _p.endpoints ? _p.endpoints[idx] : _p.endpoint,\n                        paintStyle: _p.endpointStyles ? _p.endpointStyles[idx] : _p.endpointStyle,\n                        hoverPaintStyle: _p.endpointHoverStyles ? _p.endpointHoverStyles[idx] : _p.endpointHoverStyle\n                    }));\n                };\n\n                // check for makeSource/makeTarget specs.\n\n                var _oneElementDef = function (type, idx, defs, matchType) {\n                    if (_p[type] && !_p[type].endpoint && !_p[type + \"Endpoint\"] && !_p.newConnection) {\n                        var tid = _getId(_p[type]), tep = defs[tid];\n\n                        tep = tep ? tep[matchType] : null;\n\n                        if (tep) {\n                            // if not enabled, return.\n                            if (!tep.enabled) return false;\n                            var newEndpoint = tep.endpoint != null && tep.endpoint._jsPlumb ? tep.endpoint : _addEndpoint(_p[type], tep.def, idx);\n                            if (newEndpoint.isFull()) return false;\n                            _p[type + \"Endpoint\"] = newEndpoint;\n                            if (!_p.scope && tep.def.scope) _p.scope = tep.def.scope; // provide scope if not already provided and endpoint def has one.\n                            newEndpoint.setDeleteOnEmpty(true);\n                            if (tep.uniqueEndpoint) {\n                                if (!tep.endpoint) {\n                                    tep.endpoint = newEndpoint;\n                                    newEndpoint.setDeleteOnEmpty(false);\n                                }\n                                else\n                                    newEndpoint.finalEndpoint = tep.endpoint;\n                            }\n                        }\n                    }\n                };\n\n                if (_oneElementDef(\"source\", 0, this.sourceEndpointDefinitions, _p.type || \"default\") === false) return;\n                if (_oneElementDef(\"target\", 1, this.targetEndpointDefinitions, _p.type || \"default\") === false) return;\n\n                // last, ensure scopes match\n                if (_p.sourceEndpoint && _p.targetEndpoint)\n                    if (!_scopeMatch(_p.sourceEndpoint, _p.targetEndpoint)) _p = null;\n\n                return _p;\n            }.bind(_currentInstance),\n\n            _newConnection = function (params) {\n                var connectionFunc = _currentInstance.Defaults.ConnectionType || _currentInstance.getDefaultConnectionType();\n\n                params._jsPlumb = _currentInstance;\n                params.newConnection = _newConnection;\n                params.newEndpoint = _newEndpoint;\n                params.endpointsByUUID = endpointsByUUID;\n                params.endpointsByElement = endpointsByElement;\n                params.finaliseConnection = _finaliseConnection;\n                params.id = \"con_\" + _idstamp();\n                var con = new connectionFunc(params);\n\n                // if the connection is draggable, then maybe we need to tell the target endpoint to init the\n                // dragging code. it won't run again if it already configured to be draggable.\n                if (con.isDetachable()) {\n                    con.endpoints[0].initDraggable(\"_jsPlumbSource\");\n                    con.endpoints[1].initDraggable(\"_jsPlumbTarget\");\n                }\n\n                return con;\n            },\n\n        //\n        // adds the connection to the backing model, fires an event if necessary and then redraws\n        //\n            _finaliseConnection = _currentInstance.finaliseConnection = function (jpc, params, originalEvent, doInformAnchorManager) {\n                params = params || {};\n                // add to list of connections (by scope).\n                if (!jpc.suspendedEndpoint)\n                    connections.push(jpc);\n\n                jpc.pending = null;\n\n                // turn off isTemporarySource on the source endpoint (only viable on first draw)\n                jpc.endpoints[0].isTemporarySource = false;\n\n                // always inform the anchor manager\n                // except that if jpc has a suspended endpoint it's not true to say the\n                // connection is new; it has just (possibly) moved. the question is whether\n                // to make that call here or in the anchor manager.  i think perhaps here.\n                if (doInformAnchorManager !== false)\n                    _currentInstance.anchorManager.newConnection(jpc);\n\n                // force a paint\n                _draw(jpc.source);\n\n                // fire an event\n                if (!params.doNotFireConnectionEvent && params.fireEvent !== false) {\n\n                    var eventArgs = {\n                        connection: jpc,\n                        source: jpc.source, target: jpc.target,\n                        sourceId: jpc.sourceId, targetId: jpc.targetId,\n                        sourceEndpoint: jpc.endpoints[0], targetEndpoint: jpc.endpoints[1]\n                    };\n\n                    _currentInstance.fire(\"connection\", eventArgs, originalEvent);\n                }\n            },\n\n        /*\n         factory method to prepare a new endpoint.  this should always be used instead of creating Endpoints\n         manually, since this method attaches event listeners and an id.\n         */\n            _newEndpoint = function (params, id) {\n                var endpointFunc = _currentInstance.Defaults.EndpointType || jsPlumb.Endpoint;\n                var _p = jsPlumb.extend({}, params);\n                _p._jsPlumb = _currentInstance;\n                _p.newConnection = _newConnection;\n                _p.newEndpoint = _newEndpoint;\n                _p.endpointsByUUID = endpointsByUUID;\n                _p.endpointsByElement = endpointsByElement;\n                _p.fireDetachEvent = fireDetachEvent;\n                _p.elementId = id || _getId(_p.source);\n                var ep = new endpointFunc(_p);\n                ep.id = \"ep_\" + _idstamp();\n                _manage(_p.elementId, _p.source);\n\n                if (!jsPlumb.headless)\n                    _currentInstance.getDragManager().endpointAdded(_p.source, id);\n\n                return ep;\n            },\n\n        /*\n         * performs the given function operation on all the connections found\n         * for the given element id; this means we find all the endpoints for\n         * the given element, and then for each endpoint find the connectors\n         * connected to it. then we pass each connection in to the given\n         * function.\n         */\n            _operation = function (elId, func, endpointFunc) {\n                var endpoints = endpointsByElement[elId];\n                if (endpoints && endpoints.length) {\n                    for (var i = 0, ii = endpoints.length; i < ii; i++) {\n                        for (var j = 0, jj = endpoints[i].connections.length; j < jj; j++) {\n                            var retVal = func(endpoints[i].connections[j]);\n                            // if the function passed in returns true, we exit.\n                            // most functions return false.\n                            if (retVal) return;\n                        }\n                        if (endpointFunc) endpointFunc(endpoints[i]);\n                    }\n                }\n            },\n\n            _setDraggable = function (element, draggable) {\n                return jsPlumb.each(element, function (el) {\n                    if (_currentInstance.isDragSupported(el)) {\n                        draggableStates[_currentInstance.getAttribute(el, \"id\")] = draggable;\n                        _currentInstance.setElementDraggable(el, draggable);\n                    }\n                });\n            },\n        /*\n         * private method to do the business of hiding/showing.\n         *\n         * @param el\n         *            either Id of the element in question or a library specific\n         *            object for the element.\n         * @param state\n         *            String specifying a value for the css 'display' property\n         *            ('block' or 'none').\n         */\n            _setVisible = function (el, state, alsoChangeEndpoints) {\n                state = state === \"block\";\n                var endpointFunc = null;\n                if (alsoChangeEndpoints) {\n                    endpointFunc = function (ep) {\n                        ep.setVisible(state, true, true);\n                    };\n                }\n                var info = _info(el);\n                _operation(info.id, function (jpc) {\n                    if (state && alsoChangeEndpoints) {\n                        // this test is necessary because this functionality is new, and i wanted to maintain backwards compatibility.\n                        // this block will only set a connection to be visible if the other endpoint in the connection is also visible.\n                        var oidx = jpc.sourceId === info.id ? 1 : 0;\n                        if (jpc.endpoints[oidx].isVisible()) jpc.setVisible(true);\n                    }\n                    else  // the default behaviour for show, and what always happens for hide, is to just set the visibility without getting clever.\n                        jpc.setVisible(state);\n                }, endpointFunc);\n            },\n        /*\n         * toggles the draggable state of the given element(s).\n         * el is either an id, or an element object, or a list of ids/element objects.\n         */\n            _toggleDraggable = function (el) {\n                var state;\n                jsPlumb.each(el, function (el) {\n                    var elId = _currentInstance.getAttribute(el, \"id\");\n                    state = draggableStates[elId] == null ? false : draggableStates[elId];\n                    state = !state;\n                    draggableStates[elId] = state;\n                    _currentInstance.setDraggable(el, state);\n                    return state;\n                }.bind(this));\n                return state;\n            },\n            /**\n             * private method to do the business of toggling hiding/showing.\n             */\n            _toggleVisible = function (elId, changeEndpoints) {\n                var endpointFunc = null;\n                if (changeEndpoints) {\n                    endpointFunc = function (ep) {\n                        var state = ep.isVisible();\n                        ep.setVisible(!state);\n                    };\n                }\n                _operation(elId, function (jpc) {\n                    var state = jpc.isVisible();\n                    jpc.setVisible(!state);\n                }, endpointFunc);\n            },\n\n        // TODO comparison performance\n            _getCachedData = function (elId) {\n                var o = offsets[elId];\n                if (!o)\n                    return _updateOffset({elId: elId});\n                else\n                    return {o: o, s: sizes[elId]};\n            },\n\n            /**\n             * gets an id for the given element, creating and setting one if\n             * necessary.  the id is of the form\n             *\n             *    jsPlumb_<instance index>_<index in instance>\n             *\n             * where \"index in instance\" is a monotonically increasing integer that starts at 0,\n             * for each instance.  this method is used not only to assign ids to elements that do not\n             * have them but also to connections and endpoints.\n             */\n            _getId = function (element, uuid, doNotCreateIfNotFound) {\n                if (_ju.isString(element)) return element;\n                if (element == null) return null;\n                var id = _currentInstance.getAttribute(element, \"id\");\n                if (!id || id === \"undefined\") {\n                    // check if fixed uuid parameter is given\n                    if (arguments.length == 2 && arguments[1] !== undefined)\n                        id = uuid;\n                    else if (arguments.length == 1 || (arguments.length == 3 && !arguments[2]))\n                        id = \"jsPlumb_\" + _instanceIndex + \"_\" + _idstamp();\n\n                    if (!doNotCreateIfNotFound) _currentInstance.setAttribute(element, \"id\", id);\n                }\n                return id;\n            };\n\n        this.setConnectionBeingDragged = function (v) {\n            connectionBeingDragged = v;\n        };\n        this.isConnectionBeingDragged = function () {\n            return connectionBeingDragged;\n        };\n\n        /**\n         * Returns a map of all the elements this jsPlumbInstance is currently managing.\n         * @returns {Object} Map of [id-> {el, endpoint[], connection, position}] information.\n         */\n        this.getManagedElements = function() {\n            return managedElements;\n        };\n\n        this.connectorClass = \"jtk-connector\";\n        this.connectorOutlineClass = \"jtk-connector-outline\";\n        this.editableConnectorClass = \"jtk-connector-editable\";\n        this.connectedClass = \"jtk-connected\";\n        this.hoverClass = \"jtk-hover\";\n        this.endpointClass = \"jtk-endpoint\";\n        this.endpointConnectedClass = \"jtk-endpoint-connected\";\n        this.endpointFullClass = \"jtk-endpoint-full\";\n        this.endpointDropAllowedClass = \"jtk-endpoint-drop-allowed\";\n        this.endpointDropForbiddenClass = \"jtk-endpoint-drop-forbidden\";\n        this.overlayClass = \"jtk-overlay\";\n        this.draggingClass = \"jtk-dragging\";\n        this.elementDraggingClass = \"jtk-element-dragging\";\n        this.sourceElementDraggingClass = \"jtk-source-element-dragging\";\n        this.targetElementDraggingClass = \"jtk-target-element-dragging\";\n        this.endpointAnchorClassPrefix = \"jtk-endpoint-anchor\";\n        this.hoverSourceClass = \"jtk-source-hover\";\n        this.hoverTargetClass = \"jtk-target-hover\";\n        this.dragSelectClass = \"jtk-drag-select\";\n\n        this.Anchors = {};\n        this.Connectors = {  \"svg\": {} };\n        this.Endpoints = { \"svg\": {} };\n        this.Overlays = { \"svg\": {} } ;\n        this.ConnectorRenderers = {};\n        this.SVG = \"svg\";\n\n// --------------------------- jsPlumbInstance public API ---------------------------------------------------------\n\n\n        this.addEndpoint = function (el, params, referenceParams) {\n            referenceParams = referenceParams || {};\n            var p = jsPlumb.extend({}, referenceParams);\n            jsPlumb.extend(p, params);\n            p.endpoint = p.endpoint || _currentInstance.Defaults.Endpoint;\n            p.paintStyle = p.paintStyle || _currentInstance.Defaults.EndpointStyle;\n\n            var results = [],\n                inputs = (_ju.isArray(el) || (el.length != null && !_ju.isString(el))) ? el : [ el ];\n\n            for (var i = 0, j = inputs.length; i < j; i++) {\n                p.source = _currentInstance.getElement(inputs[i]);\n                _ensureContainer(p.source);\n\n                var id = _getId(p.source), e = _newEndpoint(p, id);\n\n                // ensure element is managed.\n                var myOffset = _manage(id, p.source).info.o;\n                _ju.addToList(endpointsByElement, id, e);\n\n                if (!_suspendDrawing) {\n                    e.paint({\n                        anchorLoc: e.anchor.compute({ xy: [ myOffset.left, myOffset.top ], wh: sizes[id], element: e, timestamp: _suspendedAt }),\n                        timestamp: _suspendedAt\n                    });\n                }\n\n                results.push(e);\n            }\n\n            return results.length == 1 ? results[0] : results;\n        };\n\n        this.addEndpoints = function (el, endpoints, referenceParams) {\n            var results = [];\n            for (var i = 0, j = endpoints.length; i < j; i++) {\n                var e = _currentInstance.addEndpoint(el, endpoints[i], referenceParams);\n                if (_ju.isArray(e))\n                    Array.prototype.push.apply(results, e);\n                else results.push(e);\n            }\n            return results;\n        };\n\n        this.animate = function (el, properties, options) {\n            if (!this.animationSupported) return false;\n\n            options = options || {};\n            var del = _currentInstance.getElement(el),\n                id = _getId(del),\n                stepFunction = jsPlumb.animEvents.step,\n                completeFunction = jsPlumb.animEvents.complete;\n\n            options[stepFunction] = _ju.wrap(options[stepFunction], function () {\n                _currentInstance.revalidate(id);\n            });\n\n            // onComplete repaints, just to make sure everything looks good at the end of the animation.\n            options[completeFunction] = _ju.wrap(options[completeFunction], function () {\n                _currentInstance.revalidate(id);\n            });\n\n            _currentInstance.doAnimate(del, properties, options);\n        };\n\n        /**\n         * checks for a listener for the given condition, executing it if found, passing in the given value.\n         * condition listeners would have been attached using \"bind\" (which is, you could argue, now overloaded, since\n         * firing click events etc is a bit different to what this does).  i thought about adding a \"bindCondition\"\n         * or something, but decided against it, for the sake of simplicity. jsPlumb will never fire one of these\n         * condition events anyway.\n         */\n        this.checkCondition = function (conditionName, args) {\n            var l = _currentInstance.getListener(conditionName),\n                r = true;\n\n            if (l && l.length > 0) {\n                var values = Array.prototype.slice.call(arguments, 1);\n                try {\n                    for (var i = 0, j = l.length; i < j; i++) {\n                        r = r && l[i].apply(l[i], values);\n                    }\n                }\n                catch (e) {\n                    _ju.log(_currentInstance, \"cannot check condition [\" + conditionName + \"]\" + e);\n                }\n            }\n            return r;\n        };\n\n        this.connect = function (params, referenceParams) {\n            // prepare a final set of parameters to create connection with\n            var _p = _prepareConnectionParams(params, referenceParams), jpc;\n            // TODO probably a nicer return value if the connection was not made.  _prepareConnectionParams\n            // will return null (and log something) if either endpoint was full.  what would be nicer is to\n            // create a dedicated 'error' object.\n            if (_p) {\n                if (_p.source == null && _p.sourceEndpoint == null) {\n                    _ju.log(\"Cannot establish connection - source does not exist\");\n                    return;\n                }\n                if (_p.target == null && _p.targetEndpoint == null) {\n                    _ju.log(\"Cannot establish connection - target does not exist\");\n                    return;\n                }\n                _ensureContainer(_p.source);\n                // create the connection.  it is not yet registered\n                jpc = _newConnection(_p);\n                // now add it the model, fire an event, and redraw\n                _finaliseConnection(jpc, _p);\n            }\n            return jpc;\n        };\n\n        var stTypes = [\n            { el: \"source\", elId: \"sourceId\", epDefs: \"sourceEndpointDefinitions\" },\n            { el: \"target\", elId: \"targetId\", epDefs: \"targetEndpointDefinitions\" }\n        ];\n\n        var _set = function (c, el, idx, doNotRepaint) {\n            var ep, _st = stTypes[idx], cId = c[_st.elId], cEl = c[_st.el], sid, sep,\n                oldEndpoint = c.endpoints[idx];\n\n            var evtParams = {\n                index: idx,\n                originalSourceId: idx === 0 ? cId : c.sourceId,\n                newSourceId: c.sourceId,\n                originalTargetId: idx == 1 ? cId : c.targetId,\n                newTargetId: c.targetId,\n                connection: c\n            };\n\n            if (el.constructor == jsPlumb.Endpoint) {\n                ep = el;\n                ep.addConnection(c);\n                el = ep.element;\n            }\n            else {\n                sid = _getId(el);\n                sep = this[_st.epDefs][sid];\n\n                if (sid === c[_st.elId])\n                    ep = null;  // dont change source/target if the element is already the one given.\n                else if (sep) {\n                    for (var t in sep) {\n                        if (!sep[t].enabled) return;\n                        ep = sep[t].endpoint != null && sep[t].endpoint._jsPlumb ? sep[t].endpoint : this.addEndpoint(el, sep[t].def);\n                        if (sep[t].uniqueEndpoint) {\n                            sep[t].endpoint = ep;\n                        }\n                        ep.addConnection(c);\n                    }\n                }\n                else {\n                    ep = c.makeEndpoint(idx === 0, el, sid);\n                }\n            }\n\n            if (ep != null) {\n                oldEndpoint.detachFromConnection(c);\n                c.endpoints[idx] = ep;\n                c[_st.el] = ep.element;\n                c[_st.elId] = ep.elementId;\n                evtParams[idx === 0 ? \"newSourceId\" : \"newTargetId\"] = ep.elementId;\n\n                fireMoveEvent(evtParams);\n\n                if (!doNotRepaint) {\n                    c.repaint();\n                }\n            }\n\n            evtParams.element = el;\n            return evtParams;\n\n        }.bind(this);\n\n        this.setSource = function (connection, el, doNotRepaint) {\n            var p = _set(connection, el, 0, doNotRepaint);\n            this.anchorManager.sourceChanged(p.originalSourceId, p.newSourceId, connection, p.el);\n        };\n        this.setTarget = function (connection, el, doNotRepaint) {\n            var p = _set(connection, el, 1, doNotRepaint);\n            this.anchorManager.updateOtherEndpoint(p.originalSourceId, p.originalTargetId, p.newTargetId, connection);\n        };\n\n        this.deleteEndpoint = function (object, dontUpdateHover, deleteAttachedObjects) {\n            var endpoint = (typeof object === \"string\") ? endpointsByUUID[object] : object;\n            if (endpoint) {\n                _currentInstance.deleteObject({ endpoint: endpoint, dontUpdateHover: dontUpdateHover, deleteAttachedObjects:deleteAttachedObjects });\n            }\n            return _currentInstance;\n        };\n\n        this.deleteEveryEndpoint = function () {\n            var _is = _currentInstance.setSuspendDrawing(true);\n            for (var id in endpointsByElement) {\n                var endpoints = endpointsByElement[id];\n                if (endpoints && endpoints.length) {\n                    for (var i = 0, j = endpoints.length; i < j; i++) {\n                        _currentInstance.deleteEndpoint(endpoints[i], true);\n                    }\n                }\n            }\n            endpointsByElement = {};\n            managedElements = {};\n            endpointsByUUID = {};\n            offsets = {};\n            offsetTimestamps = {};\n            _currentInstance.anchorManager.reset();\n            var dm = _currentInstance.getDragManager();\n            if (dm) {\n                dm.reset();\n            }\n            if (!_is) {\n                _currentInstance.setSuspendDrawing(false);\n            }\n            return _currentInstance;\n        };\n\n        var fireDetachEvent = function (jpc, doFireEvent, originalEvent) {\n            // may have been given a connection, or in special cases, an object\n            var connType = _currentInstance.Defaults.ConnectionType || _currentInstance.getDefaultConnectionType(),\n                argIsConnection = jpc.constructor == connType,\n                params = argIsConnection ? {\n                    connection: jpc,\n                    source: jpc.source, target: jpc.target,\n                    sourceId: jpc.sourceId, targetId: jpc.targetId,\n                    sourceEndpoint: jpc.endpoints[0], targetEndpoint: jpc.endpoints[1]\n                } : jpc;\n\n            if (doFireEvent) {\n                _currentInstance.fire(\"connectionDetached\", params, originalEvent);\n            }\n\n            // always fire this. used by internal jsplumb stuff.\n            _currentInstance.fire(\"internal.connectionDetached\", params, originalEvent);\n\n            _currentInstance.anchorManager.connectionDetached(params);\n        };\n\n        var fireMoveEvent = _currentInstance.fireMoveEvent = function (params, evt) {\n            _currentInstance.fire(\"connectionMoved\", params, evt);\n        };\n\n        this.unregisterEndpoint = function (endpoint) {\n            if (endpoint._jsPlumb.uuid) {\n                endpointsByUUID[endpoint._jsPlumb.uuid] = null;\n            }\n            _currentInstance.anchorManager.deleteEndpoint(endpoint);\n            // TODO at least replace this with a removeWithFunction call.\n            for (var e in endpointsByElement) {\n                var endpoints = endpointsByElement[e];\n                if (endpoints) {\n                    var newEndpoints = [];\n                    for (var i = 0, j = endpoints.length; i < j; i++)\n                        if (endpoints[i] != endpoint) newEndpoints.push(endpoints[i]);\n\n                    endpointsByElement[e] = newEndpoints;\n                }\n                if (endpointsByElement[e].length < 1) {\n                    delete endpointsByElement[e];\n                }\n            }\n        };\n\n        var IS_DETACH_ALLOWED = \"isDetachAllowed\";\n        var BEFORE_DETACH = \"beforeDetach\";\n        var CHECK_CONDITION = \"checkCondition\";\n\n        /**\n         * Deletes a Connection.\n         * @method deleteConnection\n         * @param connection Connection to delete\n         * @param {Object} [params] Optional delete parameters\n         * @param {Boolean} [params.doNotFireEvent=false] If true, a connection detached event will not be fired. Otherwise one will.\n         * @param {Boolean} [params.force=false] If true, the connection will be deleted even if a beforeDetach interceptor tries to stop the deletion.\n         * @returns {Boolean} True if the connection was deleted, false otherwise.\n         */\n        this.deleteConnection = function(connection, params) {\n\n            if (connection != null) {\n                params = params || {};\n\n                if (params.force || _ju.functionChain(true, false, [\n                    [ connection.endpoints[0], IS_DETACH_ALLOWED, [ connection ] ],\n                    [ connection.endpoints[1], IS_DETACH_ALLOWED, [ connection ] ],\n                    [ connection, IS_DETACH_ALLOWED, [ connection ] ],\n                    [ _currentInstance, CHECK_CONDITION, [ BEFORE_DETACH, connection ] ]\n                ])) {\n\n                    connection.setHover(false);\n                    fireDetachEvent(connection, !connection.pending && params.fireEvent !== false, params.originalEvent);\n\n                    connection.endpoints[0].detachFromConnection(connection);\n                    connection.endpoints[1].detachFromConnection(connection);\n                    _ju.removeWithFunction(connections, function (_c) {\n                        return connection.id == _c.id;\n                    });\n\n                    connection.cleanup();\n                    connection.destroy();\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        /**\n         * Remove all Connections from all elements, but leaves Endpoints in place ((unless a connection is set to auto delete its Endpoints).\n         * @method deleteEveryConnection\n         * @param {Object} [params] optional params object for the call\n         * @param {Boolean} [params.fireEvent=true] Whether or not to fire detach events\n         * @param {Boolean} [params.forceDetach=false] If true, this call will ignore any `beforeDetach` interceptors.\n         * @returns {Number} The number of connections that were deleted.\n         */\n        this.deleteEveryConnection = function (params) {\n            params = params || {};\n            var count = connections.length, deletedCount = 0;\n            _currentInstance.batch(function () {\n                for (var i = 0; i < count; i++) {\n                    deletedCount += _currentInstance.deleteConnection(connections[0], params) ? 1 : 0;\n                }\n            });\n            return deletedCount;\n        };\n\n        /**\n         * Removes all an element's Connections.\n         * @method deleteConnectionsForElement\n         * @param {Object} el Either the id of the element, or a selector for the element.\n         * @param {Object} [params] Optional parameters.\n         * @param {Boolean} [params.fireEvent=true] Whether or not to fire the detach event.\n         * @param {Boolean} [params.forceDetach=false] If true, this call will ignore any `beforeDetach` interceptors.\n         * @return {jsPlumbInstance} The current jsPlumb instance.\n         */\n        this.deleteConnectionsForElement = function (el, params) {\n            params = params || {};\n            el = _currentInstance.getElement(el);\n            var id = _getId(el), endpoints = endpointsByElement[id];\n            if (endpoints && endpoints.length) {\n                for (var i = 0, j = endpoints.length; i < j; i++) {\n                    endpoints[i].deleteEveryConnection(params);\n                }\n            }\n            return _currentInstance;\n        };\n\n        /// not public.  but of course its exposed. how to change this.\n        this.deleteObject = function (params) {\n            var result = {\n                    endpoints: {},\n                    connections: {},\n                    endpointCount: 0,\n                    connectionCount: 0\n                },\n                deleteAttachedObjects = params.deleteAttachedObjects !== false;\n\n            var unravelConnection = function (connection) {\n                if (connection != null && result.connections[connection.id] == null) {\n                    if (!params.dontUpdateHover && connection._jsPlumb != null) connection.setHover(false);\n                    result.connections[connection.id] = connection;\n                    result.connectionCount++;\n                    if (deleteAttachedObjects) {\n                        for (var j = 0; j < connection.endpoints.length; j++) {\n//                            if (connection.endpoints[j]._deleteOnDetach)\n//                                unravelEndpoint(connection.endpoints[j]);\n                        }\n                    }\n                }\n            };\n            var unravelEndpoint = function (endpoint) {\n                if (endpoint != null && result.endpoints[endpoint.id] == null) {\n                    if (!params.dontUpdateHover && endpoint._jsPlumb != null) endpoint.setHover(false);\n                    result.endpoints[endpoint.id] = endpoint;\n                    result.endpointCount++;\n\n                    if (deleteAttachedObjects) {\n                        for (var i = 0; i < endpoint.connections.length; i++) {\n                            var c = endpoint.connections[i];\n                            unravelConnection(c);\n                        }\n                    }\n                }\n            };\n\n            if (params.connection)\n                unravelConnection(params.connection);\n            else unravelEndpoint(params.endpoint);\n\n            // loop through connections\n            for (var i in result.connections) {\n                var c = result.connections[i];\n                if (c._jsPlumb) {\n                    _ju.removeWithFunction(connections, function (_c) {\n                        return c.id == _c.id;\n                    });\n\n                    fireDetachEvent(c, params.fireEvent === false ? false : !c.pending, params.originalEvent);\n                    var doNotCleanup = params.deleteAttachedObjects == null ? null : !params.deleteAttachedObjects;\n\n                    c.endpoints[0].detachFromConnection(c, null, doNotCleanup);\n                    c.endpoints[1].detachFromConnection(c, null, doNotCleanup);\n\n                    c.cleanup(true);\n                    c.destroy(true);\n                }\n            }\n\n            // loop through endpoints\n            for (var j in result.endpoints) {\n                var e = result.endpoints[j];\n                if (e._jsPlumb) {\n                    _currentInstance.unregisterEndpoint(e);\n                    // FIRE some endpoint deleted event?\n                    e.cleanup(true);\n                    e.destroy(true);\n                }\n            }\n\n            return result;\n        };\n\n        this.draggable = function (el, options) {\n            var info;\n            _each(function(_el) {\n                 info = _info(_el);\n                if (info.el) _initDraggableIfNecessary(info.el, true, options, info.id, true);\n            }, el);\n            return _currentInstance;\n        };\n\n        this.droppable = function(el, options) {\n            var info;\n            options = options || {};\n            options.allowLoopback = false;\n            _each(function(_el) {\n                info = _info(_el);\n                if (info.el) _currentInstance.initDroppable(info.el, options);\n            }, el);\n            return _currentInstance;\n        };\n\n        // helpers for select/selectEndpoints\n        var _setOperation = function (list, func, args, selector) {\n                for (var i = 0, j = list.length; i < j; i++) {\n                    list[i][func].apply(list[i], args);\n                }\n                return selector(list);\n            },\n            _getOperation = function (list, func, args) {\n                var out = [];\n                for (var i = 0, j = list.length; i < j; i++) {\n                    out.push([ list[i][func].apply(list[i], args), list[i] ]);\n                }\n                return out;\n            },\n            setter = function (list, func, selector) {\n                return function () {\n                    return _setOperation(list, func, arguments, selector);\n                };\n            },\n            getter = function (list, func) {\n                return function () {\n                    return _getOperation(list, func, arguments);\n                };\n            },\n            prepareList = function (input, doNotGetIds) {\n                var r = [];\n                if (input) {\n                    if (typeof input == 'string') {\n                        if (input === \"*\") return input;\n                        r.push(input);\n                    }\n                    else {\n                        if (doNotGetIds) r = input;\n                        else {\n                            if (input.length) {\n                                for (var i = 0, j = input.length; i < j; i++)\n                                    r.push(_info(input[i]).id);\n                            }\n                            else\n                                r.push(_info(input).id);\n                        }\n                    }\n                }\n                return r;\n            },\n            filterList = function (list, value, missingIsFalse) {\n                if (list === \"*\") return true;\n                return list.length > 0 ? list.indexOf(value) != -1 : !missingIsFalse;\n            };\n\n        // get some connections, specifying source/target/scope\n        this.getConnections = function (options, flat) {\n            if (!options) {\n                options = {};\n            } else if (options.constructor == String) {\n                options = { \"scope\": options };\n            }\n            var scope = options.scope || _currentInstance.getDefaultScope(),\n                scopes = prepareList(scope, true),\n                sources = prepareList(options.source),\n                targets = prepareList(options.target),\n                results = (!flat && scopes.length > 1) ? {} : [],\n                _addOne = function (scope, obj) {\n                    if (!flat && scopes.length > 1) {\n                        var ss = results[scope];\n                        if (ss == null) {\n                            ss = results[scope] = [];\n                        }\n                        ss.push(obj);\n                    } else results.push(obj);\n                };\n\n            for (var j = 0, jj = connections.length; j < jj; j++) {\n                var c = connections[j],\n                    sourceId = c.proxies && c.proxies[0] ? c.proxies[0].originalEp.elementId : c.sourceId,\n                    targetId = c.proxies && c.proxies[1] ? c.proxies[1].originalEp.elementId : c.targetId;\n\n                if (filterList(scopes, c.scope) && filterList(sources, sourceId) && filterList(targets, targetId))\n                    _addOne(c.scope, c);\n            }\n\n            return results;\n        };\n\n        var _curryEach = function (list, executor) {\n                return function (f) {\n                    for (var i = 0, ii = list.length; i < ii; i++) {\n                        f(list[i]);\n                    }\n                    return executor(list);\n                };\n            },\n            _curryGet = function (list) {\n                return function (idx) {\n                    return list[idx];\n                };\n            };\n\n        var _makeCommonSelectHandler = function (list, executor) {\n            var out = {\n                    length: list.length,\n                    each: _curryEach(list, executor),\n                    get: _curryGet(list)\n                },\n                setters = [\"setHover\", \"removeAllOverlays\", \"setLabel\", \"addClass\", \"addOverlay\", \"removeOverlay\",\n                    \"removeOverlays\", \"showOverlay\", \"hideOverlay\", \"showOverlays\", \"hideOverlays\", \"setPaintStyle\",\n                    \"setHoverPaintStyle\", \"setSuspendEvents\", \"setParameter\", \"setParameters\", \"setVisible\",\n                    \"repaint\", \"addType\", \"toggleType\", \"removeType\", \"removeClass\", \"setType\", \"bind\", \"unbind\" ],\n\n                getters = [\"getLabel\", \"getOverlay\", \"isHover\", \"getParameter\", \"getParameters\", \"getPaintStyle\",\n                    \"getHoverPaintStyle\", \"isVisible\", \"hasType\", \"getType\", \"isSuspendEvents\" ],\n                i, ii;\n\n            for (i = 0, ii = setters.length; i < ii; i++)\n                out[setters[i]] = setter(list, setters[i], executor);\n\n            for (i = 0, ii = getters.length; i < ii; i++)\n                out[getters[i]] = getter(list, getters[i]);\n\n            return out;\n        };\n\n        var _makeConnectionSelectHandler = function (list) {\n            var common = _makeCommonSelectHandler(list, _makeConnectionSelectHandler);\n            return jsPlumb.extend(common, {\n                // setters\n                setDetachable: setter(list, \"setDetachable\", _makeConnectionSelectHandler),\n                setReattach: setter(list, \"setReattach\", _makeConnectionSelectHandler),\n                setConnector: setter(list, \"setConnector\", _makeConnectionSelectHandler),\n                delete: function () {\n                    for (var i = 0, ii = list.length; i < ii; i++)\n                        _currentInstance.deleteConnection(list[i]);\n                },\n                // getters\n                isDetachable: getter(list, \"isDetachable\"),\n                isReattach: getter(list, \"isReattach\")\n            });\n        };\n\n        var _makeEndpointSelectHandler = function (list) {\n            var common = _makeCommonSelectHandler(list, _makeEndpointSelectHandler);\n            return jsPlumb.extend(common, {\n                setEnabled: setter(list, \"setEnabled\", _makeEndpointSelectHandler),\n                setAnchor: setter(list, \"setAnchor\", _makeEndpointSelectHandler),\n                isEnabled: getter(list, \"isEnabled\"),\n                deleteEveryConnection: function () {\n                    for (var i = 0, ii = list.length; i < ii; i++)\n                        list[i].deleteEveryConnection();\n                },\n                \"delete\": function () {\n                    for (var i = 0, ii = list.length; i < ii; i++)\n                        _currentInstance.deleteEndpoint(list[i]);\n                }\n            });\n        };\n\n        this.select = function (params) {\n            params = params || {};\n            params.scope = params.scope || \"*\";\n            return _makeConnectionSelectHandler(params.connections || _currentInstance.getConnections(params, true));\n        };\n\n        this.selectEndpoints = function (params) {\n            params = params || {};\n            params.scope = params.scope || \"*\";\n            var noElementFilters = !params.element && !params.source && !params.target,\n                elements = noElementFilters ? \"*\" : prepareList(params.element),\n                sources = noElementFilters ? \"*\" : prepareList(params.source),\n                targets = noElementFilters ? \"*\" : prepareList(params.target),\n                scopes = prepareList(params.scope, true);\n\n            var ep = [];\n\n            for (var el in endpointsByElement) {\n                var either = filterList(elements, el, true),\n                    source = filterList(sources, el, true),\n                    sourceMatchExact = sources != \"*\",\n                    target = filterList(targets, el, true),\n                    targetMatchExact = targets != \"*\";\n\n                // if they requested 'either' then just match scope. otherwise if they requested 'source' (not as a wildcard) then we have to match only endpoints that have isSource set to to true, and the same thing with isTarget.\n                if (either || source || target) {\n                    inner:\n                        for (var i = 0, ii = endpointsByElement[el].length; i < ii; i++) {\n                            var _ep = endpointsByElement[el][i];\n                            if (filterList(scopes, _ep.scope, true)) {\n\n                                var noMatchSource = (sourceMatchExact && sources.length > 0 && !_ep.isSource),\n                                    noMatchTarget = (targetMatchExact && targets.length > 0 && !_ep.isTarget);\n\n                                if (noMatchSource || noMatchTarget)\n                                    continue inner;\n\n                                ep.push(_ep);\n                            }\n                        }\n                }\n            }\n\n            return _makeEndpointSelectHandler(ep);\n        };\n\n        // get all connections managed by the instance of jsplumb.\n        this.getAllConnections = function () {\n            return connections;\n        };\n        this.getDefaultScope = function () {\n            return DEFAULT_SCOPE;\n        };\n        // get an endpoint by uuid.\n        this.getEndpoint = _getEndpoint;\n        /**\n         * Gets the list of Endpoints for a given element.\n         * @method getEndpoints\n         * @param {String|Element|Selector} el The element to get endpoints for.\n         * @return {Endpoint[]} An array of Endpoints for the specified element.\n         */\n        this.getEndpoints = function (el) {\n            return endpointsByElement[_info(el).id] || [];\n        };\n        // gets the default endpoint type. used when subclassing. see wiki.\n        this.getDefaultEndpointType = function () {\n            return jsPlumb.Endpoint;\n        };\n        // gets the default connection type. used when subclassing.  see wiki.\n        this.getDefaultConnectionType = function () {\n            return jsPlumb.Connection;\n        };\n        /*\n         * Gets an element's id, creating one if necessary. really only exposed\n         * for the lib-specific functionality to access; would be better to pass\n         * the current instance into the lib-specific code (even though this is\n         * a static call. i just don't want to expose it to the public API).\n         */\n        this.getId = _getId;\n\n        this.appendElement = _appendElement;\n\n        var _hoverSuspended = false;\n        this.isHoverSuspended = function () {\n            return _hoverSuspended;\n        };\n        this.setHoverSuspended = function (s) {\n            _hoverSuspended = s;\n        };\n\n        // set an element's connections to be hidden\n        this.hide = function (el, changeEndpoints) {\n            _setVisible(el, \"none\", changeEndpoints);\n            return _currentInstance;\n        };\n\n        // exposed for other objects to use to get a unique id.\n        this.idstamp = _idstamp;\n\n        this.connectorsInitialized = false;\n        this.registerConnectorType = function (connector, name) {\n            connectorTypes.push([connector, name]);\n        };\n\n        // ensure that, if the current container exists, it is a DOM element and not a selector.\n        // if it does not exist and `candidate` is supplied, the offset parent of that element will be set as the Container.\n        // this is used to do a better default behaviour for the case that the user has not set a container:\n        // addEndpoint, makeSource, makeTarget and connect all call this method with the offsetParent of the\n        // element in question (for connect it is the source element). So if no container is set, it is inferred\n        // to be the offsetParent of the first element the user tries to connect.\n        var _ensureContainer = function (candidate) {\n            if (!_container && candidate) {\n                var can = _currentInstance.getElement(candidate);\n                if (can.offsetParent) _currentInstance.setContainer(can.offsetParent);\n            }\n        };\n\n        var _getContainerFromDefaults = function () {\n            if (_currentInstance.Defaults.Container)\n                _currentInstance.setContainer(_currentInstance.Defaults.Container);\n        };\n\n        // check if a given element is managed or not. if not, add to our map. if drawing is not suspended then\n        // we'll also stash its dimensions; otherwise we'll do this in a lazy way through updateOffset.\n        var _manage = _currentInstance.manage = function (id, element, _transient) {\n            if (!managedElements[id]) {\n                managedElements[id] = {\n                    el: element,\n                    endpoints: [],\n                    connections: []\n                };\n\n                managedElements[id].info = _updateOffset({ elId: id, timestamp: _suspendedAt });\n                if (!_transient) {\n                    _currentInstance.fire(\"manageElement\", { id:id, info:managedElements[id].info, el:element });\n                }\n            }\n\n            return managedElements[id];\n        };\n\n        var _unmanage = function(id) {\n            if (managedElements[id]) {\n                delete managedElements[id];\n                _currentInstance.fire(\"unmanageElement\", id);\n            }\n        };\n\n        /**\n         * updates the offset and size for a given element, and stores the\n         * values. if 'offset' is not null we use that (it would have been\n         * passed in from a drag call) because it's faster; but if it is null,\n         * or if 'recalc' is true in order to force a recalculation, we get the current values.\n         */\n        var _updateOffset = this.updateOffset = function (params) {\n\n            var timestamp = params.timestamp, recalc = params.recalc, offset = params.offset, elId = params.elId, s;\n            if (_suspendDrawing && !timestamp) timestamp = _suspendedAt;\n            if (!recalc) {\n                if (timestamp && timestamp === offsetTimestamps[elId]) {\n                    return {o: params.offset || offsets[elId], s: sizes[elId]};\n                }\n            }\n            if (recalc || (!offset && offsets[elId] == null)) { // if forced repaint or no offset available, we recalculate.\n\n                // get the current size and offset, and store them\n                s = managedElements[elId] ? managedElements[elId].el : null;\n                if (s != null) {\n                    sizes[elId] = _currentInstance.getSize(s);\n                    offsets[elId] = _currentInstance.getOffset(s);\n                    offsetTimestamps[elId] = timestamp;\n                }\n            } else {\n                offsets[elId] = offset || offsets[elId];\n                if (sizes[elId] == null) {\n                    s = managedElements[elId].el;\n                    if (s != null) sizes[elId] = _currentInstance.getSize(s);\n                }\n                offsetTimestamps[elId] = timestamp;\n            }\n\n            if (offsets[elId] && !offsets[elId].right) {\n                offsets[elId].right = offsets[elId].left + sizes[elId][0];\n                offsets[elId].bottom = offsets[elId].top + sizes[elId][1];\n                offsets[elId].width = sizes[elId][0];\n                offsets[elId].height = sizes[elId][1];\n                offsets[elId].centerx = offsets[elId].left + (offsets[elId].width / 2);\n                offsets[elId].centery = offsets[elId].top + (offsets[elId].height / 2);\n            }\n\n            return {o: offsets[elId], s: sizes[elId]};\n        };\n\n        /**\n         * callback from the current library to tell us to prepare ourselves (attach\n         * mouse listeners etc; can't do that until the library has provided a bind method)\n         */\n        this.init = function () {\n            rendererTypes = root.jsPlumb.getRenderModes();\n\n            var _oneType = function (renderer, name, fn) {\n                root.jsPlumb.Connectors[renderer][name] = function () {\n                    fn.apply(this, arguments);\n                    root.jsPlumb.ConnectorRenderers[renderer].apply(this, arguments);\n                };\n                _ju.extend(root.jsPlumb.Connectors[renderer][name], [ fn, root.jsPlumb.ConnectorRenderers[renderer]]);\n            };\n\n            if (!root.jsPlumb.connectorsInitialized) {\n                for (var i = 0; i < connectorTypes.length; i++) {\n                    for (var j = 0; j < rendererTypes.length; j++) {\n                        _oneType(rendererTypes[j], connectorTypes[i][1], connectorTypes[i][0]);\n                    }\n\n                }\n                root.jsPlumb.connectorsInitialized = true;\n            }\n\n            if (!initialized) {\n                _getContainerFromDefaults();\n                _currentInstance.anchorManager = new root.jsPlumb.AnchorManager({jsPlumbInstance: _currentInstance});\n                initialized = true;\n                _currentInstance.fire(\"ready\", _currentInstance);\n            }\n        }.bind(this);\n\n        this.log = log;\n        this.jsPlumbUIComponent = jsPlumbUIComponent;\n\n        /*\n         * Creates an anchor with the given params.\n         *\n         *\n         * Returns: The newly created Anchor.\n         * Throws: an error if a named anchor was not found.\n         */\n        this.makeAnchor = function () {\n            var pp, _a = function (t, p) {\n                if (root.jsPlumb.Anchors[t]) return new root.jsPlumb.Anchors[t](p);\n                if (!_currentInstance.Defaults.DoNotThrowErrors)\n                    throw { msg: \"jsPlumb: unknown anchor type '\" + t + \"'\" };\n            };\n            if (arguments.length === 0) return null;\n            var specimen = arguments[0], elementId = arguments[1], jsPlumbInstance = arguments[2], newAnchor = null;\n            // if it appears to be an anchor already...\n            if (specimen.compute && specimen.getOrientation) return specimen;  //TODO hazy here about whether it should be added or is already added somehow.\n            // is it the name of an anchor type?\n            else if (typeof specimen == \"string\") {\n                newAnchor = _a(arguments[0], {elementId: elementId, jsPlumbInstance: _currentInstance});\n            }\n            // is it an array? it will be one of:\n            // \t\tan array of [spec, params] - this defines a single anchor, which may be dynamic, but has parameters.\n            //\t\tan array of arrays - this defines some dynamic anchors\n            //\t\tan array of numbers - this defines a single anchor.\n            else if (_ju.isArray(specimen)) {\n                if (_ju.isArray(specimen[0]) || _ju.isString(specimen[0])) {\n                    // if [spec, params] format\n                    if (specimen.length == 2 && _ju.isObject(specimen[1])) {\n                        // if first arg is a string, its a named anchor with params\n                        if (_ju.isString(specimen[0])) {\n                            pp = root.jsPlumb.extend({elementId: elementId, jsPlumbInstance: _currentInstance}, specimen[1]);\n                            newAnchor = _a(specimen[0], pp);\n                        }\n                        // otherwise first arg is array, second is params. we treat as a dynamic anchor, which is fine\n                        // even if the first arg has only one entry. you could argue all anchors should be implicitly dynamic in fact.\n                        else {\n                            pp = root.jsPlumb.extend({elementId: elementId, jsPlumbInstance: _currentInstance, anchors: specimen[0]}, specimen[1]);\n                            newAnchor = new root.jsPlumb.DynamicAnchor(pp);\n                        }\n                    }\n                    else\n                        newAnchor = new jsPlumb.DynamicAnchor({anchors: specimen, selector: null, elementId: elementId, jsPlumbInstance: _currentInstance});\n\n                }\n                else {\n                    var anchorParams = {\n                        x: specimen[0], y: specimen[1],\n                        orientation: (specimen.length >= 4) ? [ specimen[2], specimen[3] ] : [0, 0],\n                        offsets: (specimen.length >= 6) ? [ specimen[4], specimen[5] ] : [ 0, 0 ],\n                        elementId: elementId,\n                        jsPlumbInstance: _currentInstance,\n                        cssClass: specimen.length == 7 ? specimen[6] : null\n                    };\n                    newAnchor = new root.jsPlumb.Anchor(anchorParams);\n                    newAnchor.clone = function () {\n                        return new root.jsPlumb.Anchor(anchorParams);\n                    };\n                }\n            }\n\n            if (!newAnchor.id) newAnchor.id = \"anchor_\" + _idstamp();\n            return newAnchor;\n        };\n\n        /**\n         * makes a list of anchors from the given list of types or coords, eg\n         * [\"TopCenter\", \"RightMiddle\", \"BottomCenter\", [0, 1, -1, -1] ]\n         */\n        this.makeAnchors = function (types, elementId, jsPlumbInstance) {\n            var r = [];\n            for (var i = 0, ii = types.length; i < ii; i++) {\n                if (typeof types[i] == \"string\")\n                    r.push(root.jsPlumb.Anchors[types[i]]({elementId: elementId, jsPlumbInstance: jsPlumbInstance}));\n                else if (_ju.isArray(types[i]))\n                    r.push(_currentInstance.makeAnchor(types[i], elementId, jsPlumbInstance));\n            }\n            return r;\n        };\n\n        /**\n         * Makes a dynamic anchor from the given list of anchors (which may be in shorthand notation as strings or dimension arrays, or Anchor\n         * objects themselves) and the given, optional, anchorSelector function (jsPlumb uses a default if this is not provided; most people will\n         * not need to provide this - i think).\n         */\n        this.makeDynamicAnchor = function (anchors, anchorSelector) {\n            return new root.jsPlumb.DynamicAnchor({anchors: anchors, selector: anchorSelector, elementId: null, jsPlumbInstance: _currentInstance});\n        };\n\n// --------------------- makeSource/makeTarget ---------------------------------------------- \n\n        this.targetEndpointDefinitions = {};\n        this.sourceEndpointDefinitions = {};\n\n        var selectorFilter = function (evt, _el, selector, _instance, negate) {\n            var t = evt.target || evt.srcElement, ok = false,\n                sel = _instance.getSelector(_el, selector);\n            for (var j = 0; j < sel.length; j++) {\n                if (sel[j] == t) {\n                    ok = true;\n                    break;\n                }\n            }\n            return negate ? !ok : ok;\n        };\n\n        var _makeElementDropHandler = function (elInfo, p, dropOptions, isSource, isTarget) {\n            var proxyComponent = new jsPlumbUIComponent(p);\n            var _drop = p._jsPlumb.EndpointDropHandler({\n                jsPlumb: _currentInstance,\n                enabled: function () {\n                    return elInfo.def.enabled;\n                },\n                isFull: function () {\n                    var targetCount = _currentInstance.select({target: elInfo.id}).length;\n                    return elInfo.def.maxConnections > 0 && targetCount >= elInfo.def.maxConnections;\n                },\n                element: elInfo.el,\n                elementId: elInfo.id,\n                isSource: isSource,\n                isTarget: isTarget,\n                addClass: function (clazz) {\n                    _currentInstance.addClass(elInfo.el, clazz);\n                },\n                removeClass: function (clazz) {\n                    _currentInstance.removeClass(elInfo.el, clazz);\n                },\n                onDrop: function (jpc) {\n                    var source = jpc.endpoints[0];\n                    source.anchor.locked = false;\n                },\n                isDropAllowed: function () {\n                    return proxyComponent.isDropAllowed.apply(proxyComponent, arguments);\n                },\n                isRedrop:function(jpc) {\n                    return (jpc.suspendedElement != null && jpc.suspendedEndpoint != null && jpc.suspendedEndpoint.element === elInfo.el);\n                },\n                getEndpoint: function (jpc) {\n\n                    // make a new Endpoint for the target, or get it from the cache if uniqueEndpoint\n                    // is set. if its a redrop the new endpoint will be immediately cleaned up.\n\n                    var newEndpoint = elInfo.def.endpoint;\n\n                    // if no cached endpoint, or there was one but it has been cleaned up\n                    // (ie. detached), create a new one\n                    if (newEndpoint == null || newEndpoint._jsPlumb == null) {\n                        var eps = _currentInstance.deriveEndpointAndAnchorSpec(jpc.getType().join(\" \"), true);\n                        var pp = eps.endpoints ? root.jsPlumb.extend(p, {\n                            endpoint:elInfo.def.def.endpoint || eps.endpoints[1]\n                        }) :p;\n                        if (eps.anchors) {\n                            pp = root.jsPlumb.extend(pp, {\n                                anchor:elInfo.def.def.anchor || eps.anchors[1]\n                            });\n                        }\n                        newEndpoint = _currentInstance.addEndpoint(elInfo.el, pp);\n                        newEndpoint._mtNew = true;\n                    }\n\n                    if (p.uniqueEndpoint) {\n                        elInfo.def.endpoint = newEndpoint;\n                    }\n\n                    newEndpoint.setDeleteOnEmpty(true);\n\n                    // if connection is detachable, init the new endpoint to be draggable, to support that happening.\n                    if (jpc.isDetachable())\n                        newEndpoint.initDraggable();\n\n                    // if the anchor has a 'positionFinder' set, then delegate to that function to find\n                    // out where to locate the anchor.\n                    if (newEndpoint.anchor.positionFinder != null) {\n                        var dropPosition = _currentInstance.getUIPosition(arguments, _currentInstance.getZoom()),\n                            elPosition = _currentInstance.getOffset(elInfo.el),\n                            elSize = _currentInstance.getSize(elInfo.el),\n                            ap = dropPosition == null ? [0,0] : newEndpoint.anchor.positionFinder(dropPosition, elPosition, elSize, newEndpoint.anchor.constructorParams);\n\n                        newEndpoint.anchor.x = ap[0];\n                        newEndpoint.anchor.y = ap[1];\n                        // now figure an orientation for it..kind of hard to know what to do actually. probably the best thing i can do is to\n                        // support specifying an orientation in the anchor's spec. if one is not supplied then i will make the orientation\n                        // be what will cause the most natural link to the source: it will be pointing at the source, but it needs to be\n                        // specified in one axis only, and so how to make that choice? i think i will use whichever axis is the one in which\n                        // the target is furthest away from the source.\n                    }\n\n                    return newEndpoint;\n                },\n                maybeCleanup: function (ep) {\n                    if (ep._mtNew && ep.connections.length === 0) {\n                        _currentInstance.deleteObject({endpoint: ep});\n                    }\n                    else\n                        delete ep._mtNew;\n                }\n            });\n\n            // wrap drop events as needed and initialise droppable\n            var dropEvent = root.jsPlumb.dragEvents.drop;\n            dropOptions.scope = dropOptions.scope || (p.scope || _currentInstance.Defaults.Scope);\n            dropOptions[dropEvent] = _ju.wrap(dropOptions[dropEvent], _drop, true);\n\n            // if target, return true from the over event. this will cause katavorio to stop setting drops to hover\n            // if multipleDrop is set to false.\n            if (isTarget) {\n                dropOptions[root.jsPlumb.dragEvents.over] = function () { return true; };\n            }\n\n            // vanilla jsplumb only\n            if (p.allowLoopback === false) {\n                dropOptions.canDrop = function (_drag) {\n                    var de = _drag.getDragElement()._jsPlumbRelatedElement;\n                    return de != elInfo.el;\n                };\n            }\n            _currentInstance.initDroppable(elInfo.el, dropOptions, \"internal\");\n\n            return _drop;\n\n        };\n\n        // see API docs\n        this.makeTarget = function (el, params, referenceParams) {\n\n            // put jsplumb ref into params without altering the params passed in\n            var p = root.jsPlumb.extend({_jsPlumb: this}, referenceParams);\n            root.jsPlumb.extend(p, params);\n\n            var maxConnections = p.maxConnections || -1,\n\n                _doOne = function (el) {\n\n                    // get the element's id and store the endpoint definition for it.  jsPlumb.connect calls will look for one of these,\n                    // and use the endpoint definition if found.\n                    // decode the info for this element (id and element)\n                    var elInfo = _info(el),\n                        elid = elInfo.id,\n                        dropOptions = root.jsPlumb.extend({}, p.dropOptions || {}),\n                        type = p.connectionType || \"default\";\n\n                    this.targetEndpointDefinitions[elid] = this.targetEndpointDefinitions[elid] || {};\n\n                    _ensureContainer(elid);\n\n                    // if this is a group and the user has not mandated a rank, set to -1 so that Nodes takes\n                    // precedence.\n                    if (elInfo.el._isJsPlumbGroup && dropOptions.rank == null) {\n                        dropOptions.rank = -1;\n                    }\n\n                    // store the definition\n                    var _def = {\n                        def: root.jsPlumb.extend({}, p),\n                        uniqueEndpoint: p.uniqueEndpoint,\n                        maxConnections: maxConnections,\n                        enabled: true\n                    };\n                    elInfo.def = _def;\n                    this.targetEndpointDefinitions[elid][type] = _def;\n                    _makeElementDropHandler(elInfo, p, dropOptions, p.isSource === true, true);\n                    // stash the definition on the drop\n                    elInfo.el._katavorioDrop[elInfo.el._katavorioDrop.length - 1].targetDef = _def;\n\n                }.bind(this);\n\n            // make an array if only given one element\n            var inputs = el.length && el.constructor != String ? el : [ el ];\n\n            // register each one in the list.\n            for (var i = 0, ii = inputs.length; i < ii; i++) {\n                _doOne(inputs[i]);\n            }\n\n            return this;\n        };\n\n        // see api docs\n        this.unmakeTarget = function (el, doNotClearArrays) {\n            var info = _info(el);\n            _currentInstance.destroyDroppable(info.el, \"internal\");\n            if (!doNotClearArrays) {\n                delete this.targetEndpointDefinitions[info.id];\n            }\n\n            return this;\n        };\n\n        // see api docs\n        this.makeSource = function (el, params, referenceParams) {\n            var p = root.jsPlumb.extend({_jsPlumb: this}, referenceParams);\n            root.jsPlumb.extend(p, params);\n            var type = p.connectionType || \"default\";\n            var aae = _currentInstance.deriveEndpointAndAnchorSpec(type);\n            p.endpoint = p.endpoint || aae.endpoints[0];\n            p.anchor = p.anchor || aae.anchors[0];\n            var maxConnections = p.maxConnections || -1,\n                onMaxConnections = p.onMaxConnections,\n                _doOne = function (elInfo) {\n                    // get the element's id and store the endpoint definition for it.  jsPlumb.connect calls will look for one of these,\n                    // and use the endpoint definition if found.\n                    var elid = elInfo.id,\n                        _del = this.getElement(elInfo.el);\n\n                    this.sourceEndpointDefinitions[elid] = this.sourceEndpointDefinitions[elid] || {};\n                    _ensureContainer(elid);\n\n                    var _def = {\n                        def:root.jsPlumb.extend({}, p),\n                        uniqueEndpoint: p.uniqueEndpoint,\n                        maxConnections: maxConnections,\n                        enabled: true\n                    };\n\n\n                    this.sourceEndpointDefinitions[elid][type] = _def;\n                    elInfo.def = _def;\n\n                    var stopEvent = root.jsPlumb.dragEvents.stop,\n                        dragEvent = root.jsPlumb.dragEvents.drag,\n                        dragOptions = root.jsPlumb.extend({ }, p.dragOptions || {}),\n                        existingDrag = dragOptions.drag,\n                        existingStop = dragOptions.stop,\n                        ep = null,\n                        endpointAddedButNoDragYet = false;\n\n                    // set scope if its not set in dragOptions but was passed in in params\n                    dragOptions.scope = dragOptions.scope || p.scope;\n\n                    dragOptions[dragEvent] = _ju.wrap(dragOptions[dragEvent], function () {\n                        if (existingDrag) existingDrag.apply(this, arguments);\n                        endpointAddedButNoDragYet = false;\n                    });\n\n                    dragOptions[stopEvent] = _ju.wrap(dragOptions[stopEvent], function () {\n\n                        if (existingStop) existingStop.apply(this, arguments);\n                        this.currentlyDragging = false;\n                        if (ep._jsPlumb != null) { // if not cleaned up...\n\n                            // reset the anchor to the anchor that was initially provided. the one we were using to drag\n                            // the connection was just a placeholder that was located at the place the user pressed the\n                            // mouse button to initiate the drag.\n                            var anchorDef = p.anchor || this.Defaults.Anchor,\n                                oldAnchor = ep.anchor,\n                                oldConnection = ep.connections[0];\n\n                            var    newAnchor = this.makeAnchor(anchorDef, elid, this),\n                                _el = ep.element;\n\n                            // if the anchor has a 'positionFinder' set, then delegate to that function to find\n                            // out where to locate the anchor. issue 117.\n                            if (newAnchor.positionFinder != null) {\n                                var elPosition = _currentInstance.getOffset(_el),\n                                    elSize = this.getSize(_el),\n                                    dropPosition = { left: elPosition.left + (oldAnchor.x * elSize[0]), top: elPosition.top + (oldAnchor.y * elSize[1]) },\n                                    ap = newAnchor.positionFinder(dropPosition, elPosition, elSize, newAnchor.constructorParams);\n\n                                newAnchor.x = ap[0];\n                                newAnchor.y = ap[1];\n                            }\n\n                            ep.setAnchor(newAnchor, true);\n                            ep.repaint();\n                            this.repaint(ep.elementId);\n                            if (oldConnection != null) this.repaint(oldConnection.targetId);\n                        }\n                    }.bind(this));\n\n                    // when the user presses the mouse, add an Endpoint, if we are enabled.\n                    var mouseDownListener = function (e) {\n                        // on right mouse button, abort.\n                        if (e.which === 3 || e.button === 2) return;\n\n                        // TODO store def on element.\n                        var def = this.sourceEndpointDefinitions[elid][type];\n\n                        // if disabled, return.\n                        if (!def.enabled) return;\n\n                        elid = this.getId(this.getElement(elInfo.el)); // elid might have changed since this method was called to configure the element.\n\n                        // if a filter was given, run it, and return if it says no.\n                        if (p.filter) {\n                            var r = _ju.isString(p.filter) ? selectorFilter(e, elInfo.el, p.filter, this, p.filterExclude) : p.filter(e, elInfo.el);\n                            if (r === false) return;\n                        }\n\n                        // if maxConnections reached\n                        var sourceCount = this.select({source: elid}).length;\n                        if (def.maxConnections >= 0 && (sourceCount >= def.maxConnections)) {\n                            if (onMaxConnections) {\n                                onMaxConnections({\n                                    element: elInfo.el,\n                                    maxConnections: maxConnections\n                                }, e);\n                            }\n                            return false;\n                        }\n\n                        // find the position on the element at which the mouse was pressed; this is where the endpoint\n                        // will be located.\n                        var elxy = root.jsPlumb.getPositionOnElement(e, _del, _zoom);\n\n                        // we need to override the anchor in here, and force 'isSource', but we don't want to mess with\n                        // the params passed in, because after a connection is established we're going to reset the endpoint\n                        // to have the anchor we were given.\n                        var tempEndpointParams = {};\n                        root.jsPlumb.extend(tempEndpointParams, p);\n                        tempEndpointParams.isTemporarySource = true;\n                        tempEndpointParams.anchor = [ elxy[0], elxy[1] , 0, 0];\n                        tempEndpointParams.dragOptions = dragOptions;\n\n                        if (def.def.scope) tempEndpointParams.scope = def.def.scope;\n\n                        ep = this.addEndpoint(elid, tempEndpointParams);\n                        endpointAddedButNoDragYet = true;\n                        ep.setDeleteOnEmpty(true);\n\n                        // if unique endpoint and it's already been created, push it onto the endpoint we create. at the end\n                        // of a successful connection we'll switch to that endpoint.\n                        // TODO this is the same code as the programmatic endpoints create on line 1050 ish\n                        if (def.uniqueEndpoint) {\n                            if (!def.endpoint) {\n                                def.endpoint = ep;\n                                ep.setDeleteOnEmpty(false);\n                            }\n                            else\n                                ep.finalEndpoint = def.endpoint;\n                        }\n\n                        var _delTempEndpoint = function () {\n                            // this mouseup event is fired only if no dragging occurred, by jquery and yui, but for mootools\n                            // it is fired even if dragging has occurred, in which case we would blow away a perfectly\n                            // legitimate endpoint, were it not for this check.  the flag is set after adding an\n                            // endpoint and cleared in a drag listener we set in the dragOptions above.\n                            _currentInstance.off(ep.canvas, \"mouseup\", _delTempEndpoint);\n                            _currentInstance.off(elInfo.el, \"mouseup\", _delTempEndpoint);\n                            if (endpointAddedButNoDragYet) {\n                                endpointAddedButNoDragYet = false;\n                                _currentInstance.deleteEndpoint(ep);\n                            }\n                        };\n\n                        _currentInstance.on(ep.canvas, \"mouseup\", _delTempEndpoint);\n                        _currentInstance.on(elInfo.el, \"mouseup\", _delTempEndpoint);\n\n                        // optionally check for attributes to extract from the source element\n                        var payload = {};\n                        if (def.def.extract) {\n                            for (var att in def.def.extract) {\n                                var v = (e.srcElement || e.target).getAttribute(att);\n                                if (v) {\n                                    payload[def.def.extract[att]] = v;\n                                }\n                            }\n                        }\n\n                        // and then trigger its mousedown event, which will kick off a drag, which will start dragging\n                        // a new connection from this endpoint.\n                        _currentInstance.trigger(ep.canvas, \"mousedown\", e, payload);\n\n                        _ju.consume(e);\n\n                    }.bind(this);\n\n                    this.on(elInfo.el, \"mousedown\", mouseDownListener);\n                    _def.trigger = mouseDownListener;\n\n                    // if a filter was provided, set it as a dragFilter on the element,\n                    // to prevent the element drag function from kicking in when we want to\n                    // drag a new connection\n                    if (p.filter && (_ju.isString(p.filter) || _ju.isFunction(p.filter))) {\n                        _currentInstance.setDragFilter(elInfo.el, p.filter);\n                    }\n\n                    var dropOptions = root.jsPlumb.extend({}, p.dropOptions || {});\n\n                    _makeElementDropHandler(elInfo, p, dropOptions, true, p.isTarget === true);\n\n                }.bind(this);\n\n            var inputs = el.length && el.constructor != String ? el : [ el ];\n            for (var i = 0, ii = inputs.length; i < ii; i++) {\n                _doOne(_info(inputs[i]));\n            }\n\n            return this;\n        };\n\n        // see api docs\n        this.unmakeSource = function (el, connectionType, doNotClearArrays) {\n            var info = _info(el);\n            _currentInstance.destroyDroppable(info.el, \"internal\");\n            var eldefs = this.sourceEndpointDefinitions[info.id];\n            if (eldefs) {\n                for (var def in eldefs) {\n                    if (connectionType == null || connectionType === def) {\n                        var mouseDownListener = eldefs[def].trigger;\n                        if (mouseDownListener)\n                            _currentInstance.off(info.el, \"mousedown\", mouseDownListener);\n                        if (!doNotClearArrays) {\n                            delete this.sourceEndpointDefinitions[info.id][def];\n                        }\n                    }\n                }\n            }\n\n            return this;\n        };\n\n        // see api docs\n        this.unmakeEverySource = function () {\n            for (var i in this.sourceEndpointDefinitions)\n                _currentInstance.unmakeSource(i, null, true);\n\n            this.sourceEndpointDefinitions = {};\n            return this;\n        };\n\n        var _getScope = function (el, types, connectionType) {\n            types = _ju.isArray(types) ? types : [ types ];\n            var id = _getId(el);\n            connectionType = connectionType || \"default\";\n            for (var i = 0; i < types.length; i++) {\n                var eldefs = this[types[i]][id];\n                if (eldefs && eldefs[connectionType]) return eldefs[connectionType].def.scope || this.Defaults.Scope;\n            }\n        }.bind(this);\n\n        var _setScope = function (el, scope, types, connectionType) {\n            types = _ju.isArray(types) ? types : [ types ];\n            var id = _getId(el);\n            connectionType = connectionType || \"default\";\n            for (var i = 0; i < types.length; i++) {\n                var eldefs = this[types[i]][id];\n                if (eldefs && eldefs[connectionType]) {\n                    eldefs[connectionType].def.scope = scope;\n                }\n            }\n\n        }.bind(this);\n\n        this.getScope = function (el, scope) {\n            return _getScope(el, [ \"sourceEndpointDefinitions\", \"targetEndpointDefinitions\" ]);\n        };\n        this.getSourceScope = function (el) {\n            return _getScope(el, \"sourceEndpointDefinitions\");\n        };\n        this.getTargetScope = function (el) {\n            return _getScope(el, \"targetEndpointDefinitions\");\n        };\n        this.setScope = function (el, scope, connectionType) {\n            this.setSourceScope(el, scope, connectionType);\n            this.setTargetScope(el, scope, connectionType);\n        };\n        this.setSourceScope = function (el, scope, connectionType) {\n            _setScope(el, scope, \"sourceEndpointDefinitions\", connectionType);\n            // we get the source scope during the mousedown event, but we also want to set this.\n            this.setDragScope(el, scope);\n        };\n        this.setTargetScope = function (el, scope, connectionType) {\n            _setScope(el, scope, \"targetEndpointDefinitions\", connectionType);\n            this.setDropScope(el, scope);\n        };\n\n        // see api docs\n        this.unmakeEveryTarget = function () {\n            for (var i in this.targetEndpointDefinitions)\n                _currentInstance.unmakeTarget(i, true);\n\n            this.targetEndpointDefinitions = {};\n            return this;\n        };\n\n        // does the work of setting a source enabled or disabled.\n        var _setEnabled = function (type, el, state, toggle, connectionType) {\n            var a = type == \"source\" ? this.sourceEndpointDefinitions : this.targetEndpointDefinitions,\n                originalState, info, newState;\n\n            connectionType = connectionType || \"default\";\n\n            // a selector or an array\n            if (el.length && !_ju.isString(el)) {\n                originalState = [];\n                for (var i = 0, ii = el.length; i < ii; i++) {\n                    info = _info(el[i]);\n                    if (a[info.id] && a[info.id][connectionType]) {\n                        originalState[i] = a[info.id][connectionType].enabled;\n                        newState = toggle ? !originalState[i] : state;\n                        a[info.id][connectionType].enabled = newState;\n                        _currentInstance[newState ? \"removeClass\" : \"addClass\"](info.el, \"jtk-\" + type + \"-disabled\");\n                    }\n                }\n            }\n            // otherwise a DOM element or a String ID.\n            else {\n                info = _info(el);\n                var id = info.id;\n                if (a[id] && a[id][connectionType]) {\n                    originalState = a[id][connectionType].enabled;\n                    newState = toggle ? !originalState : state;\n                    a[id][connectionType].enabled = newState;\n                    _currentInstance[newState ? \"removeClass\" : \"addClass\"](info.el, \"jtk-\" + type + \"-disabled\");\n                }\n            }\n            return originalState;\n        }.bind(this);\n\n        var _first = function (el, fn) {\n            if (_ju.isString(el) || !el.length)\n                return fn.apply(this, [ el ]);\n            else if (el.length)\n                return fn.apply(this, [ el[0] ]);\n\n        }.bind(this);\n\n        this.toggleSourceEnabled = function (el, connectionType) {\n            _setEnabled(\"source\", el, null, true, connectionType);\n            return this.isSourceEnabled(el, connectionType);\n        };\n\n        this.setSourceEnabled = function (el, state, connectionType) {\n            return _setEnabled(\"source\", el, state, null, connectionType);\n        };\n        this.isSource = function (el, connectionType) {\n            connectionType = connectionType || \"default\";\n            return _first(el, function (_el) {\n                var eldefs = this.sourceEndpointDefinitions[_info(_el).id];\n                return eldefs != null && eldefs[connectionType] != null;\n            }.bind(this));\n        };\n        this.isSourceEnabled = function (el, connectionType) {\n            connectionType = connectionType || \"default\";\n            return _first(el, function (_el) {\n                var sep = this.sourceEndpointDefinitions[_info(_el).id];\n                return sep && sep[connectionType] && sep[connectionType].enabled === true;\n            }.bind(this));\n        };\n\n        this.toggleTargetEnabled = function (el, connectionType) {\n            _setEnabled(\"target\", el, null, true, connectionType);\n            return this.isTargetEnabled(el, connectionType);\n        };\n\n        this.isTarget = function (el, connectionType) {\n            connectionType = connectionType || \"default\";\n            return _first(el, function (_el) {\n                var eldefs = this.targetEndpointDefinitions[_info(_el).id];\n                return eldefs != null && eldefs[connectionType] != null;\n            }.bind(this));\n        };\n        this.isTargetEnabled = function (el, connectionType) {\n            connectionType = connectionType || \"default\";\n            return _first(el, function (_el) {\n                var tep = this.targetEndpointDefinitions[_info(_el).id];\n                return tep && tep[connectionType] && tep[connectionType].enabled === true;\n            }.bind(this));\n        };\n        this.setTargetEnabled = function (el, state, connectionType) {\n            return _setEnabled(\"target\", el, state, null, connectionType);\n        };\n\n// --------------------- end makeSource/makeTarget ---------------------------------------------- \t\t\t\t\n\n        this.ready = function (fn) {\n            _currentInstance.bind(\"ready\", fn);\n        };\n\n        var _elEach = function(el, fn) {\n            // support both lists...\n            if (typeof el == 'object' && el.length)\n                for (var i = 0, ii = el.length; i < ii; i++) {\n                    fn(el[i]);\n                }\n            else // ...and single strings or elements.\n                fn(el);\n\n            return _currentInstance;\n        };\n\n        // repaint some element's endpoints and connections\n        this.repaint = function (el, ui, timestamp) {\n            return _elEach(el, function(_el) {\n                _draw(_el, ui, timestamp);\n            });\n        };\n\n        this.revalidate = function (el, timestamp, isIdAlready) {\n            return _elEach(el, function(_el) {\n                var elId = isIdAlready ? _el : _currentInstance.getId(_el);\n                _currentInstance.updateOffset({ elId: elId, recalc: true, timestamp:timestamp });\n                var dm = _currentInstance.getDragManager();\n                if (dm) {\n                    dm.updateOffsets(elId);\n                }\n                _currentInstance.repaint(_el);\n            });\n        };\n\n        // repaint every endpoint and connection.\n        this.repaintEverything = function () {\n            // TODO this timestamp causes continuous anchors to not repaint properly.\n            // fix this. do not just take out the timestamp. it runs a lot faster with\n            // the timestamp included.\n            var timestamp = _timestamp(), elId;\n\n            for (elId in endpointsByElement) {\n                _currentInstance.updateOffset({ elId: elId, recalc: true, timestamp: timestamp });\n            }\n\n            for (elId in endpointsByElement) {\n                _draw(elId, null, timestamp);\n            }\n\n            return this;\n        };\n\n        this.removeAllEndpoints = function (el, recurse, affectedElements) {\n            affectedElements = affectedElements || [];\n            var _one = function (_el) {\n                var info = _info(_el),\n                    ebe = endpointsByElement[info.id],\n                    i, ii;\n\n                if (ebe) {\n                    affectedElements.push(info);\n                    for (i = 0, ii = ebe.length; i < ii; i++)\n                        _currentInstance.deleteEndpoint(ebe[i], false);\n                }\n                delete endpointsByElement[info.id];\n\n                if (recurse) {\n                    if (info.el && info.el.nodeType != 3 && info.el.nodeType != 8) {\n                        for (i = 0, ii = info.el.childNodes.length; i < ii; i++) {\n                            _one(info.el.childNodes[i]);\n                        }\n                    }\n                }\n\n            };\n            _one(el);\n            return this;\n        };\n\n        var _doRemove = function(info, affectedElements) {\n            _currentInstance.removeAllEndpoints(info.id, true, affectedElements);\n            var dm = _currentInstance.getDragManager();\n            var _one = function(_info) {\n\n                if (dm) {\n                    dm.elementRemoved(_info.id);\n                }\n                _currentInstance.anchorManager.clearFor(_info.id);\n                _currentInstance.anchorManager.removeFloatingConnection(_info.id);\n\n                if (_currentInstance.isSource(_info.el)) _currentInstance.unmakeSource(_info.el);\n                if (_currentInstance.isTarget(_info.el)) _currentInstance.unmakeTarget(_info.el);\n                _currentInstance.destroyDraggable(_info.el);\n                _currentInstance.destroyDroppable(_info.el);\n\n\n                delete _currentInstance.floatingConnections[_info.id];\n                delete managedElements[_info.id];\n                delete offsets[_info.id];\n                if (_info.el) {\n                    _currentInstance.removeElement(_info.el);\n                    _info.el._jsPlumb = null;\n                }\n            };\n\n            // remove all affected child elements\n            for (var ae = 1; ae < affectedElements.length; ae++) {\n                _one(affectedElements[ae]);\n            }\n            // and always remove the requested one from the dom.\n            _one(info);\n        };\n\n        /**\n         * Remove the given element, including cleaning up all endpoints registered for it.\n         * This is exposed in the public API but also used internally by jsPlumb when removing the\n         * element associated with a connection drag.\n         */\n        this.remove = function (el, doNotRepaint) {\n            var info = _info(el), affectedElements = [];\n            if (info.text) {\n                info.el.parentNode.removeChild(info.el);\n            }\n            else if (info.id) {\n                _currentInstance.batch(function () {\n                    _doRemove(info, affectedElements);\n                }, doNotRepaint === false);\n            }\n            return _currentInstance;\n        };\n\n        this.empty = function (el, doNotRepaint) {\n            var affectedElements = [];\n            var _one = function(el, dontRemoveFocus) {\n                var info = _info(el);\n                if (info.text) {\n                    info.el.parentNode.removeChild(info.el);\n                }\n                else if (info.el) {\n                    while(info.el.childNodes.length > 0) {\n                        _one(info.el.childNodes[0]);\n                    }\n                    if (!dontRemoveFocus) _doRemove(info, affectedElements);\n                }\n            };\n\n            _currentInstance.batch(function() {\n                _one(el, true);\n            }, doNotRepaint === false);\n\n            return _currentInstance;\n        };\n\n        this.reset = function () {\n            _currentInstance.silently(function() {\n                _hoverSuspended = false;\n                _currentInstance.removeAllGroups();\n                _currentInstance.removeGroupManager();\n                _currentInstance.deleteEveryEndpoint();\n                _currentInstance.unbind();\n                this.targetEndpointDefinitions = {};\n                this.sourceEndpointDefinitions = {};\n                connections.length = 0;\n                if (this.doReset) this.doReset();\n            }.bind(this));\n        };\n\n        var _clearObject = function (obj) {\n            if (obj.canvas && obj.canvas.parentNode)\n                obj.canvas.parentNode.removeChild(obj.canvas);\n            obj.cleanup();\n            obj.destroy();\n        };\n\n        this.clear = function () {\n            _currentInstance.select().each(_clearObject);\n            _currentInstance.selectEndpoints().each(_clearObject);\n\n            endpointsByElement = {};\n            endpointsByUUID = {};\n        };\n\n        this.setDefaultScope = function (scope) {\n            DEFAULT_SCOPE = scope;\n            return _currentInstance;\n        };\n\n        // sets whether or not some element should be currently draggable.\n        this.setDraggable = _setDraggable;\n\n        this.deriveEndpointAndAnchorSpec = function(type, dontPrependDefault) {\n            var bits = ((dontPrependDefault ? \"\" : \"default \") + type).split(/[\\s]/), eps = null, ep = null, a = null, as = null;\n            for (var i = 0; i < bits.length; i++) {\n                var _t = _currentInstance.getType(bits[i], \"connection\");\n                if (_t) {\n                    if (_t.endpoints) eps = _t.endpoints;\n                    if (_t.endpoint) ep = _t.endpoint;\n                    if (_t.anchors) as = _t.anchors;\n                    if (_t.anchor) a = _t.anchor;\n                }\n            }\n            return { endpoints: eps ? eps : [ ep, ep ], anchors: as ? as : [a, a ]};\n        };\n\n        // sets the id of some element, changing whatever we need to to keep track.\n        this.setId = function (el, newId, doNotSetAttribute) {\n            //\n            var id;\n\n            if (_ju.isString(el)) {\n                id = el;\n            }\n            else {\n                el = this.getElement(el);\n                id = this.getId(el);\n            }\n\n            var sConns = this.getConnections({source: id, scope: '*'}, true),\n                tConns = this.getConnections({target: id, scope: '*'}, true);\n\n            newId = \"\" + newId;\n\n            if (!doNotSetAttribute) {\n                el = this.getElement(id);\n                this.setAttribute(el, \"id\", newId);\n            }\n            else\n                el = this.getElement(newId);\n\n            endpointsByElement[newId] = endpointsByElement[id] || [];\n            for (var i = 0, ii = endpointsByElement[newId].length; i < ii; i++) {\n                endpointsByElement[newId][i].setElementId(newId);\n                endpointsByElement[newId][i].setReferenceElement(el);\n            }\n            delete endpointsByElement[id];\n\n            this.sourceEndpointDefinitions[newId] = this.sourceEndpointDefinitions[id];\n            delete this.sourceEndpointDefinitions[id];\n            this.targetEndpointDefinitions[newId] = this.targetEndpointDefinitions[id];\n            delete this.targetEndpointDefinitions[id];\n\n            this.anchorManager.changeId(id, newId);\n            var dm = this.getDragManager();\n            if (dm) {\n                dm.changeId(id, newId);\n            }\n            managedElements[newId] = managedElements[id];\n            delete managedElements[id];\n\n            var _conns = function (list, epIdx, type) {\n                for (var i = 0, ii = list.length; i < ii; i++) {\n                    list[i].endpoints[epIdx].setElementId(newId);\n                    list[i].endpoints[epIdx].setReferenceElement(el);\n                    list[i][type + \"Id\"] = newId;\n                    list[i][type] = el;\n                }\n            };\n            _conns(sConns, 0, \"source\");\n            _conns(tConns, 1, \"target\");\n\n            this.repaint(newId);\n        };\n\n        this.setDebugLog = function (debugLog) {\n            log = debugLog;\n        };\n\n        this.setSuspendDrawing = function (val, repaintAfterwards) {\n            var curVal = _suspendDrawing;\n            _suspendDrawing = val;\n            if (val) _suspendedAt = new Date().getTime(); else _suspendedAt = null;\n            if (repaintAfterwards) this.repaintEverything();\n            return curVal;\n        };\n\n        // returns whether or not drawing is currently suspended.\n        this.isSuspendDrawing = function () {\n            return _suspendDrawing;\n        };\n\n        // return timestamp for when drawing was suspended.\n        this.getSuspendedAt = function () {\n            return _suspendedAt;\n        };\n\n        this.batch = function (fn, doNotRepaintAfterwards) {\n            var _wasSuspended = this.isSuspendDrawing();\n            if (!_wasSuspended)\n                this.setSuspendDrawing(true);\n            try {\n                fn();\n            }\n            catch (e) {\n                _ju.log(\"Function run while suspended failed\", e);\n            }\n            if (!_wasSuspended)\n                this.setSuspendDrawing(false, !doNotRepaintAfterwards);\n        };\n\n        this.doWhileSuspended = this.batch;\n\n        this.getCachedData = _getCachedData;\n        this.timestamp = _timestamp;\n        this.show = function (el, changeEndpoints) {\n            _setVisible(el, \"block\", changeEndpoints);\n            return _currentInstance;\n        };\n\n        // TODO: update this method to return the current state.\n        this.toggleVisible = _toggleVisible;\n        this.toggleDraggable = _toggleDraggable;\n        this.addListener = this.bind;\n    };\n\n    _ju.extend(root.jsPlumbInstance, _ju.EventGenerator, {\n        setAttribute: function (el, a, v) {\n            this.setAttribute(el, a, v);\n        },\n        getAttribute: function (el, a) {\n            return this.getAttribute(root.jsPlumb.getElement(el), a);\n        },\n        convertToFullOverlaySpec: function(spec) {\n            if (_ju.isString(spec)) {\n                spec = [ spec, { } ];\n            }\n            spec[1].id = spec[1].id || _ju.uuid();\n            return spec;\n        },\n        registerConnectionType: function (id, type) {\n            this._connectionTypes[id] = root.jsPlumb.extend({}, type);\n            if (type.overlays) {\n                var to = {};\n                for (var i = 0; i < type.overlays.length; i++) {\n                    // if a string, convert to object representation so that we can store the typeid on it.\n                    // also assign an id.\n                    var fo = this.convertToFullOverlaySpec(type.overlays[i]);\n                    to[fo[1].id] = fo;\n                }\n                this._connectionTypes[id].overlays = to;\n            }\n        },\n        registerConnectionTypes: function (types) {\n            for (var i in types)\n                this.registerConnectionType(i, types[i]);\n        },\n        registerEndpointType: function (id, type) {\n            this._endpointTypes[id] = root.jsPlumb.extend({}, type);\n            if (type.overlays) {\n                var to = {};\n                for (var i = 0; i < type.overlays.length; i++) {\n                    // if a string, convert to object representation so that we can store the typeid on it.\n                    // also assign an id.\n                    var fo = this.convertToFullOverlaySpec(type.overlays[i]);\n                    to[fo[1].id] = fo;\n                }\n                this._endpointTypes[id].overlays = to;\n            }\n        },\n        registerEndpointTypes: function (types) {\n            for (var i in types)\n                //this._endpointTypes[i] = jsPlumb.extend({}, types[i]);\n                this.registerEndpointType(i, types[i]);\n        },\n        getType: function (id, typeDescriptor) {\n            return typeDescriptor === \"connection\" ? this._connectionTypes[id] : this._endpointTypes[id];\n        },\n        setIdChanged: function (oldId, newId) {\n            this.setId(oldId, newId, true);\n        },\n        // set parent: change the parent for some node and update all the registrations we need to.\n        setParent: function (el, newParent) {\n            var _dom = this.getElement(el),\n                _id = this.getId(_dom),\n                _pdom = this.getElement(newParent),\n                _pid = this.getId(_pdom),\n                dm = this.getDragManager();\n\n            _dom.parentNode.removeChild(_dom);\n            _pdom.appendChild(_dom);\n            if (dm) {\n                dm.setParent(_dom, _id, _pdom, _pid);\n            }\n        },\n        extend: function (o1, o2, names) {\n            var i;\n            if (names) {\n                for (i = 0; i < names.length; i++)\n                    o1[names[i]] = o2[names[i]];\n            }\n            else\n                for (i in o2) o1[i] = o2[i];\n            return o1;\n        },\n        floatingConnections: {},\n        getFloatingAnchorIndex: function (jpc) {\n            return jpc.endpoints[0].isFloating() ? 0 : jpc.endpoints[1].isFloating() ? 1 : -1;\n        }\n    });\n\n    jsPlumbInstance.prototype.Defaults = {\n        Anchor: \"Bottom\",\n        Anchors: [ null, null ],\n        ConnectionsDetachable: true,\n        ConnectionOverlays: [ ],\n        Connector: \"Bezier\",\n        Container: null,\n        DoNotThrowErrors: false,\n        DragOptions: { },\n        DropOptions: { },\n        Endpoint: \"Dot\",\n        EndpointOverlays: [ ],\n        Endpoints: [ null, null ],\n        EndpointStyle: { fill: \"#456\" },\n        EndpointStyles: [ null, null ],\n        EndpointHoverStyle: null,\n        EndpointHoverStyles: [ null, null ],\n        HoverPaintStyle: null,\n        LabelStyle: { color: \"black\" },\n        LogEnabled: false,\n        Overlays: [ ],\n        MaxConnections: 1,\n        PaintStyle: { \"stroke-width\": 4, stroke: \"#456\" },\n        ReattachConnections: false,\n        RenderMode: \"svg\",\n        Scope: \"jsPlumb_DefaultScope\"\n    };\n\n// --------------------- static instance + module registration -------------------------------------------\n\n// create static instance and assign to window if window exists.\t\n    var jsPlumb = new jsPlumbInstance();\n    // register on 'root' (lets us run on server or browser)\n    root.jsPlumb = jsPlumb;\n    // add 'getInstance' method to static instance\n    jsPlumb.getInstance = function (_defaults, overrideFns) {\n        var j = new jsPlumbInstance(_defaults);\n        if (overrideFns) {\n            for (var ovf in overrideFns) {\n                j[ovf] = overrideFns[ovf];\n            }\n        }\n        j.init();\n        return j;\n    };\n    jsPlumb.each = function (spec, fn) {\n        if (spec == null) return;\n        if (typeof spec === \"string\")\n            fn(jsPlumb.getElement(spec));\n        else if (spec.length != null) {\n            for (var i = 0; i < spec.length; i++)\n                fn(jsPlumb.getElement(spec[i]));\n        }\n        else\n            fn(spec); // assume it's an element.\n    };\n\n    // CommonJS\n    if (true) {\n        exports.jsPlumb = jsPlumb;\n    }\n\n// --------------------- end static instance + AMD registration -------------------------------------------\t\t\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the base functionality for DOM type adapters.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    var root = this, _ju = root.jsPlumbUtil;\n\n    var _genLoc = function (prefix, e) {\n            if (e == null) return [ 0, 0 ];\n            var ts = _touches(e), t = _getTouch(ts, 0);\n            return [t[prefix + \"X\"], t[prefix + \"Y\"]];\n        },\n        _pageLocation = _genLoc.bind(this, \"page\"),\n        _screenLocation = _genLoc.bind(this, \"screen\"),\n        _clientLocation = _genLoc.bind(this, \"client\"),\n        _getTouch = function (touches, idx) {\n            return touches.item ? touches.item(idx) : touches[idx];\n        },\n        _touches = function (e) {\n            return e.touches && e.touches.length > 0 ? e.touches :\n                    e.changedTouches && e.changedTouches.length > 0 ? e.changedTouches :\n                    e.targetTouches && e.targetTouches.length > 0 ? e.targetTouches :\n                [ e ];\n        };\n\n    /**\n     Manages dragging for some instance of jsPlumb.\n\n     TODO instead of this being accessed directly, it should subscribe to events on the jsPlumb instance: every method\n     in here is called directly by jsPlumb. But what should happen is that we have unpublished events that this listens\n     to.  The only trick is getting one of these instantiated with every jsPlumb instance: it needs to have a hook somehow.\n     Basically the general idea is to pull ALL the drag code out (prototype method registrations plus this) into a\n     dedicated drag script), that does not necessarily need to be included.\n\n\n     */\n    var DragManager = function (_currentInstance) {\n        var _draggables = {}, _dlist = [], _delements = {}, _elementsWithEndpoints = {},\n        // elementids mapped to the draggable to which they belong.\n            _draggablesForElements = {};\n\n        /**\n         register some element as draggable.  right now the drag init stuff is done elsewhere, and it is\n         possible that will continue to be the case.\n         */\n        this.register = function (el) {\n            var id = _currentInstance.getId(el),\n                parentOffset = _currentInstance.getOffset(el);\n\n            if (!_draggables[id]) {\n                _draggables[id] = el;\n                _dlist.push(el);\n                _delements[id] = {};\n            }\n\n            // look for child elements that have endpoints and register them against this draggable.\n            var _oneLevel = function (p) {\n                if (p) {\n                    for (var i = 0; i < p.childNodes.length; i++) {\n                        if (p.childNodes[i].nodeType != 3 && p.childNodes[i].nodeType != 8) {\n                            var cEl = jsPlumb.getElement(p.childNodes[i]),\n                                cid = _currentInstance.getId(p.childNodes[i], null, true);\n                            if (cid && _elementsWithEndpoints[cid] && _elementsWithEndpoints[cid] > 0) {\n                                var cOff = _currentInstance.getOffset(cEl);\n                                _delements[id][cid] = {\n                                    id: cid,\n                                    offset: {\n                                        left: cOff.left - parentOffset.left,\n                                        top: cOff.top - parentOffset.top\n                                    }\n                                };\n                                _draggablesForElements[cid] = id;\n                            }\n                            _oneLevel(p.childNodes[i]);\n                        }\n                    }\n                }\n            };\n\n            _oneLevel(el);\n        };\n\n        // refresh the offsets for child elements of this element.\n        this.updateOffsets = function (elId, childOffsetOverrides) {\n            if (elId != null) {\n                childOffsetOverrides = childOffsetOverrides || {};\n                var domEl = jsPlumb.getElement(elId),\n                    id = _currentInstance.getId(domEl),\n                    children = _delements[id],\n                    parentOffset = _currentInstance.getOffset(domEl);\n\n                if (children) {\n                    for (var i in children) {\n                        if (children.hasOwnProperty(i)) {\n                            var cel = jsPlumb.getElement(i),\n                                cOff = childOffsetOverrides[i] || _currentInstance.getOffset(cel);\n\n                            // do not update if we have a value already and we'd just be writing 0,0\n                            if (cel.offsetParent == null && _delements[id][i] != null) continue;\n\n                            _delements[id][i] = {\n                                id: i,\n                                offset: {\n                                    left: cOff.left - parentOffset.left,\n                                    top: cOff.top - parentOffset.top\n                                }\n                            };\n                            _draggablesForElements[i] = id;\n                        }\n                    }\n                }\n            }\n        };\n\n        /**\n         notification that an endpoint was added to the given el.  we go up from that el's parent\n         node, looking for a parent that has been registered as a draggable. if we find one, we add this\n         el to that parent's list of elements to update on drag (if it is not there already)\n         */\n        this.endpointAdded = function (el, id) {\n\n            id = id || _currentInstance.getId(el);\n\n            var b = document.body,\n                p = el.parentNode;\n\n            _elementsWithEndpoints[id] = _elementsWithEndpoints[id] ? _elementsWithEndpoints[id] + 1 : 1;\n\n            while (p != null && p != b) {\n                var pid = _currentInstance.getId(p, null, true);\n                if (pid && _draggables[pid]) {\n                    var pLoc = _currentInstance.getOffset(p);\n\n                    if (_delements[pid][id] == null) {\n                        var cLoc = _currentInstance.getOffset(el);\n                        _delements[pid][id] = {\n                            id: id,\n                            offset: {\n                                left: cLoc.left - pLoc.left,\n                                top: cLoc.top - pLoc.top\n                            }\n                        };\n                        _draggablesForElements[id] = pid;\n                    }\n                    break;\n                }\n                p = p.parentNode;\n            }\n        };\n\n        this.endpointDeleted = function (endpoint) {\n            if (_elementsWithEndpoints[endpoint.elementId]) {\n                _elementsWithEndpoints[endpoint.elementId]--;\n                if (_elementsWithEndpoints[endpoint.elementId] <= 0) {\n                    for (var i in _delements) {\n                        if (_delements.hasOwnProperty(i) && _delements[i]) {\n                            delete _delements[i][endpoint.elementId];\n                            delete _draggablesForElements[endpoint.elementId];\n                        }\n                    }\n                }\n            }\n        };\n\n        this.changeId = function (oldId, newId) {\n            _delements[newId] = _delements[oldId];\n            _delements[oldId] = {};\n            _draggablesForElements[newId] = _draggablesForElements[oldId];\n            _draggablesForElements[oldId] = null;\n        };\n\n        this.getElementsForDraggable = function (id) {\n            return _delements[id];\n        };\n\n        this.elementRemoved = function (elementId) {\n            var elId = _draggablesForElements[elementId];\n            if (elId) {\n                delete _delements[elId][elementId];\n                delete _draggablesForElements[elementId];\n            }\n        };\n\n        this.reset = function () {\n            _draggables = {};\n            _dlist = [];\n            _delements = {};\n            _elementsWithEndpoints = {};\n        };\n\n        //\n        // notification drag ended. We check automatically if need to update some\n        // ancestor's offsets.\n        //\n        this.dragEnded = function (el) {\n            if (el.offsetParent != null) {\n                var id = _currentInstance.getId(el),\n                    ancestor = _draggablesForElements[id];\n\n                if (ancestor) this.updateOffsets(ancestor);\n            }\n        };\n\n        this.setParent = function (el, elId, p, pId, currentChildLocation) {\n            var current = _draggablesForElements[elId];\n            if (!_delements[pId]) {\n                _delements[pId] = {};\n            }\n            var pLoc = _currentInstance.getOffset(p),\n                cLoc = currentChildLocation || _currentInstance.getOffset(el);\n\n            if (current && _delements[current]) {\n                delete _delements[current][elId];\n            }\n\n            _delements[pId][elId] = {\n                id:elId,\n                offset : {\n                    left: cLoc.left - pLoc.left,\n                    top: cLoc.top - pLoc.top\n                }\n            };\n            _draggablesForElements[elId] = pId;\n        };\n\n        this.clearParent = function(el, elId) {\n            var current = _draggablesForElements[elId];\n            if (current) {\n                delete _delements[current][elId];\n                delete _draggablesForElements[elId];\n            }\n        };\n\n        this.revalidateParent = function(el, elId, childOffset) {\n            var current = _draggablesForElements[elId];\n            if (current) {\n                var co = {};\n                co[elId] = childOffset;\n                this.updateOffsets(current, co);\n                _currentInstance.revalidate(current);\n            }\n        };\n\n        this.getDragAncestor = function (el) {\n            var de = jsPlumb.getElement(el),\n                id = _currentInstance.getId(de),\n                aid = _draggablesForElements[id];\n\n            if (aid)\n                return jsPlumb.getElement(aid);\n            else\n                return null;\n        };\n\n    };\n\n    var trim = function (str) {\n            return str == null ? null : (str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, ''));\n        },\n        _setClassName = function (el, cn) {\n            cn = trim(cn);\n            if (typeof el.className.baseVal != \"undefined\")  // SVG\n                el.className.baseVal = cn;\n            else\n                el.className = cn;\n        },\n        _getClassName = function (el) {\n            return (typeof el.className.baseVal == \"undefined\") ? el.className : el.className.baseVal;\n        },\n        _classManip = function (el, classesToAdd, classesToRemove) {\n            classesToAdd = classesToAdd == null ? [] : _ju.isArray(classesToAdd) ? classesToAdd : classesToAdd.split(/\\s+/);\n            classesToRemove = classesToRemove == null ? [] : _ju.isArray(classesToRemove) ? classesToRemove : classesToRemove.split(/\\s+/);\n\n            var className = _getClassName(el),\n                curClasses = className.split(/\\s+/);\n\n            var _oneSet = function (add, classes) {\n                for (var i = 0; i < classes.length; i++) {\n                    if (add) {\n                        if (curClasses.indexOf(classes[i]) == -1)\n                            curClasses.push(classes[i]);\n                    }\n                    else {\n                        var idx = curClasses.indexOf(classes[i]);\n                        if (idx != -1)\n                            curClasses.splice(idx, 1);\n                    }\n                }\n            };\n\n            _oneSet(true, classesToAdd);\n            _oneSet(false, classesToRemove);\n\n            _setClassName(el, curClasses.join(\" \"));\n        };\n\n    root.jsPlumb.extend(root.jsPlumbInstance.prototype, {\n\n        headless: false,\n\n        pageLocation: _pageLocation,\n        screenLocation: _screenLocation,\n        clientLocation: _clientLocation,\n\n        getDragManager:function() {\n            if (this.dragManager == null)\n                this.dragManager = new DragManager(this);\n\n            return this.dragManager;\n        },\n\n        recalculateOffsets:function(elId) {\n            this.getDragManager().updateOffsets(elId);\n        },\n\n        createElement:function(tag, style, clazz, atts) {\n            return this.createElementNS(null, tag, style, clazz, atts);\n        },\n\n        createElementNS:function(ns, tag, style, clazz, atts) {\n            var e = ns == null ? document.createElement(tag) : document.createElementNS(ns, tag);\n            var i;\n            style = style || {};\n            for (i in style)\n                e.style[i] = style[i];\n\n            if (clazz)\n                e.className = clazz;\n\n            atts = atts || {};\n            for (i in atts)\n                e.setAttribute(i, \"\" + atts[i]);\n\n            return e;\n        },\n\n        getAttribute: function (el, attName) {\n            return el.getAttribute != null ? el.getAttribute(attName) : null;\n        },\n\n        setAttribute: function (el, a, v) {\n            if (el.setAttribute != null) el.setAttribute(a, v);\n        },\n\n        setAttributes: function (el, atts) {\n            for (var i in atts)\n                if (atts.hasOwnProperty(i)) el.setAttribute(i, atts[i]);\n        },\n        appendToRoot: function (node) {\n            document.body.appendChild(node);\n        },\n        getRenderModes: function () {\n            return [ \"svg\"  ];\n        },\n        getClass:_getClassName,\n        addClass: function (el, clazz) {\n            jsPlumb.each(el, function (e) {\n                _classManip(e, clazz);\n            });\n        },\n        hasClass: function (el, clazz) {\n            el = jsPlumb.getElement(el);\n            if (el.classList) return el.classList.contains(clazz);\n            else {\n                return _getClassName(el).indexOf(clazz) != -1;\n            }\n        },\n        removeClass: function (el, clazz) {\n            jsPlumb.each(el, function (e) {\n                _classManip(e, null, clazz);\n            });\n        },\n        updateClasses: function (el, toAdd, toRemove) {\n            jsPlumb.each(el, function (e) {\n                _classManip(e, toAdd, toRemove);\n            });\n        },\n        setClass: function (el, clazz) {\n            jsPlumb.each(el, function (e) {\n                _setClassName(e, clazz);\n            });\n        },\n        setPosition: function (el, p) {\n            el.style.left = p.left + \"px\";\n            el.style.top = p.top + \"px\";\n        },\n        getPosition: function (el) {\n            var _one = function (prop) {\n                var v = el.style[prop];\n                return v ? v.substring(0, v.length - 2) : 0;\n            };\n            return {\n                left: _one(\"left\"),\n                top: _one(\"top\")\n            };\n        },\n        getStyle:function(el, prop) {\n            if (typeof window.getComputedStyle !== 'undefined') {\n                return getComputedStyle(el, null).getPropertyValue(prop);\n            } else {\n                return el.currentStyle[prop];\n            }\n        },\n        getSelector: function (ctx, spec) {\n            var sel = null;\n            if (arguments.length == 1) {\n                sel = ctx.nodeType != null ? ctx : document.querySelectorAll(ctx);\n            }\n            else\n                sel = ctx.querySelectorAll(spec);\n\n            return sel;\n        },\n        getOffset:function(el, relativeToRoot, container) {\n            el = jsPlumb.getElement(el);\n            container = container || this.getContainer();\n            var out = {\n                    left: el.offsetLeft,\n                    top: el.offsetTop\n                },\n                op = (relativeToRoot  || (container != null && (el != container && el.offsetParent != container))) ?  el.offsetParent : null,\n                _maybeAdjustScroll = function(offsetParent) {\n                    if (offsetParent != null && offsetParent !== document.body && (offsetParent.scrollTop > 0 || offsetParent.scrollLeft > 0)) {\n                        out.left -= offsetParent.scrollLeft;\n                        out.top -= offsetParent.scrollTop;\n                    }\n                }.bind(this);\n\n            while (op != null) {\n                out.left += op.offsetLeft;\n                out.top += op.offsetTop;\n                _maybeAdjustScroll(op);\n                op = relativeToRoot ? op.offsetParent :\n                        op.offsetParent == container ? null : op.offsetParent;\n            }\n\n            // if container is scrolled and the element (or its offset parent) is not absolute or fixed, adjust accordingly.\n            if (container != null && !relativeToRoot && (container.scrollTop > 0 || container.scrollLeft > 0)) {\n                var pp = el.offsetParent != null ? this.getStyle(el.offsetParent, \"position\") : \"static\",\n                    p = this.getStyle(el, \"position\");\n                if (p !== \"absolute\" && p !== \"fixed\" && pp !== \"absolute\" && pp != \"fixed\") {\n                    out.left -= container.scrollLeft;\n                    out.top -= container.scrollTop;\n                }\n            }\n            return out;\n        },\n        //\n        // return x+y proportion of the given element's size corresponding to the location of the given event.\n        //\n        getPositionOnElement: function (evt, el, zoom) {\n            var box = typeof el.getBoundingClientRect !== \"undefined\" ? el.getBoundingClientRect() : { left: 0, top: 0, width: 0, height: 0 },\n                body = document.body,\n                docElem = document.documentElement,\n                scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop,\n                scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft,\n                clientTop = docElem.clientTop || body.clientTop || 0,\n                clientLeft = docElem.clientLeft || body.clientLeft || 0,\n                pst = 0,\n                psl = 0,\n                top = box.top + scrollTop - clientTop + (pst * zoom),\n                left = box.left + scrollLeft - clientLeft + (psl * zoom),\n                cl = jsPlumb.pageLocation(evt),\n                w = box.width || (el.offsetWidth * zoom),\n                h = box.height || (el.offsetHeight * zoom),\n                x = (cl[0] - left) / w,\n                y = (cl[1] - top) / h;\n\n            return [ x, y ];\n        },\n\n        /**\n         * Gets the absolute position of some element as read from the left/top properties in its style.\n         * @method getAbsolutePosition\n         * @param {Element} el The element to retrieve the absolute coordinates from. **Note** this is a DOM element, not a selector from the underlying library.\n         * @return {Number[]} [left, top] pixel values.\n         */\n        getAbsolutePosition: function (el) {\n            var _one = function (s) {\n                var ss = el.style[s];\n                if (ss) return parseFloat(ss.substring(0, ss.length - 2));\n            };\n            return [ _one(\"left\"), _one(\"top\") ];\n        },\n\n        /**\n         * Sets the absolute position of some element by setting the left/top properties in its style.\n         * @method setAbsolutePosition\n         * @param {Element} el The element to set the absolute coordinates on. **Note** this is a DOM element, not a selector from the underlying library.\n         * @param {Number[]} xy x and y coordinates\n         * @param {Number[]} [animateFrom] Optional previous xy to animate from.\n         * @param {Object} [animateOptions] Options for the animation.\n         */\n        setAbsolutePosition: function (el, xy, animateFrom, animateOptions) {\n            if (animateFrom) {\n                this.animate(el, {\n                    left: \"+=\" + (xy[0] - animateFrom[0]),\n                    top: \"+=\" + (xy[1] - animateFrom[1])\n                }, animateOptions);\n            }\n            else {\n                el.style.left = xy[0] + \"px\";\n                el.style.top = xy[1] + \"px\";\n            }\n        },\n        /**\n         * gets the size for the element, in an array : [ width, height ].\n         */\n        getSize: function (el) {\n            return [ el.offsetWidth, el.offsetHeight ];\n        },\n        getWidth: function (el) {\n            return el.offsetWidth;\n        },\n        getHeight: function (el) {\n            return el.offsetHeight;\n        },\n        getRenderMode : function() { return \"svg\"; }\n\n    });\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains code for components that support overlays.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;(function() {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    // ------------------------------ BEGIN OverlayCapablejsPlumbUIComponent --------------------------------------------\n\n    var _internalLabelOverlayId = \"__label\",\n    // this is a shortcut helper method to let people add a label as\n    // overlay.\n        _makeLabelOverlay = function (component, params) {\n\n            var _params = {\n                    cssClass: params.cssClass,\n                    labelStyle: component.labelStyle,\n                    id: _internalLabelOverlayId,\n                    component: component,\n                    _jsPlumb: component._jsPlumb.instance  // TODO not necessary, since the instance can be accessed through the component.\n                },\n                mergedParams = _jp.extend(_params, params);\n\n            return new _jp.Overlays[component._jsPlumb.instance.getRenderMode()].Label(mergedParams);\n        },\n        _processOverlay = function (component, o) {\n            var _newOverlay = null;\n            if (_ju.isArray(o)) {\t// this is for the shorthand [\"Arrow\", { width:50 }] syntax\n                // there's also a three arg version:\n                // [\"Arrow\", { width:50 }, {location:0.7}]\n                // which merges the 3rd arg into the 2nd.\n                var type = o[0],\n                // make a copy of the object so as not to mess up anyone else's reference...\n                    p = _jp.extend({component: component, _jsPlumb: component._jsPlumb.instance}, o[1]);\n                if (o.length == 3) _jp.extend(p, o[2]);\n                _newOverlay = new _jp.Overlays[component._jsPlumb.instance.getRenderMode()][type](p);\n            } else if (o.constructor == String) {\n                _newOverlay = new _jp.Overlays[component._jsPlumb.instance.getRenderMode()][o]({component: component, _jsPlumb: component._jsPlumb.instance});\n            } else {\n                _newOverlay = o;\n            }\n\n            _newOverlay.id = _newOverlay.id || _ju.uuid();\n            component.cacheTypeItem(\"overlay\", _newOverlay, _newOverlay.id);\n            //component._jsPlumb.overlays.push(_newOverlay);\n            component._jsPlumb.overlays[_newOverlay.id] = _newOverlay;\n\n            return _newOverlay;\n        };\n\n    _jp.OverlayCapableJsPlumbUIComponent = function (params) {\n\n        root.jsPlumbUIComponent.apply(this, arguments);\n        this._jsPlumb.overlays = {};\n        this._jsPlumb.overlayPositions = {};\n\n        if (params.label) {\n            this.getDefaultType().overlays[_internalLabelOverlayId] = [\"Label\", {\n                label: params.label,\n                location: params.labelLocation || this.defaultLabelLocation || 0.5,\n                labelStyle: params.labelStyle || this._jsPlumb.instance.Defaults.LabelStyle,\n                id:_internalLabelOverlayId\n            }];\n        }\n\n        this.setListenerComponent = function (c) {\n            if (this._jsPlumb) {\n                for (var i in this._jsPlumb.overlays)\n                    this._jsPlumb.overlays[i].setListenerComponent(c);\n            }\n        };\n    };\n\n    _jp.OverlayCapableJsPlumbUIComponent.applyType = function (component, t) {\n        if (t.overlays) {\n            // loop through the ones in the type. if already present on the component,\n            // dont remove or re-add.\n            var keep = {}, i;\n\n            for (i in t.overlays) {\n\n                var existing = component._jsPlumb.overlays[t.overlays[i][1].id];\n                if (existing) {\n                    // maybe update from data, if there were parameterised values for instance.\n                    existing.updateFrom(t.overlays[i][1]);\n                    keep[t.overlays[i][1].id] = true;\n                }\n                else {\n                    var c = component.getCachedTypeItem(\"overlay\", t.overlays[i][1].id);\n                    if (c != null) {\n                        c.reattach(component._jsPlumb.instance);\n                        c.setVisible(true);\n                        // maybe update from data, if there were parameterised values for instance.\n                        c.updateFrom(t.overlays[i][1]);\n                        component._jsPlumb.overlays[c.id] = c;\n                    }\n                    else {\n                        c = component.addOverlay(t.overlays[i], true);\n                    }\n                    keep[c.id] = true;\n                }\n            }\n\n            // now loop through the full overlays and remove those that we dont want to keep\n            for (i in component._jsPlumb.overlays) {\n                if (keep[component._jsPlumb.overlays[i].id] == null)\n                    component.removeOverlay(component._jsPlumb.overlays[i].id, true); // remove overlay but dont clean it up.\n                    // that would remove event listeners etc; overlays are never discarded by the types stuff, they are\n                    // just detached/reattached.\n            }\n        }\n    };\n\n    _ju.extend(_jp.OverlayCapableJsPlumbUIComponent, root.jsPlumbUIComponent, {\n\n        setHover: function (hover, ignoreAttachedElements) {\n            if (this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged()) {\n                for (var i in this._jsPlumb.overlays) {\n                    this._jsPlumb.overlays[i][hover ? \"addClass\" : \"removeClass\"](this._jsPlumb.instance.hoverClass);\n                }\n            }\n        },\n        addOverlay: function (overlay, doNotRepaint) {\n            var o = _processOverlay(this, overlay);\n            if (!doNotRepaint) this.repaint();\n            return o;\n        },\n        getOverlay: function (id) {\n            return this._jsPlumb.overlays[id];\n        },\n        getOverlays: function () {\n            return this._jsPlumb.overlays;\n        },\n        hideOverlay: function (id) {\n            var o = this.getOverlay(id);\n            if (o) o.hide();\n        },\n        hideOverlays: function () {\n            for (var i in this._jsPlumb.overlays)\n                this._jsPlumb.overlays[i].hide();\n        },\n        showOverlay: function (id) {\n            var o = this.getOverlay(id);\n            if (o) o.show();\n        },\n        showOverlays: function () {\n            for (var i in this._jsPlumb.overlays)\n                this._jsPlumb.overlays[i].show();\n        },\n        removeAllOverlays: function (doNotRepaint) {\n            for (var i in this._jsPlumb.overlays) {\n                if (this._jsPlumb.overlays[i].cleanup) this._jsPlumb.overlays[i].cleanup();\n            }\n\n            this._jsPlumb.overlays = {};\n            this._jsPlumb.overlayPositions = null;\n            if (!doNotRepaint)\n                this.repaint();\n        },\n        removeOverlay: function (overlayId, dontCleanup) {\n            var o = this._jsPlumb.overlays[overlayId];\n            if (o) {\n                o.setVisible(false);\n                if (!dontCleanup && o.cleanup) o.cleanup();\n                delete this._jsPlumb.overlays[overlayId];\n                if (this._jsPlumb.overlayPositions)\n                    delete this._jsPlumb.overlayPositions[overlayId];\n            }\n        },\n        removeOverlays: function () {\n            for (var i = 0, j = arguments.length; i < j; i++)\n                this.removeOverlay(arguments[i]);\n        },\n        moveParent: function (newParent) {\n            if (this.bgCanvas) {\n                this.bgCanvas.parentNode.removeChild(this.bgCanvas);\n                newParent.appendChild(this.bgCanvas);\n            }\n\n            if (this.canvas && this.canvas.parentNode) {\n                this.canvas.parentNode.removeChild(this.canvas);\n                newParent.appendChild(this.canvas);\n\n                for (var i in this._jsPlumb.overlays) {\n                    if (this._jsPlumb.overlays[i].isAppendedAtTopLevel) {\n                        var el = this._jsPlumb.overlays[i].getElement();\n                        el.parentNode.removeChild(el);\n                        newParent.appendChild(el);\n                    }\n                }\n            }\n        },\n        getLabel: function () {\n            var lo = this.getOverlay(_internalLabelOverlayId);\n            return lo != null ? lo.getLabel() : null;\n        },\n        getLabelOverlay: function () {\n            return this.getOverlay(_internalLabelOverlayId);\n        },\n        setLabel: function (l) {\n            var lo = this.getOverlay(_internalLabelOverlayId);\n            if (!lo) {\n                var params = l.constructor == String || l.constructor == Function ? { label: l } : l;\n                lo = _makeLabelOverlay(this, params);\n                this._jsPlumb.overlays[_internalLabelOverlayId] = lo;\n            }\n            else {\n                if (l.constructor == String || l.constructor == Function) lo.setLabel(l);\n                else {\n                    if (l.label) lo.setLabel(l.label);\n                    if (l.location) lo.setLocation(l.location);\n                }\n            }\n\n            if (!this._jsPlumb.instance.isSuspendDrawing())\n                this.repaint();\n        },\n        cleanup: function (force) {\n            for (var i in this._jsPlumb.overlays) {\n                this._jsPlumb.overlays[i].cleanup(force);\n                this._jsPlumb.overlays[i].destroy(force);\n            }\n            if (force) {\n                this._jsPlumb.overlays = {};\n                this._jsPlumb.overlayPositions = null;\n            }\n        },\n        setVisible: function (v) {\n            this[v ? \"showOverlays\" : \"hideOverlays\"]();\n        },\n        setAbsoluteOverlayPosition: function (overlay, xy) {\n            this._jsPlumb.overlayPositions[overlay.id] = xy;\n        },\n        getAbsoluteOverlayPosition: function (overlay) {\n            return this._jsPlumb.overlayPositions ? this._jsPlumb.overlayPositions[overlay.id] : null;\n        },\n        _clazzManip:function(action, clazz, dontUpdateOverlays) {\n            if (!dontUpdateOverlays) {\n                for (var i in this._jsPlumb.overlays) {\n                    this._jsPlumb.overlays[i][action + \"Class\"](clazz);\n                }\n            }\n        },\n        addClass:function(clazz, dontUpdateOverlays) {\n            this._clazzManip(\"add\", clazz, dontUpdateOverlays)\n        },\n        removeClass:function(clazz, dontUpdateOverlays) {\n            this._clazzManip(\"remove\", clazz, dontUpdateOverlays)\n        }\n    });\n\n// ------------------------------ END OverlayCapablejsPlumbUIComponent --------------------------------------------\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the code for Endpoints.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    // create the drag handler for a connection\n    var _makeConnectionDragHandler = function (endpoint, placeholder, _jsPlumb) {\n        var stopped = false;\n        return {\n            drag: function () {\n                if (stopped) {\n                    stopped = false;\n                    return true;\n                }\n\n                if (placeholder.element) {\n                    var _ui = _jsPlumb.getUIPosition(arguments, _jsPlumb.getZoom());\n                    if (_ui != null) jsPlumb.setPosition(placeholder.element, _ui);\n                    _jsPlumb.repaint(placeholder.element, _ui);\n                    // always repaint the source endpoint, because only continuous/dynamic anchors cause the endpoint\n                    // to be repainted, so static anchors need to be told (or the endpoint gets dragged around)\n                    endpoint.paint({anchorPoint:endpoint.anchor.getCurrentLocation({element:endpoint})});\n                }\n            },\n            stopDrag: function () {\n                stopped = true;\n            }\n        };\n    };\n\n    // creates a placeholder div for dragging purposes, adds it, and pre-computes its offset.\n    var _makeDraggablePlaceholder = function (placeholder, _jsPlumb, ipco, ips) {\n        var n = jsPlumb.createElement(\"div\", { position : \"absolute\" });\n        _jsPlumb.appendElement(n);\n        var id = _jsPlumb.getId(n);\n        jsPlumb.setPosition(n, ipco);\n        n.style.width = ips[0] + \"px\";\n        n.style.height = ips[1] + \"px\";\n        _jsPlumb.manage(id, n, true); // TRANSIENT MANAGE\n        // create and assign an id, and initialize the offset.\n        placeholder.id = id;\n        placeholder.element = n;\n    };\n\n    // create a floating endpoint (for drag connections)\n    var _makeFloatingEndpoint = function (paintStyle, referenceAnchor, endpoint, referenceCanvas, sourceElement, _jsPlumb, _newEndpoint, scope) {\n        var floatingAnchor = new _jp.FloatingAnchor({ reference: referenceAnchor, referenceCanvas: referenceCanvas, jsPlumbInstance: _jsPlumb });\n        //setting the scope here should not be the way to fix that mootools issue.  it should be fixed by not\n        // adding the floating endpoint as a droppable.  that makes more sense anyway!\n        // TRANSIENT MANAGE\n        return _newEndpoint({\n            paintStyle: paintStyle,\n            endpoint: endpoint,\n            anchor: floatingAnchor,\n            source: sourceElement,\n            scope: scope\n        });\n    };\n\n    var typeParameters = [ \"connectorStyle\", \"connectorHoverStyle\", \"connectorOverlays\",\n        \"connector\", \"connectionType\", \"connectorClass\", \"connectorHoverClass\" ];\n\n    // a helper function that tries to find a connection to the given element, and returns it if so. if elementWithPrecedence is null,\n    // or no connection to it is found, we return the first connection in our list.\n    var findConnectionToUseForDynamicAnchor = function (ep, elementWithPrecedence) {\n        var idx = 0;\n        if (elementWithPrecedence != null) {\n            for (var i = 0; i < ep.connections.length; i++) {\n                if (ep.connections[i].sourceId == elementWithPrecedence || ep.connections[i].targetId == elementWithPrecedence) {\n                    idx = i;\n                    break;\n                }\n            }\n        }\n\n        return ep.connections[idx];\n    };\n\n    _jp.Endpoint = function (params) {\n        var _jsPlumb = params._jsPlumb,\n            _newConnection = params.newConnection,\n            _newEndpoint = params.newEndpoint;\n\n        this.idPrefix = \"_jsplumb_e_\";\n        this.defaultLabelLocation = [ 0.5, 0.5 ];\n        this.defaultOverlayKeys = [\"Overlays\", \"EndpointOverlays\"];\n        _jp.OverlayCapableJsPlumbUIComponent.apply(this, arguments);\n\n// TYPE\n\n        this.appendToDefaultType({\n            connectionType:params.connectionType,\n            maxConnections: params.maxConnections == null ? this._jsPlumb.instance.Defaults.MaxConnections : params.maxConnections, // maximum number of connections this endpoint can be the source of.,\n            paintStyle: params.endpointStyle || params.paintStyle || params.style || this._jsPlumb.instance.Defaults.EndpointStyle || _jp.Defaults.EndpointStyle,\n            hoverPaintStyle: params.endpointHoverStyle || params.hoverPaintStyle || this._jsPlumb.instance.Defaults.EndpointHoverStyle || _jp.Defaults.EndpointHoverStyle,\n            connectorStyle: params.connectorStyle,\n            connectorHoverStyle: params.connectorHoverStyle,\n            connectorClass: params.connectorClass,\n            connectorHoverClass: params.connectorHoverClass,\n            connectorOverlays: params.connectorOverlays,\n            connector: params.connector,\n            connectorTooltip: params.connectorTooltip\n        });\n\n// END TYPE\n\n        this._jsPlumb.enabled = !(params.enabled === false);\n        this._jsPlumb.visible = true;\n        this.element = _jp.getElement(params.source);\n        this._jsPlumb.uuid = params.uuid;\n        this._jsPlumb.floatingEndpoint = null;\n        var inPlaceCopy = null;\n        if (this._jsPlumb.uuid) params.endpointsByUUID[this._jsPlumb.uuid] = this;\n        this.elementId = params.elementId;\n        this.dragProxy = params.dragProxy;\n\n        this._jsPlumb.connectionCost = params.connectionCost;\n        this._jsPlumb.connectionsDirected = params.connectionsDirected;\n        this._jsPlumb.currentAnchorClass = \"\";\n        this._jsPlumb.events = {};\n\n        var deleteOnEmpty = params.deleteOnEmpty === true;\n        this.setDeleteOnEmpty = function(d) { deleteOnEmpty = d; };\n\n        var _updateAnchorClass = function () {\n            // stash old, get new\n            var oldAnchorClass = _jsPlumb.endpointAnchorClassPrefix + \"-\" + this._jsPlumb.currentAnchorClass;\n            this._jsPlumb.currentAnchorClass = this.anchor.getCssClass();\n            var anchorClass = _jsPlumb.endpointAnchorClassPrefix + (this._jsPlumb.currentAnchorClass ? \"-\" + this._jsPlumb.currentAnchorClass : \"\");\n\n            this.removeClass(oldAnchorClass);\n            this.addClass(anchorClass);\n            // add and remove at the same time to reduce the number of reflows.\n            _jp.updateClasses(this.element, anchorClass, oldAnchorClass);\n        }.bind(this);\n\n        this.prepareAnchor = function(anchorParams) {\n            var a = this._jsPlumb.instance.makeAnchor(anchorParams, this.elementId, _jsPlumb);\n            a.bind(\"anchorChanged\", function (currentAnchor) {\n                this.fire(\"anchorChanged\", {endpoint: this, anchor: currentAnchor});\n                _updateAnchorClass();\n            }.bind(this));\n            return a;\n        };\n\n        this.setPreparedAnchor = function(anchor, doNotRepaint) {\n            this._jsPlumb.instance.continuousAnchorFactory.clear(this.elementId);\n            this.anchor = anchor;\n            _updateAnchorClass();\n\n            if (!doNotRepaint)\n                this._jsPlumb.instance.repaint(this.elementId);\n\n            return this;\n        };\n\n        this.setAnchor = function (anchorParams, doNotRepaint) {\n            var a = this.prepareAnchor(anchorParams);\n            this.setPreparedAnchor(a, doNotRepaint);\n            return this;\n        };\n\n        var internalHover = function (state) {\n            if (this.connections.length > 0) {\n                for (var i = 0; i < this.connections.length; i++)\n                    this.connections[i].setHover(state, false);\n            }\n            else\n                this.setHover(state);\n        }.bind(this);\n\n        this.bind(\"mouseover\", function () {\n            internalHover(true);\n        });\n        this.bind(\"mouseout\", function () {\n            internalHover(false);\n        });\n\n        // ANCHOR MANAGER\n        if (!params._transient) // in place copies, for example, are transient.  they will never need to be retrieved during a paint cycle, because they dont move, and then they are deleted.\n            this._jsPlumb.instance.anchorManager.add(this, this.elementId);\n\n        this.prepareEndpoint = function(ep, typeId) {\n            var _e = function (t, p) {\n                var rm = _jsPlumb.getRenderMode();\n                if (_jp.Endpoints[rm][t]) return new _jp.Endpoints[rm][t](p);\n                if (!_jsPlumb.Defaults.DoNotThrowErrors)\n                    throw { msg: \"jsPlumb: unknown endpoint type '\" + t + \"'\" };\n            };\n\n            var endpointArgs = {\n                _jsPlumb: this._jsPlumb.instance,\n                cssClass: params.cssClass,\n                container: params.container,\n                tooltip: params.tooltip,\n                connectorTooltip: params.connectorTooltip,\n                endpoint: this\n            };\n\n            var endpoint;\n\n            if (_ju.isString(ep))\n                endpoint = _e(ep, endpointArgs);\n            else if (_ju.isArray(ep)) {\n                endpointArgs = _ju.merge(ep[1], endpointArgs);\n                endpoint = _e(ep[0], endpointArgs);\n            }\n            else {\n                endpoint = ep.clone();\n            }\n\n            // assign a clone function using a copy of endpointArgs. this is used when a drag starts: the endpoint that was dragged is cloned,\n            // and the clone is left in its place while the original one goes off on a magical journey.\n            // the copy is to get around a closure problem, in which endpointArgs ends up getting shared by\n            // the whole world.\n            //var argsForClone = jsPlumb.extend({}, endpointArgs);\n            endpoint.clone = function () {\n                // TODO this, and the code above, can be refactored to be more dry.\n                if (_ju.isString(ep))\n                    return _e(ep, endpointArgs);\n                else if (_ju.isArray(ep)) {\n                    endpointArgs = _ju.merge(ep[1], endpointArgs);\n                    return _e(ep[0], endpointArgs);\n                }\n            }.bind(this);\n\n            endpoint.typeId = typeId;\n            return endpoint;\n        };\n\n        this.setEndpoint = function(ep, doNotRepaint) {\n            var _ep = this.prepareEndpoint(ep);\n            this.setPreparedEndpoint(_ep, true);\n        };\n\n        this.setPreparedEndpoint = function (ep, doNotRepaint) {\n            if (this.endpoint != null) {\n                this.endpoint.cleanup();\n                this.endpoint.destroy();\n            }\n            this.endpoint = ep;\n            this.type = this.endpoint.type;\n            this.canvas = this.endpoint.canvas;\n        };\n\n        _jp.extend(this, params, typeParameters);\n\n        this.isSource = params.isSource || false;\n        this.isTemporarySource = params.isTemporarySource || false;\n        this.isTarget = params.isTarget || false;\n\n        this.connections = params.connections || [];\n        this.connectorPointerEvents = params[\"connector-pointer-events\"];\n\n        this.scope = params.scope || _jsPlumb.getDefaultScope();\n        this.timestamp = null;\n        this.reattachConnections = params.reattach || _jsPlumb.Defaults.ReattachConnections;\n        this.connectionsDetachable = _jsPlumb.Defaults.ConnectionsDetachable;\n        if (params.connectionsDetachable === false || params.detachable === false)\n            this.connectionsDetachable = false;\n        this.dragAllowedWhenFull = params.dragAllowedWhenFull !== false;\n\n        if (params.onMaxConnections)\n            this.bind(\"maxConnections\", params.onMaxConnections);\n\n        //\n        // add a connection. not part of public API.\n        //\n        this.addConnection = function (connection) {\n            this.connections.push(connection);\n            this[(this.connections.length > 0 ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointConnectedClass);\n            this[(this.isFull() ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointFullClass);\n        };\n\n        this.detachFromConnection = function (connection, idx, doNotCleanup) {\n            idx = idx == null ? this.connections.indexOf(connection) : idx;\n            if (idx >= 0) {\n                this.connections.splice(idx, 1);\n                this[(this.connections.length > 0 ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointConnectedClass);\n                this[(this.isFull() ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointFullClass);\n            }\n\n            //if ((this._forceDeleteOnDetach || (!doNotCleanup && this._deleteOnDetach)) && this.connections.length === 0) {\n            if (!doNotCleanup && deleteOnEmpty && this.connections.length === 0) {\n                _jsPlumb.deleteObject({\n                    endpoint: this,\n                    fireEvent: false,\n                    deleteAttachedObjects: doNotCleanup !== true\n                });\n            }\n        };\n\n        this.deleteEveryConnection = function(params) {\n            var c = this.connections.length;\n            for (var i = 0; i < c; i++) {\n                _jsPlumb.deleteConnection(this.connections[0], params);\n            }\n        };\n\n        //this.detach = function (connection, ignoreTarget, forceDetach, fireEvent, originalEvent, endpointBeingDeleted, connectionIndex) {\n\n//        this.detach = function (params) {\n//            var connectionIndex = params.connectionIndex,\n//                connection = params.connection,\n//                ignoreTarget = params.ignoreTarget,\n//                fireEvent = params.fireEvent,\n//                originalEvent = params.originalEvent,\n//                endpointBeingDeleted = params.endpointBeingDeleted,\n//                forceDetach = params.forceDetach;\n//\n//            var idx = connectionIndex == null ? this.connections.indexOf(connection) : connectionIndex,\n//                actuallyDetached = false;\n//            fireEvent = (fireEvent !== false);\n//\n//            if (idx >= 0) {\n//\n//                if (forceDetach || connection._forceDetach || (connection.isDetachable() && connection.isDetachAllowed(connection) && this.isDetachAllowed(connection) && _jsPlumb.checkCondition(\"beforeDetach\", connection, endpointBeingDeleted) )) {\n//\n//                    _jsPlumb.deleteObject({\n//                        connection: connection,\n//                        fireEvent: (!ignoreTarget && fireEvent),\n//                        originalEvent: originalEvent,\n//                        deleteAttachedObjects:params.deleteAttachedObjects\n//                        //deleteAttachedObjects:null\n//                    });\n//                    actuallyDetached = true;\n//                }\n//            }\n//            return actuallyDetached;\n//        };\n\n//        this.detachAll = function (fireEvent, forceDetach) {\n//            var unaffectedConns = [];\n//            while (this.connections.length > 0) {\n//                // TODO this could pass the index in to the detach method to save some time (index will always be zero in this while loop)\n//                var actuallyDetached = _jsPlumb.detach({\n//                    connection:this.connections[0],\n//                    ignoreTarget:false,\n//                    forceDetach:forceDetach === true,\n//                    fireEvent:fireEvent !== false,\n//                    originalEvent:null,\n//                    endpointBeingDeleted:this,\n//                    connectionIndex:0\n//                });\n//                if (!actuallyDetached) {\n//                    unaffectedConns.push(this.connections[0]);\n//                    this.connections.splice(0, 1);\n//                }\n//            }\n//            this.connections = unaffectedConns;\n//            return this;\n//        };\n\n        this.detachFrom = function (targetEndpoint, fireEvent, originalEvent) {\n            var c = [];\n            for (var i = 0; i < this.connections.length; i++) {\n                if (this.connections[i].endpoints[1] == targetEndpoint || this.connections[i].endpoints[0] == targetEndpoint) {\n                    c.push(this.connections[i]);\n                }\n            }\n            var count = c.length;\n            for (var j = 0; j < count; j++) {\n//                this.detach({\n//                    connection:c[j],\n//                    ignoreTarget:false,\n//                    forceDetach:true,\n//                    fireEvent:fireEvent,\n//                    originalEvent:originalEvent\n//                });\n                _jsPlumb.deleteConnection(c[0]);\n            }\n            return this;\n        };\n\n        this.getElement = function () {\n            return this.element;\n        };\n\n        this.setElement = function (el) {\n            var parentId = this._jsPlumb.instance.getId(el),\n                curId = this.elementId;\n            // remove the endpoint from the list for the current endpoint's element\n            _ju.removeWithFunction(params.endpointsByElement[this.elementId], function (e) {\n                return e.id == this.id;\n            }.bind(this));\n            this.element = _jp.getElement(el);\n            this.elementId = _jsPlumb.getId(this.element);\n            _jsPlumb.anchorManager.rehomeEndpoint(this, curId, this.element);\n            _jsPlumb.dragManager.endpointAdded(this.element);\n            _ju.addToList(params.endpointsByElement, parentId, this);\n            return this;\n        };\n\n        /**\n         * private but must be exposed.\n         */\n        this.makeInPlaceCopy = function () {\n            var loc = this.anchor.getCurrentLocation({element: this}),\n                o = this.anchor.getOrientation(this),\n                acc = this.anchor.getCssClass(),\n                inPlaceAnchor = {\n                    bind: function () {\n                    },\n                    compute: function () {\n                        return [ loc[0], loc[1] ];\n                    },\n                    getCurrentLocation: function () {\n                        return [ loc[0], loc[1] ];\n                    },\n                    getOrientation: function () {\n                        return o;\n                    },\n                    getCssClass: function () {\n                        return acc;\n                    }\n                };\n\n            return _newEndpoint({\n                dropOptions: params.dropOptions,\n                anchor: inPlaceAnchor,\n                source: this.element,\n                paintStyle: this.getPaintStyle(),\n                endpoint: params.hideOnDrag ? \"Blank\" : this.endpoint,\n                _transient: true,\n                scope: this.scope,\n                reference:this\n            });\n        };\n\n        /**\n         * returns a connection from the pool; used when dragging starts.  just gets the head of the array if it can.\n         */\n        this.connectorSelector = function () {\n            var candidate = this.connections[0];\n            // SP target source refactor\n            if (/*this.isTarget && */candidate) return candidate;\n            else {\n                return (this.connections.length < this._jsPlumb.maxConnections) || this._jsPlumb.maxConnections == -1 ? null : candidate;\n            }\n        };\n\n        this.setStyle = this.setPaintStyle;\n\n        this.paint = function (params) {\n            params = params || {};\n            var timestamp = params.timestamp, recalc = !(params.recalc === false);\n            if (!timestamp || this.timestamp !== timestamp) {\n\n                var info = _jsPlumb.updateOffset({ elId: this.elementId, timestamp: timestamp });\n\n                var xy = params.offset ? params.offset.o : info.o;\n                if (xy != null) {\n                    var ap = params.anchorPoint, connectorPaintStyle = params.connectorPaintStyle;\n                    if (ap == null) {\n                        var wh = params.dimensions || info.s,\n                            anchorParams = { xy: [ xy.left, xy.top ], wh: wh, element: this, timestamp: timestamp };\n                        if (recalc && this.anchor.isDynamic && this.connections.length > 0) {\n                            var c = findConnectionToUseForDynamicAnchor(this, params.elementWithPrecedence),\n                                oIdx = c.endpoints[0] == this ? 1 : 0,\n                                oId = oIdx === 0 ? c.sourceId : c.targetId,\n                                oInfo = _jsPlumb.getCachedData(oId),\n                                oOffset = oInfo.o, oWH = oInfo.s;\n                            anchorParams.txy = [ oOffset.left, oOffset.top ];\n                            anchorParams.twh = oWH;\n                            anchorParams.tElement = c.endpoints[oIdx];\n                        }\n                        ap = this.anchor.compute(anchorParams);\n                    }\n\n                    this.endpoint.compute(ap, this.anchor.getOrientation(this), this._jsPlumb.paintStyleInUse, connectorPaintStyle || this.paintStyleInUse);\n                    this.endpoint.paint(this._jsPlumb.paintStyleInUse, this.anchor);\n                    this.timestamp = timestamp;\n\n                    // paint overlays\n                    for (var i in this._jsPlumb.overlays) {\n                        if (this._jsPlumb.overlays.hasOwnProperty(i)) {\n                            var o = this._jsPlumb.overlays[i];\n                            if (o.isVisible()) {\n                                this._jsPlumb.overlayPlacements[i] = o.draw(this.endpoint, this._jsPlumb.paintStyleInUse);\n                                o.paint(this._jsPlumb.overlayPlacements[i]);\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        this.getTypeDescriptor = function () {\n            return \"endpoint\";\n        };\n        this.isVisible = function () {\n            return this._jsPlumb.visible;\n        };\n\n        this.repaint = this.paint;\n\n        var draggingInitialised = false;\n        this.initDraggable = function () {\n\n            // is this a connection source? we make it draggable and have the\n            // drag listener maintain a connection with a floating endpoint.\n            if (!draggingInitialised && _jp.isDragSupported(this.element)) {\n                var placeholderInfo = { id: null, element: null },\n                    jpc = null,\n                    existingJpc = false,\n                    existingJpcParams = null,\n                    _dragHandler = _makeConnectionDragHandler(this, placeholderInfo, _jsPlumb),\n                    dragOptions = params.dragOptions || {},\n                    defaultOpts = {},\n                    startEvent = _jp.dragEvents.start,\n                    stopEvent = _jp.dragEvents.stop,\n                    dragEvent = _jp.dragEvents.drag,\n                    beforeStartEvent = _jp.dragEvents.beforeStart,\n                    payload;\n\n                // respond to beforeStart from katavorio; this will have, optionally, a payload of attribute values\n                // that were placed there by the makeSource mousedown listener.\n                var beforeStart = function(beforeStartParams) {\n                    payload = beforeStartParams.e.payload || {};\n                };\n\n                var start = function (startParams) {\n\n// -------------   first, get a connection to drag. this may be null, in which case we are dragging a new one.\n\n                    jpc = this.connectorSelector();\n\n// -------------------------------- now a bunch of tests about whether or not to proceed -------------------------\n\n                    var _continue = true;\n                    // if not enabled, return\n                    if (!this.isEnabled()) _continue = false;\n                    // if no connection and we're not a source - or temporarily a source, as is the case with makeSource - return.\n                    if (jpc == null && !this.isSource && !this.isTemporarySource) _continue = false;\n                    // otherwise if we're full and not allowed to drag, also return false.\n                    if (this.isSource && this.isFull() && !(jpc != null && this.dragAllowedWhenFull)) _continue = false;\n                    // if the connection was setup as not detachable or one of its endpoints\n                    // was setup as connectionsDetachable = false, or Defaults.ConnectionsDetachable\n                    // is set to false...\n                    if (jpc != null && !jpc.isDetachable(this)) _continue = false;\n\n                    var beforeDrag = _jsPlumb.checkCondition(jpc == null ? \"beforeDrag\" : \"beforeStartDetach\", {\n                        endpoint:this,\n                        source:this.element,\n                        sourceId:this.elementId,\n                        connection:jpc\n                    });\n                    if (beforeDrag === false) _continue = false;\n                    // else we might have been given some data. we'll pass it in to a new connection as 'data'.\n                    // here we also merge in the optional payload we were given on mousedown.\n                    else if (typeof beforeDrag === \"object\") {\n                        _jp.extend(beforeDrag, payload || {});\n                    }\n                    else\n                        // or if no beforeDrag data, maybe use the payload on its own.\n                        beforeDrag = payload || {};\n\n                    if (_continue === false) {\n                        // this is for mootools and yui. returning false from this causes jquery to stop drag.\n                        // the events are wrapped in both mootools and yui anyway, but i don't think returning\n                        // false from the start callback would stop a drag.\n                        if (_jsPlumb.stopDrag) _jsPlumb.stopDrag(this.canvas);\n                        _dragHandler.stopDrag();\n                        return false;\n                    }\n\n// ---------------------------------------------------------------------------------------------------------------------\n\n                    // ok to proceed.\n\n                    // clear hover for all connections for this endpoint before continuing.\n                    for (var i = 0; i < this.connections.length; i++)\n                        this.connections[i].setHover(false);\n\n                    this.addClass(\"endpointDrag\");\n                    _jsPlumb.setConnectionBeingDragged(true);\n\n                    // if we're not full but there was a connection, make it null. we'll create a new one.\n                    if (jpc && !this.isFull() && this.isSource) jpc = null;\n\n                    _jsPlumb.updateOffset({ elId: this.elementId });\n\n// ----------------    make the element we will drag around, and position it -----------------------------\n\n                    var ipco = this._jsPlumb.instance.getOffset(this.canvas),\n                        canvasElement = this.canvas,\n                        ips = this._jsPlumb.instance.getSize(this.canvas);\n\n                    _makeDraggablePlaceholder(placeholderInfo, _jsPlumb, ipco, ips);\n\n                    // store the id of the dragging div and the source element. the drop function will pick these up.                   \n                    _jsPlumb.setAttributes(this.canvas, {\n                        \"dragId\": placeholderInfo.id,\n                        \"elId\": this.elementId\n                    });\n\n// ------------------- create an endpoint that will be our floating endpoint ------------------------------------\n\n                    var endpointToFloat = this.dragProxy || this.endpoint;\n                    if (this.dragProxy == null && this.connectionType != null) {\n                        var aae = this._jsPlumb.instance.deriveEndpointAndAnchorSpec(this.connectionType);\n                        if (aae.endpoints[1]) endpointToFloat = aae.endpoints[1];\n                    }\n                    var centerAnchor = this._jsPlumb.instance.makeAnchor(\"Center\");\n                    centerAnchor.isFloating = true;\n                    this._jsPlumb.floatingEndpoint = _makeFloatingEndpoint(this.getPaintStyle(), centerAnchor, endpointToFloat, this.canvas, placeholderInfo.element, _jsPlumb, _newEndpoint, this.scope);\n                    var _savedAnchor = this._jsPlumb.floatingEndpoint.anchor;\n\n\n                    if (jpc == null) {\n\n                        this.setHover(false, false);\n                        // create a connection. one end is this endpoint, the other is a floating endpoint.                    \n                        jpc = _newConnection({\n                            sourceEndpoint: this,\n                            targetEndpoint: this._jsPlumb.floatingEndpoint,\n                            source: this.element,  // for makeSource with parent option.  ensure source element is represented correctly.\n                            target: placeholderInfo.element,\n                            anchors: [ this.anchor, this._jsPlumb.floatingEndpoint.anchor ],\n                            paintStyle: params.connectorStyle, // this can be null. Connection will use the default.\n                            hoverPaintStyle: params.connectorHoverStyle,\n                            connector: params.connector, // this can also be null. Connection will use the default.\n                            overlays: params.connectorOverlays,\n                            type: this.connectionType,\n                            cssClass: this.connectorClass,\n                            hoverClass: this.connectorHoverClass,\n                            scope:params.scope,\n                            data:beforeDrag\n                        });\n                        jpc.pending = true;\n                        jpc.addClass(_jsPlumb.draggingClass);\n                        this._jsPlumb.floatingEndpoint.addClass(_jsPlumb.draggingClass);\n                        this._jsPlumb.floatingEndpoint.anchor = _savedAnchor;\n                        // fire an event that informs that a connection is being dragged\n                        _jsPlumb.fire(\"connectionDrag\", jpc);\n\n                        // register the new connection on the drag manager. This connection, at this point, is 'pending',\n                        // and has as its target a temporary element (the 'placeholder'). If the connection subsequently\n                        // becomes established, the anchor manager is informed that the target of the connection has\n                        // changed.\n\n                        _jsPlumb.anchorManager.newConnection(jpc);\n\n                    } else {\n                        existingJpc = true;\n                        jpc.setHover(false);\n                        // new anchor idx\n                        var anchorIdx = jpc.endpoints[0].id == this.id ? 0 : 1;\n                        this.detachFromConnection(jpc, null, true);                         // detach from the connection while dragging is occurring. but dont cleanup automatically.\n\n                        // store the original scope (issue 57)\n                        var dragScope = _jsPlumb.getDragScope(canvasElement);\n                        _jsPlumb.setAttribute(this.canvas, \"originalScope\", dragScope);\n\n                        // fire an event that informs that a connection is being dragged. we do this before\n                        // replacing the original target with the floating element info.\n                        _jsPlumb.fire(\"connectionDrag\", jpc);\n\n                        // now we replace ourselves with the temporary div we created above:\n                        if (anchorIdx === 0) {\n                            existingJpcParams = [ jpc.source, jpc.sourceId, canvasElement, dragScope ];\n                            _jsPlumb.anchorManager.sourceChanged(jpc.endpoints[anchorIdx].elementId, placeholderInfo.id, jpc, placeholderInfo.element);\n\n                        } else {\n                            existingJpcParams = [ jpc.target, jpc.targetId, canvasElement, dragScope ];\n                            jpc.target = placeholderInfo.element;\n                            jpc.targetId = placeholderInfo.id;\n\n                            _jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.endpoints[anchorIdx].elementId, jpc.targetId, jpc);\n                        }\n\n                        // store the original endpoint and assign the new floating endpoint for the drag.\n                        jpc.suspendedEndpoint = jpc.endpoints[anchorIdx];\n\n                        // PROVIDE THE SUSPENDED ELEMENT, BE IT A SOURCE OR TARGET (ISSUE 39)\n                        jpc.suspendedElement = jpc.endpoints[anchorIdx].getElement();\n                        jpc.suspendedElementId = jpc.endpoints[anchorIdx].elementId;\n                        jpc.suspendedElementType = anchorIdx === 0 ? \"source\" : \"target\";\n\n                        jpc.suspendedEndpoint.setHover(false);\n                        this._jsPlumb.floatingEndpoint.referenceEndpoint = jpc.suspendedEndpoint;\n                        jpc.endpoints[anchorIdx] = this._jsPlumb.floatingEndpoint;\n\n                        jpc.addClass(_jsPlumb.draggingClass);\n                        this._jsPlumb.floatingEndpoint.addClass(_jsPlumb.draggingClass);\n                    }\n\n                    // register it and register connection on it.\n                    _jsPlumb.floatingConnections[placeholderInfo.id] = jpc;\n                    // only register for the target endpoint; we will not be dragging the source at any time\n                    // before this connection is either discarded or made into a permanent connection.\n                    _ju.addToList(params.endpointsByElement, placeholderInfo.id, this._jsPlumb.floatingEndpoint);\n                    // tell jsplumb about it\n                    _jsPlumb.currentlyDragging = true;\n                }.bind(this);\n\n                var stop = function () {\n                    _jsPlumb.setConnectionBeingDragged(false);\n\n                    if (jpc && jpc.endpoints != null) {\n                        // get the actual drop event (decode from library args to stop function)\n                        var originalEvent = _jsPlumb.getDropEvent(arguments);\n                        // unlock the other endpoint (if it is dynamic, it would have been locked at drag start)\n                        var idx = _jsPlumb.getFloatingAnchorIndex(jpc);\n                        jpc.endpoints[idx === 0 ? 1 : 0].anchor.locked = false;\n                        // TODO: Dont want to know about css classes inside jsplumb, ideally.\n                        jpc.removeClass(_jsPlumb.draggingClass);\n\n                        // if we have the floating endpoint then the connection has not been dropped\n                        // on another endpoint.  If it is a new connection we throw it away. If it is an\n                        // existing connection we check to see if we should reattach it, throwing it away\n                        // if not.\n                        if (this._jsPlumb && (jpc.deleteConnectionNow || jpc.endpoints[idx] == this._jsPlumb.floatingEndpoint)) {\n                            // 6a. if the connection was an existing one...\n                            if (existingJpc && jpc.suspendedEndpoint) {\n                                // fix for issue35, thanks Sylvain Gizard: when firing the detach event make sure the\n                                // floating endpoint has been replaced.\n                                if (idx === 0) {\n                                    jpc.floatingElement = jpc.source;\n                                    jpc.floatingId = jpc.sourceId;\n                                    jpc.floatingEndpoint = jpc.endpoints[0];\n                                    jpc.floatingIndex = 0;\n                                    jpc.source = existingJpcParams[0];\n                                    jpc.sourceId = existingJpcParams[1];\n                                } else {\n                                    // keep a copy of the floating element; the anchor manager will want to clean up.\n                                    jpc.floatingElement = jpc.target;\n                                    jpc.floatingId = jpc.targetId;\n                                    jpc.floatingEndpoint = jpc.endpoints[1];\n                                    jpc.floatingIndex = 1;\n                                    jpc.target = existingJpcParams[0];\n                                    jpc.targetId = existingJpcParams[1];\n                                }\n\n                                var fe = this._jsPlumb.floatingEndpoint; // store for later removal.\n                                // restore the original scope (issue 57)\n                                _jsPlumb.setDragScope(existingJpcParams[2], existingJpcParams[3]);\n                                jpc.endpoints[idx] = jpc.suspendedEndpoint;\n                                // IF the connection should be reattached, or the other endpoint refuses detach, then\n                                // reset the connection to its original state\n                                //if (jpc.isReattach() || jpc._forceReattach || jpc._forceDetach || !jpc.endpoints[idx === 0 ? 1 : 0].detach({connection:jpc, ignoreTarget:false, forceDetach:false, fireEvent:true, originalEvent:originalEvent, endpointBeingDeleted:true})) {\n                                if (jpc.isReattach() || jpc._forceReattach || jpc._forceDetach || !_jsPlumb.deleteConnection(jpc)) {\n\n                                    jpc.setHover(false);\n                                    jpc._forceDetach = null;\n                                    jpc._forceReattach = null;\n                                    this._jsPlumb.floatingEndpoint.detachFromConnection(jpc);\n                                    jpc.suspendedEndpoint.addConnection(jpc);\n\n                                    // TODO this code is duplicated in lots of places...and there is nothing external\n                                    // in the code; it all refers to the connection itself. we could add a\n                                    // `checkSanity(connection)` method to anchorManager that did this.\n                                    if (idx == 1) {\n                                        _jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.floatingId, jpc.targetId, jpc);\n                                    }\n                                    else {\n                                        _jsPlumb.anchorManager.sourceChanged(jpc.floatingId, jpc.sourceId, jpc, jpc.source);\n                                    }\n\n                                    _jsPlumb.repaint(existingJpcParams[1]);\n                                }\n                                else {\n                                    _jsPlumb.deleteObject({endpoint: fe});\n                                }\n                            }\n                        }\n\n                        // makeTargets sets this flag, to tell us we have been replaced and should delete this object.\n                        if (this.deleteAfterDragStop) {\n                            _jsPlumb.deleteObject({endpoint: this});\n                        }\n                        else {\n                            if (this._jsPlumb) {\n                                 this.paint({recalc: false});\n                            }\n                        }\n\n                        // although the connection is no longer valid, there are use cases where this is useful.\n                        _jsPlumb.fire(\"connectionDragStop\", jpc, originalEvent);\n                        // fire this event to give people more fine-grained control (connectionDragStop fires a lot)\n                        if (jpc.pending) {\n                            _jsPlumb.fire(\"connectionAborted\", jpc, originalEvent);\n                        }\n                        // tell jsplumb that dragging is finished.\n                        _jsPlumb.currentlyDragging = false;\n                        jpc.suspendedElement = null;\n                        jpc.suspendedEndpoint = null;\n                        jpc = null;\n                    }\n\n                    // if no endpoints, jpc already cleaned up. but still we want to ensure we're reset properly.\n                    // remove the element associated with the floating endpoint\n                    // (and its associated floating endpoint and visual artefacts)\n                    if (placeholderInfo && placeholderInfo.element) {\n                        _jsPlumb.remove(placeholderInfo.element, false, false);\n                    }\n                    // remove the inplace copy\n                    if (inPlaceCopy) {\n                        _jsPlumb.deleteObject({endpoint: inPlaceCopy});\n                    }\n\n                    if (this._jsPlumb) {\n                        // make our canvas visible (TODO: hand off to library; we should not know about DOM)\n                        this.canvas.style.visibility = \"visible\";\n                        // unlock our anchor\n                        this.anchor.locked = false;\n                        // clear floating anchor.\n                        this._jsPlumb.floatingEndpoint = null;\n                    }\n\n                }.bind(this);\n\n                dragOptions = _jp.extend(defaultOpts, dragOptions);\n                dragOptions.scope = this.scope || dragOptions.scope;\n                dragOptions[beforeStartEvent] = _ju.wrap(dragOptions[beforeStartEvent], beforeStart, false);\n                dragOptions[startEvent] = _ju.wrap(dragOptions[startEvent], start, false);\n                // extracted drag handler function so can be used by makeSource\n                dragOptions[dragEvent] = _ju.wrap(dragOptions[dragEvent], _dragHandler.drag);\n                dragOptions[stopEvent] = _ju.wrap(dragOptions[stopEvent], stop);\n                dragOptions.multipleDrop = false;\n\n                dragOptions.canDrag = function () {\n                    return this.isSource || this.isTemporarySource || /*(this.isTarget && */this.connections.length > 0/*)*/;\n                }.bind(this);\n\n                _jsPlumb.initDraggable(this.canvas, dragOptions, \"internal\");\n\n                this.canvas._jsPlumbRelatedElement = this.element;\n\n                draggingInitialised = true;\n            }\n        };\n\n        var ep = params.endpoint || this._jsPlumb.instance.Defaults.Endpoint || _jp.Defaults.Endpoint;\n        this.setEndpoint(ep, true);\n        var anchorParamsToUse = params.anchor ? params.anchor : params.anchors ? params.anchors : (_jsPlumb.Defaults.Anchor || \"Top\");\n        this.setAnchor(anchorParamsToUse, true);\n\n        // finally, set type if it was provided\n        var type = [ \"default\", (params.type || \"\")].join(\" \");\n        this.addType(type, params.data, true);\n        this.canvas = this.endpoint.canvas;\n        this.canvas._jsPlumb = this;\n\n        this.initDraggable();\n\n        // pulled this out into a function so we can reuse it for the inPlaceCopy canvas; you can now drop detached connections\n        // back onto the endpoint you detached it from.\n        var _initDropTarget = function (canvas, isTransient, endpoint, referenceEndpoint) {\n\n            if (_jp.isDropSupported(this.element)) {\n                var dropOptions = params.dropOptions || _jsPlumb.Defaults.DropOptions || _jp.Defaults.DropOptions;\n                dropOptions = _jp.extend({}, dropOptions);\n                dropOptions.scope = dropOptions.scope || this.scope;\n                var dropEvent = _jp.dragEvents.drop,\n                    overEvent = _jp.dragEvents.over,\n                    outEvent = _jp.dragEvents.out,\n                    _ep = this,\n                    drop = _jsPlumb.EndpointDropHandler({\n                        getEndpoint: function () {\n                            return _ep;\n                        },\n                        jsPlumb: _jsPlumb,\n                        enabled: function () {\n                            return endpoint != null ? endpoint.isEnabled() : true;\n                        },\n                        isFull: function () {\n                            return endpoint.isFull();\n                        },\n                        element: this.element,\n                        elementId: this.elementId,\n                        isSource: this.isSource,\n                        isTarget: this.isTarget,\n                        addClass: function (clazz) {\n                            _ep.addClass(clazz);\n                        },\n                        removeClass: function (clazz) {\n                            _ep.removeClass(clazz);\n                        },\n                        isDropAllowed: function () {\n                            return _ep.isDropAllowed.apply(_ep, arguments);\n                        },\n                        reference:referenceEndpoint,\n                        isRedrop:function(jpc, dhParams) {\n                            return jpc.suspendedEndpoint && dhParams.reference && (jpc.suspendedEndpoint.id === dhParams.reference.id);\n                        }\n                    });\n\n                dropOptions[dropEvent] = _ju.wrap(dropOptions[dropEvent], drop, true);\n                dropOptions[overEvent] = _ju.wrap(dropOptions[overEvent], function () {\n                    var draggable = _jp.getDragObject(arguments),\n                        id = _jsPlumb.getAttribute(_jp.getElement(draggable), \"dragId\"),\n                        _jpc = _jsPlumb.floatingConnections[id];\n\n                    if (_jpc != null) {\n                        var idx = _jsPlumb.getFloatingAnchorIndex(_jpc);\n                        // here we should fire the 'over' event if we are a target and this is a new connection,\n                        // or we are the same as the floating endpoint.\n                        var _cont = (this.isTarget && idx !== 0) || (_jpc.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == _jpc.suspendedEndpoint.id);\n                        if (_cont) {\n                            var bb = _jsPlumb.checkCondition(\"checkDropAllowed\", {\n                                sourceEndpoint: _jpc.endpoints[idx],\n                                targetEndpoint: this,\n                                connection: _jpc\n                            });\n                            this[(bb ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointDropAllowedClass);\n                            this[(bb ? \"remove\" : \"add\") + \"Class\"](_jsPlumb.endpointDropForbiddenClass);\n                            _jpc.endpoints[idx].anchor.over(this.anchor, this);\n                        }\n                    }\n                }.bind(this));\n\n                dropOptions[outEvent] = _ju.wrap(dropOptions[outEvent], function () {\n                    var draggable = _jp.getDragObject(arguments),\n                        id = draggable == null ? null : _jsPlumb.getAttribute(_jp.getElement(draggable), \"dragId\"),\n                        _jpc = id ? _jsPlumb.floatingConnections[id] : null;\n\n                    if (_jpc != null) {\n                        var idx = _jsPlumb.getFloatingAnchorIndex(_jpc);\n                        var _cont = (this.isTarget && idx !== 0) || (_jpc.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == _jpc.suspendedEndpoint.id);\n                        if (_cont) {\n                            this.removeClass(_jsPlumb.endpointDropAllowedClass);\n                            this.removeClass(_jsPlumb.endpointDropForbiddenClass);\n                            _jpc.endpoints[idx].anchor.out();\n                        }\n                    }\n                }.bind(this));\n\n                _jsPlumb.initDroppable(canvas, dropOptions, \"internal\", isTransient);\n            }\n        }.bind(this);\n\n        // Initialise the endpoint's canvas as a drop target. The drop handler will take care of the logic of whether\n        // something can actually be dropped.\n        if (!this.anchor.isFloating)\n            _initDropTarget(this.canvas, !(params._transient || this.anchor.isFloating), this, params.reference);\n\n\n        return this;\n    };\n\n    _ju.extend(_jp.Endpoint, _jp.OverlayCapableJsPlumbUIComponent, {\n\n        setVisible: function (v, doNotChangeConnections, doNotNotifyOtherEndpoint) {\n            this._jsPlumb.visible = v;\n            if (this.canvas) this.canvas.style.display = v ? \"block\" : \"none\";\n            this[v ? \"showOverlays\" : \"hideOverlays\"]();\n            if (!doNotChangeConnections) {\n                for (var i = 0; i < this.connections.length; i++) {\n                    this.connections[i].setVisible(v);\n                    if (!doNotNotifyOtherEndpoint) {\n                        var oIdx = this === this.connections[i].endpoints[0] ? 1 : 0;\n                        // only change the other endpoint if this is its only connection.\n                        if (this.connections[i].endpoints[oIdx].connections.length == 1) this.connections[i].endpoints[oIdx].setVisible(v, true, true);\n                    }\n                }\n            }\n        },\n        getAttachedElements: function () {\n            return this.connections;\n        },\n        applyType: function (t, doNotRepaint) {\n            this.setPaintStyle(t.endpointStyle || t.paintStyle, doNotRepaint);\n            this.setHoverPaintStyle(t.endpointHoverStyle || t.hoverPaintStyle, doNotRepaint);\n            if (t.maxConnections != null) this._jsPlumb.maxConnections = t.maxConnections;\n            if (t.scope) this.scope = t.scope;\n            _jp.extend(this, t, typeParameters);\n            if (t.cssClass != null && this.canvas) this._jsPlumb.instance.addClass(this.canvas, t.cssClass);\n            _jp.OverlayCapableJsPlumbUIComponent.applyType(this, t);\n        },\n        isEnabled: function () {\n            return this._jsPlumb.enabled;\n        },\n        setEnabled: function (e) {\n            this._jsPlumb.enabled = e;\n        },\n        cleanup: function () {\n            var anchorClass = this._jsPlumb.instance.endpointAnchorClassPrefix + (this._jsPlumb.currentAnchorClass ? \"-\" + this._jsPlumb.currentAnchorClass : \"\");\n            _jp.removeClass(this.element, anchorClass);\n            this.anchor = null;\n            this.endpoint.cleanup(true);\n            this.endpoint.destroy();\n            this.endpoint = null;\n            // drag/drop\n            this._jsPlumb.instance.destroyDraggable(this.canvas, \"internal\");\n            this._jsPlumb.instance.destroyDroppable(this.canvas, \"internal\");\n        },\n        setHover: function (h) {\n            if (this.endpoint && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged())\n                this.endpoint.setHover(h);\n        },\n        isFull: function () {\n            return this._jsPlumb.maxConnections === 0 ? true : !(this.isFloating() || this._jsPlumb.maxConnections < 0 || this.connections.length < this._jsPlumb.maxConnections);\n        },\n        /**\n         * private but needs to be exposed.\n         */\n        isFloating: function () {\n            return this.anchor != null && this.anchor.isFloating;\n        },\n        isConnectedTo: function (endpoint) {\n            var found = false;\n            if (endpoint) {\n                for (var i = 0; i < this.connections.length; i++) {\n                    if (this.connections[i].endpoints[1] == endpoint || this.connections[i].endpoints[0] == endpoint) {\n                        found = true;\n                        break;\n                    }\n                }\n            }\n            return found;\n        },\n        getConnectionCost: function () {\n            return this._jsPlumb.connectionCost;\n        },\n        setConnectionCost: function (c) {\n            this._jsPlumb.connectionCost = c;\n        },\n        areConnectionsDirected: function () {\n            return this._jsPlumb.connectionsDirected;\n        },\n        setConnectionsDirected: function (b) {\n            this._jsPlumb.connectionsDirected = b;\n        },\n        setElementId: function (_elId) {\n            this.elementId = _elId;\n            this.anchor.elementId = _elId;\n        },\n        setReferenceElement: function (_el) {\n            this.element = _jp.getElement(_el);\n        },\n        setDragAllowedWhenFull: function (allowed) {\n            this.dragAllowedWhenFull = allowed;\n        },\n        equals: function (endpoint) {\n            return this.anchor.equals(endpoint.anchor);\n        },\n        getUuid: function () {\n            return this._jsPlumb.uuid;\n        },\n        computeAnchor: function (params) {\n            return this.anchor.compute(params);\n        }\n    });\n\n    root.jsPlumbInstance.prototype.EndpointDropHandler = function (dhParams) {\n        return function (e) {\n\n            var _jsPlumb = dhParams.jsPlumb;\n\n            // remove the classes that are added dynamically. drop is neither forbidden nor allowed now that\n            // the drop is finishing.\n            dhParams.removeClass(_jsPlumb.endpointDropAllowedClass);\n            dhParams.removeClass(_jsPlumb.endpointDropForbiddenClass);\n\n            var originalEvent = _jsPlumb.getDropEvent(arguments),\n                draggable = _jsPlumb.getDragObject(arguments),\n                id = _jsPlumb.getAttribute(draggable, \"dragId\"),\n                elId = _jsPlumb.getAttribute(draggable, \"elId\"),\n                scope = _jsPlumb.getAttribute(draggable, \"originalScope\"),\n                jpc = _jsPlumb.floatingConnections[id];\n\n            // if no active connection, bail.\n            if (jpc == null) return;\n\n            // calculate if this is an existing connection.\n            var existingConnection = jpc.suspendedEndpoint != null;\n\n            // if suspended endpoint exists but has been cleaned up, bail. This means it's an existing connection\n            // that has been detached and will shortly be discarded.\n            if (existingConnection && jpc.suspendedEndpoint._jsPlumb == null) return;\n\n            // get the drop endpoint. for a normal connection this is just the one that would replace the currently\n            // floating endpoint. for a makeTarget this is a new endpoint that is created on drop. But we leave that to\n            // the handler to figure out.\n            var _ep = dhParams.getEndpoint(jpc);\n\n            // If we're not given an endpoint to use, bail.\n            if (_ep == null) return;\n\n            // if this is a drop back where the connection came from, mark it force reattach and\n            // return; the stop handler will reattach. without firing an event.\n            if (dhParams.isRedrop(jpc, dhParams)) {\n                jpc._forceReattach = true;\n                jpc.setHover(false);\n                if (dhParams.maybeCleanup) dhParams.maybeCleanup(_ep);\n                return;\n            }\n\n            // ensure we dont bother trying to drop sources on non-source eps, and same for target.\n            var idx = _jsPlumb.getFloatingAnchorIndex(jpc);\n            if ((idx === 0 && !dhParams.isSource)|| (idx === 1 && !dhParams.isTarget)){\n                if (dhParams.maybeCleanup) dhParams.maybeCleanup(_ep);\n                return;\n            }\n\n            if (dhParams.onDrop) dhParams.onDrop(jpc);\n\n            // restore the original scope if necessary (issue 57)\n            if (scope) _jsPlumb.setDragScope(draggable, scope);\n\n            // if the target of the drop is full, fire an event (we abort below)\n            // makeTarget: keep.\n            var isFull = dhParams.isFull(e);\n            if (isFull) {\n                _ep.fire(\"maxConnections\", {\n                    endpoint: this,\n                    connection: jpc,\n                    maxConnections: _ep._jsPlumb.maxConnections\n                }, originalEvent);\n            }\n            //\n            // if endpoint enabled, not full, and matches the index of the floating endpoint...\n            if (!isFull &&  dhParams.enabled()) {\n                var _doContinue = true;\n\n                // before testing for beforeDrop, reset the connection's source/target to be the actual DOM elements\n                // involved (that is, stash any temporary stuff used for dragging. but we need to keep it around in\n                // order that the anchor manager can clean things up properly).\n                if (idx === 0) {\n                    jpc.floatingElement = jpc.source;\n                    jpc.floatingId = jpc.sourceId;\n                    jpc.floatingEndpoint = jpc.endpoints[0];\n                    jpc.floatingIndex = 0;\n                    jpc.source = dhParams.element;\n                    jpc.sourceId = dhParams.elementId;\n                } else {\n                    jpc.floatingElement = jpc.target;\n                    jpc.floatingId = jpc.targetId;\n                    jpc.floatingEndpoint = jpc.endpoints[1];\n                    jpc.floatingIndex = 1;\n                    jpc.target = dhParams.element;\n                    jpc.targetId = dhParams.elementId;\n                }\n\n                // if this is an existing connection and detach is not allowed we won't continue. The connection's\n                // endpoints have been reinstated; everything is back to how it was.\n                if (existingConnection && jpc.suspendedEndpoint.id != _ep.id) {\n\n                    if (!jpc.isDetachAllowed(jpc) || !jpc.endpoints[idx].isDetachAllowed(jpc) || !jpc.suspendedEndpoint.isDetachAllowed(jpc) || !_jsPlumb.checkCondition(\"beforeDetach\", jpc))\n                        _doContinue = false;\n                }\n\n// ------------ wrap the execution path in a function so we can support asynchronous beforeDrop\n\n                var continueFunction = function (optionalData) {\n                    // remove this jpc from the current endpoint, which is a floating endpoint that we will\n                    // subsequently discard.\n                    jpc.endpoints[idx].detachFromConnection(jpc);\n\n                    // if there's a suspended endpoint, detach it from the connection.\n                    if (jpc.suspendedEndpoint) jpc.suspendedEndpoint.detachFromConnection(jpc);\n\n                    jpc.endpoints[idx] = _ep;\n                    _ep.addConnection(jpc);\n\n                    // copy our parameters in to the connection:\n                    var params = _ep.getParameters();\n                    for (var aParam in params)\n                        jpc.setParameter(aParam, params[aParam]);\n\n                    if (!existingConnection) {\n                        // if not an existing connection and\n                        if (params.draggable)\n                            _jsPlumb.initDraggable(this.element, dragOptions, \"internal\", _jsPlumb);\n                    }\n                    else {\n                        var suspendedElementId = jpc.suspendedEndpoint.elementId;\n                        _jsPlumb.fireMoveEvent({\n                            index: idx,\n                            originalSourceId: idx === 0 ? suspendedElementId : jpc.sourceId,\n                            newSourceId: idx === 0 ? _ep.elementId : jpc.sourceId,\n                            originalTargetId: idx == 1 ? suspendedElementId : jpc.targetId,\n                            newTargetId: idx == 1 ? _ep.elementId : jpc.targetId,\n                            originalSourceEndpoint: idx === 0 ? jpc.suspendedEndpoint : jpc.endpoints[0],\n                            newSourceEndpoint: idx === 0 ? _ep : jpc.endpoints[0],\n                            originalTargetEndpoint: idx == 1 ? jpc.suspendedEndpoint : jpc.endpoints[1],\n                            newTargetEndpoint: idx == 1 ? _ep : jpc.endpoints[1],\n                            connection: jpc\n                        }, originalEvent);\n                    }\n\n                    if (idx == 1) {\n                        _jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.floatingId, jpc.targetId, jpc);\n                    }\n                    else {\n                        _jsPlumb.anchorManager.sourceChanged(jpc.floatingId, jpc.sourceId, jpc, jpc.source);\n                    }\n\n                    // when makeSource has uniqueEndpoint:true, we want to create connections with new endpoints\n                    // that are subsequently deleted. So makeSource sets `finalEndpoint`, which is the Endpoint to\n                    // which the connection should be attached. The `detachFromConnection` call below results in the\n                    // temporary endpoint being cleaned up.\n                    if (jpc.endpoints[0].finalEndpoint) {\n                        var _toDelete = jpc.endpoints[0];\n                        _toDelete.detachFromConnection(jpc);\n                        jpc.endpoints[0] = jpc.endpoints[0].finalEndpoint;\n                        jpc.endpoints[0].addConnection(jpc);\n                    }\n\n                    // if optionalData was given, merge it onto the connection's data.\n                    if (_ju.isObject(optionalData)) {\n                        jpc.mergeData(optionalData);\n                    }\n                    // finalise will inform the anchor manager and also add to\n                    // connectionsByScope if necessary.\n                    _jsPlumb.finaliseConnection(jpc, null, originalEvent, false);\n                    jpc.setHover(false);\n\n                }.bind(this);\n\n                var dontContinueFunction = function () {\n                    // otherwise just put it back on the endpoint it was on before the drag.\n                    if (jpc.suspendedEndpoint) {\n                        jpc.endpoints[idx] = jpc.suspendedEndpoint;\n                        jpc.setHover(false);\n                        jpc._forceDetach = true;\n                        if (idx === 0) {\n                            jpc.source = jpc.suspendedEndpoint.element;\n                            jpc.sourceId = jpc.suspendedEndpoint.elementId;\n                        } else {\n                            jpc.target = jpc.suspendedEndpoint.element;\n                            jpc.targetId = jpc.suspendedEndpoint.elementId;\n                        }\n                        jpc.suspendedEndpoint.addConnection(jpc);\n\n                        // TODO checkSanity\n                        if (idx == 1) {\n                            _jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.floatingId, jpc.targetId, jpc);\n                        }\n                        else {\n                            _jsPlumb.anchorManager.sourceChanged(jpc.floatingId, jpc.sourceId, jpc, jpc.source);\n                        }\n\n                        _jsPlumb.repaint(jpc.sourceId);\n                        jpc._forceDetach = false;\n                    }\n                };\n\n// --------------------------------------\n                // now check beforeDrop.  this will be available only on Endpoints that are setup to\n                // have a beforeDrop condition (although, secretly, under the hood all Endpoints and\n                // the Connection have them, because they are on jsPlumbUIComponent.  shhh!), because\n                // it only makes sense to have it on a target endpoint.\n                _doContinue = _doContinue && dhParams.isDropAllowed(jpc.sourceId, jpc.targetId, jpc.scope, jpc, _ep);// && jpc.pending;\n\n                if (_doContinue) {\n                    continueFunction(_doContinue);\n                    return true;\n                }\n                else {\n                    dontContinueFunction();\n                }\n            }\n\n            if (dhParams.maybeCleanup) dhParams.maybeCleanup(_ep);\n\n            _jsPlumb.currentlyDragging = false;\n        };\n    };\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the code for Connections.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * https://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this,\n        _jp = root.jsPlumb,\n        _ju = root.jsPlumbUtil;\n\n    var makeConnector = function (_jsPlumb, renderMode, connectorName, connectorArgs, forComponent) {\n            if (!_jsPlumb.Defaults.DoNotThrowErrors && _jp.Connectors[renderMode][connectorName] == null)\n                throw { msg: \"jsPlumb: unknown connector type '\" + connectorName + \"'\" };\n\n            return new _jp.Connectors[renderMode][connectorName](connectorArgs, forComponent);\n        },\n        _makeAnchor = function (anchorParams, elementId, _jsPlumb) {\n            return (anchorParams) ? _jsPlumb.makeAnchor(anchorParams, elementId, _jsPlumb) : null;\n        },\n        _updateConnectedClass = function (conn, element, _jsPlumb, remove) {\n            if (element != null) {\n                element._jsPlumbConnections = element._jsPlumbConnections || {};\n                if (remove)\n                    delete element._jsPlumbConnections[conn.id];\n                else\n                    element._jsPlumbConnections[conn.id] = true;\n\n                if (_ju.isEmpty(element._jsPlumbConnections)) {\n                    _jsPlumb.removeClass(element, _jsPlumb.connectedClass);\n                }\n                else\n                    _jsPlumb.addClass(element, _jsPlumb.connectedClass);\n            }\n        };\n\n    _jp.Connection = function (params) {\n        var _newEndpoint = params.newEndpoint;\n\n        this.id = params.id;\n        this.connector = null;\n        this.idPrefix = \"_jsplumb_c_\";\n        this.defaultLabelLocation = 0.5;\n        this.defaultOverlayKeys = [\"Overlays\", \"ConnectionOverlays\"];\n        // if a new connection is the result of moving some existing connection, params.previousConnection\n        // will have that Connection in it. listeners for the jsPlumbConnection event can look for that\n        // member and take action if they need to.\n        this.previousConnection = params.previousConnection;\n        this.source = _jp.getElement(params.source);\n        this.target = _jp.getElement(params.target);\n        // sourceEndpoint and targetEndpoint override source/target, if they are present. but \n        // source is not overridden if the Endpoint has declared it is not the final target of a connection;\n        // instead we use the source that the Endpoint declares will be the final source element.\n        if (params.sourceEndpoint) this.source = params.sourceEndpoint.getElement();\n        if (params.targetEndpoint) this.target = params.targetEndpoint.getElement();\n\n        _jp.OverlayCapableJsPlumbUIComponent.apply(this, arguments);\n\n        this.sourceId = this._jsPlumb.instance.getId(this.source);\n        this.targetId = this._jsPlumb.instance.getId(this.target);\n        this.scope = params.scope; // scope may have been passed in to the connect call. if it wasn't, we will pull it from the source endpoint, after having initialised the endpoints.            \n        this.endpoints = [];\n        this.endpointStyles = [];\n\n        var _jsPlumb = this._jsPlumb.instance;\n\n        _jsPlumb.manage(this.sourceId, this.source);\n        _jsPlumb.manage(this.targetId, this.target);\n\n        this._jsPlumb.visible = true;\n        this._jsPlumb.editable = params.editable === true;\n        this._jsPlumb.params = {\n            cssClass: params.cssClass,\n            container: params.container,\n            \"pointer-events\": params[\"pointer-events\"],\n            editorParams: params.editorParams,\n            overlays: params.overlays\n        };\n        this._jsPlumb.lastPaintedAt = null;\n\n        // listen to mouseover and mouseout events passed from the container delegate.\n        this.bind(\"mouseover\", function () {\n            this.setHover(true);\n        }.bind(this));\n        this.bind(\"mouseout\", function () {\n            this.setHover(false);\n        }.bind(this));\n\n        this.editableRequested = params.editable !== false;\n        this.setEditable = function(e) {\n            return this.connector ? this.connector.setEditable(e) : false;\n        };\n        this.isEditable = function() { return this.connector ? this.connector.isEditable() : false; };\n        this.isEditing = function() { return this.connector ? this.connector.isEditing() : false; };\n\n// INITIALISATION CODE\n\n        this.makeEndpoint = function (isSource, el, elId, ep) {\n            elId = elId || this._jsPlumb.instance.getId(el);\n            return this.prepareEndpoint(_jsPlumb, _newEndpoint, this, ep, isSource ? 0 : 1, params, el, elId);\n        };\n\n        // if type given, get the endpoint definitions mapping to that type from the jsplumb instance, and use those.\n        // we apply types at the end of this constructor but endpoints are only honoured in a type definition at\n        // create time.\n        if (params.type) {\n            params.endpoints = params.endpoints || this._jsPlumb.instance.deriveEndpointAndAnchorSpec(params.type).endpoints;\n        }\n\n        var eS = this.makeEndpoint(true, this.source, this.sourceId, params.sourceEndpoint),\n            eT = this.makeEndpoint(false, this.target, this.targetId, params.targetEndpoint);\n\n        if (eS) _ju.addToList(params.endpointsByElement, this.sourceId, eS);\n        if (eT) _ju.addToList(params.endpointsByElement, this.targetId, eT);\n        // if scope not set, set it to be the scope for the source endpoint.\n        if (!this.scope) this.scope = this.endpoints[0].scope;\n\n        // if explicitly told to (or not to) delete endpoints when empty, override endpoint's preferences\n        if (params.deleteEndpointsOnEmpty != null) {\n            this.endpoints[0].setDeleteOnEmpty(params.deleteEndpointsOnEmpty);\n            this.endpoints[1].setDeleteOnEmpty(params.deleteEndpointsOnEmpty);\n        }\n//        else {\n//            // otherwise, unless the endpoints say otherwise, mark them for deletion.\n//            if (!this.endpoints[0]._doNotDeleteOnDetach) this.endpoints[0]._deleteOnDetach = true;\n//            if (!this.endpoints[1]._doNotDeleteOnDetach) this.endpoints[1]._deleteOnDetach = true;\n//        }\n\n// -------------------------- DEFAULT TYPE ---------------------------------------------\n\n        // DETACHABLE\n        var _detachable = _jsPlumb.Defaults.ConnectionsDetachable;\n        if (params.detachable === false) _detachable = false;\n        if (this.endpoints[0].connectionsDetachable === false) _detachable = false;\n        if (this.endpoints[1].connectionsDetachable === false) _detachable = false;\n        // REATTACH\n        var _reattach = params.reattach || this.endpoints[0].reattachConnections || this.endpoints[1].reattachConnections || _jsPlumb.Defaults.ReattachConnections;\n\n        this.appendToDefaultType({\n            detachable: _detachable,\n            reattach: _reattach,\n            paintStyle:this.endpoints[0].connectorStyle || this.endpoints[1].connectorStyle || params.paintStyle || _jsPlumb.Defaults.PaintStyle || _jp.Defaults.PaintStyle,\n            hoverPaintStyle:this.endpoints[0].connectorHoverStyle || this.endpoints[1].connectorHoverStyle || params.hoverPaintStyle || _jsPlumb.Defaults.HoverPaintStyle || _jp.Defaults.HoverPaintStyle\n        });\n\n\n        var _suspendedAt = _jsPlumb.getSuspendedAt();\n        if (!_jsPlumb.isSuspendDrawing()) {\n            // paint the endpoints\n            var myInfo = _jsPlumb.getCachedData(this.sourceId),\n                myOffset = myInfo.o, myWH = myInfo.s,\n                otherInfo = _jsPlumb.getCachedData(this.targetId),\n                otherOffset = otherInfo.o,\n                otherWH = otherInfo.s,\n                initialTimestamp = _suspendedAt || _jsPlumb.timestamp(),\n                anchorLoc = this.endpoints[0].anchor.compute({\n                    xy: [ myOffset.left, myOffset.top ], wh: myWH, element: this.endpoints[0],\n                    elementId: this.endpoints[0].elementId,\n                    txy: [ otherOffset.left, otherOffset.top ], twh: otherWH, tElement: this.endpoints[1],\n                    timestamp: initialTimestamp\n                });\n\n            this.endpoints[0].paint({ anchorLoc: anchorLoc, timestamp: initialTimestamp });\n\n            anchorLoc = this.endpoints[1].anchor.compute({\n                xy: [ otherOffset.left, otherOffset.top ], wh: otherWH, element: this.endpoints[1],\n                elementId: this.endpoints[1].elementId,\n                txy: [ myOffset.left, myOffset.top ], twh: myWH, tElement: this.endpoints[0],\n                timestamp: initialTimestamp\n            });\n            this.endpoints[1].paint({ anchorLoc: anchorLoc, timestamp: initialTimestamp });\n        }\n\n        this.getTypeDescriptor = function () {\n            return \"connection\";\n        };\n        this.getAttachedElements = function () {\n            return this.endpoints;\n        };\n\n        this.isDetachable = function () {\n            return this._jsPlumb.detachable === true;\n        };\n        this.setDetachable = function (detachable) {\n            this._jsPlumb.detachable = detachable === true;\n        };\n        this.isReattach = function () {\n            return this._jsPlumb.reattach === true || this.endpoints[0].reattachConnections === true || this.endpoints[1].reattachConnections === true;\n        };\n        this.setReattach = function (reattach) {\n            this._jsPlumb.reattach = reattach === true;\n        };\n\n//        this[\"delete\"] = function() {\n//            this.endpoints[0].detachFromConnection(this);\n//            this.endpoints[1].detachFromConnection(this);\n//            params.deleteConnection(this);\n//        };\n\n// END INITIALISATION CODE\n\n\n// COST + DIRECTIONALITY\n        // if cost not supplied, try to inherit from source endpoint\n        this._jsPlumb.cost = params.cost || this.endpoints[0].getConnectionCost();\n        this._jsPlumb.directed = params.directed;\n        // inherit directed flag if set no source endpoint\n        if (params.directed == null) this._jsPlumb.directed = this.endpoints[0].areConnectionsDirected();\n// END COST + DIRECTIONALITY\n\n// PARAMETERS\n        // merge all the parameters objects into the connection.  parameters set\n        // on the connection take precedence; then source endpoint params, then\n        // finally target endpoint params.\n        var _p = _jp.extend({}, this.endpoints[1].getParameters());\n        _jp.extend(_p, this.endpoints[0].getParameters());\n        _jp.extend(_p, this.getParameters());\n        this.setParameters(_p);\n// END PARAMETERS\n\n// PAINTING\n\n        this.setConnector(this.endpoints[0].connector || this.endpoints[1].connector || params.connector || _jsPlumb.Defaults.Connector || _jp.Defaults.Connector, true);\n        if (params.geometry) {\n            this.connector.setGeometry(params.geometry);\n        }\n        var data = params.data == null || !_ju.isObject(params.data) ? {} : params.data;\n        this.getData = function() { return data; };\n        this.setData = function(d) { data = d || {}; };\n        this.mergeData = function(d) { data = _jp.extend(data, d); };\n\n        // the very last thing we do is apply types, if there are any.\n        var _types = [ \"default\", this.endpoints[0].connectionType, this.endpoints[1].connectionType,  params.type ].join(\" \");\n        if (/[^\\s]/.test(_types))\n            this.addType(_types, params.data, true);\n\n        this.updateConnectedClass();\n\n// END PAINTING    \n    };\n\n    _ju.extend(_jp.Connection, _jp.OverlayCapableJsPlumbUIComponent, {\n        applyType: function (t, doNotRepaint, typeMap) {\n\n            // none of these things result in the creation of objects so can be ignored.\n            if (t.detachable != null) this.setDetachable(t.detachable);\n            if (t.reattach != null) this.setReattach(t.reattach);\n            if (t.scope) this.scope = t.scope;\n\n            if (t.cssClass != null && this.canvas) this._jsPlumb.instance.addClass(this.canvas, t.cssClass);\n\n            var _anchors = null;\n            // this also results in the creation of objects.\n            if (t.anchor) {\n                // note that even if the param was anchor, we store `anchors`.\n                _anchors = this.getCachedTypeItem(\"anchors\", typeMap.anchor);\n                if (_anchors == null) {\n                    _anchors = [ this._jsPlumb.instance.makeAnchor(t.anchor), this._jsPlumb.instance.makeAnchor(t.anchor) ];\n                    this.cacheTypeItem(\"anchors\", _anchors, typeMap.anchor);\n                }\n            }\n            else if (t.anchors) {\n                _anchors = this.getCachedTypeItem(\"anchors\", typeMap.anchors);\n                if (_anchors == null) {\n                    _anchors = [\n                        this._jsPlumb.instance.makeAnchor(t.anchors[0]),\n                        this._jsPlumb.instance.makeAnchor(t.anchors[1])\n                    ];\n                    this.cacheTypeItem(\"anchors\", _anchors, typeMap.anchors);\n                }\n            }\n            if (_anchors != null) {\n                this.endpoints[0].anchor = _anchors[0];\n                this.endpoints[1].anchor = _anchors[1];\n                if (this.endpoints[1].anchor.isDynamic) this._jsPlumb.instance.repaint(this.endpoints[1].elementId);\n            }\n\n            _jp.OverlayCapableJsPlumbUIComponent.applyType(this, t);\n        },\n        addClass: function (c, informEndpoints) {\n            if (informEndpoints) {\n                this.endpoints[0].addClass(c);\n                this.endpoints[1].addClass(c);\n                if (this.suspendedEndpoint) this.suspendedEndpoint.addClass(c);\n            }\n            if (this.connector) {\n                this.connector.addClass(c);\n            }\n        },\n        removeClass: function (c, informEndpoints) {\n            if (informEndpoints) {\n                this.endpoints[0].removeClass(c);\n                this.endpoints[1].removeClass(c);\n                if (this.suspendedEndpoint) this.suspendedEndpoint.removeClass(c);\n            }\n            if (this.connector) {\n                this.connector.removeClass(c);\n            }\n        },\n        isVisible: function () {\n            return this._jsPlumb.visible;\n        },\n        setVisible: function (v) {\n            this._jsPlumb.visible = v;\n            if (this.connector)\n                this.connector.setVisible(v);\n            this.repaint();\n        },\n        cleanup: function () {\n            this.updateConnectedClass(true);\n            this.endpoints = null;\n            this.source = null;\n            this.target = null;\n            if (this.connector != null) {\n                this.connector.cleanup(true);\n                this.connector.destroy(true);\n            }\n            this.connector = null;\n        },\n        updateConnectedClass:function(remove) {\n            if (this._jsPlumb) {\n                _updateConnectedClass(this, this.source, this._jsPlumb.instance, remove);\n                _updateConnectedClass(this, this.target, this._jsPlumb.instance, remove);\n            }\n        },\n        setHover: function (state) {\n            if (this.connector && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged()) {\n                this.connector.setHover(state);\n                root.jsPlumb[state ? \"addClass\" : \"removeClass\"](this.source, this._jsPlumb.instance.hoverSourceClass);\n                root.jsPlumb[state ? \"addClass\" : \"removeClass\"](this.target, this._jsPlumb.instance.hoverTargetClass);\n            }\n        },\n        getUuids:function() {\n            return [ this.endpoints[0].getUuid(), this.endpoints[1].getUuid() ];\n        },\n        getCost: function () {\n            return this._jsPlumb ? this._jsPlumb.cost : -Infinity;\n        },\n        setCost: function (c) {\n            this._jsPlumb.cost = c;\n        },\n        isDirected: function () {\n            return this._jsPlumb.directed === true;\n        },\n        getConnector: function () {\n            return this.connector;\n        },\n        getGeometry : function() { return this.connector ? this.connector.getGeometry() : null; },\n        setGeometry : function(g) { if (this.connector) this.connector.setGeometry(g); },\n        prepareConnector:function(connectorSpec, typeId) {\n            var connectorArgs = {\n                    _jsPlumb: this._jsPlumb.instance,\n                    cssClass: (this._jsPlumb.params.cssClass || \"\") + (this.isEditable() ? this._jsPlumb.instance.editableConnectorClass : \"\"),\n                    container: this._jsPlumb.params.container,\n                    \"pointer-events\": this._jsPlumb.params[\"pointer-events\"],\n                    editable:this.editableRequested\n                },\n                renderMode = this._jsPlumb.instance.getRenderMode(),\n                connector;\n\n            if (_ju.isString(connectorSpec))\n                connector = makeConnector(this._jsPlumb.instance, renderMode, connectorSpec, connectorArgs, this); // lets you use a string as shorthand.\n            else if (_ju.isArray(connectorSpec)) {\n                if (connectorSpec.length == 1)\n                    connector = makeConnector(this._jsPlumb.instance, renderMode, connectorSpec[0], connectorArgs, this);\n                else\n                    connector = makeConnector(this._jsPlumb.instance, renderMode, connectorSpec[0], _ju.merge(connectorSpec[1], connectorArgs), this);\n            }\n            if (typeId != null) connector.typeId = typeId;\n            return connector;\n        },\n        setPreparedConnector: function(connector, doNotRepaint, doNotChangeListenerComponent, typeId) {\n\n            var previous, previousClasses = \"\";\n            // the connector will not be cleaned up if it was set as part of a type, because `typeId` will be set on it\n            // and we havent passed in `true` for \"force\" here.\n            if (this.connector != null) {\n                previous = this.connector;\n                previousClasses = previous.getClass();\n                this.connector.cleanup();\n                this.connector.destroy();\n            }\n\n            this.connector = connector;\n            if (typeId) {\n                this.cacheTypeItem(\"connector\", connector, typeId);\n            }\n\n            this.canvas = this.connector.canvas;\n            this.bgCanvas = this.connector.bgCanvas;\n\n            // put classes from prior connector onto the canvas\n            this.addClass(previousClasses);\n\n            // new: instead of binding listeners per connector, we now just have one delegate on the container.\n            // so for that handler we set the connection as the '_jsPlumb' member of the canvas element, and\n            // bgCanvas, if it exists, which it does right now in the VML renderer, so it won't from v 2.0.0 onwards.\n            if (this.canvas) this.canvas._jsPlumb = this;\n            if (this.bgCanvas) this.bgCanvas._jsPlumb = this;\n\n            if (previous != null) {\n                var o = this.getOverlays();\n                for (var i = 0; i < o.length; i++) {\n                    if (o[i].transfer) o[i].transfer(this.connector);\n                }\n            }\n\n            if (!doNotChangeListenerComponent) this.setListenerComponent(this.connector);\n            if (!doNotRepaint) this.repaint();\n        },\n        setConnector: function (connectorSpec, doNotRepaint, doNotChangeListenerComponent, typeId) {\n            var connector = this.prepareConnector(connectorSpec, typeId);\n            this.setPreparedConnector(connector, doNotRepaint, doNotChangeListenerComponent, typeId);\n        },\n        paint: function (params) {\n\n            if (!this._jsPlumb.instance.isSuspendDrawing() && this._jsPlumb.visible) {\n                params = params || {};\n                var timestamp = params.timestamp,\n                // if the moving object is not the source we must transpose the two references.\n                    swap = false,\n                    tId = swap ? this.sourceId : this.targetId, sId = swap ? this.targetId : this.sourceId,\n                    tIdx = swap ? 0 : 1, sIdx = swap ? 1 : 0;\n\n                if (timestamp == null || timestamp != this._jsPlumb.lastPaintedAt) {\n                    var sourceInfo = this._jsPlumb.instance.updateOffset({elId:sId}).o,\n                        targetInfo = this._jsPlumb.instance.updateOffset({elId:tId}).o,\n                        sE = this.endpoints[sIdx], tE = this.endpoints[tIdx];\n\n                    var sAnchorP = sE.anchor.getCurrentLocation({xy: [sourceInfo.left, sourceInfo.top], wh: [sourceInfo.width, sourceInfo.height], element: sE, timestamp: timestamp}),\n                        tAnchorP = tE.anchor.getCurrentLocation({xy: [targetInfo.left, targetInfo.top], wh: [targetInfo.width, targetInfo.height], element: tE, timestamp: timestamp});\n\n                    this.connector.resetBounds();\n\n                    this.connector.compute({\n                        sourcePos: sAnchorP,\n                        targetPos: tAnchorP,\n                        sourceEndpoint: this.endpoints[sIdx],\n                        targetEndpoint: this.endpoints[tIdx],\n                        \"stroke-width\": this._jsPlumb.paintStyleInUse.strokeWidth,\n                        sourceInfo: sourceInfo,\n                        targetInfo: targetInfo\n                    });\n\n                    var overlayExtents = { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity };\n\n                    // compute overlays. we do this first so we can get their placements, and adjust the\n                    // container if needs be (if an overlay would be clipped)\n                    for (var i in this._jsPlumb.overlays) {\n                        if (this._jsPlumb.overlays.hasOwnProperty(i)) {\n                            var o = this._jsPlumb.overlays[i];\n                            if (o.isVisible()) {\n                                this._jsPlumb.overlayPlacements[i] = o.draw(this.connector, this._jsPlumb.paintStyleInUse, this.getAbsoluteOverlayPosition(o));\n                                overlayExtents.minX = Math.min(overlayExtents.minX, this._jsPlumb.overlayPlacements[i].minX);\n                                overlayExtents.maxX = Math.max(overlayExtents.maxX, this._jsPlumb.overlayPlacements[i].maxX);\n                                overlayExtents.minY = Math.min(overlayExtents.minY, this._jsPlumb.overlayPlacements[i].minY);\n                                overlayExtents.maxY = Math.max(overlayExtents.maxY, this._jsPlumb.overlayPlacements[i].maxY);\n                            }\n                        }\n                    }\n\n                    var lineWidth = parseFloat(this._jsPlumb.paintStyleInUse.strokeWidth || 1) / 2,\n                        outlineWidth = parseFloat(this._jsPlumb.paintStyleInUse.strokeWidth || 0),\n                        extents = {\n                            xmin: Math.min(this.connector.bounds.minX - (lineWidth + outlineWidth), overlayExtents.minX),\n                            ymin: Math.min(this.connector.bounds.minY - (lineWidth + outlineWidth), overlayExtents.minY),\n                            xmax: Math.max(this.connector.bounds.maxX + (lineWidth + outlineWidth), overlayExtents.maxX),\n                            ymax: Math.max(this.connector.bounds.maxY + (lineWidth + outlineWidth), overlayExtents.maxY)\n                        };\n                    // paint the connector.\n                    this.connector.paint(this._jsPlumb.paintStyleInUse, null, extents);\n                    // and then the overlays\n                    for (var j in this._jsPlumb.overlays) {\n                        if (this._jsPlumb.overlays.hasOwnProperty(j)) {\n                            var p = this._jsPlumb.overlays[j];\n                            if (p.isVisible()) {\n                                p.paint(this._jsPlumb.overlayPlacements[j], extents);\n                            }\n                        }\n                    }\n                }\n                this._jsPlumb.lastPaintedAt = timestamp;\n            }\n        },\n        repaint: function (params) {\n            params = params || {};\n            this.paint({ elId: this.sourceId, recalc: !(params.recalc === false), timestamp: params.timestamp});\n        },\n        prepareEndpoint: function (_jsPlumb, _newEndpoint, conn, existing, index, params, element, elementId) {\n            var e;\n            if (existing) {\n                conn.endpoints[index] = existing;\n                existing.addConnection(conn);\n            } else {\n                if (!params.endpoints) params.endpoints = [ null, null ];\n                var ep = params.endpoints[index] || params.endpoint || _jsPlumb.Defaults.Endpoints[index] || _jp.Defaults.Endpoints[index] || _jsPlumb.Defaults.Endpoint || _jp.Defaults.Endpoint;\n                if (!params.endpointStyles) params.endpointStyles = [ null, null ];\n                if (!params.endpointHoverStyles) params.endpointHoverStyles = [ null, null ];\n                var es = params.endpointStyles[index] || params.endpointStyle || _jsPlumb.Defaults.EndpointStyles[index] || _jp.Defaults.EndpointStyles[index] || _jsPlumb.Defaults.EndpointStyle || _jp.Defaults.EndpointStyle;\n                // Endpoints derive their fill from the connector's stroke, if no fill was specified.\n                if (es.fill == null && params.paintStyle != null)\n                    es.fill = params.paintStyle.stroke;\n\n                if (es.outlineStroke == null && params.paintStyle != null)\n                    es.outlineStroke = params.paintStyle.outlineStroke;\n                if (es.outlineWidth == null && params.paintStyle != null)\n                    es.outlineWidth = params.paintStyle.outlineWidth;\n\n                var ehs = params.endpointHoverStyles[index] || params.endpointHoverStyle || _jsPlumb.Defaults.EndpointHoverStyles[index] || _jp.Defaults.EndpointHoverStyles[index] || _jsPlumb.Defaults.EndpointHoverStyle || _jp.Defaults.EndpointHoverStyle;\n                // endpoint hover fill style is derived from connector's hover stroke style\n                if (params.hoverPaintStyle != null) {\n                    if (ehs == null) ehs = {};\n                    if (ehs.fill == null) {\n                        ehs.fill = params.hoverPaintStyle.stroke;\n                    }\n                }\n                var a = params.anchors ? params.anchors[index] :\n                        params.anchor ? params.anchor :\n                            _makeAnchor(_jsPlumb.Defaults.Anchors[index], elementId, _jsPlumb) ||\n                            _makeAnchor(_jp.Defaults.Anchors[index], elementId, _jsPlumb) ||\n                            _makeAnchor(_jsPlumb.Defaults.Anchor, elementId, _jsPlumb) ||\n                            _makeAnchor(_jp.Defaults.Anchor, elementId, _jsPlumb),\n                    u = params.uuids ? params.uuids[index] : null;\n\n                e = _newEndpoint({\n                    paintStyle: es, hoverPaintStyle: ehs, endpoint: ep, connections: [ conn ],\n                    uuid: u, anchor: a, source: element, scope: params.scope,\n                    reattach: params.reattach || _jsPlumb.Defaults.ReattachConnections,\n                    detachable: params.detachable || _jsPlumb.Defaults.ConnectionsDetachable\n                });\n                if (existing == null) {\n                    e.setDeleteOnEmpty(true);\n                }\n                conn.endpoints[index] = e;\n\n                if (params.drawEndpoints === false) e.setVisible(false, true, true);\n\n            }\n            return e;\n        }\n\n    }); // END Connection class            \n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the code for creating and manipulating anchors.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n\n    var root = this,\n        _ju = root.jsPlumbUtil,\n        _jp = root.jsPlumb;\n\n    //\n    // manages anchors for all elements.\n    //\n    _jp.AnchorManager = function (params) {\n        var _amEndpoints = {},\n            continuousAnchorLocations = {},\n            userDefinedContinuousAnchorLocations = {},\n            continuousAnchorOrientations = {},\n            Orientation = { HORIZONTAL: \"horizontal\", VERTICAL: \"vertical\", DIAGONAL: \"diagonal\", IDENTITY: \"identity\" },\n            axes = [\"left\", \"top\", \"right\", \"bottom\"],\n            connectionsByElementId = {},\n            self = this,\n            anchorLists = {},\n            jsPlumbInstance = params.jsPlumbInstance,\n            floatingConnections = {},\n            calculateOrientation = function (sourceId, targetId, sd, td, sourceAnchor, targetAnchor) {\n\n                if (sourceId === targetId) return {\n                    orientation: Orientation.IDENTITY,\n                    a: [\"top\", \"top\"]\n                };\n\n                var theta = Math.atan2((td.centery - sd.centery), (td.centerx - sd.centerx)),\n                    theta2 = Math.atan2((sd.centery - td.centery), (sd.centerx - td.centerx));\n\n// --------------------------------------------------------------------------------------\n\n                // improved face calculation. get midpoints of each face for source and target, then put in an array with all combinations of\n                // source/target faces. sort this array by distance between midpoints. the entry at index 0 is our preferred option. we can\n                // go through the array one by one until we find an entry in which each requested face is supported.\n                var candidates = [], midpoints = { };\n                (function (types, dim) {\n                    for (var i = 0; i < types.length; i++) {\n                        midpoints[types[i]] = {\n                            \"left\": [ dim[i].left, dim[i].centery ],\n                            \"right\": [ dim[i].right, dim[i].centery ],\n                            \"top\": [ dim[i].centerx, dim[i].top ],\n                            \"bottom\": [ dim[i].centerx , dim[i].bottom]\n                        };\n                    }\n                })([ \"source\", \"target\" ], [ sd, td ]);\n\n                for (var sf = 0; sf < axes.length; sf++) {\n                    for (var tf = 0; tf < axes.length; tf++) {\n                        candidates.push({\n                            source: axes[sf],\n                            target: axes[tf],\n                            dist: Biltong.lineLength(midpoints.source[axes[sf]], midpoints.target[axes[tf]])\n                        });\n                    }\n                }\n\n                candidates.sort(function (a, b) {\n                    return a.dist < b.dist ? -1 : a.dist > b.dist ? 1 : 0;\n                });\n\n                // now go through this list and try to get an entry that satisfies both (there will be one, unless one of the anchors\n                // declares no available faces)\n                var sourceEdge = candidates[0].source, targetEdge = candidates[0].target;\n                for (var i = 0; i < candidates.length; i++) {\n\n                    if (!sourceAnchor.isContinuous || sourceAnchor.isEdgeSupported(candidates[i].source))\n                        sourceEdge = candidates[i].source;\n                    else\n                        sourceEdge = null;\n\n                    if (!targetAnchor.isContinuous || targetAnchor.isEdgeSupported(candidates[i].target))\n                        targetEdge = candidates[i].target;\n                    else {\n                        targetEdge = null;\n                    }\n\n                    if (sourceEdge != null && targetEdge != null) break;\n                }\n\n// --------------------------------------------------------------------------------------\n\n                return {\n                    a: [ sourceEdge, targetEdge ],\n                    theta: theta,\n                    theta2: theta2\n                };\n            },\n        // used by placeAnchors function\n            placeAnchorsOnLine = function (desc, elementDimensions, elementPosition, connections, horizontal, otherMultiplier, reverse) {\n                var a = [], step = elementDimensions[horizontal ? 0 : 1] / (connections.length + 1);\n\n                for (var i = 0; i < connections.length; i++) {\n                    var val = (i + 1) * step, other = otherMultiplier * elementDimensions[horizontal ? 1 : 0];\n                    if (reverse)\n                        val = elementDimensions[horizontal ? 0 : 1] - val;\n\n                    var dx = (horizontal ? val : other), x = elementPosition[0] + dx, xp = dx / elementDimensions[0],\n                        dy = (horizontal ? other : val), y = elementPosition[1] + dy, yp = dy / elementDimensions[1];\n\n                    a.push([ x, y, xp, yp, connections[i][1], connections[i][2] ]);\n                }\n\n                return a;\n            },\n        // used by edgeSortFunctions\n            currySort = function (reverseAngles) {\n                return function (a, b) {\n                    var r = true;\n                    if (reverseAngles) {\n                        r = a[0][0] < b[0][0];\n                    }\n                    else {\n                        r = a[0][0] > b[0][0];\n                    }\n                    return r === false ? -1 : 1;\n                };\n            },\n        // used by edgeSortFunctions\n            leftSort = function (a, b) {\n                // first get adjusted values\n                var p1 = a[0][0] < 0 ? -Math.PI - a[0][0] : Math.PI - a[0][0],\n                    p2 = b[0][0] < 0 ? -Math.PI - b[0][0] : Math.PI - b[0][0];\n                if (p1 > p2) return 1;\n                else return -1;\n            },\n        // used by placeAnchors\n            edgeSortFunctions = {\n                \"top\": function (a, b) {\n                    return a[0] > b[0] ? 1 : -1;\n                },\n                \"right\": currySort(true),\n                \"bottom\": currySort(true),\n                \"left\": leftSort\n            },\n        // used by placeAnchors\n            _sortHelper = function (_array, _fn) {\n                return _array.sort(_fn);\n            },\n        // used by AnchorManager.redraw\n            placeAnchors = function (elementId, _anchorLists) {\n                var cd = jsPlumbInstance.getCachedData(elementId), sS = cd.s, sO = cd.o,\n                    placeSomeAnchors = function (desc, elementDimensions, elementPosition, unsortedConnections, isHorizontal, otherMultiplier, orientation) {\n                        if (unsortedConnections.length > 0) {\n                            var sc = _sortHelper(unsortedConnections, edgeSortFunctions[desc]), // puts them in order based on the target element's pos on screen\n                                reverse = desc === \"right\" || desc === \"top\",\n                                anchors = placeAnchorsOnLine(desc, elementDimensions,\n                                    elementPosition, sc,\n                                    isHorizontal, otherMultiplier, reverse);\n\n                            // takes a computed anchor position and adjusts it for parent offset and scroll, then stores it.\n                            var _setAnchorLocation = function (endpoint, anchorPos) {\n                                continuousAnchorLocations[endpoint.id] = [ anchorPos[0], anchorPos[1], anchorPos[2], anchorPos[3] ];\n                                continuousAnchorOrientations[endpoint.id] = orientation;\n                            };\n\n                            for (var i = 0; i < anchors.length; i++) {\n                                var c = anchors[i][4], weAreSource = c.endpoints[0].elementId === elementId, weAreTarget = c.endpoints[1].elementId === elementId;\n                                if (weAreSource)\n                                    _setAnchorLocation(c.endpoints[0], anchors[i]);\n                                if (weAreTarget)\n                                    _setAnchorLocation(c.endpoints[1], anchors[i]);\n                            }\n                        }\n                    };\n\n                placeSomeAnchors(\"bottom\", sS, [sO.left, sO.top], _anchorLists.bottom, true, 1, [0, 1]);\n                placeSomeAnchors(\"top\", sS, [sO.left, sO.top], _anchorLists.top, true, 0, [0, -1]);\n                placeSomeAnchors(\"left\", sS, [sO.left, sO.top], _anchorLists.left, false, 0, [-1, 0]);\n                placeSomeAnchors(\"right\", sS, [sO.left, sO.top], _anchorLists.right, false, 1, [1, 0]);\n            };\n\n        this.reset = function () {\n            _amEndpoints = {};\n            connectionsByElementId = {};\n            anchorLists = {};\n        };\n        this.addFloatingConnection = function (key, conn) {\n            floatingConnections[key] = conn;\n        };\n        this.removeFloatingConnection = function (key) {\n            delete floatingConnections[key];\n        };\n        this.newConnection = function (conn) {\n            var sourceId = conn.sourceId, targetId = conn.targetId,\n                ep = conn.endpoints,\n                doRegisterTarget = true,\n                registerConnection = function (otherIndex, otherEndpoint, otherAnchor, elId, c) {\n                    if ((sourceId == targetId) && otherAnchor.isContinuous) {\n                        // remove the target endpoint's canvas.  we dont need it.\n                        conn._jsPlumb.instance.removeElement(ep[1].canvas);\n                        doRegisterTarget = false;\n                    }\n                    _ju.addToList(connectionsByElementId, elId, [c, otherEndpoint, otherAnchor.constructor == _jp.DynamicAnchor]);\n                };\n\n            registerConnection(0, ep[0], ep[0].anchor, targetId, conn);\n            if (doRegisterTarget)\n                registerConnection(1, ep[1], ep[1].anchor, sourceId, conn);\n        };\n        var removeEndpointFromAnchorLists = function (endpoint) {\n            (function (list, eId) {\n                if (list) {  // transient anchors dont get entries in this list.\n                    var f = function (e) {\n                        return e[4] == eId;\n                    };\n                    _ju.removeWithFunction(list.top, f);\n                    _ju.removeWithFunction(list.left, f);\n                    _ju.removeWithFunction(list.bottom, f);\n                    _ju.removeWithFunction(list.right, f);\n                }\n            })(anchorLists[endpoint.elementId], endpoint.id);\n        };\n        this.connectionDetached = function (connInfo, doNotRedraw) {\n            var connection = connInfo.connection || connInfo,\n                sourceId = connInfo.sourceId,\n                targetId = connInfo.targetId,\n                ep = connection.endpoints,\n                removeConnection = function (otherIndex, otherEndpoint, otherAnchor, elId, c) {\n                   _ju.removeWithFunction(connectionsByElementId[elId], function (_c) {\n                        return _c[0].id == c.id;\n                    });\n                };\n\n            removeConnection(1, ep[1], ep[1].anchor, sourceId, connection);\n            removeConnection(0, ep[0], ep[0].anchor, targetId, connection);\n            if (connection.floatingId) {\n                removeConnection(connection.floatingIndex, connection.floatingEndpoint, connection.floatingEndpoint.anchor, connection.floatingId, connection);\n                removeEndpointFromAnchorLists(connection.floatingEndpoint);\n            }\n\n            // remove from anchorLists            \n            removeEndpointFromAnchorLists(connection.endpoints[0]);\n            removeEndpointFromAnchorLists(connection.endpoints[1]);\n\n            if (!doNotRedraw) {\n                self.redraw(connection.sourceId);\n                if (connection.targetId !== connection.sourceId)\n                    self.redraw(connection.targetId);\n            }\n        };\n        this.add = function (endpoint, elementId) {\n            _ju.addToList(_amEndpoints, elementId, endpoint);\n        };\n        this.changeId = function (oldId, newId) {\n            connectionsByElementId[newId] = connectionsByElementId[oldId];\n            _amEndpoints[newId] = _amEndpoints[oldId];\n            delete connectionsByElementId[oldId];\n            delete _amEndpoints[oldId];\n        };\n        this.getConnectionsFor = function (elementId) {\n            return connectionsByElementId[elementId] || [];\n        };\n        this.getEndpointsFor = function (elementId) {\n            return _amEndpoints[elementId] || [];\n        };\n        this.deleteEndpoint = function (endpoint) {\n            _ju.removeWithFunction(_amEndpoints[endpoint.elementId], function (e) {\n                return e.id == endpoint.id;\n            });\n            removeEndpointFromAnchorLists(endpoint);\n        };\n        this.clearFor = function (elementId) {\n            delete _amEndpoints[elementId];\n            _amEndpoints[elementId] = [];\n        };\n        // updates the given anchor list by either updating an existing anchor's info, or adding it. this function\n        // also removes the anchor from its previous list, if the edge it is on has changed.\n        // all connections found along the way (those that are connected to one of the faces this function\n        // operates on) are added to the connsToPaint list, as are their endpoints. in this way we know to repaint\n        // them wthout having to calculate anything else about them.\n        var _updateAnchorList = function (lists, theta, order, conn, aBoolean, otherElId, idx, reverse, edgeId, elId, connsToPaint, endpointsToPaint) {\n            // first try to find the exact match, but keep track of the first index of a matching element id along the way.s\n            var exactIdx = -1,\n                firstMatchingElIdx = -1,\n                endpoint = conn.endpoints[idx],\n                endpointId = endpoint.id,\n                oIdx = [1, 0][idx],\n                values = [\n                    [ theta, order ],\n                    conn,\n                    aBoolean,\n                    otherElId,\n                    endpointId\n                ],\n                listToAddTo = lists[edgeId],\n                listToRemoveFrom = endpoint._continuousAnchorEdge ? lists[endpoint._continuousAnchorEdge] : null,\n                i,\n                candidate;\n\n            if (listToRemoveFrom) {\n                var rIdx = _ju.findWithFunction(listToRemoveFrom, function (e) {\n                    return e[4] == endpointId;\n                });\n                if (rIdx != -1) {\n                    listToRemoveFrom.splice(rIdx, 1);\n                    // get all connections from this list\n                    for (i = 0; i < listToRemoveFrom.length; i++) {\n                        candidate = listToRemoveFrom[i][1];\n                        _ju.addWithFunction(connsToPaint, candidate, function (c) {\n                            return c.id == candidate.id;\n                        });\n                        _ju.addWithFunction(endpointsToPaint, listToRemoveFrom[i][1].endpoints[idx], function (e) {\n                            return e.id == candidate.endpoints[idx].id;\n                        });\n                        _ju.addWithFunction(endpointsToPaint, listToRemoveFrom[i][1].endpoints[oIdx], function (e) {\n                            return e.id == candidate.endpoints[oIdx].id;\n                        });\n                    }\n                }\n            }\n\n            for (i = 0; i < listToAddTo.length; i++) {\n                candidate = listToAddTo[i][1];\n                if (params.idx == 1 && listToAddTo[i][3] === otherElId && firstMatchingElIdx == -1)\n                    firstMatchingElIdx = i;\n                _ju.addWithFunction(connsToPaint, candidate, function (c) {\n                    return c.id == candidate.id;\n                });\n                _ju.addWithFunction(endpointsToPaint, listToAddTo[i][1].endpoints[idx], function (e) {\n                    return e.id == candidate.endpoints[idx].id;\n                });\n                _ju.addWithFunction(endpointsToPaint, listToAddTo[i][1].endpoints[oIdx], function (e) {\n                    return e.id == candidate.endpoints[oIdx].id;\n                });\n            }\n            if (exactIdx != -1) {\n                listToAddTo[exactIdx] = values;\n            }\n            else {\n                var insertIdx = reverse ? firstMatchingElIdx != -1 ? firstMatchingElIdx : 0 : listToAddTo.length; // of course we will get this from having looked through the array shortly.\n                listToAddTo.splice(insertIdx, 0, values);\n            }\n\n            // store this for next time.\n            endpoint._continuousAnchorEdge = edgeId;\n        };\n\n        //\n        // find the entry in an endpoint's list for this connection and update its target endpoint\n        // with the current target in the connection.\n        // This method and sourceChanged need to be folder into one.\n        //\n        this.updateOtherEndpoint = function (sourceElId, oldTargetId, newTargetId, connection) {\n            var sIndex = _ju.findWithFunction(connectionsByElementId[sourceElId], function (i) {\n                    return i[0].id === connection.id;\n                }),\n                tIndex = _ju.findWithFunction(connectionsByElementId[oldTargetId], function (i) {\n                    return i[0].id === connection.id;\n                });\n\n            // update or add data for source\n            if (sIndex != -1) {\n                connectionsByElementId[sourceElId][sIndex][0] = connection;\n                connectionsByElementId[sourceElId][sIndex][1] = connection.endpoints[1];\n                connectionsByElementId[sourceElId][sIndex][2] = connection.endpoints[1].anchor.constructor == _jp.DynamicAnchor;\n            }\n\n            // remove entry for previous target (if there)\n            if (tIndex > -1) {\n                connectionsByElementId[oldTargetId].splice(tIndex, 1);\n                // add entry for new target\n                _ju.addToList(connectionsByElementId, newTargetId, [connection, connection.endpoints[0], connection.endpoints[0].anchor.constructor == _jp.DynamicAnchor]);\n            }\n\n            connection.updateConnectedClass();\n        };\n\n        //\n        // notification that the connection given has changed source from the originalId to the newId.\n        // This involves:\n        // 1. removing the connection from the list of connections stored for the originalId\n        // 2. updating the source information for the target of the connection\n        // 3. re-registering the connection in connectionsByElementId with the newId\n        //\n        this.sourceChanged = function (originalId, newId, connection, newElement) {\n            if (originalId !== newId) {\n\n                connection.sourceId = newId;\n                connection.source = newElement;\n\n                // remove the entry that points from the old source to the target\n                _ju.removeWithFunction(connectionsByElementId[originalId], function (info) {\n                    return info[0].id === connection.id;\n                });\n                // find entry for target and update it\n                var tIdx = _ju.findWithFunction(connectionsByElementId[connection.targetId], function (i) {\n                    return i[0].id === connection.id;\n                });\n                if (tIdx > -1) {\n                    connectionsByElementId[connection.targetId][tIdx][0] = connection;\n                    connectionsByElementId[connection.targetId][tIdx][1] = connection.endpoints[0];\n                    connectionsByElementId[connection.targetId][tIdx][2] = connection.endpoints[0].anchor.constructor == _jp.DynamicAnchor;\n                }\n                // add entry for new source\n                _ju.addToList(connectionsByElementId, newId, [connection, connection.endpoints[1], connection.endpoints[1].anchor.constructor == _jp.DynamicAnchor]);\n\n                // TODO SP not final on this yet. when a user drags an existing connection and it turns into a self\n                // loop, then this code hides the target endpoint (by removing it from the DOM) But I think this should\n                // occur only if the anchor is Continuous\n                if (connection.endpoints[1].anchor.isContinuous) {\n                    if (connection.source === connection.target) {\n                        connection._jsPlumb.instance.removeElement(connection.endpoints[1].canvas);\n                    }\n                    else {\n                        if (connection.endpoints[1].canvas.parentNode == null) {\n                            connection._jsPlumb.instance.appendElement(connection.endpoints[1].canvas);\n                        }\n                    }\n                }\n\n                connection.updateConnectedClass();\n            }\n        };\n\n        //\n        // moves the given endpoint from `currentId` to `element`.\n        // This involves:\n        //\n        // 1. changing the key in _amEndpoints under which the endpoint is stored\n        // 2. changing the source or target values in all of the endpoint's connections\n        // 3. changing the array in connectionsByElementId in which the endpoint's connections\n        //    are stored (done by either sourceChanged or updateOtherEndpoint)\n        //\n        this.rehomeEndpoint = function (ep, currentId, element) {\n            var eps = _amEndpoints[currentId] || [],\n                elementId = jsPlumbInstance.getId(element);\n\n            if (elementId !== currentId) {\n                var idx = eps.indexOf(ep);\n                if (idx > -1) {\n                    var _ep = eps.splice(idx, 1)[0];\n                    self.add(_ep, elementId);\n                }\n            }\n\n            for (var i = 0; i < ep.connections.length; i++) {\n                if (ep.connections[i].sourceId == currentId) {\n                    //ep.connections[i].sourceId = ep.elementId;\n                    //ep.connections[i].source = ep.element;\n                    self.sourceChanged(currentId, ep.elementId, ep.connections[i], ep.element);\n                }\n                else if (ep.connections[i].targetId == currentId) {\n                    ep.connections[i].targetId = ep.elementId;\n                    ep.connections[i].target = ep.element;\n                    self.updateOtherEndpoint(ep.connections[i].sourceId, currentId, ep.elementId, ep.connections[i]);\n                }\n            }\n        };\n\n        this.redraw = function (elementId, ui, timestamp, offsetToUI, clearEdits, doNotRecalcEndpoint) {\n\n            if (!jsPlumbInstance.isSuspendDrawing()) {\n                // get all the endpoints for this element\n                var ep = _amEndpoints[elementId] || [],\n                    endpointConnections = connectionsByElementId[elementId] || [],\n                    connectionsToPaint = [],\n                    endpointsToPaint = [],\n                    anchorsToUpdate = [];\n\n                timestamp = timestamp || jsPlumbInstance.timestamp();\n                // offsetToUI are values that would have been calculated in the dragManager when registering\n                // an endpoint for an element that had a parent (somewhere in the hierarchy) that had been\n                // registered as draggable.\n                offsetToUI = offsetToUI || {left: 0, top: 0};\n                if (ui) {\n                    ui = {\n                        left: ui.left + offsetToUI.left,\n                        top: ui.top + offsetToUI.top\n                    };\n                }\n\n                // valid for one paint cycle.\n                var myOffset = jsPlumbInstance.updateOffset({ elId: elementId, offset: ui, recalc: false, timestamp: timestamp }),\n                    orientationCache = {};\n\n                // actually, first we should compute the orientation of this element to all other elements to which\n                // this element is connected with a continuous anchor (whether both ends of the connection have\n                // a continuous anchor or just one)\n\n                for (var i = 0; i < endpointConnections.length; i++) {\n                    var conn = endpointConnections[i][0],\n                        sourceId = conn.sourceId,\n                        targetId = conn.targetId,\n                        sourceContinuous = conn.endpoints[0].anchor.isContinuous,\n                        targetContinuous = conn.endpoints[1].anchor.isContinuous;\n\n                    if (sourceContinuous || targetContinuous) {\n                        var oKey = sourceId + \"_\" + targetId,\n                            o = orientationCache[oKey],\n                            oIdx = conn.sourceId == elementId ? 1 : 0;\n\n                        if (sourceContinuous && !anchorLists[sourceId]) anchorLists[sourceId] = { top: [], right: [], bottom: [], left: [] };\n                        if (targetContinuous && !anchorLists[targetId]) anchorLists[targetId] = { top: [], right: [], bottom: [], left: [] };\n\n                        if (elementId != targetId) jsPlumbInstance.updateOffset({ elId: targetId, timestamp: timestamp });\n                        if (elementId != sourceId) jsPlumbInstance.updateOffset({ elId: sourceId, timestamp: timestamp });\n\n                        var td = jsPlumbInstance.getCachedData(targetId),\n                            sd = jsPlumbInstance.getCachedData(sourceId);\n\n                        if (targetId == sourceId && (sourceContinuous || targetContinuous)) {\n                            // here we may want to improve this by somehow determining the face we'd like\n                            // to put the connector on.  ideally, when drawing, the face should be calculated\n                            // by determining which face is closest to the point at which the mouse button\n                            // was released.  for now, we're putting it on the top face.\n                            _updateAnchorList( anchorLists[sourceId], -Math.PI / 2, 0, conn, false, targetId, 0, false, \"top\", sourceId, connectionsToPaint, endpointsToPaint);\n                            _updateAnchorList( anchorLists[targetId], -Math.PI / 2, 0, conn, false, sourceId, 1, false, \"top\", targetId, connectionsToPaint, endpointsToPaint);\n                        }\n                        else {\n                            if (!o) {\n                                o = calculateOrientation(sourceId, targetId, sd.o, td.o, conn.endpoints[0].anchor, conn.endpoints[1].anchor);\n                                orientationCache[oKey] = o;\n                                // this would be a performance enhancement, but the computed angles need to be clamped to\n                                //the (-PI/2 -> PI/2) range in order for the sorting to work properly.\n                                /*  orientationCache[oKey2] = {\n                                 orientation:o.orientation,\n                                 a:[o.a[1], o.a[0]],\n                                 theta:o.theta + Math.PI,\n                                 theta2:o.theta2 + Math.PI\n                                 };*/\n                            }\n                            if (sourceContinuous) _updateAnchorList(anchorLists[sourceId], o.theta, 0, conn, false, targetId, 0, false, o.a[0], sourceId, connectionsToPaint, endpointsToPaint);\n                            if (targetContinuous) _updateAnchorList(anchorLists[targetId], o.theta2, -1, conn, true, sourceId, 1, true, o.a[1], targetId, connectionsToPaint, endpointsToPaint);\n                        }\n\n                        if (sourceContinuous) _ju.addWithFunction(anchorsToUpdate, sourceId, function (a) {\n                            return a === sourceId;\n                        });\n                        if (targetContinuous) _ju.addWithFunction(anchorsToUpdate, targetId, function (a) {\n                            return a === targetId;\n                        });\n                        _ju.addWithFunction(connectionsToPaint, conn, function (c) {\n                            return c.id == conn.id;\n                        });\n                        if ((sourceContinuous && oIdx === 0) || (targetContinuous && oIdx === 1))\n                            _ju.addWithFunction(endpointsToPaint, conn.endpoints[oIdx], function (e) {\n                                return e.id == conn.endpoints[oIdx].id;\n                            });\n                    }\n                }\n\n                // place Endpoints whose anchors are continuous but have no Connections\n                for (i = 0; i < ep.length; i++) {\n                    if (ep[i].connections.length === 0 && ep[i].anchor.isContinuous) {\n                        if (!anchorLists[elementId]) anchorLists[elementId] = { top: [], right: [], bottom: [], left: [] };\n                        _updateAnchorList(anchorLists[elementId], -Math.PI / 2, 0, {endpoints: [ep[i], ep[i]], paint: function () {\n                        }}, false, elementId, 0, false, ep[i].anchor.getDefaultFace(), elementId, connectionsToPaint, endpointsToPaint);\n                        _ju.addWithFunction(anchorsToUpdate, elementId, function (a) {\n                            return a === elementId;\n                        });\n                    }\n                }\n\n\n                // now place all the continuous anchors we need to;\n                for (i = 0; i < anchorsToUpdate.length; i++) {\n                    placeAnchors(anchorsToUpdate[i], anchorLists[anchorsToUpdate[i]]);\n                }\n\n                // now that continuous anchors have been placed, paint all the endpoints for this element\n                // TODO performance: add the endpoint ids to a temp array, and then when iterating in the next\n                // loop, check that we didn't just paint that endpoint. we can probably shave off a few more milliseconds this way.\n                for (i = 0; i < ep.length; i++) {\n                    ep[i].paint({ timestamp: timestamp, offset: myOffset, dimensions: myOffset.s, recalc: doNotRecalcEndpoint !== true });\n                }\n\n                // ... and any other endpoints we came across as a result of the continuous anchors.\n                for (i = 0; i < endpointsToPaint.length; i++) {\n                    var cd = jsPlumbInstance.getCachedData(endpointsToPaint[i].elementId);\n                    endpointsToPaint[i].paint({ timestamp: timestamp, offset: cd, dimensions: cd.s });\n                }\n\n                // paint all the standard and \"dynamic connections\", which are connections whose other anchor is\n                // static and therefore does need to be recomputed; we make sure that happens only one time.\n\n                // TODO we could have compiled a list of these in the first pass through connections; might save some time.\n                for (i = 0; i < endpointConnections.length; i++) {\n                    var otherEndpoint = endpointConnections[i][1];\n                    if (otherEndpoint.anchor.constructor == _jp.DynamicAnchor) {\n                        otherEndpoint.paint({ elementWithPrecedence: elementId, timestamp: timestamp });\n                        _ju.addWithFunction(connectionsToPaint, endpointConnections[i][0], function (c) {\n                            return c.id == endpointConnections[i][0].id;\n                        });\n                        // all the connections for the other endpoint now need to be repainted\n                        for (var k = 0; k < otherEndpoint.connections.length; k++) {\n                            if (otherEndpoint.connections[k] !== endpointConnections[i][0])\n                                _ju.addWithFunction(connectionsToPaint, otherEndpoint.connections[k], function (c) {\n                                    return c.id == otherEndpoint.connections[k].id;\n                                });\n                        }\n                    } else if (otherEndpoint.anchor.constructor == _jp.Anchor) {\n                        _ju.addWithFunction(connectionsToPaint, endpointConnections[i][0], function (c) {\n                            return c.id == endpointConnections[i][0].id;\n                        });\n                    }\n                }\n\n                // paint current floating connection for this element, if there is one.\n                var fc = floatingConnections[elementId];\n                if (fc)\n                    fc.paint({timestamp: timestamp, recalc: false, elId: elementId});\n\n                // paint all the connections\n                for (i = 0; i < connectionsToPaint.length; i++) {\n                    connectionsToPaint[i].paint({elId: elementId, timestamp: timestamp, recalc: false, clearEdits: clearEdits});\n                }\n            }\n        };\n\n        var ContinuousAnchor = function (anchorParams) {\n            _ju.EventGenerator.apply(this);\n            this.type = \"Continuous\";\n            this.isDynamic = true;\n            this.isContinuous = true;\n            var faces = anchorParams.faces || [\"top\", \"right\", \"bottom\", \"left\"],\n                clockwise = !(anchorParams.clockwise === false),\n                availableFaces = { },\n                opposites = { \"top\": \"bottom\", \"right\": \"left\", \"left\": \"right\", \"bottom\": \"top\" },\n                clockwiseOptions = { \"top\": \"right\", \"right\": \"bottom\", \"left\": \"top\", \"bottom\": \"left\" },\n                antiClockwiseOptions = { \"top\": \"left\", \"right\": \"top\", \"left\": \"bottom\", \"bottom\": \"right\" },\n                secondBest = clockwise ? clockwiseOptions : antiClockwiseOptions,\n                lastChoice = clockwise ? antiClockwiseOptions : clockwiseOptions,\n                cssClass = anchorParams.cssClass || \"\";\n\n            for (var i = 0; i < faces.length; i++) {\n                availableFaces[faces[i]] = true;\n            }\n\n            this.getDefaultFace = function () {\n                return faces.length === 0 ? \"top\" : faces[0];\n            };\n\n            // if the given edge is supported, returns it. otherwise looks for a substitute that _is_\n            // supported. if none supported we also return the request edge.\n            this.verifyEdge = function (edge) {\n                if (availableFaces[edge]) return edge;\n                else if (availableFaces[opposites[edge]]) return opposites[edge];\n                else if (availableFaces[secondBest[edge]]) return secondBest[edge];\n                else if (availableFaces[lastChoice[edge]]) return lastChoice[edge];\n                return edge; // we have to give them something.\n            };\n\n            this.isEdgeSupported = function (edge) {\n                return availableFaces[edge] === true;\n            };\n\n            this.compute = function (params) {\n                return userDefinedContinuousAnchorLocations[params.element.id] || continuousAnchorLocations[params.element.id] || [0, 0];\n            };\n            this.getCurrentLocation = function (params) {\n                return userDefinedContinuousAnchorLocations[params.element.id] || continuousAnchorLocations[params.element.id] || [0, 0];\n            };\n            this.getOrientation = function (endpoint) {\n                return continuousAnchorOrientations[endpoint.id] || [0, 0];\n            };\n            this.clearUserDefinedLocation = function () {\n                delete userDefinedContinuousAnchorLocations[anchorParams.elementId];\n            };\n            this.setUserDefinedLocation = function (loc) {\n                userDefinedContinuousAnchorLocations[anchorParams.elementId] = loc;\n            };\n            this.getCssClass = function () {\n                return cssClass;\n            };\n        };\n\n        // continuous anchors\n        jsPlumbInstance.continuousAnchorFactory = {\n            get: function (params) {\n                return new ContinuousAnchor(params);\n            },\n            clear: function (elementId) {\n                delete userDefinedContinuousAnchorLocations[elementId];\n                delete continuousAnchorLocations[elementId];\n            }\n        };\n    };\n\n    /**\n     * Anchors model a position on some element at which an Endpoint may be located.  They began as a first class citizen of jsPlumb, ie. a user\n     * was required to create these themselves, but over time this has been replaced by the concept of referring to them either by name (eg. \"TopMiddle\"),\n     * or by an array describing their coordinates (eg. [ 0, 0.5, 0, -1 ], which is the same as \"TopMiddle\").  jsPlumb now handles all of the\n     * creation of Anchors without user intervention.\n     */\n    _jp.Anchor = function (params) {\n        this.x = params.x || 0;\n        this.y = params.y || 0;\n        this.elementId = params.elementId;\n        this.cssClass = params.cssClass || \"\";\n        this.userDefinedLocation = null;\n        this.orientation = params.orientation || [ 0, 0 ];\n        this.lastReturnValue = null;\n        this.offsets = params.offsets || [ 0, 0 ];\n        this.timestamp = null;\n\n        _ju.EventGenerator.apply(this);\n\n        this.compute = function (params) {\n\n            var xy = params.xy, wh = params.wh, timestamp = params.timestamp;\n\n            if (params.clearUserDefinedLocation)\n                this.userDefinedLocation = null;\n\n            if (timestamp && timestamp === this.timestamp)\n                return this.lastReturnValue;\n\n            if (this.userDefinedLocation != null) {\n                this.lastReturnValue = this.userDefinedLocation;\n            }\n            else {\n                this.lastReturnValue = [ xy[0] + (this.x * wh[0]) + this.offsets[0], xy[1] + (this.y * wh[1]) + this.offsets[1] ];\n            }\n\n            this.timestamp = timestamp;\n            return this.lastReturnValue;\n        };\n\n        this.getCurrentLocation = function (params) {\n            params = params || {};\n            return (this.lastReturnValue == null || (params.timestamp != null && this.timestamp != params.timestamp)) ? this.compute(params) : this.lastReturnValue;\n        };\n    };\n    _ju.extend(_jp.Anchor, _ju.EventGenerator, {\n        equals: function (anchor) {\n            if (!anchor) return false;\n            var ao = anchor.getOrientation(),\n                o = this.getOrientation();\n            return this.x == anchor.x && this.y == anchor.y && this.offsets[0] == anchor.offsets[0] && this.offsets[1] == anchor.offsets[1] && o[0] == ao[0] && o[1] == ao[1];\n        },\n        getUserDefinedLocation: function () {\n            return this.userDefinedLocation;\n        },\n        setUserDefinedLocation: function (l) {\n            this.userDefinedLocation = l;\n        },\n        clearUserDefinedLocation: function () {\n            this.userDefinedLocation = null;\n        },\n        getOrientation: function () {\n            return this.orientation;\n        },\n        getCssClass: function () {\n            return this.cssClass;\n        }\n    });\n\n    /**\n     * An Anchor that floats. its orientation is computed dynamically from\n     * its position relative to the anchor it is floating relative to.  It is used when creating\n     * a connection through drag and drop.\n     *\n     * TODO FloatingAnchor could totally be refactored to extend Anchor just slightly.\n     */\n    _jp.FloatingAnchor = function (params) {\n\n        _jp.Anchor.apply(this, arguments);\n\n        // this is the anchor that this floating anchor is referenced to for\n        // purposes of calculating the orientation.\n        var ref = params.reference,\n            // the canvas this refers to.\n            refCanvas = params.referenceCanvas,\n            size = _jp.getSize(refCanvas),\n            // these are used to store the current relative position of our\n            // anchor wrt the reference anchor. they only indicate\n            // direction, so have a value of 1 or -1 (or, very rarely, 0). these\n            // values are written by the compute method, and read\n            // by the getOrientation method.\n            xDir = 0, yDir = 0,\n            // temporary member used to store an orientation when the floating\n            // anchor is hovering over another anchor.\n            orientation = null,\n            _lastResult = null;\n\n        // clear from parent. we want floating anchor orientation to always be computed.\n        this.orientation = null;\n\n        // set these to 0 each; they are used by certain types of connectors in the loopback case,\n        // when the connector is trying to clear the element it is on. but for floating anchor it's not\n        // very important.\n        this.x = 0;\n        this.y = 0;\n\n        this.isFloating = true;\n\n        this.compute = function (params) {\n            var xy = params.xy,\n                result = [ xy[0] + (size[0] / 2), xy[1] + (size[1] / 2) ]; // return origin of the element. we may wish to improve this so that any object can be the drag proxy.\n            _lastResult = result;\n            return result;\n        };\n\n        this.getOrientation = function (_endpoint) {\n            if (orientation) return orientation;\n            else {\n                var o = ref.getOrientation(_endpoint);\n                // here we take into account the orientation of the other\n                // anchor: if it declares zero for some direction, we declare zero too. this might not be the most awesome. perhaps we can come\n                // up with a better way. it's just so that the line we draw looks like it makes sense. maybe this wont make sense.\n                return [ Math.abs(o[0]) * xDir * -1,\n                        Math.abs(o[1]) * yDir * -1 ];\n            }\n        };\n\n        /**\n         * notification the endpoint associated with this anchor is hovering\n         * over another anchor; we want to assume that anchor's orientation\n         * for the duration of the hover.\n         */\n        this.over = function (anchor, endpoint) {\n            orientation = anchor.getOrientation(endpoint);\n        };\n\n        /**\n         * notification the endpoint associated with this anchor is no\n         * longer hovering over another anchor; we should resume calculating\n         * orientation as we normally do.\n         */\n        this.out = function () {\n            orientation = null;\n        };\n\n        this.getCurrentLocation = function (params) {\n            return _lastResult == null ? this.compute(params) : _lastResult;\n        };\n    };\n    _ju.extend(_jp.FloatingAnchor, _jp.Anchor);\n\n    var _convertAnchor = function (anchor, jsPlumbInstance, elementId) {\n        return anchor.constructor == _jp.Anchor ? anchor : jsPlumbInstance.makeAnchor(anchor, elementId, jsPlumbInstance);\n    };\n\n    /* \n     * A DynamicAnchor is an Anchor that contains a list of other Anchors, which it cycles\n     * through at compute time to find the one that is located closest to\n     * the center of the target element, and returns that Anchor's compute\n     * method result. this causes endpoints to follow each other with\n     * respect to the orientation of their target elements, which is a useful\n     * feature for some applications.\n     * \n     */\n    _jp.DynamicAnchor = function (params) {\n        _jp.Anchor.apply(this, arguments);\n\n        this.isDynamic = true;\n        this.anchors = [];\n        this.elementId = params.elementId;\n        this.jsPlumbInstance = params.jsPlumbInstance;\n\n        for (var i = 0; i < params.anchors.length; i++)\n            this.anchors[i] = _convertAnchor(params.anchors[i], this.jsPlumbInstance, this.elementId);\n\n        this.getAnchors = function () {\n            return this.anchors;\n        };\n        this.locked = false;\n        var _curAnchor = this.anchors.length > 0 ? this.anchors[0] : null,\n            _lastAnchor = _curAnchor,\n            self = this,\n\n        // helper method to calculate the distance between the centers of the two elements.\n            _distance = function (anchor, cx, cy, xy, wh) {\n                var ax = xy[0] + (anchor.x * wh[0]), ay = xy[1] + (anchor.y * wh[1]),\n                    acx = xy[0] + (wh[0] / 2), acy = xy[1] + (wh[1] / 2);\n                return (Math.sqrt(Math.pow(cx - ax, 2) + Math.pow(cy - ay, 2)) +\n                    Math.sqrt(Math.pow(acx - ax, 2) + Math.pow(acy - ay, 2)));\n            },\n        // default method uses distance between element centers.  you can provide your own method in the dynamic anchor\n        // constructor (and also to jsPlumb.makeDynamicAnchor). the arguments to it are four arrays:\n        // xy - xy loc of the anchor's element\n        // wh - anchor's element's dimensions\n        // txy - xy loc of the element of the other anchor in the connection\n        // twh - dimensions of the element of the other anchor in the connection.\n        // anchors - the list of selectable anchors\n            _anchorSelector = params.selector || function (xy, wh, txy, twh, anchors) {\n                var cx = txy[0] + (twh[0] / 2), cy = txy[1] + (twh[1] / 2);\n                var minIdx = -1, minDist = Infinity;\n                for (var i = 0; i < anchors.length; i++) {\n                    var d = _distance(anchors[i], cx, cy, xy, wh);\n                    if (d < minDist) {\n                        minIdx = i + 0;\n                        minDist = d;\n                    }\n                }\n                return anchors[minIdx];\n            };\n\n        this.compute = function (params) {\n            var xy = params.xy, wh = params.wh, txy = params.txy, twh = params.twh;\n\n            this.timestamp = params.timestamp;\n\n            var udl = self.getUserDefinedLocation();\n            if (udl != null) {\n                return udl;\n            }\n\n            // if anchor is locked or an opposite element was not given, we\n            // maintain our state. anchor will be locked\n            // if it is the source of a drag and drop.\n            if (this.locked || txy == null || twh == null)\n                return _curAnchor.compute(params);\n            else\n                params.timestamp = null; // otherwise clear this, i think. we want the anchor to compute.\n\n            _curAnchor = _anchorSelector(xy, wh, txy, twh, this.anchors);\n            this.x = _curAnchor.x;\n            this.y = _curAnchor.y;\n\n            if (_curAnchor != _lastAnchor)\n                this.fire(\"anchorChanged\", _curAnchor);\n\n            _lastAnchor = _curAnchor;\n\n            return _curAnchor.compute(params);\n        };\n\n        this.getCurrentLocation = function (params) {\n            return this.getUserDefinedLocation() || (_curAnchor != null ? _curAnchor.getCurrentLocation(params) : null);\n        };\n\n        this.getOrientation = function (_endpoint) {\n            return _curAnchor != null ? _curAnchor.getOrientation(_endpoint) : [ 0, 0 ];\n        };\n        this.over = function (anchor, endpoint) {\n            if (_curAnchor != null) _curAnchor.over(anchor, endpoint);\n        };\n        this.out = function () {\n            if (_curAnchor != null) _curAnchor.out();\n        };\n\n        this.getCssClass = function () {\n            return (_curAnchor && _curAnchor.getCssClass()) || \"\";\n        };\n    };\n    _ju.extend(_jp.DynamicAnchor, _jp.Anchor);\n\n// -------- basic anchors ------------------    \n    var _curryAnchor = function (x, y, ox, oy, type, fnInit) {\n        _jp.Anchors[type] = function (params) {\n            var a = params.jsPlumbInstance.makeAnchor([ x, y, ox, oy, 0, 0 ], params.elementId, params.jsPlumbInstance);\n            a.type = type;\n            if (fnInit) fnInit(a, params);\n            return a;\n        };\n    };\n\n    _curryAnchor(0.5, 0, 0, -1, \"TopCenter\");\n    _curryAnchor(0.5, 1, 0, 1, \"BottomCenter\");\n    _curryAnchor(0, 0.5, -1, 0, \"LeftMiddle\");\n    _curryAnchor(1, 0.5, 1, 0, \"RightMiddle\");\n\n    _curryAnchor(0.5, 0, 0, -1, \"Top\");\n    _curryAnchor(0.5, 1, 0, 1, \"Bottom\");\n    _curryAnchor(0, 0.5, -1, 0, \"Left\");\n    _curryAnchor(1, 0.5, 1, 0, \"Right\");\n    _curryAnchor(0.5, 0.5, 0, 0, \"Center\");\n    _curryAnchor(1, 0, 0, -1, \"TopRight\");\n    _curryAnchor(1, 1, 0, 1, \"BottomRight\");\n    _curryAnchor(0, 0, 0, -1, \"TopLeft\");\n    _curryAnchor(0, 1, 0, 1, \"BottomLeft\");\n\n// ------- dynamic anchors -------------------    \n\n    // default dynamic anchors chooses from Top, Right, Bottom, Left\n    _jp.Defaults.DynamicAnchors = function (params) {\n        return params.jsPlumbInstance.makeAnchors([\"TopCenter\", \"RightMiddle\", \"BottomCenter\", \"LeftMiddle\"], params.elementId, params.jsPlumbInstance);\n    };\n\n    // default dynamic anchors bound to name 'AutoDefault'\n    _jp.Anchors.AutoDefault = function (params) {\n        var a = params.jsPlumbInstance.makeDynamicAnchor(_jp.Defaults.DynamicAnchors(params));\n        a.type = \"AutoDefault\";\n        return a;\n    };\n\n// ------- continuous anchors -------------------    \n\n    var _curryContinuousAnchor = function (type, faces) {\n        _jp.Anchors[type] = function (params) {\n            var a = params.jsPlumbInstance.makeAnchor([\"Continuous\", { faces: faces }], params.elementId, params.jsPlumbInstance);\n            a.type = type;\n            return a;\n        };\n    };\n\n    _jp.Anchors.Continuous = function (params) {\n        return params.jsPlumbInstance.continuousAnchorFactory.get(params);\n    };\n\n    _curryContinuousAnchor(\"ContinuousLeft\", [\"left\"]);\n    _curryContinuousAnchor(\"ContinuousTop\", [\"top\"]);\n    _curryContinuousAnchor(\"ContinuousBottom\", [\"bottom\"]);\n    _curryContinuousAnchor(\"ContinuousRight\", [\"right\"]);\n\n// ------- position assign anchors -------------------    \n\n    // this anchor type lets you assign the position at connection time.\n    _curryAnchor(0, 0, 0, 0, \"Assign\", function (anchor, params) {\n        // find what to use as the \"position finder\". the user may have supplied a String which represents\n        // the id of a position finder in jsPlumb.AnchorPositionFinders, or the user may have supplied the\n        // position finder as a function.  we find out what to use and then set it on the anchor.\n        var pf = params.position || \"Fixed\";\n        anchor.positionFinder = pf.constructor == String ? params.jsPlumbInstance.AnchorPositionFinders[pf] : pf;\n        // always set the constructor params; the position finder might need them later (the Grid one does,\n        // for example)\n        anchor.constructorParams = params;\n    });\n\n    // these are the default anchor positions finders, which are used by the makeTarget function.  supplying\n    // a position finder argument to that function allows you to specify where the resulting anchor will\n    // be located\n    root.jsPlumbInstance.prototype.AnchorPositionFinders = {\n        \"Fixed\": function (dp, ep, es) {\n            return [ (dp.left - ep.left) / es[0], (dp.top - ep.top) / es[1] ];\n        },\n        \"Grid\": function (dp, ep, es, params) {\n            var dx = dp.left - ep.left, dy = dp.top - ep.top,\n                gx = es[0] / (params.grid[0]), gy = es[1] / (params.grid[1]),\n                mx = Math.floor(dx / gx), my = Math.floor(dy / gy);\n            return [ ((mx * gx) + (gx / 2)) / es[0], ((my * gy) + (gy / 2)) / es[1] ];\n        }\n    };\n\n// ------- perimeter anchors -------------------    \n\n    _jp.Anchors.Perimeter = function (params) {\n        params = params || {};\n        var anchorCount = params.anchorCount || 60,\n            shape = params.shape;\n\n        if (!shape) throw new Error(\"no shape supplied to Perimeter Anchor type\");\n\n        var _circle = function () {\n                var r = 0.5, step = Math.PI * 2 / anchorCount, current = 0, a = [];\n                for (var i = 0; i < anchorCount; i++) {\n                    var x = r + (r * Math.sin(current)),\n                        y = r + (r * Math.cos(current));\n                    a.push([ x, y, 0, 0 ]);\n                    current += step;\n                }\n                return a;\n            },\n            _path = function (segments) {\n                var anchorsPerFace = anchorCount / segments.length, a = [],\n                    _computeFace = function (x1, y1, x2, y2, fractionalLength) {\n                        anchorsPerFace = anchorCount * fractionalLength;\n                        var dx = (x2 - x1) / anchorsPerFace, dy = (y2 - y1) / anchorsPerFace;\n                        for (var i = 0; i < anchorsPerFace; i++) {\n                            a.push([\n                                    x1 + (dx * i),\n                                    y1 + (dy * i),\n                                0,\n                                0\n                            ]);\n                        }\n                    };\n\n                for (var i = 0; i < segments.length; i++)\n                    _computeFace.apply(null, segments[i]);\n\n                return a;\n            },\n            _shape = function (faces) {\n                var s = [];\n                for (var i = 0; i < faces.length; i++) {\n                    s.push([faces[i][0], faces[i][1], faces[i][2], faces[i][3], 1 / faces.length]);\n                }\n                return _path(s);\n            },\n            _rectangle = function () {\n                return _shape([\n                    [ 0, 0, 1, 0 ],\n                    [ 1, 0, 1, 1 ],\n                    [ 1, 1, 0, 1 ],\n                    [ 0, 1, 0, 0 ]\n                ]);\n            };\n\n        var _shapes = {\n                \"Circle\": _circle,\n                \"Ellipse\": _circle,\n                \"Diamond\": function () {\n                    return _shape([\n                        [ 0.5, 0, 1, 0.5 ],\n                        [ 1, 0.5, 0.5, 1 ],\n                        [ 0.5, 1, 0, 0.5 ],\n                        [ 0, 0.5, 0.5, 0 ]\n                    ]);\n                },\n                \"Rectangle\": _rectangle,\n                \"Square\": _rectangle,\n                \"Triangle\": function () {\n                    return _shape([\n                        [ 0.5, 0, 1, 1 ],\n                        [ 1, 1, 0, 1 ],\n                        [ 0, 1, 0.5, 0]\n                    ]);\n                },\n                \"Path\": function (params) {\n                    var points = params.points, p = [], tl = 0;\n                    for (var i = 0; i < points.length - 1; i++) {\n                        var l = Math.sqrt(Math.pow(points[i][2] - points[i][0]) + Math.pow(points[i][3] - points[i][1]));\n                        tl += l;\n                        p.push([points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], l]);\n                    }\n                    for (var j = 0; j < p.length; j++) {\n                        p[j][4] = p[j][4] / tl;\n                    }\n                    return _path(p);\n                }\n            },\n            _rotate = function (points, amountInDegrees) {\n                var o = [], theta = amountInDegrees / 180 * Math.PI;\n                for (var i = 0; i < points.length; i++) {\n                    var _x = points[i][0] - 0.5,\n                        _y = points[i][1] - 0.5;\n\n                    o.push([\n                            0.5 + ((_x * Math.cos(theta)) - (_y * Math.sin(theta))),\n                            0.5 + ((_x * Math.sin(theta)) + (_y * Math.cos(theta))),\n                        points[i][2],\n                        points[i][3]\n                    ]);\n                }\n                return o;\n            };\n\n        if (!_shapes[shape]) throw new Error(\"Shape [\" + shape + \"] is unknown by Perimeter Anchor type\");\n\n        var da = _shapes[shape](params);\n        if (params.rotation) da = _rotate(da, params.rotation);\n        var a = params.jsPlumbInstance.makeDynamicAnchor(da);\n        a.type = \"Perimeter\";\n        return a;\n    };\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the default Connectors, Endpoint and Overlay definitions.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil, _jg = root.Biltong;\n\n    _jp.Segments = {\n\n        /*\n         * Class: AbstractSegment\n         * A Connector is made up of 1..N Segments, each of which has a Type, such as 'Straight', 'Arc',\n         * 'Bezier'. This is new from 1.4.2, and gives us a lot more flexibility when drawing connections: things such\n         * as rounded corners for flowchart connectors, for example, or a straight line stub for Bezier connections, are\n         * much easier to do now.\n         *\n         * A Segment is responsible for providing coordinates for painting it, and also must be able to report its length.\n         * \n         */\n        AbstractSegment: function (params) {\n            this.params = params;\n\n            /**\n             * Function: findClosestPointOnPath\n             * Finds the closest point on this segment to the given [x, y],\n             * returning both the x and y of the point plus its distance from\n             * the supplied point, and its location along the length of the\n             * path inscribed by the segment.  This implementation returns\n             * Infinity for distance and null values for everything else;\n             * subclasses are expected to override.\n             */\n            this.findClosestPointOnPath = function (x, y) {\n                return {\n                    d: Infinity,\n                    x: null,\n                    y: null,\n                    l: null\n                };\n            };\n\n            this.getBounds = function () {\n                return {\n                    minX: Math.min(params.x1, params.x2),\n                    minY: Math.min(params.y1, params.y2),\n                    maxX: Math.max(params.x1, params.x2),\n                    maxY: Math.max(params.y1, params.y2)\n                };\n            };\n        },\n        Straight: function (params) {\n            var _super = _jp.Segments.AbstractSegment.apply(this, arguments),\n                length, m, m2, x1, x2, y1, y2,\n                _recalc = function () {\n                    length = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n                    m = _jg.gradient({x: x1, y: y1}, {x: x2, y: y2});\n                    m2 = -1 / m;\n                };\n\n            this.type = \"Straight\";\n\n            this.getLength = function () {\n                return length;\n            };\n            this.getGradient = function () {\n                return m;\n            };\n\n            this.getCoordinates = function () {\n                return { x1: x1, y1: y1, x2: x2, y2: y2 };\n            };\n            this.setCoordinates = function (coords) {\n                x1 = coords.x1;\n                y1 = coords.y1;\n                x2 = coords.x2;\n                y2 = coords.y2;\n                _recalc();\n            };\n            this.setCoordinates({x1: params.x1, y1: params.y1, x2: params.x2, y2: params.y2});\n\n            this.getBounds = function () {\n                return {\n                    minX: Math.min(x1, x2),\n                    minY: Math.min(y1, y2),\n                    maxX: Math.max(x1, x2),\n                    maxY: Math.max(y1, y2)\n                };\n            };\n\n            /**\n             * returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n             * 0 to 1 inclusive. for the straight line segment this is simple maths.\n             */\n            this.pointOnPath = function (location, absolute) {\n                if (location === 0 && !absolute)\n                    return { x: x1, y: y1 };\n                else if (location == 1 && !absolute)\n                    return { x: x2, y: y2 };\n                else {\n                    var l = absolute ? location > 0 ? location : length + location : location * length;\n                    return _jg.pointOnLine({x: x1, y: y1}, {x: x2, y: y2}, l);\n                }\n            };\n\n            /**\n             * returns the gradient of the segment at the given point - which for us is constant.\n             */\n            this.gradientAtPoint = function (_) {\n                return m;\n            };\n\n            /**\n             * returns the point on the segment's path that is 'distance' along the length of the path from 'location', where\n             * 'location' is a decimal from 0 to 1 inclusive, and 'distance' is a number of pixels.\n             * this hands off to jsPlumbUtil to do the maths, supplying two points and the distance.\n             */\n            this.pointAlongPathFrom = function (location, distance, absolute) {\n                var p = this.pointOnPath(location, absolute),\n                    farAwayPoint = distance <= 0 ? {x: x1, y: y1} : {x: x2, y: y2 };\n\n                /*\n                 location == 1 ? {\n                 x:x1 + ((x2 - x1) * 10),\n                 y:y1 + ((y1 - y2) * 10)\n                 } :\n                 */\n\n                if (distance <= 0 && Math.abs(distance) > 1) distance *= -1;\n\n                return _jg.pointOnLine(p, farAwayPoint, distance);\n            };\n\n            // is c between a and b?\n            var within = function (a, b, c) {\n                return c >= Math.min(a, b) && c <= Math.max(a, b);\n            };\n            // find which of a and b is closest to c\n            var closest = function (a, b, c) {\n                return Math.abs(c - a) < Math.abs(c - b) ? a : b;\n            };\n\n            /**\n             Function: findClosestPointOnPath\n             Finds the closest point on this segment to [x,y]. See\n             notes on this method in AbstractSegment.\n             */\n            this.findClosestPointOnPath = function (x, y) {\n                var out = {\n                    d: Infinity,\n                    x: null,\n                    y: null,\n                    l: null,\n                    x1: x1,\n                    x2: x2,\n                    y1: y1,\n                    y2: y2\n                };\n\n                if (m === 0) {\n                    out.y = y1;\n                    out.x = within(x1, x2, x) ? x : closest(x1, x2, x);\n                }\n                else if (m == Infinity || m == -Infinity) {\n                    out.x = x1;\n                    out.y = within(y1, y2, y) ? y : closest(y1, y2, y);\n                }\n                else {\n                    // closest point lies on normal from given point to this line.  \n                    var b = y1 - (m * x1),\n                        b2 = y - (m2 * x),\n                    // y1 = m.x1 + b and y1 = m2.x1 + b2\n                    // so m.x1 + b = m2.x1 + b2\n                    // x1(m - m2) = b2 - b\n                    // x1 = (b2 - b) / (m - m2)\n                        _x1 = (b2 - b) / (m - m2),\n                        _y1 = (m * _x1) + b;\n\n                    out.x = within(x1, x2, _x1) ? _x1 : closest(x1, x2, _x1);//_x1;\n                    out.y = within(y1, y2, _y1) ? _y1 : closest(y1, y2, _y1);//_y1;\n                }\n\n                var fractionInSegment = _jg.lineLength([ out.x, out.y ], [ x1, y1 ]);\n                out.d = _jg.lineLength([x, y], [out.x, out.y]);\n                out.l = fractionInSegment / length;\n                return out;\n            };\n        },\n\n        /*\n         Arc Segment. You need to supply:\n\n         r   -   radius\n         cx  -   center x for the arc\n         cy  -   center y for the arc\n         ac  -   whether the arc is anticlockwise or not. default is clockwise.\n\n         and then either:\n\n         startAngle  -   startAngle for the arc.\n         endAngle    -   endAngle for the arc.\n\n         or:\n\n         x1          -   x for start point\n         y1          -   y for start point\n         x2          -   x for end point\n         y2          -   y for end point\n\n         */\n        Arc: function (params) {\n            var _super = _jp.Segments.AbstractSegment.apply(this, arguments),\n                _calcAngle = function (_x, _y) {\n                    return _jg.theta([params.cx, params.cy], [_x, _y]);\n                },\n                _calcAngleForLocation = function (segment, location) {\n                    if (segment.anticlockwise) {\n                        var sa = segment.startAngle < segment.endAngle ? segment.startAngle + TWO_PI : segment.startAngle,\n                            s = Math.abs(sa - segment.endAngle);\n                        return sa - (s * location);\n                    }\n                    else {\n                        var ea = segment.endAngle < segment.startAngle ? segment.endAngle + TWO_PI : segment.endAngle,\n                            ss = Math.abs(ea - segment.startAngle);\n\n                        return segment.startAngle + (ss * location);\n                    }\n                },\n                TWO_PI = 2 * Math.PI;\n\n            this.radius = params.r;\n            this.anticlockwise = params.ac;\n            this.type = \"Arc\";\n\n            if (params.startAngle && params.endAngle) {\n                this.startAngle = params.startAngle;\n                this.endAngle = params.endAngle;\n                this.x1 = params.cx + (this.radius * Math.cos(params.startAngle));\n                this.y1 = params.cy + (this.radius * Math.sin(params.startAngle));\n                this.x2 = params.cx + (this.radius * Math.cos(params.endAngle));\n                this.y2 = params.cy + (this.radius * Math.sin(params.endAngle));\n            }\n            else {\n                this.startAngle = _calcAngle(params.x1, params.y1);\n                this.endAngle = _calcAngle(params.x2, params.y2);\n                this.x1 = params.x1;\n                this.y1 = params.y1;\n                this.x2 = params.x2;\n                this.y2 = params.y2;\n            }\n\n            if (this.endAngle < 0) this.endAngle += TWO_PI;\n            if (this.startAngle < 0) this.startAngle += TWO_PI;\n\n            // segment is used by vml     \n            //this.segment = _jg.quadrant([this.x1, this.y1], [this.x2, this.y2]);\n\n            // we now have startAngle and endAngle as positive numbers, meaning the\n            // absolute difference (|d|) between them is the sweep (s) of this arc, unless the\n            // arc is 'anticlockwise' in which case 's' is given by 2PI - |d|.\n\n            var ea = this.endAngle < this.startAngle ? this.endAngle + TWO_PI : this.endAngle;\n            this.sweep = Math.abs(ea - this.startAngle);\n            if (this.anticlockwise) this.sweep = TWO_PI - this.sweep;\n            var circumference = 2 * Math.PI * this.radius,\n                frac = this.sweep / TWO_PI,\n                length = circumference * frac;\n\n            this.getLength = function () {\n                return length;\n            };\n\n            this.getBounds = function () {\n                return {\n                    minX: params.cx - params.r,\n                    maxX: params.cx + params.r,\n                    minY: params.cy - params.r,\n                    maxY: params.cy + params.r\n                };\n            };\n\n            var VERY_SMALL_VALUE = 0.0000000001,\n                gentleRound = function (n) {\n                    var f = Math.floor(n), r = Math.ceil(n);\n                    if (n - f < VERY_SMALL_VALUE)\n                        return f;\n                    else if (r - n < VERY_SMALL_VALUE)\n                        return r;\n                    return n;\n                };\n\n            /**\n             * returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n             * 0 to 1 inclusive.\n             */\n            this.pointOnPath = function (location, absolute) {\n\n                if (location === 0) {\n                    return { x: this.x1, y: this.y1, theta: this.startAngle };\n                }\n                else if (location == 1) {\n                    return { x: this.x2, y: this.y2, theta: this.endAngle };\n                }\n\n                if (absolute) {\n                    location = location / length;\n                }\n\n                var angle = _calcAngleForLocation(this, location),\n                    _x = params.cx + (params.r * Math.cos(angle)),\n                    _y = params.cy + (params.r * Math.sin(angle));\n\n                return { x: gentleRound(_x), y: gentleRound(_y), theta: angle };\n            };\n\n            /**\n             * returns the gradient of the segment at the given point.\n             */\n            this.gradientAtPoint = function (location, absolute) {\n                var p = this.pointOnPath(location, absolute);\n                var m = _jg.normal([ params.cx, params.cy ], [p.x, p.y ]);\n                if (!this.anticlockwise && (m == Infinity || m == -Infinity)) m *= -1;\n                return m;\n            };\n\n            this.pointAlongPathFrom = function (location, distance, absolute) {\n                var p = this.pointOnPath(location, absolute),\n                    arcSpan = distance / circumference * 2 * Math.PI,\n                    dir = this.anticlockwise ? -1 : 1,\n                    startAngle = p.theta + (dir * arcSpan),\n                    startX = params.cx + (this.radius * Math.cos(startAngle)),\n                    startY = params.cy + (this.radius * Math.sin(startAngle));\n\n                return {x: startX, y: startY};\n            };\n        },\n\n        Bezier: function (params) {\n            this.curve = [\n                { x: params.x1, y: params.y1},\n                { x: params.cp1x, y: params.cp1y },\n                { x: params.cp2x, y: params.cp2y },\n                { x: params.x2, y: params.y2 }\n            ];\n\n            var _super = _jp.Segments.AbstractSegment.apply(this, arguments);\n            // although this is not a strictly rigorous determination of bounds\n            // of a bezier curve, it works for the types of curves that this segment\n            // type produces.\n            this.bounds = {\n                minX: Math.min(params.x1, params.x2, params.cp1x, params.cp2x),\n                minY: Math.min(params.y1, params.y2, params.cp1y, params.cp2y),\n                maxX: Math.max(params.x1, params.x2, params.cp1x, params.cp2x),\n                maxY: Math.max(params.y1, params.y2, params.cp1y, params.cp2y)\n            };\n\n            this.type = \"Bezier\";\n\n            var _translateLocation = function (_curve, location, absolute) {\n                if (absolute)\n                    location = root.jsBezier.locationAlongCurveFrom(_curve, location > 0 ? 0 : 1, location);\n\n                return location;\n            };\n\n            /**\n             * returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n             * 0 to 1 inclusive.\n             */\n            this.pointOnPath = function (location, absolute) {\n                location = _translateLocation(this.curve, location, absolute);\n                return root.jsBezier.pointOnCurve(this.curve, location);\n            };\n\n            /**\n             * returns the gradient of the segment at the given point.\n             */\n            this.gradientAtPoint = function (location, absolute) {\n                location = _translateLocation(this.curve, location, absolute);\n                return root.jsBezier.gradientAtPoint(this.curve, location);\n            };\n\n            this.pointAlongPathFrom = function (location, distance, absolute) {\n                location = _translateLocation(this.curve, location, absolute);\n                return root.jsBezier.pointAlongCurveFrom(this.curve, location, distance);\n            };\n\n            this.getLength = function () {\n                return root.jsBezier.getLength(this.curve);\n            };\n\n            this.getBounds = function () {\n                return this.bounds;\n            };\n        }\n    };\n\n    _jp.SegmentRenderer = {\n        getPath: function (segment) {\n            return ({\n                \"Straight\": function () {\n                    var d = segment.getCoordinates();\n                    return \"M \" + d.x1 + \" \" + d.y1 + \" L \" + d.x2 + \" \" + d.y2;\n                },\n                \"Bezier\": function () {\n                    var d = segment.params;\n                    return \"M \" + d.x1 + \" \" + d.y1 +\n                        \" C \" + d.cp1x + \" \" + d.cp1y + \" \" + d.cp2x + \" \" + d.cp2y + \" \" + d.x2 + \" \" + d.y2;\n                },\n                \"Arc\": function () {\n                    var d = segment.params,\n                        laf = segment.sweep > Math.PI ? 1 : 0,\n                        sf = segment.anticlockwise ? 0 : 1;\n\n                    return \"M\" + segment.x1 + \" \" + segment.y1 + \" A \" + segment.radius + \" \" + d.r + \" 0 \" + laf + \",\" + sf + \" \" + segment.x2 + \" \" + segment.y2;\n                }\n            })[segment.type]();\n        }\n    };\n\n    /*\n     Class: AbstractComponent\n     Superclass for AbstractConnector and AbstractEndpoint.\n     */\n    var AbstractComponent = function () {\n        this.resetBounds = function () {\n            this.bounds = { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity };\n        };\n        this.resetBounds();\n    };\n\n    /*\n     * Class: AbstractConnector\n     * Superclass for all Connectors; here is where Segments are managed.  This is exposed on jsPlumb just so it\n     * can be accessed from other files. You should not try to instantiate one of these directly.\n     *\n     * When this class is asked for a pointOnPath, or gradient etc, it must first figure out which segment to dispatch\n     * that request to. This is done by keeping track of the total connector length as segments are added, and also\n     * their cumulative ratios to the total length.  Then when the right segment is found it is a simple case of dispatching\n     * the request to it (and adjusting 'location' so that it is relative to the beginning of that segment.)\n     */\n    _jp.Connectors.AbstractConnector = function (params) {\n\n        AbstractComponent.apply(this, arguments);\n\n        var segments = [],\n            totalLength = 0,\n            segmentProportions = [],\n            segmentProportionalLengths = [],\n            stub = params.stub || 0,\n            sourceStub = _ju.isArray(stub) ? stub[0] : stub,\n            targetStub = _ju.isArray(stub) ? stub[1] : stub,\n            gap = params.gap || 0,\n            sourceGap = _ju.isArray(gap) ? gap[0] : gap,\n            targetGap = _ju.isArray(gap) ? gap[1] : gap,\n            userProvidedSegments = null,\n            edited = false,\n            paintInfo = null,\n            geometry = null,\n            editable = params.editable !== false && _jp.ConnectorEditors != null && _jp.ConnectorEditors[this.type] != null;\n\n        var _setGeometry = this.setGeometry = function(g, internallyComputed) {\n            edited = (!internallyComputed);\n            geometry = g;\n        };\n        var _getGeometry = this.getGeometry = function() {\n            return geometry;\n        };\n\n        this.getPathData = function() {\n            var p = \"\";\n            for (var i = 0; i < segments.length; i++) {\n                p += _jp.SegmentRenderer.getPath(segments[i]);\n                p += \" \";\n            }\n            return p;\n        };\n\n        this.hasBeenEdited = function() { return edited; };\n        this.isEditing = function() { return this.editor != null && this.editor.isActive(); };\n        this.setEditable = function(e) {\n            // if this connector has an editor already, or\n            // if an editor for this connector's type is available, or\n            // if the child declares an overrideSetEditable and it does not return false, editable is true.\n            if (e && _jp.ConnectorEditors != null && _jp.ConnectorEditors[this.type] != null && (this.overrideSetEditable == null || this.overrideSetEditable())) {\n                editable = e;\n            } else {\n                editable = false;\n            }\n            return editable;\n        };\n        this.isEditable = function() { return editable; };\n\n        /**\n         * Function: findSegmentForPoint\n         * Returns the segment that is closest to the given [x,y],\n         * null if nothing found.  This function returns a JS\n         * object with:\n         *\n         *   d   -   distance from segment\n         *   l   -   proportional location in segment\n         *   x   -   x point on the segment\n         *   y   -   y point on the segment\n         *   s   -   the segment itself.\n         */\n        this.findSegmentForPoint = function (x, y) {\n            var out = { d: Infinity, s: null, x: null, y: null, l: null };\n            for (var i = 0; i < segments.length; i++) {\n                var _s = segments[i].findClosestPointOnPath(x, y);\n                if (_s.d < out.d) {\n                    out.d = _s.d;\n                    out.l = _s.l;\n                    out.x = _s.x;\n                    out.y = _s.y;\n                    out.s = segments[i];\n                    out.x1 = _s.x1;\n                    out.x2 = _s.x2;\n                    out.y1 = _s.y1;\n                    out.y2 = _s.y2;\n                    out.index = i;\n                }\n            }\n\n            return out;\n        };\n\n        var _updateSegmentProportions = function () {\n                var curLoc = 0;\n                for (var i = 0; i < segments.length; i++) {\n                    var sl = segments[i].getLength();\n                    segmentProportionalLengths[i] = sl / totalLength;\n                    segmentProportions[i] = [curLoc, (curLoc += (sl / totalLength)) ];\n                }\n            },\n\n            /**\n             * returns [segment, proportion of travel in segment, segment index] for the segment\n             * that contains the point which is 'location' distance along the entire path, where\n             * 'location' is a decimal between 0 and 1 inclusive. in this connector type, paths\n             * are made up of a list of segments, each of which contributes some fraction to\n             * the total length.\n             * From 1.3.10 this also supports the 'absolute' property, which lets us specify a location\n             * as the absolute distance in pixels, rather than a proportion of the total path.\n             */\n            _findSegmentForLocation = function (location, absolute) {\n                if (absolute) {\n                    location = location > 0 ? location / totalLength : (totalLength + location) / totalLength;\n                }\n                var idx = segmentProportions.length - 1, inSegmentProportion = 1;\n                for (var i = 0; i < segmentProportions.length; i++) {\n                    if (segmentProportions[i][1] >= location) {\n                        idx = i;\n                        // todo is this correct for all connector path types?\n                        inSegmentProportion = location == 1 ? 1 : location === 0 ? 0 : (location - segmentProportions[i][0]) / segmentProportionalLengths[i];\n                        break;\n                    }\n                }\n                return { segment: segments[idx], proportion: inSegmentProportion, index: idx };\n            },\n            _addSegment = function (conn, type, params) {\n                if (params.x1 == params.x2 && params.y1 == params.y2) return;\n                var s = new _jp.Segments[type](params);\n                segments.push(s);\n                totalLength += s.getLength();\n                conn.updateBounds(s);\n            },\n            _clearSegments = function () {\n                totalLength = segments.length = segmentProportions.length = segmentProportionalLengths.length = 0;\n            };\n\n        this.setSegments = function (_segs) {\n            userProvidedSegments = [];\n            totalLength = 0;\n            for (var i = 0; i < _segs.length; i++) {\n                userProvidedSegments.push(_segs[i]);\n                totalLength += _segs[i].getLength();\n            }\n        };\n\n        this.getLength = function() {\n            return totalLength;\n        };\n\n        var _prepareCompute = function (params) {\n            this.strokeWidth = params.strokeWidth;\n            var segment = _jg.quadrant(params.sourcePos, params.targetPos),\n                swapX = params.targetPos[0] < params.sourcePos[0],\n                swapY = params.targetPos[1] < params.sourcePos[1],\n                lw = params.strokeWidth || 1,\n                so = params.sourceEndpoint.anchor.getOrientation(params.sourceEndpoint),\n                to = params.targetEndpoint.anchor.getOrientation(params.targetEndpoint),\n                x = swapX ? params.targetPos[0] : params.sourcePos[0],\n                y = swapY ? params.targetPos[1] : params.sourcePos[1],\n                w = Math.abs(params.targetPos[0] - params.sourcePos[0]),\n                h = Math.abs(params.targetPos[1] - params.sourcePos[1]);\n\n            // if either anchor does not have an orientation set, we derive one from their relative\n            // positions.  we fix the axis to be the one in which the two elements are further apart, and\n            // point each anchor at the other element.  this is also used when dragging a new connection.\n            if (so[0] === 0 && so[1] === 0 || to[0] === 0 && to[1] === 0) {\n                var index = w > h ? 0 : 1, oIndex = [1, 0][index];\n                so = [];\n                to = [];\n                so[index] = params.sourcePos[index] > params.targetPos[index] ? -1 : 1;\n                to[index] = params.sourcePos[index] > params.targetPos[index] ? 1 : -1;\n                so[oIndex] = 0;\n                to[oIndex] = 0;\n            }\n\n            var sx = swapX ? w + (sourceGap * so[0]) : sourceGap * so[0],\n                sy = swapY ? h + (sourceGap * so[1]) : sourceGap * so[1],\n                tx = swapX ? targetGap * to[0] : w + (targetGap * to[0]),\n                ty = swapY ? targetGap * to[1] : h + (targetGap * to[1]),\n                oProduct = ((so[0] * to[0]) + (so[1] * to[1]));\n\n            var result = {\n                sx: sx, sy: sy, tx: tx, ty: ty, lw: lw,\n                xSpan: Math.abs(tx - sx),\n                ySpan: Math.abs(ty - sy),\n                mx: (sx + tx) / 2,\n                my: (sy + ty) / 2,\n                so: so, to: to, x: x, y: y, w: w, h: h,\n                segment: segment,\n                startStubX: sx + (so[0] * sourceStub),\n                startStubY: sy + (so[1] * sourceStub),\n                endStubX: tx + (to[0] * targetStub),\n                endStubY: ty + (to[1] * targetStub),\n                isXGreaterThanStubTimes2: Math.abs(sx - tx) > (sourceStub + targetStub),\n                isYGreaterThanStubTimes2: Math.abs(sy - ty) > (sourceStub + targetStub),\n                opposite: oProduct == -1,\n                perpendicular: oProduct === 0,\n                orthogonal: oProduct == 1,\n                sourceAxis: so[0] === 0 ? \"y\" : \"x\",\n                points: [x, y, w, h, sx, sy, tx, ty ]\n            };\n            result.anchorOrientation = result.opposite ? \"opposite\" : result.orthogonal ? \"orthogonal\" : \"perpendicular\";\n            return result;\n        };\n\n        this.getSegments = function () {\n            return segments;\n        };\n\n        this.updateBounds = function (segment) {\n            var segBounds = segment.getBounds();\n            this.bounds.minX = Math.min(this.bounds.minX, segBounds.minX);\n            this.bounds.maxX = Math.max(this.bounds.maxX, segBounds.maxX);\n            this.bounds.minY = Math.min(this.bounds.minY, segBounds.minY);\n            this.bounds.maxY = Math.max(this.bounds.maxY, segBounds.maxY);\n        };\n\n        var dumpSegmentsToConsole = function () {\n            console.log(\"SEGMENTS:\");\n            for (var i = 0; i < segments.length; i++) {\n                console.log(segments[i].type, segments[i].getLength(), segmentProportions[i]);\n            }\n        };\n\n        this.pointOnPath = function (location, absolute) {\n            var seg = _findSegmentForLocation(location, absolute);\n            return seg.segment && seg.segment.pointOnPath(seg.proportion, false) || [0, 0];\n        };\n\n        this.gradientAtPoint = function (location, absolute) {\n            var seg = _findSegmentForLocation(location, absolute);\n            return seg.segment && seg.segment.gradientAtPoint(seg.proportion, false) || 0;\n        };\n\n        this.pointAlongPathFrom = function (location, distance, absolute) {\n            var seg = _findSegmentForLocation(location, absolute);\n            // TODO what happens if this crosses to the next segment?\n            return seg.segment && seg.segment.pointAlongPathFrom(seg.proportion, distance, false) || [0, 0];\n        };\n\n        this.compute = function (params) {\n            paintInfo = _prepareCompute.call(this, params);\n\n            _clearSegments();\n            this._compute(paintInfo, params);\n            this.x = paintInfo.points[0];\n            this.y = paintInfo.points[1];\n            this.w = paintInfo.points[2];\n            this.h = paintInfo.points[3];\n            this.segment = paintInfo.segment;\n            _updateSegmentProportions();\n        };\n\n        return {\n            addSegment: _addSegment,\n            prepareCompute: _prepareCompute,\n            sourceStub: sourceStub,\n            targetStub: targetStub,\n            maxStub: Math.max(sourceStub, targetStub),\n            sourceGap: sourceGap,\n            targetGap: targetGap,\n            maxGap: Math.max(sourceGap, targetGap),\n            setGeometry:_setGeometry,\n            getGeometry:_getGeometry\n        };\n    };\n    _ju.extend(_jp.Connectors.AbstractConnector, AbstractComponent);\n\n\n    // ********************************* END OF CONNECTOR TYPES *******************************************************************\n\n    // ********************************* ENDPOINT TYPES *******************************************************************\n\n    _jp.Endpoints.AbstractEndpoint = function (params) {\n        AbstractComponent.apply(this, arguments);\n        var compute = this.compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            var out = this._compute.apply(this, arguments);\n            this.x = out[0];\n            this.y = out[1];\n            this.w = out[2];\n            this.h = out[3];\n            this.bounds.minX = this.x;\n            this.bounds.minY = this.y;\n            this.bounds.maxX = this.x + this.w;\n            this.bounds.maxY = this.y + this.h;\n            return out;\n        };\n        return {\n            compute: compute,\n            cssClass: params.cssClass\n        };\n    };\n    _ju.extend(_jp.Endpoints.AbstractEndpoint, AbstractComponent);\n\n    /**\n     * Class: Endpoints.Dot\n     * A round endpoint, with default radius 10 pixels.\n     */\n\n    /**\n     * Function: Constructor\n     *\n     * Parameters:\n     *\n     *    radius    -    radius of the endpoint.  defaults to 10 pixels.\n     */\n    _jp.Endpoints.Dot = function (params) {\n        this.type = \"Dot\";\n        var _super = _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n        params = params || {};\n        this.radius = params.radius || 10;\n        this.defaultOffset = 0.5 * this.radius;\n        this.defaultInnerRadius = this.radius / 3;\n\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            this.radius = endpointStyle.radius || this.radius;\n            var x = anchorPoint[0] - this.radius,\n                y = anchorPoint[1] - this.radius,\n                w = this.radius * 2,\n                h = this.radius * 2;\n\n            if (endpointStyle.stroke) {\n                var lw = endpointStyle.strokeWidth || 1;\n                x -= lw;\n                y -= lw;\n                w += (lw * 2);\n                h += (lw * 2);\n            }\n            return [ x, y, w, h, this.radius ];\n        };\n    };\n    _ju.extend(_jp.Endpoints.Dot, _jp.Endpoints.AbstractEndpoint);\n\n    _jp.Endpoints.Rectangle = function (params) {\n        this.type = \"Rectangle\";\n        var _super = _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n        params = params || {};\n        this.width = params.width || 20;\n        this.height = params.height || 20;\n\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            var width = endpointStyle.width || this.width,\n                height = endpointStyle.height || this.height,\n                x = anchorPoint[0] - (width / 2),\n                y = anchorPoint[1] - (height / 2);\n\n            return [ x, y, width, height];\n        };\n    };\n    _ju.extend(_jp.Endpoints.Rectangle, _jp.Endpoints.AbstractEndpoint);\n\n    var DOMElementEndpoint = function (params) {\n        _jp.jsPlumbUIComponent.apply(this, arguments);\n        this._jsPlumb.displayElements = [];\n    };\n    _ju.extend(DOMElementEndpoint, _jp.jsPlumbUIComponent, {\n        getDisplayElements: function () {\n            return this._jsPlumb.displayElements;\n        },\n        appendDisplayElement: function (el) {\n            this._jsPlumb.displayElements.push(el);\n        }\n    });\n\n    /**\n     * Class: Endpoints.Image\n     * Draws an image as the Endpoint.\n     */\n    /**\n     * Function: Constructor\n     *\n     * Parameters:\n     *\n     *    src    -    location of the image to use.\n\n     TODO: multiple references to self. not sure quite how to get rid of them entirely. perhaps self = null in the cleanup\n     function will suffice\n\n     TODO this class still might leak memory.\n\n     */\n    _jp.Endpoints.Image = function (params) {\n\n        this.type = \"Image\";\n        DOMElementEndpoint.apply(this, arguments);\n        _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n\n        var _onload = params.onload,\n            src = params.src || params.url,\n            clazz = params.cssClass ? \" \" + params.cssClass : \"\";\n\n        this._jsPlumb.img = new Image();\n        this._jsPlumb.ready = false;\n        this._jsPlumb.initialized = false;\n        this._jsPlumb.deleted = false;\n        this._jsPlumb.widthToUse = params.width;\n        this._jsPlumb.heightToUse = params.height;\n        this._jsPlumb.endpoint = params.endpoint;\n\n        this._jsPlumb.img.onload = function () {\n            if (this._jsPlumb != null) {\n                this._jsPlumb.ready = true;\n                this._jsPlumb.widthToUse = this._jsPlumb.widthToUse || this._jsPlumb.img.width;\n                this._jsPlumb.heightToUse = this._jsPlumb.heightToUse || this._jsPlumb.img.height;\n                if (_onload) {\n                    _onload(this);\n                }\n            }\n        }.bind(this);\n\n        /*\n         Function: setImage\n         Sets the Image to use in this Endpoint.\n\n         Parameters:\n         img         -   may be a URL or an Image object\n         onload      -   optional; a callback to execute once the image has loaded.\n         */\n        this._jsPlumb.endpoint.setImage = function (_img, onload) {\n            var s = _img.constructor == String ? _img : _img.src;\n            _onload = onload;\n            this._jsPlumb.img.src = s;\n\n            if (this.canvas != null)\n                this.canvas.setAttribute(\"src\", this._jsPlumb.img.src);\n        }.bind(this);\n\n        this._jsPlumb.endpoint.setImage(src, _onload);\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            this.anchorPoint = anchorPoint;\n            if (this._jsPlumb.ready) return [anchorPoint[0] - this._jsPlumb.widthToUse / 2, anchorPoint[1] - this._jsPlumb.heightToUse / 2,\n                this._jsPlumb.widthToUse, this._jsPlumb.heightToUse];\n            else return [0, 0, 0, 0];\n        };\n\n        this.canvas = _jp.createElement(\"img\", {\n            position:\"absolute\",\n            margin:0,\n            padding:0,\n            outline:0\n        }, this._jsPlumb.instance.endpointClass + clazz);\n\n        if (this._jsPlumb.widthToUse) this.canvas.setAttribute(\"width\", this._jsPlumb.widthToUse);\n        if (this._jsPlumb.heightToUse) this.canvas.setAttribute(\"height\", this._jsPlumb.heightToUse);\n        this._jsPlumb.instance.appendElement(this.canvas);\n\n        this.actuallyPaint = function (d, style, anchor) {\n            if (!this._jsPlumb.deleted) {\n                if (!this._jsPlumb.initialized) {\n                    this.canvas.setAttribute(\"src\", this._jsPlumb.img.src);\n                    this.appendDisplayElement(this.canvas);\n                    this._jsPlumb.initialized = true;\n                }\n                var x = this.anchorPoint[0] - (this._jsPlumb.widthToUse / 2),\n                    y = this.anchorPoint[1] - (this._jsPlumb.heightToUse / 2);\n                _ju.sizeElement(this.canvas, x, y, this._jsPlumb.widthToUse, this._jsPlumb.heightToUse);\n            }\n        };\n\n        this.paint = function (style, anchor) {\n            if (this._jsPlumb != null) {  // may have been deleted\n                if (this._jsPlumb.ready) {\n                    this.actuallyPaint(style, anchor);\n                }\n                else {\n                    root.setTimeout(function () {\n                        this.paint(style, anchor);\n                    }.bind(this), 200);\n                }\n            }\n        };\n    };\n    _ju.extend(_jp.Endpoints.Image, [ DOMElementEndpoint, _jp.Endpoints.AbstractEndpoint ], {\n        cleanup: function (force) {\n            if (force) {\n                this._jsPlumb.deleted = true;\n                if (this.canvas) this.canvas.parentNode.removeChild(this.canvas);\n                this.canvas = null;\n            }\n        }\n    });\n\n    /*\n     * Class: Endpoints.Blank\n     * An Endpoint that paints nothing (visible) on the screen.  Supports cssClass and hoverClass parameters like all Endpoints.\n     */\n    _jp.Endpoints.Blank = function (params) {\n        var _super = _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n        this.type = \"Blank\";\n        DOMElementEndpoint.apply(this, arguments);\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            return [anchorPoint[0], anchorPoint[1], 10, 0];\n        };\n\n        var clazz = params.cssClass ? \" \" + params.cssClass : \"\";\n\n        this.canvas = _jp.createElement(\"div\", {\n            display: \"block\",\n            width: \"1px\",\n            height: \"1px\",\n            background: \"transparent\",\n            position: \"absolute\"\n        }, this._jsPlumb.instance.endpointClass + clazz);\n\n        this._jsPlumb.instance.appendElement(this.canvas);\n\n        this.paint = function (style, anchor) {\n            _ju.sizeElement(this.canvas, this.x, this.y, this.w, this.h);\n        };\n    };\n    _ju.extend(_jp.Endpoints.Blank, [_jp.Endpoints.AbstractEndpoint, DOMElementEndpoint], {\n        cleanup: function () {\n            if (this.canvas && this.canvas.parentNode) {\n                this.canvas.parentNode.removeChild(this.canvas);\n            }\n        }\n    });\n\n    /*\n     * Class: Endpoints.Triangle\n     * A triangular Endpoint.\n     */\n    /*\n     * Function: Constructor\n     *\n     * Parameters:\n     *\n     * \twidth\t-\twidth of the triangle's base.  defaults to 55 pixels.\n     * \theight\t-\theight of the triangle from base to apex.  defaults to 55 pixels.\n     */\n    _jp.Endpoints.Triangle = function (params) {\n        this.type = \"Triangle\";\n        _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n        params = params || {  };\n        params.width = params.width || 55;\n        params.height = params.height || 55;\n        this.width = params.width;\n        this.height = params.height;\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            var width = endpointStyle.width || self.width,\n                height = endpointStyle.height || self.height,\n                x = anchorPoint[0] - (width / 2),\n                y = anchorPoint[1] - (height / 2);\n            return [ x, y, width, height ];\n        };\n    };\n// ********************************* END OF ENDPOINT TYPES *******************************************************************\n\n\n// ********************************* OVERLAY DEFINITIONS ***********************************************************************    \n\n    var AbstractOverlay = _jp.Overlays.AbstractOverlay = function (params) {\n        this.visible = true;\n        this.isAppendedAtTopLevel = true;\n        this.component = params.component;\n        this.loc = params.location == null ? 0.5 : params.location;\n        this.endpointLoc = params.endpointLocation == null ? [ 0.5, 0.5] : params.endpointLocation;\n        this.visible = params.visible !== false;\n    };\n    AbstractOverlay.prototype = {\n        cleanup: function (force) {\n            if (force) {\n                this.component = null;\n                this.canvas = null;\n                this.endpointLoc = null;\n            }\n        },\n        reattach:function(instance) {\n\n        },\n        setVisible: function (val) {\n            this.visible = val;\n            this.component.repaint();\n        },\n        isVisible: function () {\n            return this.visible;\n        },\n        hide: function () {\n            this.setVisible(false);\n        },\n        show: function () {\n            this.setVisible(true);\n        },\n        incrementLocation: function (amount) {\n            this.loc += amount;\n            this.component.repaint();\n        },\n        setLocation: function (l) {\n            this.loc = l;\n            this.component.repaint();\n        },\n        getLocation: function () {\n            return this.loc;\n        },\n        updateFrom:function() { }\n    };\n\n\n    /*\n     * Class: Overlays.Arrow\n     *\n     * An arrow overlay, defined by four points: the head, the two sides of the tail, and a 'foldback' point at some distance along the length\n     * of the arrow that lines from each tail point converge into.  The foldback point is defined using a decimal that indicates some fraction\n     * of the length of the arrow and has a default value of 0.623.  A foldback point value of 1 would mean that the arrow had a straight line\n     * across the tail.\n     */\n    /*\n     * @constructor\n     *\n     * @param {Object} params Constructor params.\n     * @param {Number} [params.length] Distance in pixels from head to tail baseline. default 20.\n     * @param {Number} [params.width] Width in pixels of the tail baseline. default 20.\n     * @param {String} [params.fill] Style to use when filling the arrow.  defaults to \"black\".\n     * @param {String} [params.stroke] Style to use when stroking the arrow. defaults to null, which means the arrow is not stroked.\n     * @param {Number} [params.stroke-width] Line width to use when stroking the arrow. defaults to 1, but only used if stroke is not null.\n     * @param {Number} [params.foldback] Distance (as a decimal from 0 to 1 inclusive) along the length of the arrow marking the point the tail points should fold back to.  defaults to 0.623.\n     * @param {Number} [params.location] Distance (as a decimal from 0 to 1 inclusive) marking where the arrow should sit on the connector. defaults to 0.5.\n     * @param {NUmber} [params.direction] Indicates the direction the arrow points in. valid values are -1 and 1; 1 is default.\n     */\n    _jp.Overlays.Arrow = function (params) {\n        this.type = \"Arrow\";\n        AbstractOverlay.apply(this, arguments);\n        this.isAppendedAtTopLevel = false;\n        params = params || {};\n\n        this.length = params.length || 20;\n        this.width = params.width || 20;\n        this.id = params.id;\n        var direction = (params.direction || 1) < 0 ? -1 : 1,\n            paintStyle = params.paintStyle || { \"stroke-width\": 1 },\n        // how far along the arrow the lines folding back in come to. default is 62.3%.\n            foldback = params.foldback || 0.623;\n\n        this.computeMaxSize = function () {\n            return self.width * 1.5;\n        };\n\n        this.elementCreated = function(p, component) {\n            this.path = p;\n            if (params.events) {\n                for (var i in params.events) {\n                    _jp.on(p, i, params.events[i]);\n                }\n            }\n        };\n\n        this.draw = function (component, currentConnectionPaintStyle) {\n\n            var hxy, mid, txy, tail, cxy;\n            if (component.pointAlongPathFrom) {\n\n                if (_ju.isString(this.loc) || this.loc > 1 || this.loc < 0) {\n                    var l = parseInt(this.loc, 10),\n                        fromLoc = this.loc < 0 ? 1 : 0;\n                    hxy = component.pointAlongPathFrom(fromLoc, l, false);\n                    mid = component.pointAlongPathFrom(fromLoc, l - (direction * this.length / 2), false);\n                    txy = _jg.pointOnLine(hxy, mid, this.length);\n                }\n                else if (this.loc == 1) {\n                    hxy = component.pointOnPath(this.loc);\n                    mid = component.pointAlongPathFrom(this.loc, -(this.length));\n                    txy = _jg.pointOnLine(hxy, mid, this.length);\n\n                    if (direction == -1) {\n                        var _ = txy;\n                        txy = hxy;\n                        hxy = _;\n                    }\n                }\n                else if (this.loc === 0) {\n                    txy = component.pointOnPath(this.loc);\n                    mid = component.pointAlongPathFrom(this.loc, this.length);\n                    hxy = _jg.pointOnLine(txy, mid, this.length);\n                    if (direction == -1) {\n                        var __ = txy;\n                        txy = hxy;\n                        hxy = __;\n                    }\n                }\n                else {\n                    hxy = component.pointAlongPathFrom(this.loc, direction * this.length / 2);\n                    mid = component.pointOnPath(this.loc);\n                    txy = _jg.pointOnLine(hxy, mid, this.length);\n                }\n\n                tail = _jg.perpendicularLineTo(hxy, txy, this.width);\n                cxy = _jg.pointOnLine(hxy, txy, foldback * this.length);\n\n                var d = { hxy: hxy, tail: tail, cxy: cxy },\n                    stroke = paintStyle.stroke || currentConnectionPaintStyle.stroke,\n                    fill = paintStyle.fill || currentConnectionPaintStyle.stroke,\n                    lineWidth = paintStyle.strokeWidth || currentConnectionPaintStyle.strokeWidth;\n\n                return {\n                    component: component,\n                    d: d,\n                    \"stroke-width\": lineWidth,\n                    stroke: stroke,\n                    fill: fill,\n                    minX: Math.min(hxy.x, tail[0].x, tail[1].x),\n                    maxX: Math.max(hxy.x, tail[0].x, tail[1].x),\n                    minY: Math.min(hxy.y, tail[0].y, tail[1].y),\n                    maxY: Math.max(hxy.y, tail[0].y, tail[1].y)\n                };\n            }\n            else return {component: component, minX: 0, maxX: 0, minY: 0, maxY: 0};\n        };\n    };\n    _ju.extend(_jp.Overlays.Arrow, AbstractOverlay, {\n        updateFrom:function(d) {\n            this.length = d.length || this.length;\n            this.width = d.width|| this.width;\n            this.direction = d.direction != null ? d.direction : this.direction;\n            this.foldback = d.foldback|| this.foldback;\n        }\n    });\n\n    /*\n     * Class: Overlays.PlainArrow\n     *\n     * A basic arrow.  This is in fact just one instance of the more generic case in which the tail folds back on itself to some\n     * point along the length of the arrow: in this case, that foldback point is the full length of the arrow.  so it just does\n     * a 'call' to Arrow with foldback set appropriately.\n     */\n    /*\n     * Function: Constructor\n     * See <Overlays.Arrow> for allowed parameters for this overlay.\n     */\n    _jp.Overlays.PlainArrow = function (params) {\n        params = params || {};\n        var p = _jp.extend(params, {foldback: 1});\n        _jp.Overlays.Arrow.call(this, p);\n        this.type = \"PlainArrow\";\n    };\n    _ju.extend(_jp.Overlays.PlainArrow, _jp.Overlays.Arrow);\n\n    /*\n     * Class: Overlays.Diamond\n     * \n     * A diamond. Like PlainArrow, this is a concrete case of the more generic case of the tail points converging on some point...it just\n     * happens that in this case, that point is greater than the length of the the arrow.\n     *\n     *      this could probably do with some help with positioning...due to the way it reuses the Arrow paint code, what Arrow thinks is the\n     *      center is actually 1/4 of the way along for this guy.  but we don't have any knowledge of pixels at this point, so we're kind of\n     *      stuck when it comes to helping out the Arrow class. possibly we could pass in a 'transpose' parameter or something. the value\n     *      would be -l/4 in this case - move along one quarter of the total length.\n     */\n    /*\n     * Function: Constructor\n     * See <Overlays.Arrow> for allowed parameters for this overlay.\n     */\n    _jp.Overlays.Diamond = function (params) {\n        params = params || {};\n        var l = params.length || 40,\n            p = _jp.extend(params, {length: l / 2, foldback: 2});\n        _jp.Overlays.Arrow.call(this, p);\n        this.type = \"Diamond\";\n    };\n    _ju.extend(_jp.Overlays.Diamond, _jp.Overlays.Arrow);\n\n    var _getDimensions = function (component, forceRefresh) {\n        if (component._jsPlumb.cachedDimensions == null || forceRefresh)\n            component._jsPlumb.cachedDimensions = component.getDimensions();\n        return component._jsPlumb.cachedDimensions;\n    };\n\n    // abstract superclass for overlays that add an element to the DOM.\n    var AbstractDOMOverlay = function (params) {\n        _jp.jsPlumbUIComponent.apply(this, arguments);\n        AbstractOverlay.apply(this, arguments);\n\n        // hand off fired events to associated component.\n        var _f = this.fire;\n        this.fire = function () {\n            _f.apply(this, arguments);\n            if (this.component) this.component.fire.apply(this.component, arguments);\n        };\n\n        this.detached=false;\n        this.id = params.id;\n        this._jsPlumb.div = null;\n        this._jsPlumb.initialised = false;\n        this._jsPlumb.component = params.component;\n        this._jsPlumb.cachedDimensions = null;\n        this._jsPlumb.create = params.create;\n        this._jsPlumb.initiallyInvisible = params.visible === false;\n\n        this.getElement = function () {\n            if (this._jsPlumb.div == null) {\n                var div = this._jsPlumb.div = _jp.getElement(this._jsPlumb.create(this._jsPlumb.component));\n                div.style.position = \"absolute\";\n                div.className = this._jsPlumb.instance.overlayClass + \" \" +\n                    (this.cssClass ? this.cssClass :\n                        params.cssClass ? params.cssClass : \"\");\n                this._jsPlumb.instance.appendElement(div);\n                this._jsPlumb.instance.getId(div);\n                this.canvas = div;\n\n                // in IE the top left corner is what it placed at the desired location.  This will not\n                // be fixed. IE8 is not going to be supported for much longer.\n                var ts = \"translate(-50%, -50%)\";\n                div.style.webkitTransform = ts;\n                div.style.mozTransform = ts;\n                div.style.msTransform = ts;\n                div.style.oTransform = ts;\n                div.style.transform = ts;\n\n                // write the related component into the created element\n                div._jsPlumb = this;\n\n                if (params.visible === false)\n                    div.style.display = \"none\";\n            }\n            return this._jsPlumb.div;\n        };\n\n        this.draw = function (component, currentConnectionPaintStyle, absolutePosition) {\n            var td = _getDimensions(this);\n            if (td != null && td.length == 2) {\n                var cxy = { x: 0, y: 0 };\n\n                // absolutePosition would have been set by a call to connection.setAbsoluteOverlayPosition.\n                if (absolutePosition) {\n                    cxy = { x: absolutePosition[0], y: absolutePosition[1] };\n                }\n                else if (component.pointOnPath) {\n                    var loc = this.loc, absolute = false;\n                    if (_ju.isString(this.loc) || this.loc < 0 || this.loc > 1) {\n                        loc = parseInt(this.loc, 10);\n                        absolute = true;\n                    }\n                    cxy = component.pointOnPath(loc, absolute);  // a connection\n                }\n                else {\n                    var locToUse = this.loc.constructor == Array ? this.loc : this.endpointLoc;\n                    cxy = { x: locToUse[0] * component.w,\n                        y: locToUse[1] * component.h };\n                }\n\n                var minx = cxy.x - (td[0] / 2),\n                    miny = cxy.y - (td[1] / 2);\n\n                return {\n                    component: component,\n                    d: { minx: minx, miny: miny, td: td, cxy: cxy },\n                    minX: minx,\n                    maxX: minx + td[0],\n                    minY: miny,\n                    maxY: miny + td[1]\n                };\n            }\n            else return {minX: 0, maxX: 0, minY: 0, maxY: 0};\n        };\n    };\n    _ju.extend(AbstractDOMOverlay, [_jp.jsPlumbUIComponent, AbstractOverlay], {\n        getDimensions: function () {\n            return [1,1];\n        },\n        setVisible: function (state) {\n            if (this._jsPlumb.div) {\n                this._jsPlumb.div.style.display = state ? \"block\" : \"none\";\n                // if initially invisible, dimensions are 0,0 and never get updated\n                if (state && this._jsPlumb.initiallyInvisible) {\n                    _getDimensions(this, true);\n                    this.component.repaint();\n                    this._jsPlumb.initiallyInvisible = false;\n                }\n            }\n        },\n        /*\n         * Function: clearCachedDimensions\n         * Clears the cached dimensions for the label. As a performance enhancement, label dimensions are\n         * cached from 1.3.12 onwards. The cache is cleared when you change the label text, of course, but\n         * there are other reasons why the text dimensions might change - if you make a change through CSS, for\n         * example, you might change the font size.  in that case you should explicitly call this method.\n         */\n        clearCachedDimensions: function () {\n            this._jsPlumb.cachedDimensions = null;\n        },\n        cleanup: function (force) {\n            if (force) {\n                if (this._jsPlumb.div != null) {\n                    this._jsPlumb.div._jsPlumb = null;\n                    this._jsPlumb.instance.removeElement(this._jsPlumb.div);\n                }\n            }\n            else {\n                // if not a forced cleanup, just detach child from parent for now.\n                if (this._jsPlumb && this._jsPlumb.div && this._jsPlumb.div.parentNode)\n                    this._jsPlumb.div.parentNode.removeChild(this._jsPlumb.div);\n                this.detached = true;\n            }\n\n        },\n        reattach:function(instance) {\n            if (this._jsPlumb.div != null) instance.getContainer().appendChild(this._jsPlumb.div);\n            this.detached = false;\n        },\n        computeMaxSize: function () {\n            var td = _getDimensions(this);\n            return Math.max(td[0], td[1]);\n        },\n        paint: function (p, containerExtents) {\n            if (!this._jsPlumb.initialised) {\n                this.getElement();\n                p.component.appendDisplayElement(this._jsPlumb.div);\n                this._jsPlumb.initialised = true;\n                if (this.detached) this._jsPlumb.div.parentNode.removeChild(this._jsPlumb.div);\n            }\n            this._jsPlumb.div.style.left = (p.component.x + p.d.minx) + \"px\";\n            this._jsPlumb.div.style.top = (p.component.y + p.d.miny) + \"px\";\n        }\n    });\n\n    /*\n     * Class: Overlays.Custom\n     * A Custom overlay. You supply a 'create' function which returns some DOM element, and jsPlumb positions it.\n     * The 'create' function is passed a Connection or Endpoint.\n     */\n    /*\n     * Function: Constructor\n     * \n     * Parameters:\n     * \tcreate - function for jsPlumb to call that returns a DOM element.\n     * \tlocation - distance (as a decimal from 0 to 1 inclusive) marking where the label should sit on the connector. defaults to 0.5.\n     * \tid - optional id to use for later retrieval of this overlay.\n     * \t\n     */\n    _jp.Overlays.Custom = function (params) {\n        this.type = \"Custom\";\n        AbstractDOMOverlay.apply(this, arguments);\n    };\n    _ju.extend(_jp.Overlays.Custom, AbstractDOMOverlay);\n\n    _jp.Overlays.GuideLines = function () {\n        var self = this;\n        self.length = 50;\n        self.strokeWidth = 5;\n        this.type = \"GuideLines\";\n        AbstractOverlay.apply(this, arguments);\n        _jp.jsPlumbUIComponent.apply(this, arguments);\n        this.draw = function (connector, currentConnectionPaintStyle) {\n\n            var head = connector.pointAlongPathFrom(self.loc, self.length / 2),\n                mid = connector.pointOnPath(self.loc),\n                tail = _jg.pointOnLine(head, mid, self.length),\n                tailLine = _jg.perpendicularLineTo(head, tail, 40),\n                headLine = _jg.perpendicularLineTo(tail, head, 20);\n\n            return {\n                connector: connector,\n                head: head,\n                tail: tail,\n                headLine: headLine,\n                tailLine: tailLine,\n                minX: Math.min(head.x, tail.x, headLine[0].x, headLine[1].x),\n                minY: Math.min(head.y, tail.y, headLine[0].y, headLine[1].y),\n                maxX: Math.max(head.x, tail.x, headLine[0].x, headLine[1].x),\n                maxY: Math.max(head.y, tail.y, headLine[0].y, headLine[1].y)\n            };\n        };\n\n        // this.cleanup = function() { };  // nothing to clean up for GuideLines\n    };\n\n    /*\n     * Class: Overlays.Label\n\n     */\n    /*\n     * Function: Constructor\n     * \n     * Parameters:\n     * \tcssClass - optional css class string to append to css class. This string is appended \"as-is\", so you can of course have multiple classes\n     *             defined.  This parameter is preferred to using labelStyle, borderWidth and borderStyle.\n     * \tlabel - the label to paint.  May be a string or a function that returns a string.  Nothing will be painted if your label is null or your\n     *         label function returns null.  empty strings _will_ be painted.\n     * \tlocation - distance (as a decimal from 0 to 1 inclusive) marking where the label should sit on the connector. defaults to 0.5.\n     * \tid - optional id to use for later retrieval of this overlay.\n     * \n     * \t\n     */\n    _jp.Overlays.Label = function (params) {\n        this.labelStyle = params.labelStyle;\n\n        var labelWidth = null, labelHeight = null, labelText = null, labelPadding = null;\n        this.cssClass = this.labelStyle != null ? this.labelStyle.cssClass : null;\n        var p = _jp.extend({\n            create: function () {\n                return _jp.createElement(\"div\");\n            }}, params);\n        _jp.Overlays.Custom.call(this, p);\n        this.type = \"Label\";\n        this.label = params.label || \"\";\n        this.labelText = null;\n        if (this.labelStyle) {\n            var el = this.getElement();\n            this.labelStyle.font = this.labelStyle.font || \"12px sans-serif\";\n            el.style.font = this.labelStyle.font;\n            el.style.color = this.labelStyle.color || \"black\";\n            if (this.labelStyle.fill) el.style.background = this.labelStyle.fill;\n            if (this.labelStyle.borderWidth > 0) {\n                var dStyle = this.labelStyle.borderStyle ? this.labelStyle.borderStyle : \"black\";\n                el.style.border = this.labelStyle.borderWidth + \"px solid \" + dStyle;\n            }\n            if (this.labelStyle.padding) el.style.padding = this.labelStyle.padding;\n        }\n\n    };\n    _ju.extend(_jp.Overlays.Label, _jp.Overlays.Custom, {\n        cleanup: function (force) {\n            if (force) {\n                this.div = null;\n                this.label = null;\n                this.labelText = null;\n                this.cssClass = null;\n                this.labelStyle = null;\n            }\n        },\n        getLabel: function () {\n            return this.label;\n        },\n        /*\n         * Function: setLabel\n         * sets the label's, um, label.  you would think i'd call this function\n         * 'setText', but you can pass either a Function or a String to this, so\n         * it makes more sense as 'setLabel'. This uses innerHTML on the label div, so keep\n         * that in mind if you need escaped HTML.\n         */\n        setLabel: function (l) {\n            this.label = l;\n            this.labelText = null;\n            this.clearCachedDimensions();\n            this.update();\n            this.component.repaint();\n        },\n        getDimensions: function () {\n            this.update();\n            return AbstractDOMOverlay.prototype.getDimensions.apply(this, arguments);\n        },\n        update: function () {\n            if (typeof this.label == \"function\") {\n                var lt = this.label(this);\n                this.getElement().innerHTML = lt.replace(/\\r\\n/g, \"<br/>\");\n            }\n            else {\n                if (this.labelText == null) {\n                    this.labelText = this.label;\n                    this.getElement().innerHTML = this.labelText.replace(/\\r\\n/g, \"<br/>\");\n                }\n            }\n        },\n        updateFrom:function(d) {\n            if(d.label != null){\n                this.setLabel(d.label);\n            }\n        }\n    });\n\n    // ********************************* END OF OVERLAY DEFINITIONS ***********************************************************************\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the base class for library adapters.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;(function() {\n    \"use strict\";\n    var root = this,\n        _jp = root.jsPlumb;\n\n    var _getEventManager = function(instance) {\n        var e = instance._mottle;\n        if (!e) {\n            e = instance._mottle = new root.Mottle();\n        }\n        return e;\n    };\n\n    _jp.extend(root.jsPlumbInstance.prototype, {\n        getEventManager:function() {\n            return _getEventManager(this);\n        },\n        on : function(el, event, callback) {\n            // TODO: here we would like to map the tap event if we know its\n            // an internal bind to a click. we have to know its internal because only\n            // then can we be sure that the UP event wont be consumed (tap is a synthesized\n            // event from a mousedown followed by a mouseup).\n            //event = { \"click\":\"tap\", \"dblclick\":\"dbltap\"}[event] || event;\n            this.getEventManager().on.apply(this, arguments);\n            return this;\n        },\n        off : function(el, event, callback) {\n            this.getEventManager().off.apply(this, arguments);\n            return this;\n        }\n    });\n\n\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the code for working with Groups.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;(function() {\n    \"use strict\";\n\n    var root = this,\n        _ju = root.jsPlumbUtil,\n        _jpi = root.jsPlumbInstance;\n\n    var GROUP_COLLAPSED_CLASS = \"jtk-group-collapsed\";\n    var GROUP_EXPANDED_CLASS = \"jtk-group-expanded\";\n    var GROUP_CONTAINER_SELECTOR = \"[jtk-group-content]\";\n    var ELEMENT_DRAGGABLE_EVENT = \"elementDraggable\";\n    var STOP = \"stop\";\n    var REVERT = \"revert\";\n    var GROUP_MANAGER = \"_groupManager\";\n    var GROUP = \"_jsPlumbGroup\";\n    var GROUP_DRAG_SCOPE = \"_jsPlumbGroupDrag\";\n    var EVT_CHILD_ADDED = \"group:addMember\";\n    var EVT_CHILD_REMOVED = \"group:removeMember\";\n    var EVT_GROUP_ADDED = \"group:add\";\n    var EVT_GROUP_REMOVED = \"group:remove\";\n    var EVT_EXPAND = \"group:expand\";\n    var EVT_COLLAPSE = \"group:collapse\";\n    var EVT_GROUP_DRAG_STOP = \"groupDragStop\";\n    var EVT_CONNECTION_MOVED = \"connectionMoved\";\n    var EVT_INTERNAL_CONNECTION_DETACHED = \"internal.connectionDetached\";\n\n    var CMD_REMOVE_ALL = \"removeAll\";\n    var CMD_ORPHAN_ALL = \"orphanAll\";\n    var CMD_SHOW = \"show\";\n    var CMD_HIDE = \"hide\";\n\n    var GroupManager = function(_jsPlumb) {\n        var _managedGroups = {}, _connectionSourceMap = {}, _connectionTargetMap = {}, self = this;\n\n        _jsPlumb.bind(\"connection\", function(p) {\n            if (p.source[GROUP] != null && p.target[GROUP] != null && p.source[GROUP] === p.target[GROUP]) {\n                _connectionSourceMap[p.connection.id] = p.source[GROUP];\n                _connectionTargetMap[p.connection.id] = p.source[GROUP];\n            }\n            else {\n                if (p.source[GROUP] != null) {\n                    _ju.suggest(p.source[GROUP].connections.source, p.connection);\n                    _connectionSourceMap[p.connection.id] = p.source[GROUP];\n                }\n                if (p.target[GROUP] != null) {\n                    _ju.suggest(p.target[GROUP].connections.target, p.connection);\n                    _connectionTargetMap[p.connection.id] = p.target[GROUP];\n                }\n            }\n        });\n\n        function _cleanupDetachedConnection(conn) {\n            delete conn.proxies;\n            var group = _connectionSourceMap[conn.id], f;\n            if (group != null) {\n                f = function(c) { return c.id === conn.id; };\n                _ju.removeWithFunction(group.connections.source, f);\n                _ju.removeWithFunction(group.connections.target, f);\n                delete _connectionSourceMap[conn.id];\n            }\n\n            group = _connectionTargetMap[conn.id];\n            if (group != null) {\n                f = function(c) { return c.id === conn.id; };\n                _ju.removeWithFunction(group.connections.source, f);\n                _ju.removeWithFunction(group.connections.target, f);\n                delete _connectionTargetMap[conn.id];\n            }\n        }\n\n        _jsPlumb.bind(EVT_INTERNAL_CONNECTION_DETACHED, function(p) {\n            _cleanupDetachedConnection(p.connection);\n        });\n\n        _jsPlumb.bind(EVT_CONNECTION_MOVED, function(p) {\n            var connMap = p.index === 0 ? _connectionSourceMap : _connectionTargetMap;\n            var group = connMap[p.connection.id];\n            if (group) {\n                var list = group.connections[p.index === 0 ? \"source\" : \"target\"];\n                var idx = list.indexOf(p.connection);\n                if (idx != -1) {\n                    list.splice(idx, 1);\n                }\n            }\n        });\n\n        this.addGroup = function(group) {\n            _jsPlumb.addClass(group.getEl(), GROUP_EXPANDED_CLASS);\n            _managedGroups[group.id] = group;\n            group.manager = this;\n            _updateConnectionsForGroup(group);\n            _jsPlumb.fire(EVT_GROUP_ADDED, { group:group });\n        };\n\n        this.addToGroup = function(group, el, doNotFireEvent) {\n            group = this.getGroup(group);\n            if (group) {\n                //group.add(el, doNotFireEvent);\n                var groupEl = group.getEl();\n\n                if (el._isJsPlumbGroup) return;\n                var currentGroup = el._jsPlumbGroup;\n                // if already a member of this group, do nothing\n                if (currentGroup !== group) {\n                    var elpos = _jsPlumb.getOffset(el, true);\n                    var cpos = group.collapsed ? _jsPlumb.getOffset(groupEl, true) : _jsPlumb.getOffset(group.getDragArea(), true);\n\n                    // otherwise, transfer to this group.\n                    if (currentGroup != null) {\n                        currentGroup.remove(el, doNotFireEvent);\n                        self.updateConnectionsForGroup(currentGroup);\n                    }\n                    group.add(el, doNotFireEvent);\n\n                    var handleDroppedConnections = function (list, index) {\n                        var oidx = index == 0 ? 1 : 0;\n                        list.each(function (c) {\n                            c.setVisible(false);\n                            if (c.endpoints[oidx].element._jsPlumbGroup === group) {\n                                c.endpoints[oidx].setVisible(false);\n                                self.expandConnection(c, oidx, group);\n                            }\n                            else {\n                                c.endpoints[index].setVisible(false);\n                                self.collapseConnection(c, index, group);\n                            }\n                        });\n                    };\n\n                    if (group.collapsed) {\n                        handleDroppedConnections(_jsPlumb.select({source: el}), 0);\n                        handleDroppedConnections(_jsPlumb.select({target: el}), 1);\n                    }\n\n                    var elId = _jsPlumb.getId(el);\n                    _jsPlumb.dragManager.setParent(el, elId, groupEl, _jsPlumb.getId(groupEl), elpos);\n\n                    var newPosition = { left: elpos.left - cpos.left, top: elpos.top - cpos.top };\n\n                    _jsPlumb.setPosition(el, newPosition);\n\n                    _jsPlumb.dragManager.revalidateParent(el, elId, elpos);\n\n                    self.updateConnectionsForGroup(group);\n\n                    _jsPlumb.revalidate(elId);\n\n                    setTimeout(function () {\n                        _jsPlumb.fire(EVT_CHILD_ADDED, {group: group, el: el});\n                    }, 0);\n                }\n            }\n        };\n\n        this.removeFromGroup = function(group, el, doNotFireEvent) {\n            group = this.getGroup(group);\n            if (group) {\n                group.remove(el, null, doNotFireEvent);\n            }\n        };\n\n        this.getGroup = function(groupId) {\n            var group = groupId;\n            if (_ju.isString(groupId)) {\n                group = _managedGroups[groupId];\n                if (group == null) throw new TypeError(\"No such group [\" + groupId + \"]\");\n            }\n            return group;\n        };\n\n        this.getGroups = function() {\n            var o = [];\n            for (var g in _managedGroups) {\n                o.push(_managedGroups[g]);\n            }\n            return o;\n        };\n\n        this.removeGroup = function(group, deleteMembers, manipulateDOM, doNotFireEvent) {\n            group = this.getGroup(group);\n            this.expandGroup(group, true); // this reinstates any original connections and removes all proxies, but does not fire an event.\n            group[deleteMembers ? CMD_REMOVE_ALL : CMD_ORPHAN_ALL](manipulateDOM, doNotFireEvent);\n            _jsPlumb.remove(group.getEl());\n            delete _managedGroups[group.id];\n            delete _jsPlumb._groups[group.id];\n            _jsPlumb.fire(EVT_GROUP_REMOVED, { group:group });\n        };\n\n        this.removeAllGroups = function(deleteMembers, manipulateDOM, doNotFireEvent) {\n            for (var g in _managedGroups) {\n                this.removeGroup(_managedGroups[g], deleteMembers, manipulateDOM, doNotFireEvent);\n            }\n        };\n\n        function _setVisible(group, state) {\n            var m = group.getMembers();\n            for (var i = 0; i < m.length; i++) {\n                _jsPlumb[state ? CMD_SHOW : CMD_HIDE](m[i], true);\n            }\n        }\n\n        var _collapseConnection = this.collapseConnection = function(c, index, group) {\n\n            var proxyEp, groupEl = group.getEl(), groupElId = _jsPlumb.getId(groupEl),\n                originalElementId = c.endpoints[index].elementId;\n\n            var otherEl = c.endpoints[index === 0 ? 1 : 0].element;\n            if (otherEl[GROUP] && (!otherEl[GROUP].shouldProxy() && otherEl[GROUP].collapsed)) {\n                return;\n            }\n\n            c.proxies = c.proxies || [];\n            if(c.proxies[index]) {\n                proxyEp = c.proxies[index].ep;\n            }else {\n                proxyEp = _jsPlumb.addEndpoint(groupEl, {\n                    endpoint:group.getEndpoint(c, index),\n                    anchor:group.getAnchor(c, index),\n                    parameters:{\n                        isProxyEndpoint:true\n                    }\n                });\n            }\n            proxyEp.setDeleteOnEmpty(true);\n\n            // for this index, stash proxy info: the new EP, the original EP.\n            c.proxies[index] = { ep:proxyEp, originalEp: c.endpoints[index] };\n\n            // and advise the anchor manager\n            if (index === 0) {\n                // TODO why are there two differently named methods? Why is there not one method that says \"some end of this\n                // connection changed (you give the index), and here's the new element and element id.\"\n                _jsPlumb.anchorManager.sourceChanged(originalElementId, groupElId, c, groupEl);\n            }\n            else {\n                _jsPlumb.anchorManager.updateOtherEndpoint(c.endpoints[0].elementId, originalElementId, groupElId, c);\n                c.target = groupEl;\n                c.targetId = groupElId;\n            }\n\n\n            // detach the original EP from the connection.\n            c.proxies[index].originalEp.detachFromConnection(c, null, true);\n\n            // set the proxy as the new ep\n            proxyEp.connections = [ c ];\n            c.endpoints[index] = proxyEp;\n\n            c.setVisible(true);\n        };\n\n        this.collapseGroup = function(group) {\n            group = this.getGroup(group);\n            if (group == null || group.collapsed) return;\n            var groupEl = group.getEl();\n\n            // todo remove old proxy endpoints first, just in case?\n            //group.proxies.length = 0;\n\n            // hide all connections\n            _setVisible(group, false);\n\n            if (group.shouldProxy()) {\n                // collapses all connections in a group.\n                var _collapseSet = function (conns, index) {\n                    for (var i = 0; i < conns.length; i++) {\n                        var c = conns[i];\n                        _collapseConnection(c, index, group);\n                    }\n                };\n\n                // setup proxies for sources and targets\n                _collapseSet(group.connections.source, 0);\n                _collapseSet(group.connections.target, 1);\n            }\n\n            group.collapsed = true;\n            _jsPlumb.removeClass(groupEl, GROUP_EXPANDED_CLASS);\n            _jsPlumb.addClass(groupEl, GROUP_COLLAPSED_CLASS);\n            _jsPlumb.revalidate(groupEl);\n            _jsPlumb.fire(EVT_COLLAPSE, { group:group  });\n        };\n\n        var _expandConnection = this.expandConnection = function(c, index, group) {\n\n            // if no proxies or none for this end of the connection, abort.\n            if (c.proxies == null || c.proxies[index] == null) return;\n\n            var groupElId = _jsPlumb.getId(group.getEl()),\n                originalElement = c.proxies[index].originalEp.element,\n                originalElementId = c.proxies[index].originalEp.elementId;\n\n            c.endpoints[index] = c.proxies[index].originalEp;\n            // and advise the anchor manager\n            if (index === 0) {\n                // TODO why are there two differently named methods? Why is there not one method that says \"some end of this\n                // connection changed (you give the index), and here's the new element and element id.\"\n                _jsPlumb.anchorManager.sourceChanged(groupElId, originalElementId, c, originalElement);\n            }\n            else {\n                _jsPlumb.anchorManager.updateOtherEndpoint(c.endpoints[0].elementId, groupElId, originalElementId, c);\n                c.target = originalElement;\n                c.targetId = originalElementId;\n            }\n\n            // detach the proxy EP from the connection (which will cause it to be removed as we no longer need it)\n            c.proxies[index].ep.detachFromConnection(c, null);\n\n            c.proxies[index].originalEp.addConnection(c);\n\n            // cleanup\n            delete c.proxies[index];\n        };\n\n        this.expandGroup = function(group, doNotFireEvent) {\n\n            group = this.getGroup(group);\n\n            if (group == null || !group.collapsed) return;\n            var groupEl = group.getEl();\n\n            _setVisible(group, true);\n\n            if (group.shouldProxy()) {\n                // collapses all connections in a group.\n                var _expandSet = function (conns, index) {\n                    for (var i = 0; i < conns.length; i++) {\n                        var c = conns[i];\n                        _expandConnection(c, index, group);\n                    }\n                };\n\n                // setup proxies for sources and targets\n                _expandSet(group.connections.source, 0);\n                _expandSet(group.connections.target, 1);\n            }\n\n            group.collapsed = false;\n            _jsPlumb.addClass(groupEl, GROUP_EXPANDED_CLASS);\n            _jsPlumb.removeClass(groupEl, GROUP_COLLAPSED_CLASS);\n            _jsPlumb.revalidate(groupEl);\n            this.repaintGroup(group);\n            if (!doNotFireEvent) {\n                _jsPlumb.fire(EVT_EXPAND, { group: group});\n            }\n        };\n\n        this.repaintGroup = function(group) {\n            group = this.getGroup(group);\n            var m = group.getMembers();\n            for (var i = 0; i < m.length; i++) {\n                _jsPlumb.revalidate(m[i]);\n            }\n        };\n\n        // TODO refactor this with the code that responds to `connection` events.\n        function _updateConnectionsForGroup(group) {\n            var members = group.getMembers();\n            var c1 = _jsPlumb.getConnections({source:members}, true);\n            var c2 = _jsPlumb.getConnections({target:members}, true);\n            var processed = {};\n            group.connections.source.length = 0;\n            group.connections.target.length = 0;\n            var oneSet = function(c) {\n                for (var i = 0; i < c.length; i++) {\n                    if (processed[c[i].id]) continue;\n                    processed[c[i].id] = true;\n                    if (c[i].source._jsPlumbGroup === group) {\n                        if (c[i].target._jsPlumbGroup !== group) {\n                            group.connections.source.push(c[i]);\n                        }\n                        _connectionSourceMap[c[i].id] = group;\n                    }\n                    else if (c[i].target._jsPlumbGroup === group) {\n                        group.connections.target.push(c[i]);\n                        _connectionTargetMap[c[i].id] = group;\n                    }\n                }\n            };\n            oneSet(c1); oneSet(c2);\n        }\n\n        this.updateConnectionsForGroup = _updateConnectionsForGroup;\n        this.refreshAllGroups = function() {\n            for (var g in _managedGroups) {\n                _updateConnectionsForGroup(_managedGroups[g]);\n                _jsPlumb.dragManager.updateOffsets(_jsPlumb.getId(_managedGroups[g].getEl()));\n            }\n        };\n    };\n\n    /**\n     *\n     * @param {jsPlumbInstance} _jsPlumb Associated jsPlumb instance.\n     * @param {Object} params\n     * @param {Element} params.el The DOM element representing the Group.\n     * @param {String} [params.id] Optional ID for the Group. A UUID will be assigned as the Group's ID if you do not provide one.\n     * @param {Boolean} [params.constrain=false] If true, child elements will not be able to be dragged outside of the Group container.\n     * @param {Boolean} [params.revert=true] By default, child elements revert to the container if dragged outside. You can change this by setting `revert:false`. This behaviour is also overridden if you set `orphan` or `prune`.\n     * @param {Boolean} [params.orphan=false] If true, child elements dropped outside of the Group container will be removed from the Group (but not from the DOM).\n     * @param {Boolean} [params.prune=false] If true, child elements dropped outside of the Group container will be removed from the Group and also from the DOM.\n     * @param {Boolean} [params.dropOverride=false] If true, a child element that has been dropped onto some other Group will not be subject to the controls imposed by `prune`, `revert` or `orphan`.\n     * @constructor\n     */\n    var Group = function(_jsPlumb, params) {\n        var self = this;\n        var el = params.el;\n        this.getEl = function() { return el; };\n        this.id = params.id || _ju.uuid();\n        el._isJsPlumbGroup = true;\n\n        var getDragArea = this.getDragArea = function() {\n            var da = _jsPlumb.getSelector(el, GROUP_CONTAINER_SELECTOR);\n            return da && da.length > 0 ? da[0] : el;\n        };\n\n        var ghost = params.ghost === true;\n        var constrain = ghost || (params.constrain === true);\n        var revert = params.revert !== false;\n        var orphan = params.orphan === true;\n        var prune = params.prune === true;\n        var dropOverride = params.dropOverride === true;\n        var proxied = params.proxied !== false;\n        var elements = [];\n        this.connections = { source:[], target:[], internal:[] };\n\n        // this function, and getEndpoint below, are stubs for a future setup in which we can choose endpoint\n        // and anchor based upon the connection and the index (source/target) of the endpoint to be proxied.\n        this.getAnchor = function(conn, endpointIndex) {\n            return params.anchor || \"Continuous\";\n        };\n\n        this.getEndpoint = function(conn, endpointIndex) {\n            return params.endpoint || [ \"Dot\", { radius:10 }];\n        };\n\n        this.collapsed = false;\n        if (params.draggable !== false) {\n            var opts = {\n                stop:function(params) {\n                    _jsPlumb.fire(EVT_GROUP_DRAG_STOP, jsPlumb.extend(params, {group:self}));\n                },\n                scope:GROUP_DRAG_SCOPE\n            };\n            if (params.dragOptions) {\n                root.jsPlumb.extend(opts, params.dragOptions);\n            }\n            _jsPlumb.draggable(params.el, opts);\n        }\n        if (params.droppable !== false) {\n            _jsPlumb.droppable(params.el, {\n                drop:function(p) {\n                    var el = p.drag.el;\n                    if (el._isJsPlumbGroup) return;\n                    var currentGroup = el._jsPlumbGroup;\n                    if (currentGroup !== self) {\n                        if (currentGroup != null) {\n                            if (currentGroup.overrideDrop(el, self)) {\n                                return;\n                            }\n                        }\n                        _jsPlumb.getGroupManager().addToGroup(self, el, false);\n                    }\n\n                }\n            });\n        }\n        var _each = function(_el, fn) {\n            var els = _el.nodeType == null ?  _el : [ _el ];\n            for (var i = 0; i < els.length; i++) {\n                fn(els[i]);\n            }\n        };\n\n        this.overrideDrop = function(_el, targetGroup) {\n            return dropOverride && (revert || prune || orphan);\n        };\n\n        this.add = function(_el, doNotFireEvent) {\n            var dragArea = getDragArea();\n            _each(_el, function(__el) {\n\n                if (__el._jsPlumbGroup != null) {\n                    if (__el._jsPlumbGroup === self) {\n                        return;\n                    } else {\n                        __el._jsPlumbGroup.remove(__el, true, doNotFireEvent, false);\n                    }\n                }\n\n                __el._jsPlumbGroup = self;\n                elements.push(__el);\n                // test if draggable and add handlers if so.\n                if (_jsPlumb.isAlreadyDraggable(__el)) {\n                    _bindDragHandlers(__el);\n                }\n\n                if (__el.parentNode != dragArea) {\n                    dragArea.appendChild(__el);\n                }\n\n                if (!doNotFireEvent) {\n                    _jsPlumb.fire(EVT_CHILD_ADDED, {group: self, el: __el});\n                }\n            });\n\n            _jsPlumb.getGroupManager().updateConnectionsForGroup(self);\n        };\n\n        this.remove = function(el, manipulateDOM, doNotFireEvent, doNotUpdateConnections) {\n\n            _each(el, function(__el) {\n                delete __el._jsPlumbGroup;\n                _ju.removeWithFunction(elements, function(e) {\n                    return e === __el;\n                });\n\n                if (manipulateDOM) {\n                    try { self.getDragArea().removeChild(__el); }\n                    catch (e) {\n                        jsPlumbUtil.log(\"Could not remove element from Group \" + e);\n                    }\n                }\n                _unbindDragHandlers(__el);\n                if (!doNotFireEvent) {\n                    _jsPlumb.fire(EVT_CHILD_REMOVED, {group: self, el: __el});\n                }\n            });\n            if (!doNotUpdateConnections) {\n                _jsPlumb.getGroupManager().updateConnectionsForGroup(self);\n            }\n        };\n        this.removeAll = function(manipulateDOM, doNotFireEvent) {\n            for (var i = 0, l = elements.length; i < l; i++) {\n                self.remove(elements[0], manipulateDOM, doNotFireEvent, true);\n            }\n            elements.length = 0;\n            _jsPlumb.getGroupManager().updateConnectionsForGroup(self);\n        };\n        this.orphanAll = function() {\n            for (var i = 0; i < elements.length; i++) {\n                _orphan(elements[i]);\n            }\n            elements.length = 0;\n        };\n        this.getMembers = function() { return elements; };\n\n        el[GROUP] = this;\n\n        _jsPlumb.bind(ELEMENT_DRAGGABLE_EVENT, function(dragParams) {\n            // if its for the current group,\n            if (dragParams.el._jsPlumbGroup == this) {\n                _bindDragHandlers(dragParams.el);\n            }\n        }.bind(this));\n\n        function _findParent(_el) {\n            return _el.offsetParent;\n        }\n\n        function _isInsideParent(_el, pos) {\n            var p = _findParent(_el),\n                s = _jsPlumb.getSize(p),\n                ss = _jsPlumb.getSize(_el),\n                leftEdge = pos[0],\n                rightEdge = leftEdge + ss[0],\n                topEdge = pos[1],\n                bottomEdge = topEdge + ss[1];\n\n            return rightEdge > 0 && leftEdge < s[0] && bottomEdge > 0 && topEdge < s[1];\n        }\n\n        //\n        // orphaning an element means taking it out of the group and adding it to the main jsplumb container.\n        //\n        function _orphan(_el) {\n            var id = _jsPlumb.getId(_el);\n            var pos = _jsPlumb.getOffset(_el);\n            _el.parentNode.removeChild(_el);\n            _jsPlumb.getContainer().appendChild(_el);\n            _jsPlumb.setPosition(_el, pos);\n            delete _el._jsPlumbGroup;\n            _unbindDragHandlers(_el);\n            _jsPlumb.dragManager.clearParent(_el, id);\n        }\n\n        //\n        // remove an element from the group, then either prune it from the jsplumb instance, or just orphan it.\n        //\n        function _pruneOrOrphan(p) {\n            if (!_isInsideParent(p.el, p.pos)) {\n                var group = p.el._jsPlumbGroup;\n                if (prune) {\n                    _jsPlumb.remove(p.el);\n                } else {\n                    _orphan(p.el);\n                }\n\n                group.remove(p.el);\n            }\n        }\n\n        //\n        // redraws the element\n        //\n        function _revalidate(_el) {\n            var id = _jsPlumb.getId(_el);\n            _jsPlumb.revalidate(_el);\n            _jsPlumb.dragManager.revalidateParent(_el, id);\n        }\n\n        //\n        // unbind the group specific drag/revert handlers.\n        //\n        function _unbindDragHandlers(_el) {\n            if (!_el._katavorioDrag) return;\n            if (prune || orphan) {\n                _el._katavorioDrag.off(STOP, _pruneOrOrphan);\n            }\n            if (!prune && !orphan && revert) {\n                _el._katavorioDrag.off(REVERT, _revalidate);\n                _el._katavorioDrag.setRevert(null);\n            }\n        }\n\n        function _bindDragHandlers(_el) {\n            if (!_el._katavorioDrag) return;\n            if (prune || orphan) {\n                _el._katavorioDrag.on(STOP, _pruneOrOrphan);\n            }\n\n            if (constrain) {\n                _el._katavorioDrag.setConstrain(true);\n            }\n\n            if (ghost) {\n                _el._katavorioDrag.setUseGhostProxy(true);\n            }\n\n            if (!prune && !orphan && revert) {\n                _el._katavorioDrag.on(REVERT, _revalidate);\n                _el._katavorioDrag.setRevert(function(__el, pos) {\n                    return !_isInsideParent(__el, pos);\n                });\n            }\n        }\n\n        this.shouldProxy = function() {\n            return proxied;\n        };\n\n        _jsPlumb.getGroupManager().addGroup(this);\n    };\n\n    /**\n     * Adds a group to the jsPlumb instance.\n     * @method addGroup\n     * @param {Object} params\n     * @return {Group} The newly created Group.\n     */\n    _jpi.prototype.addGroup = function(params) {\n        var j = this;\n        j._groups = j._groups || {};\n        if (j._groups[params.id] != null) {\n            throw new TypeError(\"cannot create Group [\" + params.id + \"]; a Group with that ID exists\");\n        }\n        if (params.el[GROUP] != null) {\n            throw new TypeError(\"cannot create Group [\" + params.id + \"]; the given element is already a Group\");\n        }\n        var group = new Group(j, params);\n        j._groups[group.id] = group;\n        if (params.collapsed) {\n            this.collapseGroup(group);\n        }\n        return group;\n    };\n\n    /**\n     * Add an element to a group.\n     * @method addToGroup\n     * @param {String} group Group, or ID of the group, to add the element to.\n     * @param {Element} el Element to add to the group.\n     */\n    _jpi.prototype.addToGroup = function(group, el, doNotFireEvent) {\n\n        var _one = function(_el) {\n            var id = this.getId(_el);\n            this.manage(id, _el);\n            this.getGroupManager().addToGroup(group, _el, doNotFireEvent);\n        }.bind(this);\n\n        if (Array.isArray(el)) {\n            for (var i = 0; i < el.length; i++) {\n                _one(el[i]);\n            }\n        } else {\n            _one(el);\n        }\n    };\n\n    /**\n     * Remove an element from a group.\n     * @method removeFromGroup\n     * @param {String} group Group, or ID of the group, to remove the element from.\n     * @param {Element} el Element to add to the group.\n     */\n    _jpi.prototype.removeFromGroup = function(group, el, doNotFireEvent) {\n        this.getGroupManager().removeFromGroup(group, el, doNotFireEvent);\n    };\n\n    /**\n     * Remove a group, and optionally remove its members from the jsPlumb instance.\n     * @method removeGroup\n     * @param {String|Group} group Group to delete, or ID of Group to delete.\n     * @param {Boolean} [deleteMembers=false] If true, group members will be removed along with the group. Otherwise they will\n     * just be 'orphaned' (returned to the main container).\n     */\n    _jpi.prototype.removeGroup = function(group, deleteMembers, manipulateDOM, doNotFireEvent) {\n        this.getGroupManager().removeGroup(group, deleteMembers, manipulateDOM, doNotFireEvent);\n    };\n\n    /**\n     * Remove all groups, and optionally remove their members from the jsPlumb instance.\n     * @method removeAllGroup\n     * @param {Boolean} [deleteMembers=false] If true, group members will be removed along with the groups. Otherwise they will\n     * just be 'orphaned' (returned to the main container).\n     */\n    _jpi.prototype.removeAllGroups = function(deleteMembers, manipulateDOM, doNotFireEvent) {\n        this.getGroupManager().removeAllGroups(deleteMembers, manipulateDOM, doNotFireEvent);\n    };\n\n    /**\n     * Get a Group\n     * @method getGroup\n     * @param {String} groupId ID of the group to get\n     * @return {Group} Group with the given ID, null if not found.\n     */\n    _jpi.prototype.getGroup = function(groupId) {\n        return this.getGroupManager().getGroup(groupId);\n    };\n\n    /**\n     * Gets all the Groups managed by the jsPlumb instance.\n     * @returns {Group[]} List of Groups. Empty if none.\n     */\n    _jpi.prototype.getGroups = function() {\n        return this.getGroupManager().getGroups();\n    };\n\n    /**\n     * Expands a group element. jsPlumb doesn't do \"everything\" for you here, because what it means to expand a Group\n     * will vary from application to application. jsPlumb does these things:\n     *\n     * - Hides any connections that are internal to the group (connections between members, and connections from member of\n     * the group to the group itself)\n     * - Proxies all connections for which the source or target is a member of the group.\n     * - Hides the proxied connections.\n     * - Adds the jtk-group-expanded class to the group's element\n     * - Removes the jtk-group-collapsed class from the group's element.\n     *\n     * @method expandGroup\n     * @param {String|Group} group Group to expand, or ID of Group to expand.\n     */\n    _jpi.prototype.expandGroup = function(group) {\n        this.getGroupManager().expandGroup(group);\n    };\n\n    /**\n     * Collapses a group element. jsPlumb doesn't do \"everything\" for you here, because what it means to collapse a Group\n     * will vary from application to application. jsPlumb does these things:\n     *\n     * - Shows any connections that are internal to the group (connections between members, and connections from member of\n     * the group to the group itself)\n     * - Removes proxies for all connections for which the source or target is a member of the group.\n     * - Shows the previously proxied connections.\n     * - Adds the jtk-group-collapsed class to the group's element\n     * - Removes the jtk-group-expanded class from the group's element.\n     *\n     * @method expandGroup\n     * @param {String|Group} group Group to expand, or ID of Group to expand.\n     */\n    _jpi.prototype.collapseGroup = function(groupId) {\n        this.getGroupManager().collapseGroup(groupId);\n    };\n\n\n    _jpi.prototype.repaintGroup = function(group) {\n        this.getGroupManager().repaintGroup(group);\n    };\n\n    /**\n     * Collapses or expands a group element depending on its current state. See notes in the collapseGroup and expandGroup method.\n     *\n     * @method toggleGroup\n     * @param {String|Group} group Group to expand/collapse, or ID of Group to expand/collapse.\n     */\n    _jpi.prototype.toggleGroup = function(group) {\n        group = this.getGroupManager().getGroup(group);\n        if (group != null) {\n            this.getGroupManager()[group.collapsed ? \"expandGroup\" : \"collapseGroup\"](group);\n        }\n    };\n\n    //\n    // lazy init a group manager for the given jsplumb instance.\n    //\n    _jpi.prototype.getGroupManager = function() {\n        var mgr = this[GROUP_MANAGER];\n        if (mgr == null) {\n            mgr = this[GROUP_MANAGER] = new GroupManager(this);\n        }\n        return mgr;\n    };\n\n    _jpi.prototype.removeGroupManager = function() {\n        delete this[GROUP_MANAGER];\n    };\n\n    /**\n     * Gets the Group that the given element belongs to, null if none.\n     * @method getGroupFor\n     * @param {String|Element} el Element, or element ID.\n     * @returns {Group} A Group, if found, or null.\n     */\n    _jpi.prototype.getGroupFor = function(el) {\n        el = this.getElement(el);\n        if (el) {\n            return el[GROUP];\n        }\n    };\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the 'flowchart' connectors, consisting of vertical and horizontal line segments.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    var Flowchart = function (params) {\n        this.type = \"Flowchart\";\n        params = params || {};\n        params.stub = params.stub == null ? 30 : params.stub;\n        var segments,\n            _super = _jp.Connectors.AbstractConnector.apply(this, arguments),\n            midpoint = params.midpoint == null ? 0.5 : params.midpoint,\n            alwaysRespectStubs = params.alwaysRespectStubs === true,\n            lastx = null, lasty = null, lastOrientation,\n            cornerRadius = params.cornerRadius != null ? params.cornerRadius : 0,\n\n            // TODO now common between this and AbstractBezierEditor; refactor into superclass?\n            loopbackRadius = params.loopbackRadius || 25,\n            isLoopbackCurrently = false,\n\n            sgn = function (n) {\n                return n < 0 ? -1 : n === 0 ? 0 : 1;\n            },\n            /**\n             * helper method to add a segment.\n             */\n            addSegment = function (segments, x, y, paintInfo) {\n                if (lastx == x && lasty == y) return;\n                var lx = lastx == null ? paintInfo.sx : lastx,\n                    ly = lasty == null ? paintInfo.sy : lasty,\n                    o = lx == x ? \"v\" : \"h\",\n                    sgnx = sgn(x - lx),\n                    sgny = sgn(y - ly);\n\n                lastx = x;\n                lasty = y;\n                segments.push([lx, ly, x, y, o, sgnx, sgny]);\n            },\n            segLength = function (s) {\n                return Math.sqrt(Math.pow(s[0] - s[2], 2) + Math.pow(s[1] - s[3], 2));\n            },\n            _cloneArray = function (a) {\n                var _a = [];\n                _a.push.apply(_a, a);\n                return _a;\n            },\n            writeSegments = function (conn, segments, paintInfo) {\n                var current = null, next;\n                for (var i = 0; i < segments.length - 1; i++) {\n\n                    current = current || _cloneArray(segments[i]);\n                    next = _cloneArray(segments[i + 1]);\n                    if (cornerRadius > 0 && current[4] != next[4]) {\n                        var radiusToUse = Math.min(cornerRadius, segLength(current), segLength(next));\n                        // right angle. adjust current segment's end point, and next segment's start point.\n                        current[2] -= current[5] * radiusToUse;\n                        current[3] -= current[6] * radiusToUse;\n                        next[0] += next[5] * radiusToUse;\n                        next[1] += next[6] * radiusToUse;\n                        var ac = (current[6] == next[5] && next[5] == 1) ||\n                                ((current[6] == next[5] && next[5] === 0) && current[5] != next[6]) ||\n                                (current[6] == next[5] && next[5] == -1),\n                            sgny = next[1] > current[3] ? 1 : -1,\n                            sgnx = next[0] > current[2] ? 1 : -1,\n                            sgnEqual = sgny == sgnx,\n                            cx = (sgnEqual && ac || (!sgnEqual && !ac)) ? next[0] : current[2],\n                            cy = (sgnEqual && ac || (!sgnEqual && !ac)) ? current[3] : next[1];\n\n                        _super.addSegment(conn, \"Straight\", {\n                            x1: current[0], y1: current[1], x2: current[2], y2: current[3]\n                        });\n\n                        _super.addSegment(conn, \"Arc\", {\n                            r: radiusToUse,\n                            x1: current[2],\n                            y1: current[3],\n                            x2: next[0],\n                            y2: next[1],\n                            cx: cx,\n                            cy: cy,\n                            ac: ac\n                        });\n                    }\n                    else {\n                        // dx + dy are used to adjust for line width.\n                        var dx = (current[2] == current[0]) ? 0 : (current[2] > current[0]) ? (paintInfo.lw / 2) : -(paintInfo.lw / 2),\n                            dy = (current[3] == current[1]) ? 0 : (current[3] > current[1]) ? (paintInfo.lw / 2) : -(paintInfo.lw / 2);\n                        _super.addSegment(conn, \"Straight\", {\n                            x1: current[0] - dx, y1: current[1] - dy, x2: current[2] + dx, y2: current[3] + dy\n                        });\n                    }\n                    current = next;\n                }\n                if (next != null) {\n                    // last segment\n                    _super.addSegment(conn, \"Straight\", {\n                        x1: next[0], y1: next[1], x2: next[2], y2: next[3]\n                    });\n                }\n            };\n\n        this._compute = function (paintInfo, params) {\n\n            segments = [];\n            lastx = null;\n            lasty = null;\n            lastOrientation = null;\n\n            var commonStubCalculator = function () {\n                return [ paintInfo.startStubX, paintInfo.startStubY, paintInfo.endStubX, paintInfo.endStubY ];\n            },\n                stubCalculators = {\n                    perpendicular: commonStubCalculator,\n                    orthogonal: commonStubCalculator,\n                    opposite: function (axis) {\n                        var pi = paintInfo,\n                            idx = axis == \"x\" ? 0 : 1,\n                            areInProximity = {\n                                \"x\": function () {\n                                    return ( (pi.so[idx] == 1 && (\n                                        ( (pi.startStubX > pi.endStubX) && (pi.tx > pi.startStubX) ) ||\n                                        ( (pi.sx > pi.endStubX) && (pi.tx > pi.sx))))) ||\n\n                                        ( (pi.so[idx] == -1 && (\n                                            ( (pi.startStubX < pi.endStubX) && (pi.tx < pi.startStubX) ) ||\n                                            ( (pi.sx < pi.endStubX) && (pi.tx < pi.sx)))));\n                                },\n                                \"y\": function () {\n                                    return ( (pi.so[idx] == 1 && (\n                                        ( (pi.startStubY > pi.endStubY) && (pi.ty > pi.startStubY) ) ||\n                                        ( (pi.sy > pi.endStubY) && (pi.ty > pi.sy))))) ||\n\n                                        ( (pi.so[idx] == -1 && (\n                                            ( (pi.startStubY < pi.endStubY) && (pi.ty < pi.startStubY) ) ||\n                                            ( (pi.sy < pi.endStubY) && (pi.ty < pi.sy)))));\n                                }\n                            };\n\n                        if (!alwaysRespectStubs && areInProximity[axis]()) {\n                            return {\n                                \"x\": [(paintInfo.sx + paintInfo.tx) / 2, paintInfo.startStubY, (paintInfo.sx + paintInfo.tx) / 2, paintInfo.endStubY],\n                                \"y\": [paintInfo.startStubX, (paintInfo.sy + paintInfo.ty) / 2, paintInfo.endStubX, (paintInfo.sy + paintInfo.ty) / 2]\n                            }[axis];\n                        }\n                        else {\n                            return [ paintInfo.startStubX, paintInfo.startStubY, paintInfo.endStubX, paintInfo.endStubY ];\n                        }\n                    }\n                };\n\n            // calculate Stubs.\n            var stubs = stubCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis),\n                idx = paintInfo.sourceAxis == \"x\" ? 0 : 1,\n                oidx = paintInfo.sourceAxis == \"x\" ? 1 : 0,\n                ss = stubs[idx],\n                oss = stubs[oidx],\n                es = stubs[idx + 2],\n                oes = stubs[oidx + 2];\n\n            // add the start stub segment. use stubs for loopback as it will look better, with the loop spaced\n            // away from the element.\n            addSegment(segments, stubs[0], stubs[1], paintInfo);\n\n            // if its a loopback and we should treat it differently.\n            if (false) {\n\n                // we use loopbackRadius here, as statemachine connectors do.\n                // so we go radius to the left from stubs[0], then upwards by 2*radius, to the right by 2*radius,\n                // down by 2*radius, left by radius.\n                addSegment(segments, stubs[0] - loopbackRadius, stubs[1], paintInfo);\n                addSegment(segments, stubs[0] - loopbackRadius, stubs[1] - (2 * loopbackRadius), paintInfo);\n                addSegment(segments, stubs[0] + loopbackRadius, stubs[1] - (2 * loopbackRadius), paintInfo);\n                addSegment(segments, stubs[0] + loopbackRadius, stubs[1], paintInfo);\n                addSegment(segments, stubs[0], stubs[1], paintInfo);\n\n            }\n            else {\n\n\n                var midx = paintInfo.startStubX + ((paintInfo.endStubX - paintInfo.startStubX) * midpoint),\n                    midy = paintInfo.startStubY + ((paintInfo.endStubY - paintInfo.startStubY) * midpoint);\n\n                var orientations = { x: [ 0, 1 ], y: [ 1, 0 ] },\n                    lineCalculators = {\n                        perpendicular: function (axis) {\n                            var pi = paintInfo,\n                                sis = {\n                                    x: [\n                                        [ [ 1, 2, 3, 4 ], null, [ 2, 1, 4, 3 ] ],\n                                        null,\n                                        [ [ 4, 3, 2, 1 ], null, [ 3, 4, 1, 2 ] ]\n                                    ],\n                                    y: [\n                                        [ [ 3, 2, 1, 4 ], null, [ 2, 3, 4, 1 ] ],\n                                        null,\n                                        [ [ 4, 1, 2, 3 ], null, [ 1, 4, 3, 2 ] ]\n                                    ]\n                                },\n                                stubs = {\n                                    x: [ [ pi.startStubX, pi.endStubX ], null, [ pi.endStubX, pi.startStubX ] ],\n                                    y: [ [ pi.startStubY, pi.endStubY ], null, [ pi.endStubY, pi.startStubY ] ]\n                                },\n                                midLines = {\n                                    x: [ [ midx, pi.startStubY ], [ midx, pi.endStubY ] ],\n                                    y: [ [ pi.startStubX, midy ], [ pi.endStubX, midy ] ]\n                                },\n                                linesToEnd = {\n                                    x: [ [ pi.endStubX, pi.startStubY ] ],\n                                    y: [ [ pi.startStubX, pi.endStubY ] ]\n                                },\n                                startToEnd = {\n                                    x: [ [ pi.startStubX, pi.endStubY ], [ pi.endStubX, pi.endStubY ] ],\n                                    y: [ [ pi.endStubX, pi.startStubY ], [ pi.endStubX, pi.endStubY ] ]\n                                },\n                                startToMidToEnd = {\n                                    x: [ [ pi.startStubX, midy ], [ pi.endStubX, midy ], [ pi.endStubX, pi.endStubY ] ],\n                                    y: [ [ midx, pi.startStubY ], [ midx, pi.endStubY ], [ pi.endStubX, pi.endStubY ] ]\n                                },\n                                otherStubs = {\n                                    x: [ pi.startStubY, pi.endStubY ],\n                                    y: [ pi.startStubX, pi.endStubX ]\n                                },\n                                soIdx = orientations[axis][0], toIdx = orientations[axis][1],\n                                _so = pi.so[soIdx] + 1,\n                                _to = pi.to[toIdx] + 1,\n                                otherFlipped = (pi.to[toIdx] == -1 && (otherStubs[axis][1] < otherStubs[axis][0])) || (pi.to[toIdx] == 1 && (otherStubs[axis][1] > otherStubs[axis][0])),\n                                stub1 = stubs[axis][_so][0],\n                                stub2 = stubs[axis][_so][1],\n                                segmentIndexes = sis[axis][_so][_to];\n\n                            if (pi.segment == segmentIndexes[3] || (pi.segment == segmentIndexes[2] && otherFlipped)) {\n                                return midLines[axis];\n                            }\n                            else if (pi.segment == segmentIndexes[2] && stub2 < stub1) {\n                                return linesToEnd[axis];\n                            }\n                            else if ((pi.segment == segmentIndexes[2] && stub2 >= stub1) || (pi.segment == segmentIndexes[1] && !otherFlipped)) {\n                                return startToMidToEnd[axis];\n                            }\n                            else if (pi.segment == segmentIndexes[0] || (pi.segment == segmentIndexes[1] && otherFlipped)) {\n                                return startToEnd[axis];\n                            }\n                        },\n                        orthogonal: function (axis, startStub, otherStartStub, endStub, otherEndStub) {\n                            var pi = paintInfo,\n                                extent = {\n                                    \"x\": pi.so[0] == -1 ? Math.min(startStub, endStub) : Math.max(startStub, endStub),\n                                    \"y\": pi.so[1] == -1 ? Math.min(startStub, endStub) : Math.max(startStub, endStub)\n                                }[axis];\n\n                            return {\n                                \"x\": [\n                                    [ extent, otherStartStub ],\n                                    [ extent, otherEndStub ],\n                                    [ endStub, otherEndStub ]\n                                ],\n                                \"y\": [\n                                    [ otherStartStub, extent ],\n                                    [ otherEndStub, extent ],\n                                    [ otherEndStub, endStub ]\n                                ]\n                            }[axis];\n                        },\n                        opposite: function (axis, ss, oss, es) {\n                            var pi = paintInfo,\n                                otherAxis = {\"x\": \"y\", \"y\": \"x\"}[axis],\n                                dim = {\"x\": \"height\", \"y\": \"width\"}[axis],\n                                comparator = pi[\"is\" + axis.toUpperCase() + \"GreaterThanStubTimes2\"];\n\n                            if (params.sourceEndpoint.elementId == params.targetEndpoint.elementId) {\n                                var _val = oss + ((1 - params.sourceEndpoint.anchor[otherAxis]) * params.sourceInfo[dim]) + _super.maxStub;\n                                return {\n                                    \"x\": [\n                                        [ ss, _val ],\n                                        [ es, _val ]\n                                    ],\n                                    \"y\": [\n                                        [ _val, ss ],\n                                        [ _val, es ]\n                                    ]\n                                }[axis];\n\n                            }\n                            else if (!comparator || (pi.so[idx] == 1 && ss > es) || (pi.so[idx] == -1 && ss < es)) {\n                                return {\n                                    \"x\": [\n                                        [ ss, midy ],\n                                        [ es, midy ]\n                                    ],\n                                    \"y\": [\n                                        [ midx, ss ],\n                                        [ midx, es ]\n                                    ]\n                                }[axis];\n                            }\n                            else if ((pi.so[idx] == 1 && ss < es) || (pi.so[idx] == -1 && ss > es)) {\n                                return {\n                                    \"x\": [\n                                        [ midx, pi.sy ],\n                                        [ midx, pi.ty ]\n                                    ],\n                                    \"y\": [\n                                        [ pi.sx, midy ],\n                                        [ pi.tx, midy ]\n                                    ]\n                                }[axis];\n                            }\n                        }\n                    };\n\n                // compute the rest of the line\n                var p = lineCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis, ss, oss, es, oes);\n                if (p) {\n                    for (var i = 0; i < p.length; i++) {\n                        addSegment(segments, p[i][0], p[i][1], paintInfo);\n                    }\n                }\n\n                // line to end stub\n                addSegment(segments, stubs[2], stubs[3], paintInfo);\n\n            }\n\n            // end stub to end (common)\n            addSegment(segments, paintInfo.tx, paintInfo.ty, paintInfo);\n\n            // write out the segments.\n            writeSegments(this, segments, paintInfo);\n        };\n\n        /*this.getPath = function () {\n            var _last = null, _lastAxis = null, s = [], segs = segments;\n            for (var i = 0; i < segs.length; i++) {\n                var seg = segs[i], axis = seg[4], axisIndex = (axis == \"v\" ? 3 : 2);\n                if (_last != null && _lastAxis === axis) {\n                    _last[axisIndex] = seg[axisIndex];\n                }\n                else {\n                    if (seg[0] != seg[2] || seg[1] != seg[3]) {\n                        s.push({\n                            start: [ seg[0], seg[1] ],\n                            end: [ seg[2], seg[3] ]\n                        });\n                        _last = seg;\n                        _lastAxis = seg[4];\n                    }\n                }\n            }\n            return s;\n        };*/\n    };\n\n    _ju.extend(Flowchart, _jp.Connectors.AbstractConnector);\n    _jp.registerConnectorType(Flowchart, \"Flowchart\");\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the code for the Bezier connector type.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    _jp.Connectors.AbstractBezierConnector = function(params) {\n        params = params || {};\n        var showLoopback = params.showLoopback !== false,\n            curviness = params.curviness || 10,\n            margin = params.margin || 5,\n            proximityLimit = params.proximityLimit || 80,\n            clockwise = params.orientation && params.orientation === \"clockwise\",\n            loopbackRadius = params.loopbackRadius || 25,\n            isLoopbackCurrently = false,\n            _super;\n\n        this.overrideSetEditable = function() { return !isLoopbackCurrently; };\n\n        this._compute = function (paintInfo, p) {\n\n            var sp = p.sourcePos,\n                tp = p.targetPos,\n                _w = Math.abs(sp[0] - tp[0]),\n                _h = Math.abs(sp[1] - tp[1]);\n\n            if (!showLoopback || (p.sourceEndpoint.elementId !== p.targetEndpoint.elementId)) {\n                isLoopbackCurrently = false;\n                this._computeBezier(paintInfo, p, sp, tp, _w, _h);\n            } else {\n                isLoopbackCurrently = true;\n                // a loopback connector.  draw an arc from one anchor to the other.\n                var x1 = p.sourcePos[0], y1 = p.sourcePos[1] - margin,\n                    cx = x1, cy = y1 - loopbackRadius,\n                // canvas sizing stuff, to ensure the whole painted area is visible.\n                    _x = cx - loopbackRadius,\n                    _y = cy - loopbackRadius;\n\n                _w = 2 * loopbackRadius;\n                _h = 2 * loopbackRadius;\n\n                paintInfo.points[0] = _x;\n                paintInfo.points[1] = _y;\n                paintInfo.points[2] = _w;\n                paintInfo.points[3] = _h;\n\n                // ADD AN ARC SEGMENT.\n                _super.addSegment(this, \"Arc\", {\n                    loopback: true,\n                    x1: (x1 - _x) + 4,\n                    y1: y1 - _y,\n                    startAngle: 0,\n                    endAngle: 2 * Math.PI,\n                    r: loopbackRadius,\n                    ac: !clockwise,\n                    x2: (x1 - _x) - 4,\n                    y2: y1 - _y,\n                    cx: cx - _x,\n                    cy: cy - _y\n                });\n            }\n        };\n\n        _super = _jp.Connectors.AbstractConnector.apply(this, arguments);\n        return _super;\n    };\n    _ju.extend(_jp.Connectors.AbstractBezierConnector, _jp.Connectors.AbstractConnector);\n\n    var Bezier = function (params) {\n        params = params || {};\n        this.type = \"Bezier\";\n\n        var _super = _jp.Connectors.AbstractBezierConnector.apply(this, arguments),\n            majorAnchor = params.curviness || 150,\n            minorAnchor = 10;\n\n        this.getCurviness = function () {\n            return majorAnchor;\n        };\n\n        this._findControlPoint = function (point, sourceAnchorPosition, targetAnchorPosition, sourceEndpoint, targetEndpoint, soo, too) {\n            // determine if the two anchors are perpendicular to each other in their orientation.  we swap the control\n            // points around if so (code could be tightened up)\n            var perpendicular = soo[0] != too[0] || soo[1] == too[1],\n                p = [];\n\n            if (!perpendicular) {\n                if (soo[0] === 0) // X\n                    p.push(sourceAnchorPosition[0] < targetAnchorPosition[0] ? point[0] + minorAnchor : point[0] - minorAnchor);\n                else p.push(point[0] - (majorAnchor * soo[0]));\n\n                if (soo[1] === 0) // Y\n                    p.push(sourceAnchorPosition[1] < targetAnchorPosition[1] ? point[1] + minorAnchor : point[1] - minorAnchor);\n                else p.push(point[1] + (majorAnchor * too[1]));\n            }\n            else {\n                if (too[0] === 0) // X\n                    p.push(targetAnchorPosition[0] < sourceAnchorPosition[0] ? point[0] + minorAnchor : point[0] - minorAnchor);\n                else p.push(point[0] + (majorAnchor * too[0]));\n\n                if (too[1] === 0) // Y\n                    p.push(targetAnchorPosition[1] < sourceAnchorPosition[1] ? point[1] + minorAnchor : point[1] - minorAnchor);\n                else p.push(point[1] + (majorAnchor * soo[1]));\n            }\n\n            return p;\n        };\n\n        this._computeBezier = function (paintInfo, p, sp, tp, _w, _h) {\n\n            var geometry = this.getGeometry(), _CP, _CP2,\n                _sx = sp[0] < tp[0] ? _w : 0,\n                _sy = sp[1] < tp[1] ? _h : 0,\n                _tx = sp[0] < tp[0] ? 0 : _w,\n                _ty = sp[1] < tp[1] ? 0 : _h;\n\n            if ((this.hasBeenEdited() || this.isEditing()) && geometry != null && geometry.controlPoints != null && geometry.controlPoints[0] != null && geometry.controlPoints[1] != null) {\n                _CP = geometry.controlPoints[0];\n                _CP2 = geometry.controlPoints[1];\n            }\n            else {\n                _CP = this._findControlPoint([_sx, _sy], sp, tp, p.sourceEndpoint, p.targetEndpoint, paintInfo.so, paintInfo.to);\n                _CP2 = this._findControlPoint([_tx, _ty], tp, sp, p.targetEndpoint, p.sourceEndpoint, paintInfo.to, paintInfo.so);\n            }\n\n            _super.setGeometry({controlPoints:[_CP, _CP2]}, true);\n\n            _super.addSegment(this, \"Bezier\", {\n                x1: _sx, y1: _sy, x2: _tx, y2: _ty,\n                cp1x: _CP[0], cp1y: _CP[1], cp2x: _CP2[0], cp2y: _CP2[1]\n            });\n        };\n\n\n    };\n\n    _ju.extend(Bezier, _jp.Connectors.AbstractBezierConnector);\n    _jp.registerConnectorType(Bezier, \"Bezier\");\n\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the state machine connectors, which extend AbstractBezierConnector.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    var _segment = function (x1, y1, x2, y2) {\n            if (x1 <= x2 && y2 <= y1) return 1;\n            else if (x1 <= x2 && y1 <= y2) return 2;\n            else if (x2 <= x1 && y2 >= y1) return 3;\n            return 4;\n        },\n\n    // the control point we will use depends on the faces to which each end of the connection is assigned, specifically whether or not the\n    // two faces are parallel or perpendicular.  if they are parallel then the control point lies on the midpoint of the axis in which they\n    // are parellel and varies only in the other axis; this variation is proportional to the distance that the anchor points lie from the\n    // center of that face.  if the two faces are perpendicular then the control point is at some distance from both the midpoints; the amount and\n    // direction are dependent on the orientation of the two elements. 'seg', passed in to this method, tells you which segment the target element\n    // lies in with respect to the source: 1 is top right, 2 is bottom right, 3 is bottom left, 4 is top left.\n    //\n    // sourcePos and targetPos are arrays of info about where on the source and target each anchor is located.  their contents are:\n    //\n    // 0 - absolute x\n    // 1 - absolute y\n    // 2 - proportional x in element (0 is left edge, 1 is right edge)\n    // 3 - proportional y in element (0 is top edge, 1 is bottom edge)\n    //\n        _findControlPoint = function (midx, midy, segment, sourceEdge, targetEdge, dx, dy, distance, proximityLimit) {\n            // TODO (maybe)\n            // - if anchor pos is 0.5, make the control point take into account the relative position of the elements.\n            if (distance <= proximityLimit) return [midx, midy];\n\n            if (segment === 1) {\n                if (sourceEdge[3] <= 0 && targetEdge[3] >= 1) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];\n                else if (sourceEdge[2] >= 1 && targetEdge[2] <= 0) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];\n                else return [ midx + (-1 * dx) , midy + (-1 * dy) ];\n            }\n            else if (segment === 2) {\n                if (sourceEdge[3] >= 1 && targetEdge[3] <= 0) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];\n                else if (sourceEdge[2] >= 1 && targetEdge[2] <= 0) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];\n                else return [ midx + dx, midy + (-1 * dy) ];\n            }\n            else if (segment === 3) {\n                if (sourceEdge[3] >= 1 && targetEdge[3] <= 0) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];\n                else if (sourceEdge[2] <= 0 && targetEdge[2] >= 1) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];\n                else return [ midx + (-1 * dx) , midy + (-1 * dy) ];\n            }\n            else if (segment === 4) {\n                if (sourceEdge[3] <= 0 && targetEdge[3] >= 1) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];\n                else if (sourceEdge[2] <= 0 && targetEdge[2] >= 1) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];\n                else return [ midx + dx , midy + (-1 * dy) ];\n            }\n\n        };\n\n    var StateMachine = function (params) {\n        params = params || {};\n        this.type = \"StateMachine\";\n\n        var _super = _jp.Connectors.AbstractBezierConnector.apply(this, arguments),\n            curviness = params.curviness || 10,\n            margin = params.margin || 5,\n            proximityLimit = params.proximityLimit || 80,\n            clockwise = params.orientation && params.orientation === \"clockwise\",\n            _controlPoint;\n\n        this._computeBezier = function(paintInfo, params, sp, tp, w, h) {\n            var _sx = params.sourcePos[0] < params.targetPos[0] ? 0 : w,\n                _sy = params.sourcePos[1] < params.targetPos[1] ? 0 : h,\n                _tx = params.sourcePos[0] < params.targetPos[0] ? w : 0,\n                _ty = params.sourcePos[1] < params.targetPos[1] ? h : 0;\n\n            // now adjust for the margin\n            if (params.sourcePos[2] === 0) _sx -= margin;\n            if (params.sourcePos[2] === 1) _sx += margin;\n            if (params.sourcePos[3] === 0) _sy -= margin;\n            if (params.sourcePos[3] === 1) _sy += margin;\n            if (params.targetPos[2] === 0) _tx -= margin;\n            if (params.targetPos[2] === 1) _tx += margin;\n            if (params.targetPos[3] === 0) _ty -= margin;\n            if (params.targetPos[3] === 1) _ty += margin;\n\n            //\n            // these connectors are quadratic bezier curves, having a single control point. if both anchors\n            // are located at 0.5 on their respective faces, the control point is set to the midpoint and you\n            // get a straight line.  this is also the case if the two anchors are within 'proximityLimit', since\n            // it seems to make good aesthetic sense to do that. outside of that, the control point is positioned\n            // at 'curviness' pixels away along the normal to the straight line connecting the two anchors.\n            //\n            // there may be two improvements to this.  firstly, we might actually support the notion of avoiding nodes\n            // in the UI, or at least making a good effort at doing so.  if a connection would pass underneath some node,\n            // for example, we might increase the distance the control point is away from the midpoint in a bid to\n            // steer it around that node.  this will work within limits, but i think those limits would also be the likely\n            // limits for, once again, aesthetic good sense in the layout of a chart using these connectors.\n            //\n            // the second possible change is actually two possible changes: firstly, it is possible we should gradually\n            // decrease the 'curviness' as the distance between the anchors decreases; start tailing it off to 0 at some\n            // point (which should be configurable).  secondly, we might slightly increase the 'curviness' for connectors\n            // with respect to how far their anchor is from the center of its respective face. this could either look cool,\n            // or stupid, and may indeed work only in a way that is so subtle as to have been a waste of time.\n            //\n\n            var _midx = (_sx + _tx) / 2,\n                _midy = (_sy + _ty) / 2,\n                segment = _segment(_sx, _sy, _tx, _ty),\n                distance = Math.sqrt(Math.pow(_tx - _sx, 2) + Math.pow(_ty - _sy, 2)),\n                cp1x, cp2x, cp1y, cp2y,\n                geometry = _super.getGeometry();\n\n            if ((this.hasBeenEdited() || this.isEditing()) && geometry != null) {\n                cp1x = geometry.controlPoints[0][0];\n                cp1y = geometry.controlPoints[0][1];\n                cp2x = geometry.controlPoints[1][0];\n                cp2y = geometry.controlPoints[1][1];\n            }\n            else {\n                // calculate the control point.  this code will be where we'll put in a rudimentary element avoidance scheme; it\n                // will work by extending the control point to force the curve to be, um, curvier.\n                _controlPoint = _findControlPoint(_midx,\n                    _midy,\n                    segment,\n                    params.sourcePos,\n                    params.targetPos,\n                    curviness, curviness,\n                    distance,\n                    proximityLimit);\n\n                cp1x = _controlPoint[0];\n                cp2x = _controlPoint[0];\n                cp1y = _controlPoint[1];\n                cp2y = _controlPoint[1];\n\n                _super.setGeometry({controlPoints:[_controlPoint, _controlPoint]}, true);\n            }\n\n            _super.addSegment(this, \"Bezier\", {\n                x1: _tx, y1: _ty, x2: _sx, y2: _sy,\n                cp1x: cp1x, cp1y: cp1y,\n                cp2x: cp2x, cp2y: cp2y\n            });\n        };\n    };\n\n    _ju.extend(StateMachine, _jp.Connectors.AbstractBezierConnector);\n    _jp.registerConnectorType(StateMachine, \"StateMachine\");\n\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the 'flowchart' connectors, consisting of vertical and horizontal line segments.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n    var STRAIGHT = \"Straight\";\n\n    var Straight = function (params) {\n        this.type = STRAIGHT;\n        var _super = _jp.Connectors.AbstractConnector.apply(this, arguments);\n\n        this._compute = function (paintInfo, _) {\n            _super.addSegment(this, STRAIGHT, {x1: paintInfo.sx, y1: paintInfo.sy, x2: paintInfo.startStubX, y2: paintInfo.startStubY});\n            _super.addSegment(this, STRAIGHT, {x1: paintInfo.startStubX, y1: paintInfo.startStubY, x2: paintInfo.endStubX, y2: paintInfo.endStubY});\n            _super.addSegment(this, STRAIGHT, {x1: paintInfo.endStubX, y1: paintInfo.endStubY, x2: paintInfo.tx, y2: paintInfo.ty});\n        };\n    };\n\n    _ju.extend(Straight, _jp.Connectors.AbstractConnector);\n    _jp.registerConnectorType(Straight, STRAIGHT);\n\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the SVG renderers.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n// ************************** SVG utility methods ********************************************\t\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    var svgAttributeMap = {\n            \"stroke-linejoin\": \"stroke-linejoin\",\n            \"stroke-dashoffset\": \"stroke-dashoffset\",\n            \"stroke-linecap\": \"stroke-linecap\"\n        },\n        STROKE_DASHARRAY = \"stroke-dasharray\",\n        DASHSTYLE = \"dashstyle\",\n        LINEAR_GRADIENT = \"linearGradient\",\n        RADIAL_GRADIENT = \"radialGradient\",\n        DEFS = \"defs\",\n        FILL = \"fill\",\n        STOP = \"stop\",\n        STROKE = \"stroke\",\n        STROKE_WIDTH = \"stroke-width\",\n        STYLE = \"style\",\n        NONE = \"none\",\n        JSPLUMB_GRADIENT = \"jsplumb_gradient_\",\n        LINE_WIDTH = \"strokeWidth\",\n        ns = {\n            svg: \"http://www.w3.org/2000/svg\",\n            xhtml: \"http://www.w3.org/1999/xhtml\"\n        },\n        _attr = function (node, attributes) {\n            for (var i in attributes)\n                node.setAttribute(i, \"\" + attributes[i]);\n        },\n        _node = function (name, attributes) {\n            attributes = attributes || {};\n            attributes.version = \"1.1\";\n            attributes.xmlns = ns.xhtml;\n            return _jp.createElementNS(ns.svg, name, null, null, attributes);\n        },\n        _pos = function (d) {\n            return \"position:absolute;left:\" + d[0] + \"px;top:\" + d[1] + \"px\";\n        },\n        _clearGradient = function (parent) {\n            var els = parent.querySelectorAll(\" defs,linearGradient,radialGradient\");\n            for (var i = 0; i < els.length; i++)\n                els[i].parentNode.removeChild(els[i]);\n        },\n        _updateGradient = function (parent, node, style, dimensions, uiComponent) {\n            var id = JSPLUMB_GRADIENT + uiComponent._jsPlumb.instance.idstamp();\n            // first clear out any existing gradient\n            _clearGradient(parent);\n            // this checks for an 'offset' property in the gradient, and in the absence of it, assumes\n            // we want a linear gradient. if it's there, we create a radial gradient.\n            // it is possible that a more explicit means of defining the gradient type would be\n            // better. relying on 'offset' means that we can never have a radial gradient that uses\n            // some default offset, for instance.\n            // issue 244 suggested the 'gradientUnits' attribute; without this, straight/flowchart connectors with gradients would\n            // not show gradients when the line was perfectly horizontal or vertical.\n            var g;\n            if (!style.gradient.offset)\n                g = _node(LINEAR_GRADIENT, {id: id, gradientUnits: \"userSpaceOnUse\"});\n            else\n                g = _node(RADIAL_GRADIENT, { id: id });\n\n            var defs = _node(DEFS);\n            parent.appendChild(defs);\n            defs.appendChild(g);\n\n            // the svg radial gradient seems to treat stops in the reverse\n            // order to how canvas does it.  so we want to keep all the maths the same, but\n            // iterate the actual style declarations in reverse order, if the x indexes are not in order.\n            for (var i = 0; i < style.gradient.stops.length; i++) {\n                var styleToUse = uiComponent.segment == 1 || uiComponent.segment == 2 ? i : style.gradient.stops.length - 1 - i,\n                    //stopColor = _ju.convertStyle(style.gradient.stops[styleToUse][1], true),\n                    stopColor = style.gradient.stops[styleToUse][1],\n                    s = _node(STOP, {\"offset\": Math.floor(style.gradient.stops[i][0] * 100) + \"%\", \"stop-color\": stopColor});\n\n                g.appendChild(s);\n            }\n            var applyGradientTo = style.stroke ? STROKE : FILL;\n            node.setAttribute(applyGradientTo, \"url(#\" + id + \")\");\n        },\n        _applyStyles = function (parent, node, style, dimensions, uiComponent) {\n\n            node.setAttribute(FILL, style.fill ? style.fill : NONE);\n            node.setAttribute(STROKE, style.stroke ? style.stroke : NONE);\n\n            if (style.gradient) {\n                _updateGradient(parent, node, style, dimensions, uiComponent);\n            }\n            else {\n                // make sure we clear any existing gradient\n                _clearGradient(parent);\n                node.setAttribute(STYLE, \"\");\n            }\n\n            if (style.strokeWidth) {\n                node.setAttribute(STROKE_WIDTH, style.strokeWidth);\n            }\n\n            // in SVG there is a stroke-dasharray attribute we can set, and its syntax looks like\n            // the syntax in VML but is actually kind of nasty: values are given in the pixel\n            // coordinate space, whereas in VML they are multiples of the width of the stroked\n            // line, which makes a lot more sense.  for that reason, jsPlumb is supporting both\n            // the native svg 'stroke-dasharray' attribute, and also the 'dashstyle' concept from\n            // VML, which will be the preferred method.  the code below this converts a dashstyle\n            // attribute given in terms of stroke width into a pixel representation, by using the\n            // stroke's lineWidth.\n            if (style[DASHSTYLE] && style[LINE_WIDTH] && !style[STROKE_DASHARRAY]) {\n                var sep = style[DASHSTYLE].indexOf(\",\") == -1 ? \" \" : \",\",\n                    parts = style[DASHSTYLE].split(sep),\n                    styleToUse = \"\";\n                parts.forEach(function (p) {\n                    styleToUse += (Math.floor(p * style.strokeWidth) + sep);\n                });\n                node.setAttribute(STROKE_DASHARRAY, styleToUse);\n            }\n            else if (style[STROKE_DASHARRAY]) {\n                node.setAttribute(STROKE_DASHARRAY, style[STROKE_DASHARRAY]);\n            }\n\n            // extra attributes such as join type, dash offset.\n            for (var i in svgAttributeMap) {\n                if (style[i]) {\n                    node.setAttribute(svgAttributeMap[i], style[i]);\n                }\n            }\n        },\n        _appendAtIndex = function (svg, path, idx) {\n            if (svg.childNodes.length > idx) {\n                svg.insertBefore(path, svg.childNodes[idx]);\n            }\n            else svg.appendChild(path);\n        };\n\n    /**\n     utility methods for other objects to use.\n     */\n    _ju.svg = {\n        node: _node,\n        attr: _attr,\n        pos: _pos\n    };\n\n    // ************************** / SVG utility methods ********************************************\n\n    /*\n     * Base class for SVG components.\n     */\n    var SvgComponent = function (params) {\n        var pointerEventsSpec = params.pointerEventsSpec || \"all\", renderer = {};\n\n        _jp.jsPlumbUIComponent.apply(this, params.originalArgs);\n        this.canvas = null;\n        this.path = null;\n        this.svg = null;\n        this.bgCanvas = null;\n\n        var clazz = params.cssClass + \" \" + (params.originalArgs[0].cssClass || \"\"),\n            svgParams = {\n                \"style\": \"\",\n                \"width\": 0,\n                \"height\": 0,\n                \"pointer-events\": pointerEventsSpec,\n                \"position\": \"absolute\"\n            };\n\n        this.svg = _node(\"svg\", svgParams);\n\n        if (params.useDivWrapper) {\n            this.canvas = _jp.createElement(\"div\", { position : \"absolute\" });\n            _ju.sizeElement(this.canvas, 0, 0, 1, 1);\n            this.canvas.className = clazz;\n        }\n        else {\n            _attr(this.svg, { \"class\": clazz });\n            this.canvas = this.svg;\n        }\n\n        params._jsPlumb.appendElement(this.canvas, params.originalArgs[0].parent);\n        if (params.useDivWrapper) this.canvas.appendChild(this.svg);\n\n        var displayElements = [ this.canvas ];\n        this.getDisplayElements = function () {\n            return displayElements;\n        };\n\n        this.appendDisplayElement = function (el) {\n            displayElements.push(el);\n        };\n\n        this.paint = function (style, anchor, extents) {\n            if (style != null) {\n\n                var xy = [ this.x, this.y ], wh = [ this.w, this.h ], p;\n                if (extents != null) {\n                    if (extents.xmin < 0) xy[0] += extents.xmin;\n                    if (extents.ymin < 0) xy[1] += extents.ymin;\n                    wh[0] = extents.xmax + ((extents.xmin < 0) ? -extents.xmin : 0);\n                    wh[1] = extents.ymax + ((extents.ymin < 0) ? -extents.ymin : 0);\n                }\n\n                if (params.useDivWrapper) {\n                    _ju.sizeElement(this.canvas, xy[0], xy[1], wh[0], wh[1]);\n                    xy[0] = 0;\n                    xy[1] = 0;\n                    p = _pos([ 0, 0 ]);\n                }\n                else\n                    p = _pos([ xy[0], xy[1] ]);\n\n                renderer.paint.apply(this, arguments);\n\n                _attr(this.svg, {\n                    \"style\": p,\n                    \"width\": wh[0] || 0,\n                    \"height\": wh[1] || 0\n                });\n            }\n        };\n\n        return {\n            renderer: renderer\n        };\n    };\n\n    _ju.extend(SvgComponent, _jp.jsPlumbUIComponent, {\n        cleanup: function (force) {\n            if (force || this.typeId == null) {\n                if (this.canvas) this.canvas._jsPlumb = null;\n                if (this.svg) this.svg._jsPlumb = null;\n                if (this.bgCanvas) this.bgCanvas._jsPlumb = null;\n\n                if (this.canvas && this.canvas.parentNode)\n                    this.canvas.parentNode.removeChild(this.canvas);\n                if (this.bgCanvas && this.bgCanvas.parentNode)\n                    this.canvas.parentNode.removeChild(this.canvas);\n\n                this.svg = null;\n                this.canvas = null;\n                this.path = null;\n                this.group = null;\n            }\n            else {\n                // if not a forced cleanup, just detach from DOM for now.\n                if (this.canvas && this.canvas.parentNode) this.canvas.parentNode.removeChild(this.canvas);\n                if (this.bgCanvas && this.bgCanvas.parentNode) this.bgCanvas.parentNode.removeChild(this.bgCanvas);\n            }\n        },\n        reattach:function(instance) {\n            var c = instance.getContainer();\n            if (this.canvas && this.canvas.parentNode == null) c.appendChild(this.canvas);\n            if (this.bgCanvas && this.bgCanvas.parentNode == null) c.appendChild(this.bgCanvas);\n        },\n        setVisible: function (v) {\n            if (this.canvas) {\n                this.canvas.style.display = v ? \"block\" : \"none\";\n            }\n        }\n    });\n\n    /*\n     * Base class for SVG connectors.\n     */\n    _jp.ConnectorRenderers.svg = function (params) {\n        var self = this,\n            _super = SvgComponent.apply(this, [\n                {\n                    cssClass: params._jsPlumb.connectorClass + (this.isEditable() ? \" \" + params._jsPlumb.editableConnectorClass : \"\"),\n                    originalArgs: arguments,\n                    pointerEventsSpec: \"none\",\n                    _jsPlumb: params._jsPlumb\n                }\n            ]);\n\n        var _superSetEditable = this.setEditable;\n        this.setEditable = function(e) {\n            var result = _superSetEditable.apply(this, [e]);\n            _jp[result ? \"addClass\" : \"removeClass\"](this.canvas, this._jsPlumb.instance.editableConnectorClass);\n        };\n\n        _super.renderer.paint = function (style, anchor, extents) {\n\n            var segments = self.getSegments(), p = \"\", offset = [0, 0];\n            if (extents.xmin < 0) offset[0] = -extents.xmin;\n            if (extents.ymin < 0) offset[1] = -extents.ymin;\n\n            if (segments.length > 0) {\n\n                p = self.getPathData();\n\n                var a = {\n                        d: p,\n                        transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\",\n                        \"pointer-events\": params[\"pointer-events\"] || \"visibleStroke\"\n                    },\n                    outlineStyle = null,\n                    d = [self.x, self.y, self.w, self.h];\n\n                // outline style.  actually means drawing an svg object underneath the main one.\n                if (style.outlineStroke) {\n                    var outlineWidth = style.outlineWidth || 1,\n                        outlineStrokeWidth = style.strokeWidth + (2 * outlineWidth);\n                    outlineStyle = _jp.extend({}, style);\n                    delete outlineStyle.gradient;\n                    outlineStyle.stroke = style.outlineStroke;\n                    outlineStyle.strokeWidth = outlineStrokeWidth;\n\n                    if (self.bgPath == null) {\n                        self.bgPath = _node(\"path\", a);\n                        _jp.addClass(self.bgPath, _jp.connectorOutlineClass);\n                        _appendAtIndex(self.svg, self.bgPath, 0);\n                    }\n                    else {\n                        _attr(self.bgPath, a);\n                    }\n\n                    _applyStyles(self.svg, self.bgPath, outlineStyle, d, self);\n                }\n\n                if (self.path == null) {\n                    self.path = _node(\"path\", a);\n                    _appendAtIndex(self.svg, self.path, style.outlineStroke ? 1 : 0);\n                }\n                else {\n                    _attr(self.path, a);\n                }\n\n                _applyStyles(self.svg, self.path, style, d, self);\n            }\n        };\n    };\n    _ju.extend(_jp.ConnectorRenderers.svg, SvgComponent);\n\n// ******************************* svg segment renderer *****************************************************\t\n\n\n// ******************************* /svg segments *****************************************************\n\n    /*\n     * Base class for SVG endpoints.\n     */\n    var SvgEndpoint = _jp.SvgEndpoint = function (params) {\n        var _super = SvgComponent.apply(this, [\n            {\n                cssClass: params._jsPlumb.endpointClass,\n                originalArgs: arguments,\n                pointerEventsSpec: \"all\",\n                useDivWrapper: true,\n                _jsPlumb: params._jsPlumb\n            }\n        ]);\n\n        _super.renderer.paint = function (style) {\n            var s = _jp.extend({}, style);\n            if (s.outlineStroke) {\n                s.strokeWidth = s.strokeWidth;\n                s.stroke = s.outlineStroke;\n            }\n\n            if (this.node == null) {\n                this.node = this.makeNode(s);\n                this.svg.appendChild(this.node);\n            }\n            else if (this.updateNode != null) {\n                this.updateNode(this.node);\n            }\n            _applyStyles(this.svg, this.node, s, [ this.x, this.y, this.w, this.h ], this);\n            _pos(this.node, [ this.x, this.y ]);\n        }.bind(this);\n\n    };\n    _ju.extend(SvgEndpoint, SvgComponent);\n\n    /*\n     * SVG Dot Endpoint\n     */\n    _jp.Endpoints.svg.Dot = function () {\n        _jp.Endpoints.Dot.apply(this, arguments);\n        SvgEndpoint.apply(this, arguments);\n        this.makeNode = function (style) {\n            return _node(\"circle\", {\n                \"cx\": this.w / 2,\n                \"cy\": this.h / 2,\n                \"r\": this.radius\n            });\n        };\n        this.updateNode = function (node) {\n            _attr(node, {\n                \"cx\": this.w / 2,\n                \"cy\": this.h / 2,\n                \"r\": this.radius\n            });\n        };\n    };\n    _ju.extend(_jp.Endpoints.svg.Dot, [_jp.Endpoints.Dot, SvgEndpoint]);\n\n    /*\n     * SVG Rectangle Endpoint\n     */\n    _jp.Endpoints.svg.Rectangle = function () {\n        _jp.Endpoints.Rectangle.apply(this, arguments);\n        SvgEndpoint.apply(this, arguments);\n        this.makeNode = function (style) {\n            return _node(\"rect\", {\n                \"width\": this.w,\n                \"height\": this.h\n            });\n        };\n        this.updateNode = function (node) {\n            _attr(node, {\n                \"width\": this.w,\n                \"height\": this.h\n            });\n        };\n    };\n    _ju.extend(_jp.Endpoints.svg.Rectangle, [_jp.Endpoints.Rectangle, SvgEndpoint]);\n\n    /*\n     * SVG Image Endpoint is the default image endpoint.\n     */\n    _jp.Endpoints.svg.Image = _jp.Endpoints.Image;\n    /*\n     * Blank endpoint in svg renderer is the default Blank endpoint.\n     */\n    _jp.Endpoints.svg.Blank = _jp.Endpoints.Blank;\n    /*\n     * Label overlay in svg renderer is the default Label overlay.\n     */\n    _jp.Overlays.svg.Label = _jp.Overlays.Label;\n    /*\n     * Custom overlay in svg renderer is the default Custom overlay.\n     */\n    _jp.Overlays.svg.Custom = _jp.Overlays.Custom;\n\n    var AbstractSvgArrowOverlay = function (superclass, originalArgs) {\n        superclass.apply(this, originalArgs);\n        _jp.jsPlumbUIComponent.apply(this, originalArgs);\n        this.isAppendedAtTopLevel = false;\n        var self = this;\n        this.path = null;\n        this.paint = function (params, containerExtents) {\n            // only draws on connections, not endpoints.\n            if (params.component.svg && containerExtents) {\n                if (this.path == null) {\n                    this.path = _node(\"path\", {\n                        \"pointer-events\": \"all\"\n                    });\n                    params.component.svg.appendChild(this.path);\n                    if (this.elementCreated) {\n                        this.elementCreated(this.path, params.component);\n                    }\n\n                    this.canvas = params.component.svg; // for the sake of completeness; this behaves the same as other overlays\n                }\n                var clazz = originalArgs && (originalArgs.length == 1) ? (originalArgs[0].cssClass || \"\") : \"\",\n                    offset = [0, 0];\n\n                if (containerExtents.xmin < 0) offset[0] = -containerExtents.xmin;\n                if (containerExtents.ymin < 0) offset[1] = -containerExtents.ymin;\n\n                _attr(this.path, {\n                    \"d\": makePath(params.d),\n                    \"class\": clazz,\n                    stroke: params.stroke ? params.stroke : null,\n                    fill: params.fill ? params.fill : null,\n                    transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\"\n                });\n            }\n        };\n        var makePath = function (d) {\n            return (isNaN(d.cxy.x) || isNaN(d.cxy.y)) ? \"\" : \"M\" + d.hxy.x + \",\" + d.hxy.y +\n                \" L\" + d.tail[0].x + \",\" + d.tail[0].y +\n                \" L\" + d.cxy.x + \",\" + d.cxy.y +\n                \" L\" + d.tail[1].x + \",\" + d.tail[1].y +\n                \" L\" + d.hxy.x + \",\" + d.hxy.y;\n        };\n        this.transfer = function(target) {\n            if (target.canvas && this.path && this.path.parentNode) {\n                this.path.parentNode.removeChild(this.path);\n                target.canvas.appendChild(this.path);\n            }\n        };\n    };\n    _ju.extend(AbstractSvgArrowOverlay, [_jp.jsPlumbUIComponent, _jp.Overlays.AbstractOverlay], {\n        cleanup: function (force) {\n            if (this.path != null) {\n                if (force)\n                    this._jsPlumb.instance.removeElement(this.path);\n                else\n                    if (this.path.parentNode)\n                        this.path.parentNode.removeChild(this.path);\n            }\n        },\n        reattach:function(instance) {\n            if (this.path && this.canvas && this.path.parentNode == null)\n                this.canvas.appendChild(this.path);\n        },\n        setVisible: function (v) {\n            if (this.path != null) (this.path.style.display = (v ? \"block\" : \"none\"));\n        }\n    });\n\n    _jp.Overlays.svg.Arrow = function () {\n        AbstractSvgArrowOverlay.apply(this, [_jp.Overlays.Arrow, arguments]);\n    };\n    _ju.extend(_jp.Overlays.svg.Arrow, [ _jp.Overlays.Arrow, AbstractSvgArrowOverlay ]);\n\n    _jp.Overlays.svg.PlainArrow = function () {\n        AbstractSvgArrowOverlay.apply(this, [_jp.Overlays.PlainArrow, arguments]);\n    };\n    _ju.extend(_jp.Overlays.svg.PlainArrow, [ _jp.Overlays.PlainArrow, AbstractSvgArrowOverlay ]);\n\n    _jp.Overlays.svg.Diamond = function () {\n        AbstractSvgArrowOverlay.apply(this, [_jp.Overlays.Diamond, arguments]);\n    };\n    _ju.extend(_jp.Overlays.svg.Diamond, [ _jp.Overlays.Diamond, AbstractSvgArrowOverlay ]);\n\n    // a test\n    _jp.Overlays.svg.GuideLines = function () {\n        var path = null, self = this, p1_1, p1_2;\n        _jp.Overlays.GuideLines.apply(this, arguments);\n        this.paint = function (params, containerExtents) {\n            if (path == null) {\n                path = _node(\"path\");\n                params.connector.svg.appendChild(path);\n                self.attachListeners(path, params.connector);\n                self.attachListeners(path, self);\n\n                p1_1 = _node(\"path\");\n                params.connector.svg.appendChild(p1_1);\n                self.attachListeners(p1_1, params.connector);\n                self.attachListeners(p1_1, self);\n\n                p1_2 = _node(\"path\");\n                params.connector.svg.appendChild(p1_2);\n                self.attachListeners(p1_2, params.connector);\n                self.attachListeners(p1_2, self);\n            }\n\n            var offset = [0, 0];\n            if (containerExtents.xmin < 0) offset[0] = -containerExtents.xmin;\n            if (containerExtents.ymin < 0) offset[1] = -containerExtents.ymin;\n\n            _attr(path, {\n                \"d\": makePath(params.head, params.tail),\n                stroke: \"red\",\n                fill: null,\n                transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\"\n            });\n\n            _attr(p1_1, {\n                \"d\": makePath(params.tailLine[0], params.tailLine[1]),\n                stroke: \"blue\",\n                fill: null,\n                transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\"\n            });\n\n            _attr(p1_2, {\n                \"d\": makePath(params.headLine[0], params.headLine[1]),\n                stroke: \"green\",\n                fill: null,\n                transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\"\n            });\n        };\n\n        var makePath = function (d1, d2) {\n            return \"M \" + d1.x + \",\" + d1.y +\n                \" L\" + d2.x + \",\" + d2.y;\n        };\n    };\n    _ju.extend(_jp.Overlays.svg.GuideLines, _jp.Overlays.GuideLines);\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the 'vanilla' adapter - having no external dependencies other than bundled libs.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil,\n        _jk = root.Katavorio, _jg = root.Biltong;\n\n    var _getDragManager = function (instance, category) {\n\n        category = category || \"main\";\n        var key = \"_katavorio_\" + category;\n        var k = instance[key],\n            e = instance.getEventManager();\n\n        if (!k) {\n            k = new _jk({\n                bind: e.on,\n                unbind: e.off,\n                getSize: _jp.getSize,\n                getPosition: function (el, relativeToRoot) {\n                    // if this is a nested draggable then compute the offset against its own offsetParent, otherwise\n                    // compute against the Container's origin. see also the getUIPosition method below.\n                    var o = instance.getOffset(el, relativeToRoot, el._katavorioDrag ? el.offsetParent : null);\n                    return [o.left, o.top];\n                },\n                setPosition: function (el, xy) {\n                    el.style.left = xy[0] + \"px\";\n                    el.style.top = xy[1] + \"px\";\n                },\n                addClass: _jp.addClass,\n                removeClass: _jp.removeClass,\n                intersects: _jg.intersects,\n                indexOf: function(l, i) { return l.indexOf(i); },\n                scope:instance.getDefaultScope(),\n                css: {\n                    noSelect: instance.dragSelectClass,\n                    droppable: \"jtk-droppable\",\n                    draggable: \"jtk-draggable\",\n                    drag: \"jtk-drag\",\n                    selected: \"jtk-drag-selected\",\n                    active: \"jtk-drag-active\",\n                    hover: \"jtk-drag-hover\",\n                    ghostProxy:\"jtk-ghost-proxy\"\n                }\n            });\n            k.setZoom(instance.getZoom());\n            instance[key] = k;\n            instance.bind(\"zoom\", k.setZoom);\n        }\n        return k;\n    };\n\n    var _animProps = function (o, p) {\n        var _one = function (pName) {\n            if (p[pName] != null) {\n                if (_ju.isString(p[pName])) {\n                    var m = p[pName].match(/-=/) ? -1 : 1,\n                        v = p[pName].substring(2);\n                    return o[pName] + (m * v);\n                }\n                else return p[pName];\n            }\n            else\n                return o[pName];\n        };\n        return [ _one(\"left\"), _one(\"top\") ];\n    };\n\n    _jp.extend(root.jsPlumbInstance.prototype, {\n\n        animationSupported:true,\n        getElement: function (el) {\n            if (el == null) return null;\n            // here we pluck the first entry if el was a list of entries.\n            // this is not my favourite thing to do, but previous versions of\n            // jsplumb supported jquery selectors, and it is possible a selector\n            // will be passed in here.\n            el = typeof el === \"string\" ? el : el.length != null && el.enctype == null ? el[0] : el;\n            return typeof el === \"string\" ? document.getElementById(el) : el;\n        },\n        removeElement: function (element) {\n            _getDragManager(this).elementRemoved(element);\n            this.getEventManager().remove(element);\n        },\n        //\n        // this adapter supports a rudimentary animation function. no easing is supported.  only\n        // left/top properties are supported. property delta args are expected to be in the form\n        //\n        // +=x.xxxx\n        //\n        // or\n        //\n        // -=x.xxxx\n        //\n        doAnimate: function (el, properties, options) {\n            options = options || {};\n            var o = this.getOffset(el),\n                ap = _animProps(o, properties),\n                ldist = ap[0] - o.left,\n                tdist = ap[1] - o.top,\n                d = options.duration || 250,\n                step = 15, steps = d / step,\n                linc = (step / d) * ldist,\n                tinc = (step / d) * tdist,\n                idx = 0,\n                _int = setInterval(function () {\n                    _jp.setPosition(el, {\n                        left: o.left + (linc * (idx + 1)),\n                        top: o.top + (tinc * (idx + 1))\n                    });\n                    if (options.step != null) options.step(idx, Math.ceil(steps));\n                    idx++;\n                    if (idx >= steps) {\n                        window.clearInterval(_int);\n                        if (options.complete != null) options.complete();\n                    }\n                }, step);\n        },\n        // DRAG/DROP\n        destroyDraggable: function (el, category) {\n            _getDragManager(this, category).destroyDraggable(el);\n        },\n        destroyDroppable: function (el, category) {\n            _getDragManager(this, category).destroyDroppable(el);\n        },\n        initDraggable: function (el, options, category) {\n            _getDragManager(this, category).draggable(el, options);\n        },\n        initDroppable: function (el, options, category) {\n            _getDragManager(this, category).droppable(el, options);\n        },\n        isAlreadyDraggable: function (el) {\n            return el._katavorioDrag != null;\n        },\n        isDragSupported: function (el, options) {\n            return true;\n        },\n        isDropSupported: function (el, options) {\n            return true;\n        },\n        isElementDraggable: function (el) {\n            el = _jp.getElement(el);\n            return el._katavorioDrag && el._katavorioDrag.isEnabled();\n        },\n        getDragObject: function (eventArgs) {\n            return eventArgs[0].drag.getDragElement();\n        },\n        getDragScope: function (el) {\n            return el._katavorioDrag && el._katavorioDrag.scopes.join(\" \") || \"\";\n        },\n        getDropEvent: function (args) {\n            return args[0].e;\n        },\n        getUIPosition: function (eventArgs, zoom) {\n            // here the position reported to us by Katavorio is relative to the element's offsetParent. For top\n            // level nodes that is fine, but if we have a nested draggable then its offsetParent is actually\n            // not going to be the jsplumb container; it's going to be some child of that element. In that case\n            // we want to adjust the UI position to account for the offsetParent's position relative to the Container\n            // origin.\n            var el = eventArgs[0].el;\n            if (el.offsetParent == null) {\n                return null;\n            }\n            var finalPos = eventArgs[0].finalPos || eventArgs[0].pos;\n            var p = { left:finalPos[0], top:finalPos[1] };\n            if (el._katavorioDrag && el.offsetParent !== this.getContainer()) {\n                var oc = this.getOffset(el.offsetParent);\n                p.left += oc.left;\n                p.top += oc.top;\n            }\n            return p;\n        },\n        setDragFilter: function (el, filter, _exclude) {\n            if (el._katavorioDrag) {\n                el._katavorioDrag.setFilter(filter, _exclude);\n            }\n        },\n        setElementDraggable: function (el, draggable) {\n            el = _jp.getElement(el);\n            if (el._katavorioDrag)\n                el._katavorioDrag.setEnabled(draggable);\n        },\n        setDragScope: function (el, scope) {\n            if (el._katavorioDrag)\n                el._katavorioDrag.k.setDragScope(el, scope);\n        },\n        setDropScope:function(el, scope) {\n            if (el._katavorioDrop && el._katavorioDrop.length > 0) {\n                el._katavorioDrop[0].k.setDropScope(el, scope);\n            }\n        },\n        addToPosse:function(el, spec) {\n            var specs = Array.prototype.slice.call(arguments, 1);\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) {\n                _el = [ _jp.getElement(_el) ];\n                _el.push.apply(_el, specs );\n                dm.addToPosse.apply(dm, _el);\n            });\n        },\n        setPosse:function(el, spec) {\n            var specs = Array.prototype.slice.call(arguments, 1);\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) {\n                _el = [ _jp.getElement(_el) ];\n                _el.push.apply(_el, specs );\n                dm.setPosse.apply(dm, _el);\n            });\n        },\n        removeFromPosse:function(el, posseId) {\n            var specs = Array.prototype.slice.call(arguments, 1);\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) {\n                _el = [ _jp.getElement(_el) ];\n                _el.push.apply(_el, specs );\n                dm.removeFromPosse.apply(dm, _el);\n            });\n        },\n        removeFromAllPosses:function(el) {\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) { dm.removeFromAllPosses(_jp.getElement(_el)); });\n        },\n        setPosseState:function(el, posseId, state) {\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) { dm.setPosseState(_jp.getElement(_el), posseId, state); });\n        },\n        dragEvents: {\n            'start': 'start', 'stop': 'stop', 'drag': 'drag', 'step': 'step',\n            'over': 'over', 'out': 'out', 'drop': 'drop', 'complete': 'complete',\n            'beforeStart':'beforeStart'\n        },\n        animEvents: {\n            'step': \"step\", 'complete': 'complete'\n        },\n        stopDrag: function (el) {\n            if (el._katavorioDrag)\n                el._katavorioDrag.abort();\n        },\n        addToDragSelection: function (spec) {\n            _getDragManager(this).select(spec);\n        },\n        removeFromDragSelection: function (spec) {\n            _getDragManager(this).deselect(spec);\n        },\n        clearDragSelection: function () {\n            _getDragManager(this).deselectAll();\n        },\n        trigger: function (el, event, originalEvent, payload) {\n            this.getEventManager().trigger(el, event, originalEvent, payload);\n        },\n        doReset:function() {\n            // look for katavorio instances and reset each one if found.\n            for (var key in this) {\n                if (key.indexOf(\"_katavorio_\") === 0) {\n                    this[key].reset();\n                }\n            }\n        }\n    });\n\n    var ready = function (f) {\n        var _do = function () {\n            if (/complete|loaded|interactive/.test(document.readyState) && typeof(document.body) != \"undefined\" && document.body != null)\n                f();\n            else\n                setTimeout(_do, 9);\n        };\n\n        _do();\n    };\n    ready(_jp.init);\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n\n/***/ }),\n/* 34 */,\n/* 35 */,\n/* 36 */,\n/* 37 */,\n/* 38 */,\n/* 39 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/**\n  * vue-router v2.5.3\n  * (c) 2017 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (false) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nvar View = {\n  name: 'router-view',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent) {\n      if (parent.$vnode && parent.$vnode.data.routerView) {\n        depth++;\n      }\n      if (parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      return h(cache[name], data, children)\n    }\n\n    var matched = route.matched[depth];\n    // render empty node if no matched route\n    if (!matched) {\n      cache[name] = null;\n      return h()\n    }\n\n    var component = cache[name] = matched.components[name];\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also regiseter instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // resolve props\n    data.props = resolveProps(route, matched.props && matched.props[name]);\n\n    return h(component, data, children)\n  }\n};\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (false) {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n  .replace(encodeReserveRE, encodeReserveReplacer)\n  .replace(commaRE, ','); };\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    \"production\" !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    var val = extraQuery[key];\n    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;\n  }\n  return parsedQuery\n}\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0\n      ? decode(parts.join('='))\n      : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return ''\n    }\n\n    if (val === null) {\n      return encode(key)\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.slice().forEach(function (val2) {\n        if (val2 === undefined) {\n          return\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&')\n    }\n\n    return encode(key) + '=' + encode(val)\n  }).filter(function (x) { return x.length > 0; }).join('&') : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: location.query || {},\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery$$1),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\n  }\n  return Object.freeze(route)\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return (\n      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query)\n    )\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params)\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key) { return String(a[key]) === String(b[key]); })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar Link = {\n  name: 'router-link',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(this.to, current, this.append);\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback = globalActiveClass == null\n            ? 'router-link-active'\n            : globalActiveClass;\n    var exactActiveClassFallback = globalExactActiveClass == null\n            ? 'router-link-exact-active'\n            : globalExactActiveClass;\n    var activeClass = this.activeClass == null\n            ? activeClassFallback\n            : this.activeClass;\n    var exactActiveClass = this.exactActiveClass == null\n            ? exactActiveClassFallback\n            : this.exactActiveClass;\n    var compareTarget = location.path\n      ? createRoute(null, location, null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location);\n        } else {\n          router.push(location);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) { on[e] = handler; });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = {\n      class: classes\n    };\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var extend = _Vue.util.extend;\n        var aData = a.data = extend({}, a.data);\n        aData.on = on;\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this.$root._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this.$root._route }\n  });\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Vue.component('router-view', View);\n  Vue.component('router-link', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/\\//g, '/')\n}\n\nvar index$1 = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar index = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (index$1(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (index$1(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\nindex.parse = parse_1;\nindex.compile = compile_1;\nindex.tokensToFunction = tokensToFunction_1;\nindex.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = index.compile(path));\n    return filler(params || {}, { pretty: true })\n  } catch (e) {\n    if (false) {\n      warn(false, (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  }\n}\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  var pathMap = oldPathMap || Object.create(null);\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (false) {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(path || name)) + \" cannot be a \" +\n      \"string id. Use an actual component instead.\"\n    );\n  }\n\n  var normalizedPath = normalizePath(path, parent);\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (false) {\n      if (route.name && route.children.some(function (child) { return /^\\/?$/.test(child.path); })) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n          \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'\\\"), \" +\n          \"the default child route will not be rendered. Remove the name from \" +\n          \"this route and use the name of the default child route for named \" +\n          \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (route.alias !== undefined) {\n    if (Array.isArray(route.alias)) {\n      route.alias.forEach(function (alias) {\n        var aliasRoute = {\n          path: alias,\n          children: route.children\n        };\n        addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path);\n      });\n    } else {\n      var aliasRoute = {\n        path: route.alias,\n        children: route.children\n      };\n      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path);\n    }\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (false) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n        \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (path) {\n  var regex = index(path);\n  if (false) {\n    var keys = {};\n    regex.keys.forEach(function (key) {\n      warn(!keys[key.name], (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\"));\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (path, parent) {\n  path = path.replace(/\\/$/, '');\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next.name || next._normalized) {\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = assign({}, next);\n    next._normalized = true;\n    var params = assign(assign({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params;\n    } else if (current.matched) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params, (\"path \" + (current.path)));\n    } else if (false) {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction assign (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (false) {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      if (record) {\n        location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n        return _createRoute(record, location, redirectedFrom)\n      }\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n        ? originalRedirect(createRoute(record, location, null, router))\n        : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (false) {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (false) {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (false) {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      params[key.name] = val;\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (false) {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior(to, from, isPop ? position : null);\n    if (!shouldScroll) {\n      return\n    }\n    var isObject = typeof shouldScroll === 'object';\n    if (isObject && typeof shouldScroll.selector === 'string') {\n      var el = document.querySelector(shouldScroll.selector);\n      if (el) {\n        position = getElementPosition(el);\n      } else if (isValidPosition(shouldScroll)) {\n        position = normalizePosition(shouldScroll);\n      }\n    } else if (isObject && isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n\n    if (position) {\n      window.scrollTo(position.x, position.y);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left,\n    y: elRect.top - docRect.top\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\n/*  */\n\nvar supportsPushState = inBrowser && (function () {\n  var ua = window.navigator.userAgent;\n\n  if (\n    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n    ua.indexOf('Mobile Safari') !== -1 &&\n    ua.indexOf('Chrome') === -1 &&\n    ua.indexOf('Windows Phone') === -1\n  ) {\n    return false\n  }\n\n  return window.history && 'pushState' in window.history\n})();\n\n// use User Timing api (if present) for more accurate key precision\nvar Time = inBrowser && window.performance && window.performance.now\n  ? window.performance\n  : Date;\n\nvar _key = genKey();\n\nfunction genKey () {\n  return Time.now().toFixed(3)\n}\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  _key = key;\n}\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({ key: _key }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(route, function () {\n    this$1.updateRoute(route);\n    onComplete && onComplete(route);\n    this$1.ensureURL();\n\n    // fire ready cbs once\n    if (!this$1.ready) {\n      this$1.ready = true;\n      this$1.readyCbs.forEach(function (cb) { cb(route); });\n    }\n  }, function (err) {\n    if (onAbort) {\n      onAbort(err);\n    }\n    if (err && !this$1.ready) {\n      this$1.ready = true;\n      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });\n    }\n  });\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  var abort = function (err) {\n    if (isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) { cb(err); });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL();\n    return abort()\n  }\n\n  var ref = resolveQueue(this.current.matched, route.matched);\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  this.pending = route;\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort()\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' && (\n            typeof to.path === 'string' ||\n            typeof to.name === 'string'\n          ))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function () { return this$1.current === route; };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort()\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) { cb(); });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated,\n  cbs,\n  isValid\n) {\n  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {\n    return bindEnterGuard(guard, match, key, cbs, isValid)\n  })\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key,\n  cbs,\n  isValid\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      next(cb);\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n    })\n  }\n}\n\nfunction poll (\n  cb, // somehow flow cannot infer this is a function\n  instances,\n  key,\n  isValid\n) {\n  if (instances[key]) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          \"production\" !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (called) { return }\n    called = true;\n    return fn.apply(this, arguments)\n  }\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\n/*  */\n\n\nvar HTML5History = (function (History$$1) {\n  function HTML5History (router, base) {\n    var this$1 = this;\n\n    History$$1.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n\n    if (expectScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener('popstate', function (e) {\n      this$1.transitionTo(getLocation(this$1.base), function (route) {\n        if (expectScroll) {\n          handleScroll(router, route, this$1.current, true);\n        }\n      });\n    });\n  }\n\n  if ( History$$1 ) HTML5History.__proto__ = History$$1;\n  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\n\nvar HashHistory = (function (History$$1) {\n  function HashHistory (router, base, fallback) {\n    History$$1.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History$$1 ) HashHistory.__proto__ = History$$1;\n  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    window.addEventListener('hashchange', function () {\n      if (!ensureSlash()) {\n        return\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        replaceHash(route.fullPath);\n      });\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      pushHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      replaceHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(\n      cleanPath(base + '/#' + location)\n    );\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  return index === -1 ? '' : href.slice(index + 1)\n}\n\nfunction pushHash (path) {\n  window.location.hash = path;\n}\n\nfunction replaceHash (path) {\n  var i = window.location.href.indexOf('#');\n  window.location.replace(\n    window.location.href.slice(0, i >= 0 ? i : 0) + '#' + path\n  );\n}\n\n/*  */\n\n\nvar AbstractHistory = (function (History$$1) {\n  function AbstractHistory (router, base) {\n    History$$1.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;\n  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n      this$1.index++;\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(route, function () {\n      this$1.index = targetIndex;\n      this$1.updateRoute(route);\n    });\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (false) {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: {} };\n\nVueRouter.prototype.match = function match (\n  raw,\n  current,\n  redirectedFrom\n) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n  \"production\" !== 'production' && assert(\n    install.installed,\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n    \"before creating root instance.\"\n  );\n\n  this.apps.push(app);\n\n  // main app already initialized.\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function () {\n      history.setupListeners();\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupHashListener,\n      setupHashListener\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n  this.history.push(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n  this.history.replace(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key]\n    })\n  }))\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  var location = normalizeLocation(\n    to,\n    current || this.history.current,\n    append,\n    this\n  );\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '2.5.3';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (VueRouter);\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports) {\n\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(40)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n/***/ })\n]);\n\n\n// WEBPACK FOOTER //\n// static/js/vendor.1afd0e9b73ea5b9e8cd8.js","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_descriptors.js\n// module id = 0\n// module chunks = 0","var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_core.js\n// module id = 1\n// module chunks = 0","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_is-object.js\n// module id = 2\n// module chunks = 0","// this module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = Object.create(options.computed || null)\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n    options.computed = computed\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/component-normalizer.js\n// module id = 3\n// module chunks = 0","/*!\n * Vue.js v2.3.3\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return typeof value === 'string' || typeof value === 'number'\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n */\nfunction noop () {}\n\n/**\n * Always return false.\n */\nvar no = function () { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      return JSON.stringify(a) === JSON.stringify(b)\n    } catch (e) {\n      // possible circular reference\n      return a === b\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = (null); // work around flow check\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.error(\"[Vue warn]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var name = typeof vm === 'string'\n      ? vm\n      : typeof vm === 'function' && vm.options\n        ? vm.options.name\n        : vm._isVue\n          ? vm.$options.name || vm.$options._componentTag\n          : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  var generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    } )); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && typeof key === 'number') {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target ).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    valid = typeof value === expectedType.toLowerCase();\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function () {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  return cloned\n}\n\nfunction cloneVNodes (vnodes) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      for (var i = 0; i < fns.length; i++) {\n        fns[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        (last).text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && isDef(c.componentOptions)) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        this$1.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n      child.data && child.data.slot != null\n    ) {\n      var name = child.data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return node.isComment || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // remove reference to DOM nodes (prevents leak)\n    vm.$options._parentElm = vm.$options._refElm = null;\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    if (process.env.NODE_ENV !== 'production') {\n      observerState.isSettingProps = true;\n    }\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    if (process.env.NODE_ENV !== 'production') {\n      observerState.isSettingProps = false;\n    }\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdateHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdateHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  if (this.user) {\n    try {\n      value = this.getter.call(vm, vm);\n    } catch (e) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    }\n  } else {\n    value = this.getter.call(vm, vm);\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch) { initWatch(vm, opts.watch); }\n}\n\nvar isReservedProp = {\n  key: 1,\n  ref: 1,\n  slot: 1\n};\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      if (isReservedProp[key] || config.isReservedAttr(key)) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(keys[i])) {\n      proxy(vm, \"_data\", keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  var watchers = vm._computedWatchers = Object.create(null);\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production') {\n      if (getter === undefined) {\n        warn(\n          (\"No getter function has been defined for computed property \\\"\" + key + \"\\\".\"),\n          vm\n        );\n        getter = noop;\n      }\n    }\n    // create internal watcher for the computed property.\n    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (target, key, userDef) {\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = createComputedGetter(key);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n    }\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    // isArray here\n    var isArray = Array.isArray(inject);\n    var result = Object.create(null);\n    var keys = isArray\n      ? inject\n      : hasSymbol\n        ? Reflect.ownKeys(inject)\n        : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = isArray ? key : inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || {});\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || {},\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  if (isUndef(Ctor.cid)) {\n    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);\n    if (Ctor === undefined) {\n      // return nothing if this is indeed an async component\n      // wait for the callback to trigger parent update.\n      return\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\n  );\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      extend(props, bindObject);\n    }\n    return scopedSlotFn(props) || fallback\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && process.env.NODE_ENV !== 'production') {\n      slotNodes._rendered && warn(\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n        \"- this will likely cause render errors.\",\n        this\n      );\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1\n  } else {\n    return keyCodes !== eventKeyCode\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      for (var key in value) {\n        if (key === 'class' || key === 'style') {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n        }\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] =\n    this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        vnode = vm.$options.renderError\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n          : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-init:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(((vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue$3)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return this\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.3.3';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction genClassFromData (data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (isUndef(value)) {\n    return ''\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  var res = '';\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (isDef(value[i])) {\n        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1)\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) { res += key + ' '; }\n    }\n    return res.slice(0, -1)\n  }\n  /* istanbul ignore next */\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key &&\n    a.tag === b.tag &&\n    a.isComment === b.isComment &&\n    isDef(a.data) === isDef(b.data) &&\n    sameInputType(a, b)\n  )\n}\n\n// Some browsers do not support dynamically changing type for <input>\n// so they need to be treated as different nodes\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref) {\n    if (isDef(parent)) {\n      if (isDef(ref)) {\n        if (ref.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.elm = oldVnode.elm;\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (process.env.NODE_ENV !== 'production' &&\n              typeof console !== 'undefined' &&\n              !bailed\n            ) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (isDef(vnode.tag)) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    process.env.NODE_ENV !== 'production' && warn &&\n    modifiers && modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers && modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\nfunction getAndRemoveAttr (el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return \"var $$exp = \" + (modelRs.exp) + \", $$idx = \" + (modelRs.idx) + \";\" +\n      \"if (!Array.isArray($$exp)){\" +\n        value + \"=\" + assignment + \"}\" +\n      \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\"\n  }\n}\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\nfunction parseModel (val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    }\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$1(\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\n      );\n    }\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n        trueValueBinding === 'true'\n          ? (\":(\" + value + \")\")\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n      )\n  );\n  addHandler(el, CHECKBOX_RADIO_TOKEN,\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number || type === 'number') {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  if (once$$1) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      var res = arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(elm, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\n  return document.activeElement !== elm && elm.value !== checkVal\n}\n\nfunction isInputChanged (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in testEl.style)) {\n    return prop\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likley wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      var cb = function () {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag; });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      if (this._hasMove != null) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode (content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\n  return div.innerHTML.indexOf(encoded) > 0\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/*  */\n\nvar decoder;\n\nfunction decode (html) {\n  decoder = decoder || document.createElement('div');\n  decoder.innerHTML = html;\n  return decoder.textContent\n}\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\nvar singleAttrAssign = /(?:=)/;\nvar singleAttrValues = [\n  // attr value double quotes\n  /\"([^\"]*)\"+/.source,\n  // attr value, single quotes\n  /'([^']*)'+/.source,\n  // attr value, no quotes\n  /([^\\s\"'=<>`]+)/.source\n];\nvar attribute = new RegExp(\n  '^\\\\s*' + singleAttrIdentifier.source +\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\n);\n\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\nvar startTagOpen = new RegExp('^<' + qnameCapture);\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          continue\n        }\n      }\n\n      var text = (void 0), rest$1 = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest$1 = html.slice(textEnd);\n        while (\n          !endTag.test(rest$1) &&\n          !startTagOpen.test(rest$1) &&\n          !comment.test(rest$1) &&\n          !conditionalComment.test(rest$1)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest$1.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest$1 = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var endTagLength = 0;\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest.length;\n      html = rest;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(\n          value,\n          options.shouldDecodeNewlines\n        )\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+')\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformIsPreTag = options.isPreTag || no;\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function endPre (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints (el) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        endPre(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      endPre(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      process.env.NODE_ENV !== 'production' && warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n      return\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\n    }\n  }\n}\n\nfunction walkThroughConditionsBlocks (conditionBlocks, isInFor) {\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n    markStaticRoots(conditionBlocks[i].block, isInFor);\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    var handler = events[name];\n    // #5330: warn click.right, since right clicks do not actually fire click events.\n    if (process.env.NODE_ENV !== 'production' &&\n      name === 'click' &&\n      handler && handler.modifiers && handler.modifiers.right\n    ) {\n      warn(\n        \"Use \\\"contextmenu\\\" instead of \\\"click.right\\\" since right clicks \" +\n        \"do not actually fire \\\"click\\\" events.\"\n      );\n    }\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, handler)) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    return isMethodPath || isFunctionExpression\n      ? handler.value\n      : (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var alias = keyCodes[key];\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n// configurable state\nvar warn$3;\nvar transforms$1;\nvar dataGenFns;\nvar platformDirectives$1;\nvar isPlatformReservedTag$1;\nvar staticRenderFns;\nvar onceCount;\nvar currentOptions;\n\nfunction generate (\n  ast,\n  options\n) {\n  // save previous staticRenderFns so generate calls can be nested\n  var prevStaticRenderFns = staticRenderFns;\n  var currentStaticRenderFns = staticRenderFns = [];\n  var prevOnceCount = onceCount;\n  onceCount = 0;\n  currentOptions = options;\n  warn$3 = options.warn || baseWarn;\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  platformDirectives$1 = options.directives || {};\n  isPlatformReservedTag$1 = options.isReservedTag || no;\n  var code = ast ? genElement(ast) : '_c(\"div\")';\n  staticRenderFns = prevStaticRenderFns;\n  onceCount = prevOnceCount;\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: currentStaticRenderFns\n  }\n}\n\nfunction genElement (el) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      var data = el.plain ? undefined : genData(el);\n\n      var children = el.inlineTemplate ? null : genChildren(el, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < transforms$1.length; i++) {\n      code = transforms$1[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el) {\n  el.staticProcessed = true;\n  staticRenderFns.push((\"with(this){return \" + (genElement(el)) + \"}\"));\n  return (\"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && warn$3(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el)\n    }\n    return (\"_o(\" + (genElement(el)) + \",\" + (onceCount++) + (key ? (\",\" + key) : \"\") + \")\")\n  } else {\n    return genStatic(el)\n  }\n}\n\nfunction genIf (el) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice())\n}\n\nfunction genIfConditions (conditions) {\n  if (!conditions.length) {\n    return '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return el.once ? genOnce(el) : genElement(el)\n  }\n}\n\nfunction genFor (el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key\n  ) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genElement(el)) +\n    '})'\n}\n\nfunction genData (el) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < dataGenFns.length; i++) {\n    data += dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, warn$3)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, warn$3)) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  return data\n}\n\nfunction genDirectives (el) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, warn$3);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (\n    el.children.length > 1 || ast.type !== 1\n  )) {\n    warn$3('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, currentOptions);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (slots) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (key, el) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el)\n  }\n  return \"{key:\" + key + \",fn:function(\" + (String(el.attrsMap.scope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? genChildren(el) || 'void 0'\n      : genElement(el)) + \"}}\"\n}\n\nfunction genForScopedSlot (key, el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el)) +\n    '})'\n}\n\nfunction genChildren (el, checkSkip) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return genElement(el$1)\n    }\n    var normalizationType = checkSkip ? getNormalizationType(children) : 0;\n    return (\"[\" + (children.map(genNode).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (children) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction maybeComponent (el) {\n  return !isPlatformReservedTag$1(el.tag)\n}\n\nfunction genNode (node) {\n  if (node.type === 1) {\n    return genElement(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genSlot (el) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (componentName, el) {\n  var children = el.inlineTemplate ? null : genChildren(el, true);\n  return (\"_c(\" + componentName + \",\" + (genData(el)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n      );\n    } else {\n      errors.push((\"invalid expression: \" + (text.trim())));\n    }\n  }\n}\n\n/*  */\n\nfunction baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n}\n\nfunction makeFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompiler (baseOptions) {\n  var functionCompileCache = Object.create(null);\n\n  function compile (\n    template,\n    options\n  ) {\n    var finalOptions = Object.create(baseOptions);\n    var errors = [];\n    var tips = [];\n    finalOptions.warn = function (msg, tip$$1) {\n      (tip$$1 ? tips : errors).push(msg);\n    };\n\n    if (options) {\n      // merge custom modules\n      if (options.modules) {\n        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\n      }\n      // merge custom directives\n      if (options.directives) {\n        finalOptions.directives = extend(\n          Object.create(baseOptions.directives),\n          options.directives\n        );\n      }\n      // copy other options\n      for (var key in options) {\n        if (key !== 'modules' && key !== 'directives') {\n          finalOptions[key] = options[key];\n        }\n      }\n    }\n\n    var compiled = baseCompile(template, finalOptions);\n    if (process.env.NODE_ENV !== 'production') {\n      errors.push.apply(errors, detectErrors(compiled.ast));\n    }\n    compiled.errors = errors;\n    compiled.tips = tips;\n    return compiled\n  }\n\n  function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = options || {};\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (functionCompileCache[key]) {\n      return functionCompileCache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (process.env.NODE_ENV !== 'production') {\n      if (compiled.errors && compiled.errors.length) {\n        warn(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = makeFunction(compiled.render, fnGenErrors);\n    var l = compiled.staticRenderFns.length;\n    res.staticRenderFns = new Array(l);\n    for (var i = 0; i < l; i++) {\n      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);\n    }\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (functionCompileCache[key] = res)\n  }\n\n  return {\n    compile: compile,\n    compileToFunctions: compileToFunctions\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData$1\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$2 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$2\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure(((this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\nexport default Vue$3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue/dist/vue.esm.js\n// module id = 4\n// module chunks = 0","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_fails.js\n// module id = 5\n// module chunks = 0","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_global.js\n// module id = 6\n// module chunks = 0","var anObject       = require('./_an-object')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , toPrimitive    = require('./_to-primitive')\n  , dP             = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_object-dp.js\n// module id = 7\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/json/stringify\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/core-js/json/stringify.js\n// module id = 14\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/core-js/object/define-property.js\n// module id = 15\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/helpers/classCallCheck.js\n// module id = 16\n// module chunks = 0","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/helpers/createClass.js\n// module id = 17\n// module chunks = 0","var core  = require('../../modules/_core')\n  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});\nmodule.exports = function stringify(it){ // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/fn/json/stringify.js\n// module id = 18\n// module chunks = 0","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc){\n  return $Object.defineProperty(it, key, desc);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/fn/object/define-property.js\n// module id = 19\n// module chunks = 0","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_a-function.js\n// module id = 20\n// module chunks = 0","var isObject = require('./_is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_an-object.js\n// module id = 21\n// module chunks = 0","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_ctx.js\n// module id = 22\n// module chunks = 0","var isObject = require('./_is-object')\n  , document = require('./_global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_dom-create.js\n// module id = 23\n// module chunks = 0","var global    = require('./_global')\n  , core      = require('./_core')\n  , ctx       = require('./_ctx')\n  , hide      = require('./_hide')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_export.js\n// module id = 24\n// module chunks = 0","var dP         = require('./_object-dp')\n  , createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_hide.js\n// module id = 25\n// module chunks = 0","module.exports = !require('./_descriptors') && !require('./_fails')(function(){\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_ie8-dom-define.js\n// module id = 26\n// module chunks = 0","module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_property-desc.js\n// module id = 27\n// module chunks = 0","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_to-primitive.js\n// module id = 28\n// module chunks = 0","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/es6.object.define-property.js\n// module id = 29\n// module chunks = 0","/**\n * jsBezier\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * licensed under the MIT license.\n *\n * a set of Bezier curve functions that deal with Beziers, used by jsPlumb, and perhaps useful for other people.  These functions work with Bezier\n * curves of arbitrary degree.\n *\n * - functions are all in the 'jsBezier' namespace.\n *\n * - all input points should be in the format {x:.., y:..}. all output points are in this format too.\n *\n * - all input curves should be in the format [ {x:.., y:..}, {x:.., y:..}, {x:.., y:..}, {x:.., y:..} ]\n *\n * - 'location' as used as an input here refers to a decimal in the range 0-1 inclusive, which indicates a point some proportion along the length\n * of the curve.  location as output has the same format and meaning.\n *\n *\n * Function List:\n * --------------\n *\n * distanceFromCurve(point, curve)\n *\n * \tCalculates the distance that the given point lies from the given Bezier.  Note that it is computed relative to the center of the Bezier,\n * so if you have stroked the curve with a wide pen you may wish to take that into account!  The distance returned is relative to the values\n * of the curve and the point - it will most likely be pixels.\n *\n * gradientAtPoint(curve, location)\n *\n * \tCalculates the gradient to the curve at the given location, as a decimal between 0 and 1 inclusive.\n *\n * gradientAtPointAlongCurveFrom (curve, location)\n *\n *\tCalculates the gradient at the point on the given curve that is 'distance' units from location.\n *\n * nearestPointOnCurve(point, curve)\n *\n *\tCalculates the nearest point to the given point on the given curve.  The return value of this is a JS object literal, containing both the\n *point's coordinates and also the 'location' of the point (see above), for example:  { point:{x:551,y:150}, location:0.263365 }.\n *\n * pointOnCurve(curve, location)\n *\n * \tCalculates the coordinates of the point on the given Bezier curve at the given location.\n *\n * pointAlongCurveFrom(curve, location, distance)\n *\n * \tCalculates the coordinates of the point on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate\n * space as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\n *\n * locationAlongCurveFrom(curve, location, distance)\n *\n * \tCalculates the location on the given curve that is 'distance' units from location.  'distance' should be in the same coordinate\n * space as that used to construct the Bezier curve.  For an HTML Canvas usage, for example, distance would be a measure of pixels.\n *\n * perpendicularToCurveAt(curve, location, length, distance)\n *\n * \tCalculates the perpendicular to the given curve at the given location.  length is the length of the line you wish for (it will be centered\n * on the point at 'location'). distance is optional, and allows you to specify a point along the path from the given location as the center of\n * the perpendicular returned.  The return value of this is an array of two points: [ {x:...,y:...}, {x:...,y:...} ].\n *\n *\n */\n\n(function() {\n\n    var root = this;\n\n    if(typeof Math.sgn == \"undefined\") {\n        Math.sgn = function(x) { return x == 0 ? 0 : x > 0 ? 1 :-1; };\n    }\n\n    var Vectors = {\n            subtract \t: \tfunction(v1, v2) { return {x:v1.x - v2.x, y:v1.y - v2.y }; },\n            dotProduct\t: \tfunction(v1, v2) { return (v1.x * v2.x)  + (v1.y * v2.y); },\n            square\t\t:\tfunction(v) { return Math.sqrt((v.x * v.x) + (v.y * v.y)); },\n            scale\t\t:\tfunction(v, s) { return {x:v.x * s, y:v.y * s }; }\n        },\n\n        maxRecursion = 64,\n        flatnessTolerance = Math.pow(2.0,-maxRecursion-1);\n\n    /**\n     * Calculates the distance that the point lies from the curve.\n     *\n     * @param point a point in the form {x:567, y:3342}\n     * @param curve a Bezier curve in the form [{x:..., y:...}, {x:..., y:...}, {x:..., y:...}, {x:..., y:...}].  note that this is currently\n     * hardcoded to assume cubiz beziers, but would be better off supporting any degree.\n     * @return a JS object literal containing location and distance, for example: {location:0.35, distance:10}.  Location is analogous to the location\n     * argument you pass to the pointOnPath function: it is a ratio of distance travelled along the curve.  Distance is the distance in pixels from\n     * the point to the curve.\n     */\n    var _distanceFromCurve = function(point, curve) {\n        var candidates = [],\n            w = _convertToBezier(point, curve),\n            degree = curve.length - 1, higherDegree = (2 * degree) - 1,\n            numSolutions = _findRoots(w, higherDegree, candidates, 0),\n            v = Vectors.subtract(point, curve[0]), dist = Vectors.square(v), t = 0.0;\n\n        for (var i = 0; i < numSolutions; i++) {\n            v = Vectors.subtract(point, _bezier(curve, degree, candidates[i], null, null));\n            var newDist = Vectors.square(v);\n            if (newDist < dist) {\n                dist = newDist;\n                t = candidates[i];\n            }\n        }\n        v = Vectors.subtract(point, curve[degree]);\n        newDist = Vectors.square(v);\n        if (newDist < dist) {\n            dist = newDist;\n            t = 1.0;\n        }\n        return {location:t, distance:dist};\n    };\n    /**\n     * finds the nearest point on the curve to the given point.\n     */\n    var _nearestPointOnCurve = function(point, curve) {\n        var td = _distanceFromCurve(point, curve);\n        return {point:_bezier(curve, curve.length - 1, td.location, null, null), location:td.location};\n    };\n    var _convertToBezier = function(point, curve) {\n        var degree = curve.length - 1, higherDegree = (2 * degree) - 1,\n            c = [], d = [], cdTable = [], w = [],\n            z = [ [1.0, 0.6, 0.3, 0.1], [0.4, 0.6, 0.6, 0.4], [0.1, 0.3, 0.6, 1.0] ];\n\n        for (var i = 0; i <= degree; i++) c[i] = Vectors.subtract(curve[i], point);\n        for (var i = 0; i <= degree - 1; i++) {\n            d[i] = Vectors.subtract(curve[i+1], curve[i]);\n            d[i] = Vectors.scale(d[i], 3.0);\n        }\n        for (var row = 0; row <= degree - 1; row++) {\n            for (var column = 0; column <= degree; column++) {\n                if (!cdTable[row]) cdTable[row] = [];\n                cdTable[row][column] = Vectors.dotProduct(d[row], c[column]);\n            }\n        }\n        for (i = 0; i <= higherDegree; i++) {\n            if (!w[i]) w[i] = [];\n            w[i].y = 0.0;\n            w[i].x = parseFloat(i) / higherDegree;\n        }\n        var n = degree, m = degree-1;\n        for (var k = 0; k <= n + m; k++) {\n            var lb = Math.max(0, k - m),\n                ub = Math.min(k, n);\n            for (i = lb; i <= ub; i++) {\n                j = k - i;\n                w[i+j].y += cdTable[j][i] * z[j][i];\n            }\n        }\n        return w;\n    };\n    /**\n     * counts how many roots there are.\n     */\n    var _findRoots = function(w, degree, t, depth) {\n        var left = [], right = [],\n            left_count, right_count,\n            left_t = [], right_t = [];\n\n        switch (_getCrossingCount(w, degree)) {\n            case 0 : {\n                return 0;\n            }\n            case 1 : {\n                if (depth >= maxRecursion) {\n                    t[0] = (w[0].x + w[degree].x) / 2.0;\n                    return 1;\n                }\n                if (_isFlatEnough(w, degree)) {\n                    t[0] = _computeXIntercept(w, degree);\n                    return 1;\n                }\n                break;\n            }\n        }\n        _bezier(w, degree, 0.5, left, right);\n        left_count  = _findRoots(left,  degree, left_t, depth+1);\n        right_count = _findRoots(right, degree, right_t, depth+1);\n        for (var i = 0; i < left_count; i++) t[i] = left_t[i];\n        for (var i = 0; i < right_count; i++) t[i+left_count] = right_t[i];\n        return (left_count+right_count);\n    };\n    var _getCrossingCount = function(curve, degree) {\n        var n_crossings = 0, sign, old_sign;\n        sign = old_sign = Math.sgn(curve[0].y);\n        for (var i = 1; i <= degree; i++) {\n            sign = Math.sgn(curve[i].y);\n            if (sign != old_sign) n_crossings++;\n            old_sign = sign;\n        }\n        return n_crossings;\n    };\n    var _isFlatEnough = function(curve, degree) {\n        var  error,\n            intercept_1, intercept_2, left_intercept, right_intercept,\n            a, b, c, det, dInv, a1, b1, c1, a2, b2, c2;\n        a = curve[0].y - curve[degree].y;\n        b = curve[degree].x - curve[0].x;\n        c = curve[0].x * curve[degree].y - curve[degree].x * curve[0].y;\n\n        var max_distance_above = max_distance_below = 0.0;\n\n        for (var i = 1; i < degree; i++) {\n            var value = a * curve[i].x + b * curve[i].y + c;\n            if (value > max_distance_above)\n                max_distance_above = value;\n            else if (value < max_distance_below)\n                max_distance_below = value;\n        }\n\n        a1 = 0.0; b1 = 1.0; c1 = 0.0; a2 = a; b2 = b;\n        c2 = c - max_distance_above;\n        det = a1 * b2 - a2 * b1;\n        dInv = 1.0/det;\n        intercept_1 = (b1 * c2 - b2 * c1) * dInv;\n        a2 = a; b2 = b; c2 = c - max_distance_below;\n        det = a1 * b2 - a2 * b1;\n        dInv = 1.0/det;\n        intercept_2 = (b1 * c2 - b2 * c1) * dInv;\n        left_intercept = Math.min(intercept_1, intercept_2);\n        right_intercept = Math.max(intercept_1, intercept_2);\n        error = right_intercept - left_intercept;\n        return (error < flatnessTolerance)? 1 : 0;\n    };\n    var _computeXIntercept = function(curve, degree) {\n        var XLK = 1.0, YLK = 0.0,\n            XNM = curve[degree].x - curve[0].x, YNM = curve[degree].y - curve[0].y,\n            XMK = curve[0].x - 0.0, YMK = curve[0].y - 0.0,\n            det = XNM*YLK - YNM*XLK, detInv = 1.0/det,\n            S = (XNM*YMK - YNM*XMK) * detInv;\n        return 0.0 + XLK * S;\n    };\n    var _bezier = function(curve, degree, t, left, right) {\n        var temp = [[]];\n        for (var j =0; j <= degree; j++) temp[0][j] = curve[j];\n        for (var i = 1; i <= degree; i++) {\n            for (var j =0 ; j <= degree - i; j++) {\n                if (!temp[i]) temp[i] = [];\n                if (!temp[i][j]) temp[i][j] = {};\n                temp[i][j].x = (1.0 - t) * temp[i-1][j].x + t * temp[i-1][j+1].x;\n                temp[i][j].y = (1.0 - t) * temp[i-1][j].y + t * temp[i-1][j+1].y;\n            }\n        }\n        if (left != null)\n            for (j = 0; j <= degree; j++) left[j]  = temp[j][0];\n        if (right != null)\n            for (j = 0; j <= degree; j++) right[j] = temp[degree-j][j];\n\n        return (temp[degree][0]);\n    };\n\n    var _curveFunctionCache = {};\n    var _getCurveFunctions = function(order) {\n        var fns = _curveFunctionCache[order];\n        if (!fns) {\n            fns = [];\n            var f_term = function() { return function(t) { return Math.pow(t, order); }; },\n                l_term = function() { return function(t) { return Math.pow((1-t), order); }; },\n                c_term = function(c) { return function(t) { return c; }; },\n                t_term = function() { return function(t) { return t; }; },\n                one_minus_t_term = function() { return function(t) { return 1-t; }; },\n                _termFunc = function(terms) {\n                    return function(t) {\n                        var p = 1;\n                        for (var i = 0; i < terms.length; i++) p = p * terms[i](t);\n                        return p;\n                    };\n                };\n\n            fns.push(new f_term());  // first is t to the power of the curve order\n            for (var i = 1; i < order; i++) {\n                var terms = [new c_term(order)];\n                for (var j = 0 ; j < (order - i); j++) terms.push(new t_term());\n                for (var j = 0 ; j < i; j++) terms.push(new one_minus_t_term());\n                fns.push(new _termFunc(terms));\n            }\n            fns.push(new l_term());  // last is (1-t) to the power of the curve order\n\n            _curveFunctionCache[order] = fns;\n        }\n\n        return fns;\n    };\n\n\n    /**\n     * calculates a point on the curve, for a Bezier of arbitrary order.\n     * @param curve an array of control points, eg [{x:10,y:20}, {x:50,y:50}, {x:100,y:100}, {x:120,y:100}].  For a cubic bezier this should have four points.\n     * @param location a decimal indicating the distance along the curve the point should be located at.  this is the distance along the curve as it travels, taking the way it bends into account.  should be a number from 0 to 1, inclusive.\n     */\n    var _pointOnPath = function(curve, location) {\n        var cc = _getCurveFunctions(curve.length - 1),\n            _x = 0, _y = 0;\n        for (var i = 0; i < curve.length ; i++) {\n            _x = _x + (curve[i].x * cc[i](location));\n            _y = _y + (curve[i].y * cc[i](location));\n        }\n\n        return {x:_x, y:_y};\n    };\n\n    var _dist = function(p1,p2) {\n        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    };\n\n    var _isPoint = function(curve) {\n        return curve[0].x == curve[1].x && curve[0].y == curve[1].y;\n    };\n\n    /**\n     * finds the point that is 'distance' along the path from 'location'.  this method returns both the x,y location of the point and also\n     * its 'location' (proportion of travel along the path); the method below - _pointAlongPathFrom - calls this method and just returns the\n     * point.\n     */\n    var _pointAlongPath = function(curve, location, distance) {\n\n        if (_isPoint(curve)) {\n            return {\n                point:curve[0],\n                location:location\n            };\n        }\n\n        var prev = _pointOnPath(curve, location),\n            tally = 0,\n            curLoc = location,\n            direction = distance > 0 ? 1 : -1,\n            cur = null;\n\n        while (tally < Math.abs(distance)) {\n            curLoc += (0.005 * direction);\n            cur = _pointOnPath(curve, curLoc);\n            tally += _dist(cur, prev);\n            prev = cur;\n        }\n        return {point:cur, location:curLoc};\n    };\n\n    var _length = function(curve) {\n        if (_isPoint(curve)) return 0;\n\n        var prev = _pointOnPath(curve, 0),\n            tally = 0,\n            curLoc = 0,\n            direction = 1,\n            cur = null;\n\n        while (curLoc < 1) {\n            curLoc += (0.005 * direction);\n            cur = _pointOnPath(curve, curLoc);\n            tally += _dist(cur, prev);\n            prev = cur;\n        }\n        return tally;\n    };\n\n    /**\n     * finds the point that is 'distance' along the path from 'location'.\n     */\n    var _pointAlongPathFrom = function(curve, location, distance) {\n        return _pointAlongPath(curve, location, distance).point;\n    };\n\n    /**\n     * finds the location that is 'distance' along the path from 'location'.\n     */\n    var _locationAlongPathFrom = function(curve, location, distance) {\n        return _pointAlongPath(curve, location, distance).location;\n    };\n\n    /**\n     * returns the gradient of the curve at the given location, which is a decimal between 0 and 1 inclusive.\n     *\n     * thanks // http://bimixual.org/AnimationLibrary/beziertangents.html\n     */\n    var _gradientAtPoint = function(curve, location) {\n        var p1 = _pointOnPath(curve, location),\n            p2 = _pointOnPath(curve.slice(0, curve.length - 1), location),\n            dy = p2.y - p1.y, dx = p2.x - p1.x;\n        return dy == 0 ? Infinity : Math.atan(dy / dx);\n    };\n\n    /**\n     returns the gradient of the curve at the point which is 'distance' from the given location.\n     if this point is greater than location 1, the gradient at location 1 is returned.\n     if this point is less than location 0, the gradient at location 0 is returned.\n     */\n    var _gradientAtPointAlongPathFrom = function(curve, location, distance) {\n        var p = _pointAlongPath(curve, location, distance);\n        if (p.location > 1) p.location = 1;\n        if (p.location < 0) p.location = 0;\n        return _gradientAtPoint(curve, p.location);\n    };\n\n    /**\n     * calculates a line that is 'length' pixels long, perpendicular to, and centered on, the path at 'distance' pixels from the given location.\n     * if distance is not supplied, the perpendicular for the given location is computed (ie. we set distance to zero).\n     */\n    var _perpendicularToPathAt = function(curve, location, length, distance) {\n        distance = distance == null ? 0 : distance;\n        var p = _pointAlongPath(curve, location, distance),\n            m = _gradientAtPoint(curve, p.location),\n            _theta2 = Math.atan(-1 / m),\n            y =  length / 2 * Math.sin(_theta2),\n            x =  length / 2 * Math.cos(_theta2);\n        return [{x:p.point.x + x, y:p.point.y + y}, {x:p.point.x - x, y:p.point.y - y}];\n    };\n\n    var jsBezier = this.jsBezier = {\n        distanceFromCurve : _distanceFromCurve,\n        gradientAtPoint : _gradientAtPoint,\n        gradientAtPointAlongCurveFrom : _gradientAtPointAlongPathFrom,\n        nearestPointOnCurve : _nearestPointOnCurve,\n        pointOnCurve : _pointOnPath,\n        pointAlongCurveFrom : _pointAlongPathFrom,\n        perpendicularToCurveAt : _perpendicularToPathAt,\n        locationAlongCurveFrom:_locationAlongPathFrom,\n        getLength:_length,\n        version:\"0.9.0\"\n    };\n\n    if (typeof exports !== \"undefined\") {\n        exports.jsBezier = jsBezier;\n    }\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/**\n * Biltong v0.4.0\n *\n * Various geometry functions written as part of jsPlumb and perhaps useful for others.\n *\n * Copyright (c) 2017 jsPlumb\n * https://jsplumbtoolkit.com\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n;(function() {\n\n    \"use strict\";\n    var root = this;\n\n    var Biltong = root.Biltong = {\n        version:\"0.4.0\"\n    };\n\n    if (typeof exports !== \"undefined\") {\n        exports.Biltong = Biltong;\n    }\n\n    var _isa = function(a) { return Object.prototype.toString.call(a) === \"[object Array]\"; },\n        _pointHelper = function(p1, p2, fn) {\n            p1 = _isa(p1) ? p1 : [p1.x, p1.y];\n            p2 = _isa(p2) ? p2 : [p2.x, p2.y];\n            return fn(p1, p2);\n        },\n        /**\n         * @name Biltong.gradient\n         * @function\n         * @desc Calculates the gradient of a line between the two points.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Float} The gradient of a line between the two points.\n         */\n        _gradient = Biltong.gradient = function(p1, p2) {\n            return _pointHelper(p1, p2, function(_p1, _p2) {\n                if (_p2[0] == _p1[0])\n                    return _p2[1] > _p1[1] ? Infinity : -Infinity;\n                else if (_p2[1] == _p1[1])\n                    return _p2[0] > _p1[0] ? 0 : -0;\n                else\n                    return (_p2[1] - _p1[1]) / (_p2[0] - _p1[0]);\n            });\n        },\n        /**\n         * @name Biltong.normal\n         * @function\n         * @desc Calculates the gradient of a normal to a line between the two points.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Float} The gradient of a normal to a line between the two points.\n         */\n        _normal = Biltong.normal = function(p1, p2) {\n            return -1 / _gradient(p1, p2);\n        },\n        /**\n         * @name Biltong.lineLength\n         * @function\n         * @desc Calculates the length of a line between the two points.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Float} The length of a line between the two points.\n         */\n        _lineLength = Biltong.lineLength = function(p1, p2) {\n            return _pointHelper(p1, p2, function(_p1, _p2) {\n                return Math.sqrt(Math.pow(_p2[1] - _p1[1], 2) + Math.pow(_p2[0] - _p1[0], 2));\n            });\n        },\n        /**\n         * @name Biltong.quadrant\n         * @function\n         * @desc Calculates the quadrant in which the angle between the two points lies.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Integer} The quadrant - 1 for upper right, 2 for lower right, 3 for lower left, 4 for upper left.\n         */\n        _quadrant = Biltong.quadrant = function(p1, p2) {\n            return _pointHelper(p1, p2, function(_p1, _p2) {\n                if (_p2[0] > _p1[0]) {\n                    return (_p2[1] > _p1[1]) ? 2 : 1;\n                }\n                else if (_p2[0] == _p1[0]) {\n                    return _p2[1] > _p1[1] ? 2 : 1;\n                }\n                else {\n                    return (_p2[1] > _p1[1]) ? 3 : 4;\n                }\n            });\n        },\n        /**\n         * @name Biltong.theta\n         * @function\n         * @desc Calculates the angle between the two points.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Float} The angle between the two points.\n         */\n        _theta = Biltong.theta = function(p1, p2) {\n            return _pointHelper(p1, p2, function(_p1, _p2) {\n                var m = _gradient(_p1, _p2),\n                    t = Math.atan(m),\n                    s = _quadrant(_p1, _p2);\n                if ((s == 4 || s== 3)) t += Math.PI;\n                if (t < 0) t += (2 * Math.PI);\n\n                return t;\n            });\n        },\n        /**\n         * @name Biltong.intersects\n         * @function\n         * @desc Calculates whether or not the two rectangles intersect.\n         * @param {Rectangle} r1 First rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\n         * @param {Rectangle} r2 Second rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\n         * @return {Boolean} True if the rectangles intersect, false otherwise.\n         */\n        _intersects = Biltong.intersects = function(r1, r2) {\n            var x1 = r1.x, x2 = r1.x + r1.w, y1 = r1.y, y2 = r1.y + r1.h,\n                a1 = r2.x, a2 = r2.x + r2.w, b1 = r2.y, b2 = r2.y + r2.h;\n\n            return  ( (x1 <= a1 && a1 <= x2) && (y1 <= b1 && b1 <= y2) ) ||\n                ( (x1 <= a2 && a2 <= x2) && (y1 <= b1 && b1 <= y2) ) ||\n                ( (x1 <= a1 && a1 <= x2) && (y1 <= b2 && b2 <= y2) ) ||\n                ( (x1 <= a2 && a1 <= x2) && (y1 <= b2 && b2 <= y2) ) ||\n                ( (a1 <= x1 && x1 <= a2) && (b1 <= y1 && y1 <= b2) ) ||\n                ( (a1 <= x2 && x2 <= a2) && (b1 <= y1 && y1 <= b2) ) ||\n                ( (a1 <= x1 && x1 <= a2) && (b1 <= y2 && y2 <= b2) ) ||\n                ( (a1 <= x2 && x1 <= a2) && (b1 <= y2 && y2 <= b2) );\n        },\n        /**\n         * @name Biltong.encloses\n         * @function\n         * @desc Calculates whether or not r2 is completely enclosed by r1.\n         * @param {Rectangle} r1 First rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\n         * @param {Rectangle} r2 Second rectangle, as a js object in the form `{x:.., y:.., w:.., h:..}`\n         * @param {Boolean} [allowSharedEdges=false] If true, the concept of enclosure allows for one or more edges to be shared by the two rectangles.\n         * @return {Boolean} True if r1 encloses r2, false otherwise.\n         */\n        _encloses = Biltong.encloses = function(r1, r2, allowSharedEdges) {\n            var x1 = r1.x, x2 = r1.x + r1.w, y1 = r1.y, y2 = r1.y + r1.h,\n                a1 = r2.x, a2 = r2.x + r2.w, b1 = r2.y, b2 = r2.y + r2.h,\n                c = function(v1, v2, v3, v4) { return allowSharedEdges ? v1 <= v2 && v3>= v4 : v1 < v2 && v3 > v4; };\n\n            return c(x1,a1,x2,a2) && c(y1,b1,y2,b2);\n        },\n        _segmentMultipliers = [null, [1, -1], [1, 1], [-1, 1], [-1, -1] ],\n        _inverseSegmentMultipliers = [null, [-1, -1], [-1, 1], [1, 1], [1, -1] ],\n        /**\n         * @name Biltong.pointOnLine\n         * @function\n         * @desc Calculates a point on the line from `fromPoint` to `toPoint` that is `distance` units along the length of the line.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Point} Point on the line, in the form `{ x:..., y:... }`.\n         */\n        _pointOnLine = Biltong.pointOnLine = function(fromPoint, toPoint, distance) {\n            var m = _gradient(fromPoint, toPoint),\n                s = _quadrant(fromPoint, toPoint),\n                segmentMultiplier = distance > 0 ? _segmentMultipliers[s] : _inverseSegmentMultipliers[s],\n                theta = Math.atan(m),\n                y = Math.abs(distance * Math.sin(theta)) * segmentMultiplier[1],\n                x =  Math.abs(distance * Math.cos(theta)) * segmentMultiplier[0];\n            return { x:fromPoint.x + x, y:fromPoint.y + y };\n        },\n        /**\n         * @name Biltong.perpendicularLineTo\n         * @function\n         * @desc Calculates a line of length `length` that is perpendicular to the line from `fromPoint` to `toPoint` and passes through `toPoint`.\n         * @param {Point} p1 First point, either as a 2 entry array or object with `left` and `top` properties.\n         * @param {Point} p2 Second point, either as a 2 entry array or object with `left` and `top` properties.\n         * @return {Line} Perpendicular line, in the form `[ { x:..., y:... }, { x:..., y:... } ]`.\n         */\n        _perpendicularLineTo = Biltong.perpendicularLineTo = function(fromPoint, toPoint, length) {\n            var m = _gradient(fromPoint, toPoint),\n                theta2 = Math.atan(-1 / m),\n                y =  length / 2 * Math.sin(theta2),\n                x =  length / 2 * Math.cos(theta2);\n            return [{x:toPoint.x + x, y:toPoint.y + y}, {x:toPoint.x - x, y:toPoint.y - y}];\n        };\n}).call(typeof window !== 'undefined' ? window : this);\n;\n(function () {\n\n    \"use strict\";\n\n    var root = this,\n        Sniff = {\n            android: navigator.userAgent.toLowerCase().indexOf(\"android\") > -1\n        },\n        matchesSelector = function (el, selector, ctx) {\n            ctx = ctx || el.parentNode;\n            var possibles = ctx.querySelectorAll(selector);\n            for (var i = 0; i < possibles.length; i++) {\n                if (possibles[i] === el) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        _gel = function (el) {\n            return (typeof el == \"string\" || el.constructor === String) ? document.getElementById(el) : el;\n        },\n        _t = function (e) {\n            return e.srcElement || e.target;\n        },\n    //\n    // gets path info for the given event - the path from target to obj, in the event's bubble chain. if doCompute\n    // is false we just return target for the path.\n    //\n        _pi = function(e, target, obj, doCompute) {\n            if (!doCompute) return { path:[target], end:1 };\n            else if (typeof e.path !== \"undefined\" && e.path.indexOf) {\n                return { path: e.path, end: e.path.indexOf(obj) };\n            } else {\n                var out = { path:[], end:-1 }, _one = function(el) {\n                    out.path.push(el);\n                    if (el === obj) {\n                        out.end = out.path.length - 1;\n                    }\n                    else if (el.parentNode != null) {\n                        _one(el.parentNode)\n                    }\n                };\n                _one(target);\n                return out;\n            }\n        },\n        _d = function (l, fn) {\n            for (var i = 0, j = l.length; i < j; i++) {\n                if (l[i] == fn) break;\n            }\n            if (i < l.length) l.splice(i, 1);\n        },\n        guid = 1,\n    //\n    // this function generates a guid for every handler, sets it on the handler, then adds\n    // it to the associated object's map of handlers for the given event. this is what enables us\n    // to unbind all events of some type, or all events (the second of which can be requested by the user,\n    // but it also used by Mottle when an element is removed.)\n        _store = function (obj, event, fn) {\n            var g = guid++;\n            obj.__ta = obj.__ta || {};\n            obj.__ta[event] = obj.__ta[event] || {};\n            // store each handler with a unique guid.\n            obj.__ta[event][g] = fn;\n            // set the guid on the handler.\n            fn.__tauid = g;\n            return g;\n        },\n        _unstore = function (obj, event, fn) {\n            obj.__ta && obj.__ta[event] && delete obj.__ta[event][fn.__tauid];\n            // a handler might have attached extra functions, so we unbind those too.\n            if (fn.__taExtra) {\n                for (var i = 0; i < fn.__taExtra.length; i++) {\n                    _unbind(obj, fn.__taExtra[i][0], fn.__taExtra[i][1]);\n                }\n                fn.__taExtra.length = 0;\n            }\n            // a handler might have attached an unstore callback\n            fn.__taUnstore && fn.__taUnstore();\n        },\n        _curryChildFilter = function (children, obj, fn, evt) {\n            if (children == null) return fn;\n            else {\n                var c = children.split(\",\"),\n                    _fn = function (e) {\n                        _fn.__tauid = fn.__tauid;\n                        var t = _t(e), target = t;  // t is the target element on which the event occurred. it is the\n                        // element we will wish to pass to any callbacks.\n                        var pathInfo = _pi(e, t, obj, children != null)\n                        if (pathInfo.end != -1) {\n                            for (var p = 0; p < pathInfo.end; p++) {\n                                target = pathInfo.path[p];\n                                for (var i = 0; i < c.length; i++) {\n                                    if (matchesSelector(target, c[i], obj)) {\n                                        fn.apply(target, arguments);\n                                    }\n                                }\n                            }\n                        }\n                    };\n                registerExtraFunction(fn, evt, _fn);\n                return _fn;\n            }\n        },\n    //\n    // registers an 'extra' function on some event listener function we were given - a function that we\n    // created and bound to the element as part of our housekeeping, and which we want to unbind and remove\n    // whenever the given function is unbound.\n        registerExtraFunction = function (fn, evt, newFn) {\n            fn.__taExtra = fn.__taExtra || [];\n            fn.__taExtra.push([evt, newFn]);\n        },\n        DefaultHandler = function (obj, evt, fn, children) {\n            if (isTouchDevice && touchMap[evt]) {\n                var tfn = _curryChildFilter(children, obj, fn, touchMap[evt]);\n                _bind(obj, touchMap[evt], tfn , fn);\n            }\n            if (evt === \"focus\" && obj.getAttribute(\"tabindex\") == null) {\n                obj.setAttribute(\"tabindex\", \"1\");\n            }\n            _bind(obj, evt, _curryChildFilter(children, obj, fn, evt), fn);\n        },\n        SmartClickHandler = function (obj, evt, fn, children) {\n            if (obj.__taSmartClicks == null) {\n                var down = function (e) {\n                        obj.__tad = _pageLocation(e);\n                    },\n                    up = function (e) {\n                        obj.__tau = _pageLocation(e);\n                    },\n                    click = function (e) {\n                        if (obj.__tad && obj.__tau && obj.__tad[0] === obj.__tau[0] && obj.__tad[1] === obj.__tau[1]) {\n                            for (var i = 0; i < obj.__taSmartClicks.length; i++)\n                                obj.__taSmartClicks[i].apply(_t(e), [ e ]);\n                        }\n                    };\n                DefaultHandler(obj, \"mousedown\", down, children);\n                DefaultHandler(obj, \"mouseup\", up, children);\n                DefaultHandler(obj, \"click\", click, children);\n                obj.__taSmartClicks = [];\n            }\n\n            // store in the list of callbacks\n            obj.__taSmartClicks.push(fn);\n            // the unstore function removes this function from the object's listener list for this type.\n            fn.__taUnstore = function () {\n                _d(obj.__taSmartClicks, fn);\n            };\n        },\n        _tapProfiles = {\n            \"tap\": {touches: 1, taps: 1},\n            \"dbltap\": {touches: 1, taps: 2},\n            \"contextmenu\": {touches: 2, taps: 1}\n        },\n        TapHandler = function (clickThreshold, dblClickThreshold) {\n            return function (obj, evt, fn, children) {\n                // if event is contextmenu, for devices which are mouse only, we want to\n                // use the default bind.\n                if (evt == \"contextmenu\" && isMouseDevice)\n                    DefaultHandler(obj, evt, fn, children);\n                else {\n                    // the issue here is that this down handler gets registered only for the\n                    // child nodes in the first registration. in fact it should be registered with\n                    // no child selector and then on down we should cycle through the registered\n                    // functions to see if one of them matches. on mouseup we should execute ALL of\n                    // the functions whose children are either null or match the element.\n                    if (obj.__taTapHandler == null) {\n                        var tt = obj.__taTapHandler = {\n                            tap: [],\n                            dbltap: [],\n                            contextmenu: [],\n                            down: false,\n                            taps: 0,\n                            downSelectors: []\n                        };\n                        var down = function (e) {\n                                var target = _t(e), pathInfo = _pi(e, target, obj, children != null), finished = false;\n                                for (var p = 0; p < pathInfo.end; p++) {\n                                    if (finished) return;\n                                    target = pathInfo.path[p];\n                                    for (var i = 0; i < tt.downSelectors.length; i++) {\n                                        if (tt.downSelectors[i] == null || matchesSelector(target, tt.downSelectors[i], obj)) {\n                                            tt.down = true;\n                                            setTimeout(clearSingle, clickThreshold);\n                                            setTimeout(clearDouble, dblClickThreshold);\n                                            finished = true;\n                                            break; // we only need one match on mousedown\n                                        }\n                                    }\n                                }\n                            },\n                            up = function (e) {\n                                if (tt.down) {\n                                    var target = _t(e), currentTarget, pathInfo;\n                                    tt.taps++;\n                                    var tc = _touchCount(e);\n                                    for (var eventId in _tapProfiles) {\n                                        if (_tapProfiles.hasOwnProperty(eventId)) {\n                                            var p = _tapProfiles[eventId];\n                                            if (p.touches === tc && (p.taps === 1 || p.taps === tt.taps)) {\n                                                for (var i = 0; i < tt[eventId].length; i++) {\n                                                    pathInfo = _pi(e, target, obj, tt[eventId][i][1] != null);\n                                                    for (var pLoop = 0; pLoop < pathInfo.end; pLoop++) {\n                                                        currentTarget = pathInfo.path[pLoop];\n                                                        // this is a single event registration handler.\n                                                        if (tt[eventId][i][1] == null || matchesSelector(currentTarget, tt[eventId][i][1], obj)) {\n                                                            tt[eventId][i][0].apply(currentTarget, [ e ]);\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            },\n                            clearSingle = function () {\n                                tt.down = false;\n                            },\n                            clearDouble = function () {\n                                tt.taps = 0;\n                            };\n\n                        DefaultHandler(obj, \"mousedown\", down);\n                        DefaultHandler(obj, \"mouseup\", up);\n                    }\n                    // add this child selector (it can be null, that's fine).\n                    obj.__taTapHandler.downSelectors.push(children);\n\n                    obj.__taTapHandler[evt].push([fn, children]);\n                    // the unstore function removes this function from the object's listener list for this type.\n                    fn.__taUnstore = function () {\n                        _d(obj.__taTapHandler[evt], fn);\n                    };\n                }\n            };\n        },\n        meeHelper = function (type, evt, obj, target) {\n            for (var i in obj.__tamee[type]) {\n                if (obj.__tamee[type].hasOwnProperty(i)) {\n                    obj.__tamee[type][i].apply(target, [ evt ]);\n                }\n            }\n        },\n        MouseEnterExitHandler = function () {\n            var activeElements = [];\n            return function (obj, evt, fn, children) {\n                if (!obj.__tamee) {\n                    // __tamee holds a flag saying whether the mouse is currently \"in\" the element, and a list of\n                    // both mouseenter and mouseexit functions.\n                    obj.__tamee = { over: false, mouseenter: [], mouseexit: [] };\n                    // register over and out functions\n                    var over = function (e) {\n                            var t = _t(e);\n                            if ((children == null && (t == obj && !obj.__tamee.over)) || (matchesSelector(t, children, obj) && (t.__tamee == null || !t.__tamee.over))) {\n                                meeHelper(\"mouseenter\", e, obj, t);\n                                t.__tamee = t.__tamee || {};\n                                t.__tamee.over = true;\n                                activeElements.push(t);\n                            }\n                        },\n                        out = function (e) {\n                            var t = _t(e);\n                            // is the current target one of the activeElements? and is the\n                            // related target NOT a descendant of it?\n                            for (var i = 0; i < activeElements.length; i++) {\n                                if (t == activeElements[i] && !matchesSelector((e.relatedTarget || e.toElement), \"*\", t)) {\n                                    t.__tamee.over = false;\n                                    activeElements.splice(i, 1);\n                                    meeHelper(\"mouseexit\", e, obj, t);\n                                }\n                            }\n                        };\n\n                    _bind(obj, \"mouseover\", _curryChildFilter(children, obj, over, \"mouseover\"), over);\n                    _bind(obj, \"mouseout\", _curryChildFilter(children, obj, out, \"mouseout\"), out);\n                }\n\n                fn.__taUnstore = function () {\n                    delete obj.__tamee[evt][fn.__tauid];\n                };\n\n                _store(obj, evt, fn);\n                obj.__tamee[evt][fn.__tauid] = fn;\n            };\n        },\n        isTouchDevice = \"ontouchstart\" in document.documentElement,\n        isMouseDevice = \"onmousedown\" in document.documentElement,\n        touchMap = { \"mousedown\": \"touchstart\", \"mouseup\": \"touchend\", \"mousemove\": \"touchmove\" },\n        touchstart = \"touchstart\", touchend = \"touchend\", touchmove = \"touchmove\",\n        iev = (function () {\n            var rv = -1;\n            if (navigator.appName == 'Microsoft Internet Explorer') {\n                var ua = navigator.userAgent,\n                    re = new RegExp(\"MSIE ([0-9]{1,}[\\.0-9]{0,})\");\n                if (re.exec(ua) != null)\n                    rv = parseFloat(RegExp.$1);\n            }\n            return rv;\n        })(),\n        isIELT9 = iev > -1 && iev < 9,\n        _genLoc = function (e, prefix) {\n            if (e == null) return [ 0, 0 ];\n            var ts = _touches(e), t = _getTouch(ts, 0);\n            return [t[prefix + \"X\"], t[prefix + \"Y\"]];\n        },\n        _pageLocation = function (e) {\n            if (e == null) return [ 0, 0 ];\n            if (isIELT9) {\n                return [ e.clientX + document.documentElement.scrollLeft, e.clientY + document.documentElement.scrollTop ];\n            }\n            else {\n                return _genLoc(e, \"page\");\n            }\n        },\n        _screenLocation = function (e) {\n            return _genLoc(e, \"screen\");\n        },\n        _clientLocation = function (e) {\n            return _genLoc(e, \"client\");\n        },\n        _getTouch = function (touches, idx) {\n            return touches.item ? touches.item(idx) : touches[idx];\n        },\n        _touches = function (e) {\n            return e.touches && e.touches.length > 0 ? e.touches :\n                    e.changedTouches && e.changedTouches.length > 0 ? e.changedTouches :\n                    e.targetTouches && e.targetTouches.length > 0 ? e.targetTouches :\n                [ e ];\n        },\n        _touchCount = function (e) {\n            return _touches(e).length;\n        },\n    //http://www.quirksmode.org/blog/archives/2005/10/_and_the_winner_1.html\n        _bind = function (obj, type, fn, originalFn) {\n            _store(obj, type, fn);\n            originalFn.__tauid = fn.__tauid;\n            if (obj.addEventListener)\n                obj.addEventListener(type, fn, false);\n            else if (obj.attachEvent) {\n                var key = type + fn.__tauid;\n                obj[\"e\" + key] = fn;\n                // TODO look at replacing with .call(..)\n                obj[key] = function () {\n                    obj[\"e\" + key] && obj[\"e\" + key](window.event);\n                };\n                obj.attachEvent(\"on\" + type, obj[key]);\n            }\n        },\n        _unbind = function (obj, type, fn) {\n            if (fn == null) return;\n            _each(obj, function () {\n                var _el = _gel(this);\n                _unstore(_el, type, fn);\n                // it has been bound if there is a tauid. otherwise it was not bound and we can ignore it.\n                if (fn.__tauid != null) {\n                    if (_el.removeEventListener) {\n                        _el.removeEventListener(type, fn, false);\n                        if (isTouchDevice && touchMap[type]) _el.removeEventListener(touchMap[type], fn, false);\n                    }\n                    else if (this.detachEvent) {\n                        var key = type + fn.__tauid;\n                        _el[key] && _el.detachEvent(\"on\" + type, _el[key]);\n                        _el[key] = null;\n                        _el[\"e\" + key] = null;\n                    }\n                }\n\n                // if a touch event was also registered, deregister now.\n                if (fn.__taTouchProxy) {\n                    _unbind(obj, fn.__taTouchProxy[1], fn.__taTouchProxy[0]);\n                }\n            });\n        },\n        _each = function (obj, fn) {\n            if (obj == null) return;\n            // if a list (or list-like), use it. if a string, get a list\n            // by running the string through querySelectorAll. else, assume\n            // it's an Element.\n            // obj.top is \"unknown\" in IE8.\n            obj = (typeof Window !== \"undefined\" && (typeof obj.top !== \"unknown\" && obj == obj.top)) ? [ obj ] :\n                    (typeof obj !== \"string\") && (obj.tagName == null && obj.length != null) ? obj :\n                    typeof obj === \"string\" ? document.querySelectorAll(obj)\n                : [ obj ];\n\n            for (var i = 0; i < obj.length; i++)\n                fn.apply(obj[i]);\n        };\n\n    /**\n     * Mottle offers support for abstracting out the differences\n     * between touch and mouse devices, plus \"smart click\" functionality\n     * (don't fire click if the mouse has moved between mousedown and mouseup),\n     * and synthesized click/tap events.\n     * @class Mottle\n     * @constructor\n     * @param {Object} params Constructor params\n     * @param {Number} [params.clickThreshold=250] Threshold, in milliseconds beyond which a touchstart followed by a touchend is not considered to be a click.\n     * @param {Number} [params.dblClickThreshold=450] Threshold, in milliseconds beyond which two successive tap events are not considered to be a click.\n     * @param {Boolean} [params.smartClicks=false] If true, won't fire click events if the mouse has moved between mousedown and mouseup. Note that this functionality\n     * requires that Mottle consume the mousedown event, and so may not be viable in all use cases.\n     */\n    root.Mottle = function (params) {\n        params = params || {};\n        var clickThreshold = params.clickThreshold || 250,\n            dblClickThreshold = params.dblClickThreshold || 450,\n            mouseEnterExitHandler = new MouseEnterExitHandler(),\n            tapHandler = new TapHandler(clickThreshold, dblClickThreshold),\n            _smartClicks = params.smartClicks,\n            _doBind = function (obj, evt, fn, children) {\n                if (fn == null) return;\n                _each(obj, function () {\n                    var _el = _gel(this);\n                    if (_smartClicks && evt === \"click\")\n                        SmartClickHandler(_el, evt, fn, children);\n                    else if (evt === \"tap\" || evt === \"dbltap\" || evt === \"contextmenu\") {\n                        tapHandler(_el, evt, fn, children);\n                    }\n                    else if (evt === \"mouseenter\" || evt == \"mouseexit\")\n                        mouseEnterExitHandler(_el, evt, fn, children);\n                    else\n                        DefaultHandler(_el, evt, fn, children);\n                });\n            };\n\n        /**\n         * Removes an element from the DOM, and deregisters all event handlers for it. You should use this\n         * to ensure you don't leak memory.\n         * @method remove\n         * @param {String|Element} el Element, or id of the element, to remove.\n         * @return {Mottle} The current Mottle instance; you can chain this method.\n         */\n        this.remove = function (el) {\n            _each(el, function () {\n                var _el = _gel(this);\n                if (_el.__ta) {\n                    for (var evt in _el.__ta) {\n                        if (_el.__ta.hasOwnProperty(evt)) {\n                            for (var h in _el.__ta[evt]) {\n                                if (_el.__ta[evt].hasOwnProperty(h))\n                                    _unbind(_el, evt, _el.__ta[evt][h]);\n                            }\n                        }\n                    }\n                }\n                _el.parentNode && _el.parentNode.removeChild(_el);\n            });\n            return this;\n        };\n\n        /**\n         * Register an event handler, optionally as a delegate for some set of descendant elements. Note\n         * that this method takes either 3 or 4 arguments - if you supply 3 arguments it is assumed you have\n         * omitted the `children` parameter, and that the event handler should be bound directly to the given element.\n         * @method on\n         * @param {Element[]|Element|String} el Either an Element, or a CSS spec for a list of elements, or an array of Elements.\n         * @param {String} [children] Comma-delimited list of selectors identifying allowed children.\n         * @param {String} event Event ID.\n         * @param {Function} fn Event handler function.\n         * @return {Mottle} The current Mottle instance; you can chain this method.\n         */\n        this.on = function (el, event, children, fn) {\n            var _el = arguments[0],\n                _c = arguments.length == 4 ? arguments[2] : null,\n                _e = arguments[1],\n                _f = arguments[arguments.length - 1];\n\n            _doBind(_el, _e, _f, _c);\n            return this;\n        };\n\n        /**\n         * Cancel delegate event handling for the given function. Note that unlike with 'on' you do not supply\n         * a list of child selectors here: it removes event delegation from all of the child selectors for which the\n         * given function was registered (if any).\n         * @method off\n         * @param {Element[]|Element|String} el Element - or ID of element - from which to remove event listener.\n         * @param {String} event Event ID.\n         * @param {Function} fn Event handler function.\n         * @return {Mottle} The current Mottle instance; you can chain this method.\n         */\n        this.off = function (el, event, fn) {\n            _unbind(el, event, fn);\n            return this;\n        };\n\n        /**\n         * Triggers some event for a given element.\n         * @method trigger\n         * @param {Element} el Element for which to trigger the event.\n         * @param {String} event Event ID.\n         * @param {Event} originalEvent The original event. Should be optional of course, but currently is not, due\n         * to the jsPlumb use case that caused this method to be added.\n         * @param {Object} [payload] Optional object to set as `payload` on the generated event; useful for message passing.\n         * @return {Mottle} The current Mottle instance; you can chain this method.\n         */\n        this.trigger = function (el, event, originalEvent, payload) {\n            // MouseEvent undefined in old IE; that's how we know it's a mouse event.  A fine Microsoft paradox.\n            var originalIsMouse = isMouseDevice && (typeof MouseEvent === \"undefined\" || originalEvent == null || originalEvent.constructor === MouseEvent);\n\n            var eventToBind = (isTouchDevice && !isMouseDevice && touchMap[event]) ? touchMap[event] : event,\n                bindingAMouseEvent = !(isTouchDevice && !isMouseDevice && touchMap[event]);\n\n            var pl = _pageLocation(originalEvent), sl = _screenLocation(originalEvent), cl = _clientLocation(originalEvent);\n            _each(el, function () {\n                var _el = _gel(this), evt;\n                originalEvent = originalEvent || {\n                    screenX: sl[0],\n                    screenY: sl[1],\n                    clientX: cl[0],\n                    clientY: cl[1]\n                };\n\n                var _decorate = function (_evt) {\n                    if (payload) _evt.payload = payload;\n                };\n\n                var eventGenerators = {\n                    \"TouchEvent\": function (evt) {\n                        var touch = document.createTouch(window, _el, 0, pl[0], pl[1],\n                            sl[0], sl[1],\n                            cl[0], cl[1],\n                            0, 0, 0, 0);\n\n                        // https://gist.github.com/sstephenson/448808\n                        var touches = document.createTouchList(touch);\n                        var targetTouches = document.createTouchList(touch);\n                        var changedTouches = document.createTouchList(touch);\n                        evt.initTouchEvent(eventToBind, true, true, window, null, sl[0], sl[1],\n                            cl[0], cl[1], false, false, false, false,\n                            touches, targetTouches, changedTouches, 1, 0);\n                    },\n                    \"MouseEvents\": function (evt) {\n                        evt.initMouseEvent(eventToBind, true, true, window, 0,\n                            sl[0], sl[1],\n                            cl[0], cl[1],\n                            false, false, false, false, 1, _el);\n\n                        if (Sniff.android) {\n                            // Android's touch events are not standard.\n                            var t = document.createTouch(window, _el, 0, pl[0], pl[1],\n                                sl[0], sl[1],\n                                cl[0], cl[1],\n                                0, 0, 0, 0);\n\n                            evt.touches = evt.targetTouches = evt.changedTouches = document.createTouchList(t);\n                        }\n                    }\n                };\n\n                if (document.createEvent) {\n\n                    var ite = !bindingAMouseEvent && !originalIsMouse && (isTouchDevice && touchMap[event] && !Sniff.android),\n                        evtName = ite ? \"TouchEvent\" : \"MouseEvents\";\n\n                    evt = document.createEvent(evtName);\n                    eventGenerators[evtName](evt);\n                    _decorate(evt);\n                    _el.dispatchEvent(evt);\n                }\n                else if (document.createEventObject) {\n                    evt = document.createEventObject();\n                    evt.eventType = evt.eventName = eventToBind;\n                    evt.screenX = sl[0];\n                    evt.screenY = sl[1];\n                    evt.clientX = cl[0];\n                    evt.clientY = cl[1];\n                    _decorate(evt);\n                    _el.fireEvent('on' + eventToBind, evt);\n                }\n            });\n            return this;\n        }\n    };\n\n    /**\n     * Static method to assist in 'consuming' an element: uses `stopPropagation` where available, or sets\n     * `e.returnValue=false` where it is not.\n     * @method Mottle.consume\n     * @param {Event} e Event to consume\n     * @param {Boolean} [doNotPreventDefault=false] If true, does not call `preventDefault()` on the event.\n     */\n    root.Mottle.consume = function (e, doNotPreventDefault) {\n        if (e.stopPropagation)\n            e.stopPropagation();\n        else\n            e.returnValue = false;\n\n        if (!doNotPreventDefault && e.preventDefault)\n            e.preventDefault();\n    };\n\n    /**\n     * Gets the page location corresponding to the given event. For touch events this means get the page location of the first touch.\n     * @method Mottle.pageLocation\n     * @param {Event} e Event to get page location for.\n     * @return {Number[]} [left, top] for the given event.\n     */\n    root.Mottle.pageLocation = _pageLocation;\n\n    /**\n     * Forces touch events to be turned \"on\". Useful for testing: even if you don't have a touch device, you can still\n     * trigger a touch event when this is switched on and it will be captured and acted on.\n     * @method setForceTouchEvents\n     * @param {Boolean} value If true, force touch events to be on.\n     */\n    root.Mottle.setForceTouchEvents = function (value) {\n        isTouchDevice = value;\n    };\n\n    /**\n     * Forces mouse events to be turned \"on\". Useful for testing: even if you don't have a mouse, you can still\n     * trigger a mouse event when this is switched on and it will be captured and acted on.\n     * @method setForceMouseEvents\n     * @param {Boolean} value If true, force mouse events to be on.\n     */\n    root.Mottle.setForceMouseEvents = function (value) {\n        isMouseDevice = value;\n    };\n\n    root.Mottle.version = \"0.8.0\";\n\n    if (typeof exports !== \"undefined\") {\n        exports.Mottle = root.Mottle;\n    }\n\n}).call(typeof window === \"undefined\" ? this : window);\n\n/**\n drag/drop functionality for use with jsPlumb but with\n no knowledge of jsPlumb. supports multiple scopes (separated by whitespace), dragging\n multiple elements, constrain to parent, drop filters, drag start filters, custom\n css classes.\n\n a lot of the functionality of this script is expected to be plugged in:\n\n addClass\n removeClass\n\n addEvent\n removeEvent\n\n getPosition\n setPosition\n getSize\n\n indexOf\n intersects\n\n the name came from here:\n\n http://mrsharpoblunto.github.io/foswig.js/\n\n copyright 2016 jsPlumb\n */\n\n;(function() {\n\n    \"use strict\";\n    var root = this;\n\n    var _suggest = function(list, item, head) {\n        if (list.indexOf(item) === -1) {\n            head ? list.unshift(item) : list.push(item);\n            return true;\n        }\n        return false;\n    };\n\n    var _vanquish = function(list, item) {\n        var idx = list.indexOf(item);\n        if (idx != -1) list.splice(idx, 1);\n    };\n\n    var _difference = function(l1, l2) {\n        var d = [];\n        for (var i = 0; i < l1.length; i++) {\n            if (l2.indexOf(l1[i]) == -1)\n                d.push(l1[i]);\n        }\n        return d;\n    };\n\n    var _isString = function(f) {\n        return f == null ? false : (typeof f === \"string\" || f.constructor == String);\n    };\n\n    var getOffsetRect = function (elem) {\n        // (1)\n        var box = elem.getBoundingClientRect(),\n            body = document.body,\n            docElem = document.documentElement,\n        // (2)\n            scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop,\n            scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft,\n        // (3)\n            clientTop = docElem.clientTop || body.clientTop || 0,\n            clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        // (4)\n            top  = box.top +  scrollTop - clientTop,\n            left = box.left + scrollLeft - clientLeft;\n\n        return { top: Math.round(top), left: Math.round(left) };\n    };\n\n    var matchesSelector = function(el, selector, ctx) {\n        ctx = ctx || el.parentNode;\n        var possibles = ctx.querySelectorAll(selector);\n        for (var i = 0; i < possibles.length; i++) {\n            if (possibles[i] === el)\n                return true;\n        }\n        return false;\n    };\n\n    var iev = (function() {\n            var rv = -1;\n            if (navigator.appName == 'Microsoft Internet Explorer') {\n                var ua = navigator.userAgent,\n                    re = new RegExp(\"MSIE ([0-9]{1,}[\\.0-9]{0,})\");\n                if (re.exec(ua) != null)\n                    rv = parseFloat(RegExp.$1);\n            }\n            return rv;\n        })(),\n        DEFAULT_GRID_X = 50,\n        DEFAULT_GRID_Y = 50,\n        isIELT9 = iev > -1 && iev < 9,\n        isIE9 = iev == 9,\n        _pl = function(e) {\n            if (isIELT9) {\n                return [ e.clientX + document.documentElement.scrollLeft, e.clientY + document.documentElement.scrollTop ];\n            }\n            else {\n                var ts = _touches(e), t = _getTouch(ts, 0);\n                // for IE9 pageX might be null if the event was synthesized. We try for pageX/pageY first,\n                // falling back to clientX/clientY if necessary. In every other browser we want to use pageX/pageY.\n                return isIE9 ? [t.pageX || t.clientX, t.pageY || t.clientY] : [t.pageX, t.pageY];\n            }\n        },\n        _getTouch = function(touches, idx) { return touches.item ? touches.item(idx) : touches[idx]; },\n        _touches = function(e) {\n            return e.touches && e.touches.length > 0 ? e.touches :\n                    e.changedTouches && e.changedTouches.length > 0 ? e.changedTouches :\n                    e.targetTouches && e.targetTouches.length > 0 ? e.targetTouches :\n                [ e ];\n        },\n        _classes = {\n            draggable:\"katavorio-draggable\",    // draggable elements\n            droppable:\"katavorio-droppable\",    // droppable elements\n            drag : \"katavorio-drag\",            // elements currently being dragged\n            selected:\"katavorio-drag-selected\", // elements in current drag selection\n            active : \"katavorio-drag-active\",   // droppables that are targets of a currently dragged element\n            hover : \"katavorio-drag-hover\",     // droppables over which a matching drag element is hovering\n            noSelect : \"katavorio-drag-no-select\", // added to the body to provide a hook to suppress text selection\n            ghostProxy:\"katavorio-ghost-proxy\"  // added to a ghost proxy element in use when a drag has exited the bounds of its parent.\n        },\n        _defaultScope = \"katavorio-drag-scope\",\n        _events = [ \"stop\", \"start\", \"drag\", \"drop\", \"over\", \"out\", \"beforeStart\" ],\n        _devNull = function() {},\n        _true = function() { return true; },\n        _foreach = function(l, fn, from) {\n            for (var i = 0; i < l.length; i++) {\n                if (l[i] != from)\n                    fn(l[i]);\n            }\n        },\n        _setDroppablesActive = function(dd, val, andHover, drag) {\n            _foreach(dd, function(e) {\n                e.setActive(val);\n                if (val) e.updatePosition();\n                if (andHover) e.setHover(drag, val);\n            });\n        },\n        _each = function(obj, fn) {\n            if (obj == null) return;\n            obj = !_isString(obj) && (obj.tagName == null && obj.length != null) ? obj : [ obj ];\n            for (var i = 0; i < obj.length; i++)\n                fn.apply(obj[i], [ obj[i] ]);\n        },\n        _consume = function(e) {\n            if (e.stopPropagation) {\n                e.stopPropagation();\n                e.preventDefault();\n            }\n            else {\n                e.returnValue = false;\n            }\n        },\n        _defaultInputFilterSelector = \"input,textarea,select,button,option\",\n    //\n    // filters out events on all input elements, like textarea, checkbox, input, select.\n        _inputFilter = function(e, el, _katavorio) {\n            var t = e.srcElement || e.target;\n            return !matchesSelector(t, _katavorio.getInputFilterSelector(), el);\n        };\n\n    var Super = function(el, params, css, scope) {\n        this.params = params || {};\n        this.el = el;\n        this.params.addClass(this.el, this._class);\n        this.uuid = _uuid();\n        var enabled = true;\n        this.setEnabled = function(e) { enabled = e; };\n        this.isEnabled = function() { return enabled; };\n        this.toggleEnabled = function() { enabled = !enabled; };\n        this.setScope = function(scopes) {\n            this.scopes = scopes ? scopes.split(/\\s+/) : [ scope ];\n        };\n        this.addScope = function(scopes) {\n            var m = {};\n            _each(this.scopes, function(s) { m[s] = true;});\n            _each(scopes ? scopes.split(/\\s+/) : [], function(s) { m[s] = true;});\n            this.scopes = [];\n            for (var i in m) this.scopes.push(i);\n        };\n        this.removeScope = function(scopes) {\n            var m = {};\n            _each(this.scopes, function(s) { m[s] = true;});\n            _each(scopes ? scopes.split(/\\s+/) : [], function(s) { delete m[s];});\n            this.scopes = [];\n            for (var i in m) this.scopes.push(i);\n        };\n        this.toggleScope = function(scopes) {\n            var m = {};\n            _each(this.scopes, function(s) { m[s] = true;});\n            _each(scopes ? scopes.split(/\\s+/) : [], function(s) {\n                if (m[s]) delete m[s];\n                else m[s] = true;\n            });\n            this.scopes = [];\n            for (var i in m) this.scopes.push(i);\n        };\n        this.setScope(params.scope);\n        this.k = params.katavorio;\n        return params.katavorio;\n    };\n\n    var TRUE = function() { return true; };\n    var FALSE = function() { return false; };\n\n    var Drag = function(el, params, css, scope) {\n        this._class = css.draggable;\n        var k = Super.apply(this, arguments);\n        this.rightButtonCanDrag = this.params.rightButtonCanDrag;\n        var downAt = [0,0], posAtDown = null, pagePosAtDown = null, pageDelta = [0,0], moving = false,\n            consumeStartEvent = this.params.consumeStartEvent !== false,\n            dragEl = this.el,\n            clone = this.params.clone,\n            scroll = this.params.scroll,\n            _multipleDrop = params.multipleDrop !== false,\n            isConstrained = false,\n            useGhostProxy = params.ghostProxy === true ? TRUE : params.ghostProxy && typeof params.ghostProxy === \"function\" ? params.ghostProxy : FALSE,\n            ghostProxy = function(el) { return el.cloneNode(true); };\n\n        var snapThreshold = params.snapThreshold || 5,\n            _snap = function(pos, x, y, thresholdX, thresholdY) {\n                thresholdX = thresholdX || snapThreshold;\n                thresholdY = thresholdY || snapThreshold;\n                var _dx = Math.floor(pos[0] / x),\n                    _dxl = x * _dx,\n                    _dxt = _dxl + x,\n                    _x = Math.abs(pos[0] - _dxl) <= thresholdX ? _dxl : Math.abs(_dxt - pos[0]) <= thresholdX ? _dxt : pos[0];\n\n                var _dy = Math.floor(pos[1] / y),\n                    _dyl = y * _dy,\n                    _dyt = _dyl + y,\n                    _y = Math.abs(pos[1] - _dyl) <= thresholdY ? _dyl : Math.abs(_dyt - pos[1]) <= thresholdY ? _dyt : pos[1];\n\n                return [ _x, _y];\n            };\n\n        this.posses = [];\n        this.posseRoles = {};\n\n        this.toGrid = function(pos) {\n            if (this.params.grid == null) {\n                return pos;\n            }\n            else {\n                return _snap(pos, this.params.grid[0], this.params.grid[1]);\n            }\n        };\n\n        this.snap = function(x, y) {\n            if (dragEl == null) return;\n            x = x || (this.params.grid ? this.params.grid[0] : DEFAULT_GRID_X);\n            y = y || (this.params.grid ? this.params.grid[1] : DEFAULT_GRID_Y);\n            var p = this.params.getPosition(dragEl);\n            this.params.setPosition(dragEl, _snap(p, x, y, x, y));\n        };\n\n        this.setUseGhostProxy = function(val) {\n            useGhostProxy = val ? TRUE : FALSE;\n        };\n\n        var constrain;\n        var negativeFilter = function(pos) {\n            return (params.allowNegative === false) ? [ Math.max (0, pos[0]), Math.max(0, pos[1]) ] : pos;\n        };\n\n        var _setConstrain = function(value) {\n            constrain = typeof value === \"function\" ? value : value ? function(pos) {\n                return negativeFilter([\n                    Math.max(0, Math.min(constrainRect.w - this.size[0], pos[0])),\n                    Math.max(0, Math.min(constrainRect.h - this.size[1], pos[1]))\n                ]);\n            }.bind(this) : function(pos) { return negativeFilter(pos); };\n        }.bind(this);\n\n        _setConstrain(typeof this.params.constrain === \"function\" ? this.params.constrain  : (this.params.constrain || this.params.containment));\n\n\n        /**\n         * Sets whether or not the Drag is constrained. A value of 'true' means constrain to parent bounds; a function\n         * will be executed and returns true if the position is allowed.\n         * @param value\n         */\n        this.setConstrain = function(value) {\n            _setConstrain(value);\n        };\n\n        var revertFunction;\n        /**\n         * Sets a function to call on drag stop, which, if it returns true, indicates that the given element should\n         * revert to its position before the previous drag.\n         * @param fn\n         */\n        this.setRevert = function(fn) {\n            revertFunction = fn;\n        };\n\n        var _assignId = function(obj) {\n                if (typeof obj == \"function\") {\n                    obj._katavorioId = _uuid();\n                    return obj._katavorioId;\n                } else {\n                    return obj;\n                }\n            },\n        // a map of { spec -> [ fn, exclusion ] } entries.\n            _filters = {},\n            _testFilter = function(e) {\n                for (var key in _filters) {\n                    var f = _filters[key];\n                    var rv = f[0](e);\n                    if (f[1]) rv = !rv;\n                    if (!rv) return false;\n                }\n                return true;\n            },\n            _setFilter = this.setFilter = function(f, _exclude) {\n                if (f) {\n                    var key = _assignId(f);\n                    _filters[key] = [\n                        function(e) {\n                            var t = e.srcElement || e.target, m;\n                            if (_isString(f)) {\n                                m = matchesSelector(t, f, el);\n                            }\n                            else if (typeof f === \"function\") {\n                                m = f(e, el);\n                            }\n                            return m;\n                        },\n                            _exclude !== false\n                    ];\n\n                }\n            },\n            _addFilter = this.addFilter = _setFilter,\n            _removeFilter = this.removeFilter = function(f) {\n                var key = typeof f == \"function\" ? f._katavorioId : f;\n                delete _filters[key];\n            };\n\n        this.clearAllFilters = function() {\n            _filters = {};\n        };\n\n        this.canDrag = this.params.canDrag || _true;\n\n        var constrainRect,\n            matchingDroppables = [], intersectingDroppables = [];\n\n        this.downListener = function(e) {\n            var isNotRightClick = this.rightButtonCanDrag || (e.which !== 3 && e.button !== 2);\n            if (isNotRightClick && this.isEnabled() && this.canDrag()) {\n                var _f =  _testFilter(e) && _inputFilter(e, this.el, this.k);\n                if (_f) {\n                    if (!clone)\n                        dragEl = this.el;\n                    else {\n                        dragEl = this.el.cloneNode(true);\n                        dragEl.setAttribute(\"id\", null);\n                        dragEl.style.position = \"absolute\";\n                        // the clone node is added to the body; getOffsetRect gives us a value\n                        // relative to the body.\n                        var b = getOffsetRect(this.el);\n                        dragEl.style.left = b.left + \"px\";\n                        dragEl.style.top = b.top + \"px\";\n                        document.body.appendChild(dragEl);\n                    }\n                    consumeStartEvent && _consume(e);\n                    downAt = _pl(e);\n                    //\n                    this.params.bind(document, \"mousemove\", this.moveListener);\n                    this.params.bind(document, \"mouseup\", this.upListener);\n                    k.markSelection(this);\n                    k.markPosses(this);\n                    this.params.addClass(document.body, css.noSelect);\n                    _dispatch(\"beforeStart\", {el:this.el, pos:posAtDown, e:e, drag:this});\n                }\n                else if (this.params.consumeFilteredEvents) {\n                    _consume(e);\n                }\n            }\n        }.bind(this);\n\n        this.moveListener = function(e) {\n            if (downAt) {\n                if (!moving) {\n                    var _continue = _dispatch(\"start\", {el:this.el, pos:posAtDown, e:e, drag:this});\n                    if (_continue !== false) {\n                        if (!downAt) return;\n                        this.mark(true);\n                        moving = true;\n                    }\n                }\n\n                // it is possible that the start event caused the drag to be aborted. So we check\n                // again that we are currently dragging.\n                if (downAt) {\n                    intersectingDroppables.length = 0;\n                    var pos = _pl(e), dx = pos[0] - downAt[0], dy = pos[1] - downAt[1],\n                        z = this.params.ignoreZoom ? 1 : k.getZoom();\n                    dx /= z;\n                    dy /= z;\n                    this.moveBy(dx, dy, e);\n                    k.updateSelection(dx, dy, this);\n                    k.updatePosses(dx, dy, this);\n                }\n            }\n        }.bind(this);\n\n        this.upListener = function(e) {\n            if (downAt) {\n                downAt = null;\n                this.params.unbind(document, \"mousemove\", this.moveListener);\n                this.params.unbind(document, \"mouseup\", this.upListener);\n                this.params.removeClass(document.body, css.noSelect);\n                this.unmark(e);\n                k.unmarkSelection(this, e);\n                k.unmarkPosses(this, e);\n                this.stop(e);\n                k.notifySelectionDragStop(this, e);\n                k.notifyPosseDragStop(this, e);\n                moving = false;\n                if (clone) {\n                    dragEl && dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);\n                    dragEl = null;\n                }\n\n                intersectingDroppables.length = 0;\n\n                if (revertFunction && revertFunction(this.el, this.params.getPosition(this.el)) === true) {\n                    this.params.setPosition(this.el, posAtDown);\n                    _dispatch(\"revert\", this.el);\n                }\n            }\n        }.bind(this);\n\n        this.getFilters = function() { return _filters; };\n\n        this.abort = function() {\n            if (downAt != null)\n                this.upListener();\n        };\n\n        this.getDragElement = function() {\n            return dragEl || this.el;\n        };\n\n        var listeners = {\"start\":[], \"drag\":[], \"stop\":[], \"over\":[], \"out\":[], \"beforeStart\":[], \"revert\":[] };\n        if (params.events.start) listeners.start.push(params.events.start);\n        if (params.events.beforeStart) listeners.beforeStart.push(params.events.beforeStart);\n        if (params.events.stop) listeners.stop.push(params.events.stop);\n        if (params.events.drag) listeners.drag.push(params.events.drag);\n        if (params.events.revert) listeners.revert.push(params.events.revert);\n\n        this.on = function(evt, fn) {\n            if (listeners[evt]) listeners[evt].push(fn);\n        };\n\n        this.off = function(evt, fn) {\n            if (listeners[evt]) {\n                var l = [];\n                for (var i = 0; i < listeners[evt].length; i++) {\n                    if (listeners[evt][i] !== fn) l.push(listeners[evt][i]);\n                }\n                listeners[evt] = l;\n            }\n        };\n\n        var _dispatch = function(evt, value) {\n            if (listeners[evt]) {\n                for (var i = 0; i < listeners[evt].length; i++) {\n                    try {\n                        listeners[evt][i](value);\n                    }\n                    catch (e) { }\n                }\n            }\n        };\n\n        this.notifyStart = function(e) {\n            _dispatch(\"start\", {el:this.el, pos:this.params.getPosition(dragEl), e:e, drag:this});\n        };\n\n        this.stop = function(e, force) {\n            if (force || moving) {\n                var positions = [],\n                    sel = k.getSelection(),\n                    dPos = this.params.getPosition(dragEl);\n\n                if (sel.length > 1) {\n                    for (var i = 0; i < sel.length; i++) {\n                        var p = this.params.getPosition(sel[i].el);\n                        positions.push([ sel[i].el, { left: p[0], top: p[1] }, sel[i] ]);\n                    }\n                }\n                else {\n                    positions.push([ dragEl, {left:dPos[0], top:dPos[1]}, this ]);\n                }\n\n                _dispatch(\"stop\", {\n                    el: dragEl,\n                    pos: ghostProxyOffsets || dPos,\n                    finalPos:dPos,\n                    e: e,\n                    drag: this,\n                    selection:positions\n                });\n            }\n        };\n\n        this.mark = function(andNotify) {\n            posAtDown = this.params.getPosition(dragEl);\n            pagePosAtDown = this.params.getPosition(dragEl, true);\n            pageDelta = [pagePosAtDown[0] - posAtDown[0], pagePosAtDown[1] - posAtDown[1]];\n            this.size = this.params.getSize(dragEl);\n            matchingDroppables = k.getMatchingDroppables(this);\n            _setDroppablesActive(matchingDroppables, true, false, this);\n            this.params.addClass(dragEl, this.params.dragClass || css.drag);\n            //if (this.params.constrain || this.params.containment) {\n            var cs = this.params.getSize(dragEl.parentNode);\n            constrainRect = { w:cs[0], h:cs[1] };\n            //}\n            if (andNotify) {\n                k.notifySelectionDragStart(this);\n            }\n        };\n        var ghostProxyOffsets;\n        this.unmark = function(e, doNotCheckDroppables) {\n            _setDroppablesActive(matchingDroppables, false, true, this);\n\n\n            if (isConstrained && useGhostProxy(this.el)) {\n                ghostProxyOffsets = [dragEl.offsetLeft, dragEl.offsetTop];\n                this.el.parentNode.removeChild(dragEl);\n                dragEl = this.el;\n            }\n            else {\n                ghostProxyOffsets = null;\n            }\n\n            this.params.removeClass(dragEl, this.params.dragClass || css.drag);\n            matchingDroppables.length = 0;\n            isConstrained = false;\n            if (!doNotCheckDroppables) {\n                if (intersectingDroppables.length > 0 && ghostProxyOffsets) {\n                    params.setPosition(this.el, ghostProxyOffsets);\n                }\n                intersectingDroppables.sort(_rankSort);\n                for (var i = 0; i < intersectingDroppables.length; i++) {\n                    var retVal = intersectingDroppables[i].drop(this, e);\n                    if (retVal === true) break;\n                }\n            }\n        };\n        this.moveBy = function(dx, dy, e) {\n            intersectingDroppables.length = 0;\n            var desiredLoc = this.toGrid([posAtDown[0] + dx, posAtDown[1] + dy]),\n                cPos = constrain(desiredLoc, dragEl);\n\n            if (useGhostProxy(this.el)) {\n                if (desiredLoc[0] != cPos[0] || desiredLoc[1] != cPos[1]) {\n                    if (!isConstrained) {\n                        var gp = ghostProxy(this.el);\n                        params.addClass(gp, _classes.ghostProxy);\n                        this.el.parentNode.appendChild(gp);\n                        dragEl = gp;\n                        isConstrained = true;\n                    }\n                    cPos = desiredLoc;\n                }\n                else {\n                    if (isConstrained) {\n                        this.el.parentNode.removeChild(dragEl);\n                        dragEl = this.el;\n                        isConstrained = false;\n                    }\n                }\n            }\n\n            var rect = { x:cPos[0], y:cPos[1], w:this.size[0], h:this.size[1]},\n                pageRect = { x:rect.x + pageDelta[0], y:rect.y + pageDelta[1], w:rect.w, h:rect.h},\n                focusDropElement = null;\n\n\n\n            this.params.setPosition(dragEl, cPos);\n            for (var i = 0; i < matchingDroppables.length; i++) {\n                var r2 = { x:matchingDroppables[i].pagePosition[0], y:matchingDroppables[i].pagePosition[1], w:matchingDroppables[i].size[0], h:matchingDroppables[i].size[1]};\n                if (this.params.intersects(pageRect, r2) && (_multipleDrop || focusDropElement == null || focusDropElement == matchingDroppables[i].el) && matchingDroppables[i].canDrop(this)) {\n                    if (!focusDropElement) focusDropElement = matchingDroppables[i].el;\n                    intersectingDroppables.push(matchingDroppables[i]);\n                    matchingDroppables[i].setHover(this, true, e);\n                }\n                else if (matchingDroppables[i].isHover()) {\n                    matchingDroppables[i].setHover(this, false, e);\n                }\n            }\n\n            _dispatch(\"drag\", {el:this.el, pos:cPos, e:e, drag:this});\n\n            /* test to see if the parent needs to be scrolled (future)\n             if (scroll) {\n             var pnsl = dragEl.parentNode.scrollLeft, pnst = dragEl.parentNode.scrollTop;\n             console.log(\"scroll!\", pnsl, pnst);\n             }*/\n        };\n        this.destroy = function() {\n            this.params.unbind(this.el, \"mousedown\", this.downListener);\n            this.params.unbind(document, \"mousemove\", this.moveListener);\n            this.params.unbind(document, \"mouseup\", this.upListener);\n            this.downListener = null;\n            this.upListener = null;\n            this.moveListener = null;\n        };\n\n        // init:register mousedown, and perhaps set a filter\n        this.params.bind(this.el, \"mousedown\", this.downListener);\n\n        // if handle provded, use that.  otherwise, try to set a filter.\n        // note that a `handle` selector always results in filterExclude being set to false, ie.\n        // the selector defines the handle element(s).\n        if (this.params.handle)\n            _setFilter(this.params.handle, false);\n        else\n            _setFilter(this.params.filter, this.params.filterExclude);\n    };\n\n    var Drop = function(el, params, css, scope) {\n        this._class = css.droppable;\n        this.params = params || {};\n        this.rank = params.rank || 0;\n        this._activeClass = this.params.activeClass || css.active;\n        this._hoverClass = this.params.hoverClass || css.hover;\n        Super.apply(this, arguments);\n        var hover = false;\n        this.allowLoopback = this.params.allowLoopback !== false;\n\n        this.setActive = function(val) {\n            this.params[val ? \"addClass\" : \"removeClass\"](this.el, this._activeClass);\n        };\n\n        this.updatePosition = function() {\n            this.position = this.params.getPosition(this.el);\n            this.pagePosition = this.params.getPosition(this.el, true);\n            this.size = this.params.getSize(this.el);\n        };\n\n        this.canDrop = this.params.canDrop || function(drag) {\n            return true;\n        };\n\n        this.isHover = function() { return hover; };\n\n        this.setHover = function(drag, val, e) {\n            // if turning off hover but this was not the drag that caused the hover, ignore.\n            if (val || this.el._katavorioDragHover == null || this.el._katavorioDragHover == drag.el._katavorio) {\n                this.params[val ? \"addClass\" : \"removeClass\"](this.el, this._hoverClass);\n                //this.el._katavorioDragHover = val ? drag.el._katavorio : null;\n                this.el._katavorioDragHover = val ? drag.el._katavorio : null;\n                if (hover !== val)\n                    this.params.events[val ? \"over\" : \"out\"]({el:this.el, e:e, drag:drag, drop:this});\n                hover = val;\n            }\n        };\n\n        this.drop = function(drag, event) {\n            return this.params.events[\"drop\"]({ drag:drag, e:event, drop:this });\n        };\n\n        this.destroy = function() {\n            this._class = null;\n            this._activeClass = null;\n            this._hoverClass = null;\n            //this.params = null;\n            hover = null;\n            //this.el = null;\n        };\n    };\n\n    var _uuid = function() {\n        return ('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n            return v.toString(16);\n        }));\n    };\n\n    var _rankSort = function(a,b) {\n        return a.rank < b.rank ? 1 : a.rank > b.rank ? -1 : 0;\n    };\n\n    var _gel = function(el) {\n        if (el == null) return null;\n        el = (typeof el === \"string\" || el.constructor == String)  ? document.getElementById(el) : el;\n        if (el == null) return null;\n        el._katavorio = el._katavorio || _uuid();\n        return el;\n    };\n\n    root.Katavorio = function(katavorioParams) {\n\n        var _selection = [],\n            _selectionMap = {};\n\n        this._dragsByScope = {};\n        this._dropsByScope = {};\n        var _zoom = 1,\n            _reg = function(obj, map) {\n                _each(obj, function(_obj) {\n                    for(var i = 0; i < _obj.scopes.length; i++) {\n                        map[_obj.scopes[i]] = map[_obj.scopes[i]] || [];\n                        map[_obj.scopes[i]].push(_obj);\n                    }\n                });\n            },\n            _unreg = function(obj, map) {\n                var c = 0;\n                _each(obj, function(_obj) {\n                    for(var i = 0; i < _obj.scopes.length; i++) {\n                        if (map[_obj.scopes[i]]) {\n                            var idx = katavorioParams.indexOf(map[_obj.scopes[i]], _obj);\n                            if (idx != -1) {\n                                map[_obj.scopes[i]].splice(idx, 1);\n                                c++;\n                            }\n                        }\n                    }\n                });\n\n                return c > 0 ;\n            },\n            _getMatchingDroppables = this.getMatchingDroppables = function(drag) {\n                var dd = [], _m = {};\n                for (var i = 0; i < drag.scopes.length; i++) {\n                    var _dd = this._dropsByScope[drag.scopes[i]];\n                    if (_dd) {\n                        for (var j = 0; j < _dd.length; j++) {\n                            if (_dd[j].canDrop(drag) &&  !_m[_dd[j].uuid] && (_dd[j].allowLoopback || _dd[j].el !== drag.el)) {\n                                _m[_dd[j].uuid] = true;\n                                dd.push(_dd[j]);\n                            }\n                        }\n                    }\n                }\n                dd.sort(_rankSort);\n                return dd;\n            },\n            _prepareParams = function(p) {\n                p = p || {};\n                var _p = {\n                    events:{}\n                }, i;\n                for (i in katavorioParams) _p[i] = katavorioParams[i];\n                for (i in p) _p[i] = p[i];\n                // events\n\n                for (i = 0; i < _events.length; i++) {\n                    _p.events[_events[i]] = p[_events[i]] || _devNull;\n                }\n                _p.katavorio = this;\n                return _p;\n            }.bind(this),\n            _mistletoe = function(existingDrag, params) {\n                for (var i = 0; i < _events.length; i++) {\n                    if (params[_events[i]]) {\n                        existingDrag.on(_events[i], params[_events[i]]);\n                    }\n                }\n            }.bind(this),\n            _css = {},\n            overrideCss = katavorioParams.css || {},\n            _scope = katavorioParams.scope || _defaultScope;\n\n        // prepare map of css classes based on defaults frst, then optional overrides\n        for (var i in _classes) _css[i] = _classes[i];\n        for (var i in overrideCss) _css[i] = overrideCss[i];\n\n        var inputFilterSelector = katavorioParams.inputFilterSelector || _defaultInputFilterSelector;\n        /**\n         * Gets the selector identifying which input elements to filter from drag events.\n         * @method getInputFilterSelector\n         * @return {String} Current input filter selector.\n         */\n        this.getInputFilterSelector = function() { return inputFilterSelector; };\n\n        /**\n         * Sets the selector identifying which input elements to filter from drag events.\n         * @method setInputFilterSelector\n         * @param {String} selector Input filter selector to set.\n         * @return {Katavorio} Current instance; method may be chained.\n         */\n        this.setInputFilterSelector = function(selector) {\n            inputFilterSelector = selector;\n            return this;\n        };\n\n        this.draggable = function(el, params) {\n            var o = [];\n            _each(el, function(_el) {\n                _el = _gel(_el);\n                if (_el != null) {\n                    if (_el._katavorioDrag == null) {\n                        var p = _prepareParams(params);\n                        _el._katavorioDrag = new Drag(_el, p, _css, _scope);\n                        _reg(_el._katavorioDrag, this._dragsByScope);\n                        o.push(_el._katavorioDrag);\n                        katavorioParams.addClass(_el, _css.draggable);\n                    }\n                    else {\n                        _mistletoe(_el._katavorioDrag, params);\n                    }\n                }\n            }.bind(this));\n            return o;\n\n        };\n\n        this.droppable = function(el, params) {\n            var o = [];\n            _each(el, function(_el) {\n                _el = _gel(_el);\n                if (_el != null) {\n                    var drop = new Drop(_el, _prepareParams(params), _css, _scope);\n                    _el._katavorioDrop = _el._katavorioDrop || [];\n                    _el._katavorioDrop.push(drop);\n                    _reg(drop, this._dropsByScope);\n                    o.push(drop);\n                    katavorioParams.addClass(_el, _css.droppable);\n                }\n            }.bind(this));\n            return o;\n        };\n\n        /**\n         * @name Katavorio#select\n         * @function\n         * @desc Adds an element to the current selection (for multiple node drag)\n         * @param {Element|String} DOM element - or id of the element - to add.\n         */\n        this.select = function(el) {\n            _each(el, function() {\n                var _el = _gel(this);\n                if (_el && _el._katavorioDrag) {\n                    if (!_selectionMap[_el._katavorio]) {\n                        _selection.push(_el._katavorioDrag);\n                        _selectionMap[_el._katavorio] = [ _el, _selection.length - 1 ];\n                        katavorioParams.addClass(_el, _css.selected);\n                    }\n                }\n            });\n            return this;\n        };\n\n        /**\n         * @name Katavorio#deselect\n         * @function\n         * @desc Removes an element from the current selection (for multiple node drag)\n         * @param {Element|String} DOM element - or id of the element - to remove.\n         */\n        this.deselect = function(el) {\n            _each(el, function() {\n                var _el = _gel(this);\n                if (_el && _el._katavorio) {\n                    var e = _selectionMap[_el._katavorio];\n                    if (e) {\n                        var _s = [];\n                        for (var i = 0; i < _selection.length; i++)\n                            if (_selection[i].el !== _el) _s.push(_selection[i]);\n                        _selection = _s;\n                        delete _selectionMap[_el._katavorio];\n                        katavorioParams.removeClass(_el, _css.selected);\n                    }\n                }\n            });\n            return this;\n        };\n\n        this.deselectAll = function() {\n            for (var i in _selectionMap) {\n                var d = _selectionMap[i];\n                katavorioParams.removeClass(d[0], _css.selected);\n            }\n\n            _selection.length = 0;\n            _selectionMap = {};\n        };\n\n        this.markSelection = function(drag) {\n            _foreach(_selection, function(e) { e.mark(); }, drag);\n        };\n\n        this.markPosses = function(drag) {\n            if (drag.posses) {\n                _each(drag.posses, function(p) {\n                    if (drag.posseRoles[p] && _posses[p]) {\n                        _foreach(_posses[p].members, function (d) {\n                            d.mark();\n                        }, drag);\n                    }\n                })\n            }\n        };\n\n        this.unmarkSelection = function(drag, event) {\n            _foreach(_selection, function(e) { e.unmark(event); }, drag);\n        };\n\n        this.unmarkPosses = function(drag, event) {\n            if (drag.posses) {\n                _each(drag.posses, function(p) {\n                    if (drag.posseRoles[p] && _posses[p]) {\n                        _foreach(_posses[p].members, function (d) {\n                            d.unmark(event, true);\n                        }, drag);\n                    }\n                });\n            }\n        };\n\n        this.getSelection = function() { return _selection.slice(0); };\n\n        this.updateSelection = function(dx, dy, drag) {\n            _foreach(_selection, function(e) { e.moveBy(dx, dy); }, drag);\n        };\n\n        var _posseAction = function(fn, drag) {\n            if (drag.posses) {\n                _each(drag.posses, function(p) {\n                    if (drag.posseRoles[p] && _posses[p]) {\n                        _foreach(_posses[p].members, function (e) {\n                            fn(e);\n                        }, drag);\n                    }\n                });\n            }\n        };\n\n        this.updatePosses = function(dx, dy, drag) {\n            _posseAction(function(e) { e.moveBy(dx, dy); }, drag);\n        };\n\n        this.notifyPosseDragStop = function(drag, evt) {\n            _posseAction(function(e) { e.stop(evt, true); }, drag);\n        };\n\n        this.notifySelectionDragStop = function(drag, evt) {\n            _foreach(_selection, function(e) { e.stop(evt, true); }, drag);\n        };\n\n        this.notifySelectionDragStart = function(drag, evt) {\n            _foreach(_selection, function(e) { e.notifyStart(evt);}, drag);\n        };\n\n        this.setZoom = function(z) { _zoom = z; };\n        this.getZoom = function() { return _zoom; };\n\n        // does the work of changing scopes\n        var _scopeManip = function(kObj, scopes, map, fn) {\n            _each(kObj, function(_kObj) {\n                _unreg(_kObj, map);  // deregister existing scopes\n                _kObj[fn](scopes); // set scopes\n                _reg(_kObj, map); // register new ones\n            });\n        };\n\n        _each([ \"set\", \"add\", \"remove\", \"toggle\"], function(v) {\n            this[v + \"Scope\"] = function(el, scopes) {\n                _scopeManip(el._katavorioDrag, scopes, this._dragsByScope, v + \"Scope\");\n                _scopeManip(el._katavorioDrop, scopes, this._dropsByScope, v + \"Scope\");\n            }.bind(this);\n            this[v + \"DragScope\"] = function(el, scopes) {\n                _scopeManip(el.constructor === Drag ? el : el._katavorioDrag, scopes, this._dragsByScope, v + \"Scope\");\n            }.bind(this);\n            this[v + \"DropScope\"] = function(el, scopes) {\n                _scopeManip(el.constructor === Drop ? el : el._katavorioDrop, scopes, this._dropsByScope, v + \"Scope\");\n            }.bind(this);\n        }.bind(this));\n\n        this.snapToGrid = function(x, y) {\n            for (var s in this._dragsByScope) {\n                _foreach(this._dragsByScope[s], function(d) { d.snap(x, y); });\n            }\n        };\n\n        this.getDragsForScope = function(s) { return this._dragsByScope[s]; };\n        this.getDropsForScope = function(s) { return this._dropsByScope[s]; };\n\n        var _destroy = function(el, type, map) {\n            el = _gel(el);\n            if (el[type]) {\n\n                // remove from selection, if present.\n                var selIdx = _selection.indexOf(el[type]);\n                if (selIdx >= 0) {\n                    _selection.splice(selIdx, 1);\n                }\n\n                if (_unreg(el[type], map)) {\n                    _each(el[type], function(kObj) { kObj.destroy() });\n                }\n\n                delete el[type];\n            }\n        };\n\n        this.elementRemoved = function(el) {\n            this.destroyDraggable(el);\n            this.destroyDroppable(el);\n        };\n\n        this.destroyDraggable = function(el) {\n            _destroy(el, \"_katavorioDrag\", this._dragsByScope);\n        };\n\n        this.destroyDroppable = function(el) {\n            _destroy(el, \"_katavorioDrop\", this._dropsByScope);\n        };\n\n        this.reset = function() {\n            this._dragsByScope = {};\n            this._dropsByScope = {};\n            _selection = [];\n            _selectionMap = {};\n            _posses = {};\n        };\n\n        // ----- groups\n        var _posses = {};\n\n        var _processOneSpec = function(el, _spec, dontAddExisting) {\n            var posseId = _isString(_spec) ? _spec : _spec.id;\n            var active = _isString(_spec) ? true : _spec.active !== false;\n            var posse = _posses[posseId] || (function() {\n                var g = {name:posseId, members:[]};\n                _posses[posseId] = g;\n                return g;\n            })();\n            _each(el, function(_el) {\n                if (_el._katavorioDrag) {\n\n                    if (dontAddExisting && _el._katavorioDrag.posseRoles[posse.name] != null) return;\n\n                    _suggest(posse.members, _el._katavorioDrag);\n                    _suggest(_el._katavorioDrag.posses, posse.name);\n                    _el._katavorioDrag.posseRoles[posse.name] = active;\n                }\n            });\n            return posse;\n        };\n\n        /**\n         * Add the given element to the posse with the given id, creating the group if it at first does not exist.\n         * @method addToPosse\n         * @param {Element} el Element to add.\n         * @param {String...|Object...} spec Variable args parameters. Each argument can be a either a String, indicating\n         * the ID of a Posse to which the element should be added as an active participant, or an Object containing\n         * `{ id:\"posseId\", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\n         * true.\n         * @returns {Posse|Posse[]} The Posse(s) to which the element(s) was/were added.\n         */\n        this.addToPosse = function(el, spec) {\n\n            var posses = [];\n\n            for (var i = 1; i < arguments.length; i++) {\n                posses.push(_processOneSpec(el, arguments[i]));\n            }\n\n            return posses.length == 1 ? posses[0] : posses;\n        };\n\n        /**\n         * Sets the posse(s) for the element with the given id, creating those that do not yet exist, and removing from\n         * the element any current Posses that are not specified by this method call. This method will not change the\n         * active/passive state if it is given a posse in which the element is already a member.\n         * @method setPosse\n         * @param {Element} el Element to set posse(s) on.\n         * @param {String...|Object...} spec Variable args parameters. Each argument can be a either a String, indicating\n         * the ID of a Posse to which the element should be added as an active participant, or an Object containing\n         * `{ id:\"posseId\", active:false/true}`. In the latter case, if `active` is not provided it is assumed to be\n         * true.\n         * @returns {Posse|Posse[]} The Posse(s) to which the element(s) now belongs.\n         */\n        this.setPosse = function(el, spec) {\n\n            var posses = [];\n\n            for (var i = 1; i < arguments.length; i++) {\n                posses.push(_processOneSpec(el, arguments[i], true).name);\n            }\n\n            _each(el, function(_el) {\n                if (_el._katavorioDrag) {\n                    var diff = _difference(_el._katavorioDrag.posses, posses);\n                    var p = [];\n                    Array.prototype.push.apply(p, _el._katavorioDrag.posses);\n                    for (var i = 0; i < diff.length; i++) {\n                        this.removeFromPosse(_el, diff[i]);\n                    }\n                }\n            }.bind(this));\n\n            return posses.length == 1 ? posses[0] : posses;\n        };\n\n        /**\n         * Remove the given element from the given posse(s).\n         * @method removeFromPosse\n         * @param {Element} el Element to remove.\n         * @param {String...} posseId Varargs parameter: one value for each posse to remove the element from.\n         */\n        this.removeFromPosse = function(el, posseId) {\n            if (arguments.length < 2) throw new TypeError(\"No posse id provided for remove operation\");\n            for(var i = 1; i < arguments.length; i++) {\n                posseId = arguments[i];\n                _each(el, function (_el) {\n                    if (_el._katavorioDrag && _el._katavorioDrag.posses) {\n                        var d = _el._katavorioDrag;\n                        _each(posseId, function (p) {\n                            _vanquish(_posses[p].members, d);\n                            _vanquish(d.posses, p);\n                            delete d.posseRoles[p];\n                        });\n                    }\n                });\n            }\n        };\n\n        /**\n         * Remove the given element from all Posses to which it belongs.\n         * @method removeFromAllPosses\n         * @param {Element|Element[]} el Element to remove from Posses.\n         */\n        this.removeFromAllPosses = function(el) {\n            _each(el, function(_el) {\n                if (_el._katavorioDrag && _el._katavorioDrag.posses) {\n                    var d = _el._katavorioDrag;\n                    _each(d.posses, function(p) {\n                        _vanquish(_posses[p].members, d);\n                    });\n                    d.posses.length = 0;\n                    d.posseRoles = {};\n                }\n            });\n        };\n\n        /**\n         * Changes the participation state for the element in the Posse with the given ID.\n         * @param {Element|Element[]} el Element(s) to change state for.\n         * @param {String} posseId ID of the Posse to change element state for.\n         * @param {Boolean} state True to make active, false to make passive.\n         */\n        this.setPosseState = function(el, posseId, state) {\n            var posse = _posses[posseId];\n            if (posse) {\n                _each(el, function(_el) {\n                    if (_el._katavorioDrag && _el._katavorioDrag.posses) {\n                        _el._katavorioDrag.posseRoles[posse.name] = state;\n                    }\n                });\n            }\n        };\n\n    };\n\n    root.Katavorio.version = \"0.19.2\";\n\n    if (typeof exports !== \"undefined\") {\n        exports.Katavorio = root.Katavorio;\n    }\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains utility functions that run in both browsers and headless.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n\n;\n(function () {\n\n    var _isa = function (a) {\n            return Object.prototype.toString.call(a) === \"[object Array]\";\n        },\n        _isnum = function (n) {\n            return Object.prototype.toString.call(n) === \"[object Number]\";\n        },\n        _iss = function (s) {\n            return typeof s === \"string\";\n        },\n        _isb = function (s) {\n            return typeof s === \"boolean\";\n        },\n        _isnull = function (s) {\n            return s == null;\n        },\n        _iso = function (o) {\n            return o == null ? false : Object.prototype.toString.call(o) === \"[object Object]\";\n        },\n        _isd = function (o) {\n            return Object.prototype.toString.call(o) === \"[object Date]\";\n        },\n        _isf = function (o) {\n            return Object.prototype.toString.call(o) === \"[object Function]\";\n        },\n        _isNamedFunction = function(o) {\n            return _isf(o) && o.name != null && o.name.length > 0;\n        },\n        _ise = function (o) {\n            for (var i in o) {\n                if (o.hasOwnProperty(i)) return false;\n            }\n            return true;\n        };\n\n    var root = this;\n    root.jsPlumbUtil = {\n        isArray: _isa,\n        isString: _iss,\n        isBoolean: _isb,\n        isNull: _isnull,\n        isObject: _iso,\n        isDate: _isd,\n        isFunction: _isf,\n        isEmpty: _ise,\n        isNumber: _isnum,\n        clone: function (a) {\n            if (_iss(a)) return \"\" + a;\n            else if (_isb(a)) return !!a;\n            else if (_isd(a)) return new Date(a.getTime());\n            else if (_isf(a)) return a;\n            else if (_isa(a)) {\n                var b = [];\n                for (var i = 0; i < a.length; i++)\n                    b.push(this.clone(a[i]));\n                return b;\n            }\n            else if (_iso(a)) {\n                var c = {};\n                for (var j in a)\n                    c[j] = this.clone(a[j]);\n                return c;\n            }\n            else return a;\n        },\n        merge: function (a, b, collations) {\n            // first change the collations array - if present - into a lookup table, because its faster.\n            var cMap = {}, ar, i;\n            collations = collations || [];\n            for (i = 0; i < collations.length; i++)\n                cMap[collations[i]] = true;\n\n            var c = this.clone(a);\n            for (i in b) {\n                if (c[i] == null) {\n                    c[i] = b[i];\n                }\n                else if (_iss(b[i]) || _isb(b[i])) {\n                    if (!cMap[i]) {\n                        c[i] = b[i]; // if we dont want to collate, just copy it in.\n                    }\n                    else {\n                        ar = [];\n                        // if c's object is also an array we can keep its values.\n                        ar.push.apply(ar, _isa(c[i]) ? c[i] : [ c[i] ]);\n                        ar.push.apply(ar, _isa(b[i]) ? b[i] : [ b[i] ]);\n                        c[i] = ar;\n                    }\n                }\n                else {\n                    if (_isa(b[i])) {\n                        ar = [];\n                        // if c's object is also an array we can keep its values.\n                        if (_isa(c[i])) ar.push.apply(ar, c[i]);\n                        ar.push.apply(ar, b[i]);\n                        c[i] = ar;\n                    }\n                    else if (_iso(b[i])) {\n                        // overwite c's value with an object if it is not already one.\n                        if (!_iso(c[i]))\n                            c[i] = {};\n                        for (var j in b[i]) {\n                            c[i][j] = b[i][j];\n                        }\n                    }\n                }\n\n            }\n            return c;\n        },\n        replace: function (inObj, path, value) {\n            if (inObj == null) return;\n            var q = inObj, t = q;\n            path.replace(/([^\\.])+/g, function (term, lc, pos, str) {\n                var array = term.match(/([^\\[0-9]+){1}(\\[)([0-9+])/),\n                    last = pos + term.length >= str.length,\n                    _getArray = function () {\n                        return t[array[1]] || (function () {\n                            t[array[1]] = [];\n                            return t[array[1]];\n                        })();\n                    };\n\n                if (last) {\n                    // set term = value on current t, creating term as array if necessary.\n                    if (array)\n                        _getArray()[array[3]] = value;\n                    else\n                        t[term] = value;\n                }\n                else {\n                    // set to current t[term], creating t[term] if necessary.\n                    if (array) {\n                        var a = _getArray();\n                        t = a[array[3]] || (function () {\n                            a[array[3]] = {};\n                            return a[array[3]];\n                        })();\n                    }\n                    else\n                        t = t[term] || (function () {\n                            t[term] = {};\n                            return t[term];\n                        })();\n                }\n            });\n\n            return inObj;\n        },\n        //\n        // chain a list of functions, supplied by [ object, method name, args ], and return on the first\n        // one that returns the failValue. if none return the failValue, return the successValue.\n        //\n        functionChain: function (successValue, failValue, fns) {\n            for (var i = 0; i < fns.length; i++) {\n                var o = fns[i][0][fns[i][1]].apply(fns[i][0], fns[i][2]);\n                if (o === failValue) {\n                    return o;\n                }\n            }\n            return successValue;\n        },\n        // take the given model and expand out any parameters.\n        // 'functionPrefix' is optional, and if present, helps jsplumb figure out what to do if a value is a Function.\n        // if you do not provide it, jsplumb will run the given values through any functions it finds, and use the function's\n        // output as the value in the result. if you do provide the prefix, only functions that are named and have this prefix\n        // will be executed; other functions will be passed as values to the output.\n        populate: function (model, values, functionPrefix) {\n            // for a string, see if it has parameter matches, and if so, try to make the substitutions.\n            var getValue = function (fromString) {\n                    var matches = fromString.match(/(\\${.*?})/g);\n                    if (matches != null) {\n                        for (var i = 0; i < matches.length; i++) {\n                            var val = values[matches[i].substring(2, matches[i].length - 1)] || \"\";\n                            if (val != null) {\n                                fromString = fromString.replace(matches[i], val);\n                            }\n                        }\n                    }\n                    return fromString;\n                },\n            // process one entry.\n                _one = function (d) {\n                    if (d != null) {\n                        if (_iss(d)) {\n                            return getValue(d);\n                        }\n                        else if (_isf(d) && (functionPrefix == null || (d.name || \"\").indexOf(functionPrefix) === 0)) {\n                            return d(values);\n                        }\n                        else if (_isa(d)) {\n                            var r = [];\n                            for (var i = 0; i < d.length; i++)\n                                r.push(_one(d[i]));\n                            return r;\n                        }\n                        else if (_iso(d)) {\n                            var s = {};\n                            for (var j in d) {\n                                s[j] = _one(d[j]);\n                            }\n                            return s;\n                        }\n                        else {\n                            return d;\n                        }\n                    }\n                };\n\n            return _one(model);\n        },\n        findWithFunction: function (a, f) {\n            if (a)\n                for (var i = 0; i < a.length; i++) if (f(a[i])) return i;\n            return -1;\n        },\n        removeWithFunction: function (a, f) {\n            var idx = root.jsPlumbUtil.findWithFunction(a, f);\n            if (idx > -1) a.splice(idx, 1);\n            return idx != -1;\n        },\n        remove: function (l, v) {\n            var idx = l.indexOf(v);\n            if (idx > -1) l.splice(idx, 1);\n            return idx != -1;\n        },\n        // TODO support insert index\n        addWithFunction: function (list, item, hashFunction) {\n            if (root.jsPlumbUtil.findWithFunction(list, hashFunction) == -1) list.push(item);\n        },\n        addToList: function (map, key, value, insertAtStart) {\n            var l = map[key];\n            if (l == null) {\n                l = [];\n                map[key] = l;\n            }\n            l[insertAtStart ? \"unshift\" : \"push\"](value);\n            return l;\n        },\n        suggest : function(list, item, insertAtHead) {\n            if (list.indexOf(item) === -1) {\n                if (insertAtHead) {\n                    list.unshift(item);\n                } else {\n                    list.push(item);\n                }\n                return true;\n            }\n            return false;\n        },\n        //\n        // extends the given obj (which can be an array) with the given constructor function, prototype functions, and\n        // class members, any of which may be null.\n        //\n        extend: function (child, parent, _protoFn) {\n            var i;\n            parent = _isa(parent) ? parent : [ parent ];\n\n            for (i = 0; i < parent.length; i++) {\n                for (var j in parent[i].prototype) {\n                    if (parent[i].prototype.hasOwnProperty(j)) {\n                        child.prototype[j] = parent[i].prototype[j];\n                    }\n                }\n            }\n\n            var _makeFn = function (name, protoFn) {\n                return function () {\n                    for (i = 0; i < parent.length; i++) {\n                        if (parent[i].prototype[name])\n                            parent[i].prototype[name].apply(this, arguments);\n                    }\n                    return protoFn.apply(this, arguments);\n                };\n            };\n\n            var _oneSet = function (fns) {\n                for (var k in fns) {\n                    child.prototype[k] = _makeFn(k, fns[k]);\n                }\n            };\n\n            if (arguments.length > 2) {\n                for (i = 2; i < arguments.length; i++)\n                    _oneSet(arguments[i]);\n            }\n\n            return child;\n        },\n        uuid: function () {\n            return ('xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n                return v.toString(16);\n            }));\n        },\n        logEnabled: true,\n        log: function () {\n            if (root.jsPlumbUtil.logEnabled && typeof console != \"undefined\") {\n                try {\n                    var msg = arguments[arguments.length - 1];\n                    console.log(msg);\n                }\n                catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Wraps one function with another, creating a placeholder for the\n         * wrapped function if it was null. this is used to wrap the various\n         * drag/drop event functions - to allow jsPlumb to be notified of\n         * important lifecycle events without imposing itself on the user's\n         * drag/drop functionality.\n         * @method jsPlumbUtil.wrap\n         * @param {Function} wrappedFunction original function to wrap; may be null.\n         * @param {Function} newFunction function to wrap the original with.\n         * @param {Object} [returnOnThisValue] Optional. Indicates that the wrappedFunction should\n         * not be executed if the newFunction returns a value matching 'returnOnThisValue'.\n         * note that this is a simple comparison and only works for primitives right now.\n         */\n        wrap: function (wrappedFunction, newFunction, returnOnThisValue) {\n            wrappedFunction = wrappedFunction || function () {\n            };\n            newFunction = newFunction || function () {\n            };\n            return function () {\n                var r = null;\n                try {\n                    r = newFunction.apply(this, arguments);\n                } catch (e) {\n                    root.jsPlumbUtil.log(\"jsPlumb function failed : \" + e);\n                }\n                if (returnOnThisValue == null || (r !== returnOnThisValue)) {\n                    try {\n                        r = wrappedFunction.apply(this, arguments);\n                    } catch (e) {\n                        root.jsPlumbUtil.log(\"wrapped function failed : \" + e);\n                    }\n                }\n                return r;\n            };\n        }\n    };\n\n    root.jsPlumbUtil.EventGenerator = function () {\n        var _listeners = {},\n            eventsSuspended = false,\n        // this is a list of events that should re-throw any errors that occur during their dispatch. it is current private.\n            eventsToDieOn = { \"ready\": true };\n\n        this.bind = function (event, listener, insertAtStart) {\n            var _one = function(evt) {\n                root.jsPlumbUtil.addToList(_listeners, evt, listener, insertAtStart);\n                listener.__jsPlumb = listener.__jsPlumb || {};\n                listener.__jsPlumb[root.jsPlumbUtil.uuid()] = evt;\n            };\n\n            if (typeof event === \"string\") _one(event);\n            else if (event.length != null) {\n                for (var i = 0; i < event.length; i++) {\n                    _one(event[i]);\n                }\n            }\n\n            return this;\n        };\n\n        this.fire = function (event, value, originalEvent) {\n            if (!eventsSuspended && _listeners[event]) {\n                var l = _listeners[event].length, i = 0, _gone = false, ret = null;\n                if (!this.shouldFireEvent || this.shouldFireEvent(event, value, originalEvent)) {\n                    while (!_gone && i < l && ret !== false) {\n                        // doing it this way rather than catching and then possibly re-throwing means that an error propagated by this\n                        // method will have the whole call stack available in the debugger.\n                        if (eventsToDieOn[event])\n                            _listeners[event][i].apply(this, [ value, originalEvent]);\n                        else {\n                            try {\n                                ret = _listeners[event][i].apply(this, [ value, originalEvent ]);\n                            } catch (e) {\n                                root.jsPlumbUtil.log(\"jsPlumb: fire failed for event \" + event + \" : \" + e);\n                            }\n                        }\n                        i++;\n                        if (_listeners == null || _listeners[event] == null)\n                            _gone = true;\n                    }\n                }\n            }\n            return this;\n        };\n\n        this.unbind = function (eventOrListener, listener) {\n\n            if (arguments.length === 0) {\n                _listeners = {};\n            }\n            else if (arguments.length === 1) {\n                if (typeof eventOrListener === \"string\")\n                    delete _listeners[eventOrListener];\n                else if (eventOrListener.__jsPlumb) {\n                    var evt;\n                    for (var i in eventOrListener.__jsPlumb) {\n                        evt = eventOrListener.__jsPlumb[i];\n                        root.jsPlumbUtil.remove(_listeners[evt] || [], eventOrListener);\n                    }\n                }\n            }\n            else if (arguments.length === 2) {\n                root.jsPlumbUtil.remove(_listeners[eventOrListener] || [], listener);\n            }\n\n            return this;\n        };\n\n        this.getListener = function (forEvent) {\n            return _listeners[forEvent];\n        };\n        this.setSuspendEvents = function (val) {\n            eventsSuspended = val;\n        };\n        this.isSuspendEvents = function () {\n            return eventsSuspended;\n        };\n        this.silently = function(fn) {\n            this.setSuspendEvents(true);\n            try {\n                fn();\n            }\n            catch (e) {\n                root.jsPlumbUtil.log(\"Cannot execute silent function \" + e);\n            }\n            this.setSuspendEvents(false);\n        };\n        this.cleanupListeners = function () {\n            for (var i in _listeners) {\n                _listeners[i] = null;\n            }\n        };\n    };\n\n    root.jsPlumbUtil.EventGenerator.prototype = {\n        cleanup: function () {\n            this.cleanupListeners();\n        }\n    };\n\n    if (typeof exports !== \"undefined\") {\n        exports.jsPlumbUtil = root.jsPlumbUtil;\n    }\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains utility functions that run in browsers only.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n ;(function() {\n\n  \"use strict\";\n\n   var root = this;\n\n    root.jsPlumbUtil.matchesSelector = function(el, selector, ctx) {\n       ctx = ctx || el.parentNode;\n       var possibles = ctx.querySelectorAll(selector);\n       for (var i = 0; i < possibles.length; i++) {\n           if (possibles[i] === el)\n               return true;\n       }\n       return false;\n   };\n\n    root.jsPlumbUtil.consume = function(e, doNotPreventDefault) {\n       if (e.stopPropagation)\n           e.stopPropagation();\n       else\n           e.returnValue = false;\n\n       if (!doNotPreventDefault && e.preventDefault)\n            e.preventDefault();\n   };\n\n   /*\n    * Function: sizeElement\n    * Helper to size and position an element. You would typically use\n    * this when writing your own Connector or Endpoint implementation.\n    *\n    * Parameters:\n    *  x - [int] x position for the element origin\n    *  y - [int] y position for the element origin\n    *  w - [int] width of the element\n    *  h - [int] height of the element\n    *\n    */\n    root.jsPlumbUtil.sizeElement = function(el, x, y, w, h) {\n       if (el) {\n           el.style.height = h + \"px\";\n           el.height = h;\n           el.style.width = w + \"px\";\n           el.width = w;\n           el.style.left = x + \"px\";\n           el.style.top = y + \"px\";\n       }\n   };\n\n }).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the core code.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n(function () {\n\n    \"use strict\";\n\n    var root = this;\n    var connectorTypes = [], rendererTypes;\n\n    var _ju = root.jsPlumbUtil,\n\n        /**\n         * creates a timestamp, using milliseconds since 1970, but as a string.\n         */\n        _timestamp = function () {\n            return \"\" + (new Date()).getTime();\n        },\n\n    // helper method to update the hover style whenever it, or paintStyle, changes.\n    // we use paintStyle as the foundation and merge hoverPaintStyle over the\n    // top.\n        _updateHoverStyle = function (component) {\n            if (component._jsPlumb.paintStyle && component._jsPlumb.hoverPaintStyle) {\n                var mergedHoverStyle = {};\n                jsPlumb.extend(mergedHoverStyle, component._jsPlumb.paintStyle);\n                jsPlumb.extend(mergedHoverStyle, component._jsPlumb.hoverPaintStyle);\n                delete component._jsPlumb.hoverPaintStyle;\n                // we want the fill of paintStyle to override a gradient, if possible.\n                if (mergedHoverStyle.gradient && component._jsPlumb.paintStyle.fill)\n                    delete mergedHoverStyle.gradient;\n                component._jsPlumb.hoverPaintStyle = mergedHoverStyle;\n            }\n        },\n        events = [\"tap\", \"dbltap\", \"click\", \"dblclick\", \"mouseover\", \"mouseout\", \"mousemove\", \"mousedown\", \"mouseup\", \"contextmenu\" ],\n        eventFilters = { \"mouseout\": \"mouseleave\", \"mouseexit\": \"mouseleave\" },\n        _updateAttachedElements = function (component, state, timestamp, sourceElement) {\n            var affectedElements = component.getAttachedElements();\n            if (affectedElements) {\n                for (var i = 0, j = affectedElements.length; i < j; i++) {\n                    if (!sourceElement || sourceElement != affectedElements[i])\n                        affectedElements[i].setHover(state, true, timestamp);\t\t\t// tell the attached elements not to inform their own attached elements.\n                }\n            }\n        },\n        _splitType = function (t) {\n            return t == null ? null : t.split(\" \");\n        },\n        _mapType = function(map, obj, typeId) {\n            for (var i in obj)\n                map[i] = typeId;\n        },\n        _each = function(fn, obj) {\n            obj = _ju.isArray(obj) || (obj.length != null && !_ju.isString(obj)) ? obj : [ obj ];\n            for (var i = 0; i < obj.length; i++) {\n                try {\n                    fn.apply(obj[i], [ obj[i] ]);\n                }\n                catch (e) {\n                    _ju.log(\".each iteration failed : \" + e);\n                }\n            }\n        },\n        _applyTypes = function (component, params, doNotRepaint) {\n            if (component.getDefaultType) {\n                var td = component.getTypeDescriptor(), map = {};\n                var defType = component.getDefaultType();\n                var o = _ju.merge({}, defType);\n                _mapType(map, defType, \"__default\");\n                for (var i = 0, j = component._jsPlumb.types.length; i < j; i++) {\n                    var tid = component._jsPlumb.types[i];\n                    if (tid !== \"__default\") {\n                        var _t = component._jsPlumb.instance.getType(tid, td);\n                        if (_t != null) {\n                            o = _ju.merge(o, _t, [ \"cssClass\" ]);\n                            _mapType(map, _t, tid);\n                        }\n                    }\n                }\n\n                if (params) {\n                    o = _ju.populate(o, params, \"_\");\n                }\n\n                component.applyType(o, doNotRepaint, map);\n                if (!doNotRepaint) component.repaint();\n            }\n        },\n\n// ------------------------------ BEGIN jsPlumbUIComponent --------------------------------------------\n\n        jsPlumbUIComponent = root.jsPlumbUIComponent = function (params) {\n\n            _ju.EventGenerator.apply(this, arguments);\n\n            var self = this,\n                a = arguments,\n                idPrefix = self.idPrefix,\n                id = idPrefix + (new Date()).getTime();\n\n            this._jsPlumb = {\n                instance: params._jsPlumb,\n                parameters: params.parameters || {},\n                paintStyle: null,\n                hoverPaintStyle: null,\n                paintStyleInUse: null,\n                hover: false,\n                beforeDetach: params.beforeDetach,\n                beforeDrop: params.beforeDrop,\n                overlayPlacements: [],\n                hoverClass: params.hoverClass || params._jsPlumb.Defaults.HoverClass,\n                types: [],\n                typeCache:{}\n            };\n\n            this.cacheTypeItem = function(key, item, typeId) {\n                this._jsPlumb.typeCache[typeId] = this._jsPlumb.typeCache[typeId] || {};\n                this._jsPlumb.typeCache[typeId][key] = item;\n            };\n            this.getCachedTypeItem = function(key, typeId) {\n                return this._jsPlumb.typeCache[typeId] ? this._jsPlumb.typeCache[typeId][key] : null;\n            };\n\n            this.getId = function () {\n                return id;\n            };\n\n// ----------------------------- default type --------------------------------------------\n\n\n            var o = params.overlays || [], oo = {};\n            if (this.defaultOverlayKeys) {\n                for (var i = 0; i < this.defaultOverlayKeys.length; i++)\n                    Array.prototype.push.apply(o, this._jsPlumb.instance.Defaults[this.defaultOverlayKeys[i]] || []);\n\n                for (i = 0; i < o.length; i++) {\n                    // if a string, convert to object representation so that we can store the typeid on it.\n                    // also assign an id.\n                    var fo = jsPlumb.convertToFullOverlaySpec(o[i]);\n                    oo[fo[1].id] = fo;\n                }\n            }\n\n            var _defaultType = {\n                overlays:oo,\n                parameters: params.parameters || {},\n                scope: params.scope || this._jsPlumb.instance.getDefaultScope()\n            };\n            this.getDefaultType = function() {\n                return _defaultType;\n            };\n            this.appendToDefaultType = function(obj) {\n                for (var i in obj) _defaultType[i] = obj[i];\n            };\n\n// ----------------------------- end default type --------------------------------------------\n\n            // all components can generate events\n\n            if (params.events) {\n                for (i in params.events)\n                    self.bind(i, params.events[i]);\n            }\n\n            // all components get this clone function.\n            // TODO issue 116 showed a problem with this - it seems 'a' that is in\n            // the clone function's scope is shared by all invocations of it, the classic\n            // JS closure problem.  for now, jsPlumb does a version of this inline where\n            // it used to call clone.  but it would be nice to find some time to look\n            // further at this.\n            this.clone = function () {\n                var o = Object.create(this.constructor.prototype);\n                this.constructor.apply(o, a);\n                return o;\n            }.bind(this);\n\n            // user can supply a beforeDetach callback, which will be executed before a detach\n            // is performed; returning false prevents the detach.\n            this.isDetachAllowed = function (connection) {\n                var r = true;\n                if (this._jsPlumb.beforeDetach) {\n                    try {\n                        r = this._jsPlumb.beforeDetach(connection);\n                    }\n                    catch (e) {\n                        _ju.log(\"jsPlumb: beforeDetach callback failed\", e);\n                    }\n                }\n                return r;\n            };\n\n            // user can supply a beforeDrop callback, which will be executed before a dropped\n            // connection is confirmed. user can return false to reject connection.\n            this.isDropAllowed = function (sourceId, targetId, scope, connection, dropEndpoint, source, target) {\n                var r = this._jsPlumb.instance.checkCondition(\"beforeDrop\", {\n                    sourceId: sourceId,\n                    targetId: targetId,\n                    scope: scope,\n                    connection: connection,\n                    dropEndpoint: dropEndpoint,\n                    source: source, target: target\n                });\n                if (this._jsPlumb.beforeDrop) {\n                    try {\n                        r = this._jsPlumb.beforeDrop({\n                            sourceId: sourceId,\n                            targetId: targetId,\n                            scope: scope,\n                            connection: connection,\n                            dropEndpoint: dropEndpoint,\n                            source: source, target: target\n                        });\n                    }\n                    catch (e) {\n                        _ju.log(\"jsPlumb: beforeDrop callback failed\", e);\n                    }\n                }\n                return r;\n            };\n\n            var domListeners = [];\n\n            // sets the component associated with listener events. for instance, an overlay delegates\n            // its events back to a connector. but if the connector is swapped on the underlying connection,\n            // then this component must be changed. This is called by setConnector in the Connection class.\n            this.setListenerComponent = function (c) {\n                for (var i = 0; i < domListeners.length; i++)\n                    domListeners[i][3] = c;\n            };\n\n\n        };\n\n    var _removeTypeCssHelper = function (component, typeIndex) {\n        var typeId = component._jsPlumb.types[typeIndex],\n            type = component._jsPlumb.instance.getType(typeId, component.getTypeDescriptor());\n\n        if (type != null) {\n\n            if (type.cssClass && component.canvas)\n                component._jsPlumb.instance.removeClass(component.canvas, type.cssClass);\n        }\n    };\n\n    _ju.extend(root.jsPlumbUIComponent, _ju.EventGenerator, {\n\n        getParameter: function (name) {\n            return this._jsPlumb.parameters[name];\n        },\n\n        setParameter: function (name, value) {\n            this._jsPlumb.parameters[name] = value;\n        },\n\n        getParameters: function () {\n            return this._jsPlumb.parameters;\n        },\n\n        setParameters: function (p) {\n            this._jsPlumb.parameters = p;\n        },\n\n        getClass:function() {\n            return jsPlumb.getClass(this.canvas);\n        },\n\n        hasClass:function(clazz) {\n            return jsPlumb.hasClass(this.canvas, clazz);\n        },\n\n        addClass: function (clazz) {\n            jsPlumb.addClass(this.canvas, clazz);\n        },\n\n        removeClass: function (clazz) {\n            jsPlumb.removeClass(this.canvas, clazz);\n        },\n\n        updateClasses: function (classesToAdd, classesToRemove) {\n            jsPlumb.updateClasses(this.canvas, classesToAdd, classesToRemove);\n        },\n\n        setType: function (typeId, params, doNotRepaint) {\n            this.clearTypes();\n            this._jsPlumb.types = _splitType(typeId) || [];\n            _applyTypes(this, params, doNotRepaint);\n        },\n\n        getType: function () {\n            return this._jsPlumb.types;\n        },\n\n        reapplyTypes: function (params, doNotRepaint) {\n            _applyTypes(this, params, doNotRepaint);\n        },\n\n        hasType: function (typeId) {\n            return this._jsPlumb.types.indexOf(typeId) != -1;\n        },\n\n        addType: function (typeId, params, doNotRepaint) {\n            var t = _splitType(typeId), _cont = false;\n            if (t != null) {\n                for (var i = 0, j = t.length; i < j; i++) {\n                    if (!this.hasType(t[i])) {\n                        this._jsPlumb.types.push(t[i]);\n                        _cont = true;\n                    }\n                }\n                if (_cont) _applyTypes(this, params, doNotRepaint);\n            }\n        },\n\n        removeType: function (typeId, params, doNotRepaint) {\n            var t = _splitType(typeId), _cont = false, _one = function (tt) {\n                var idx = this._jsPlumb.types.indexOf(tt);\n                if (idx != -1) {\n                    // remove css class if necessary\n                    _removeTypeCssHelper(this, idx);\n                    this._jsPlumb.types.splice(idx, 1);\n                    return true;\n                }\n                return false;\n            }.bind(this);\n\n            if (t != null) {\n                for (var i = 0, j = t.length; i < j; i++) {\n                    _cont = _one(t[i]) || _cont;\n                }\n                if (_cont) _applyTypes(this, params, doNotRepaint);\n            }\n        },\n        clearTypes: function (params, doNotRepaint) {\n            var i = this._jsPlumb.types.length;\n            for (var j = 0; j < i; j++) {\n                _removeTypeCssHelper(this, 0);\n                this._jsPlumb.types.splice(0, 1);\n            }\n            _applyTypes(this, params, doNotRepaint);\n        },\n\n        toggleType: function (typeId, params, doNotRepaint) {\n            var t = _splitType(typeId);\n            if (t != null) {\n                for (var i = 0, j = t.length; i < j; i++) {\n                    var idx = this._jsPlumb.types.indexOf(t[i]);\n                    if (idx != -1) {\n                        _removeTypeCssHelper(this, idx);\n                        this._jsPlumb.types.splice(idx, 1);\n                    }\n                    else\n                        this._jsPlumb.types.push(t[i]);\n                }\n\n                _applyTypes(this, params, doNotRepaint);\n            }\n        },\n        applyType: function (t, doNotRepaint) {\n            this.setPaintStyle(t.paintStyle, doNotRepaint);\n            this.setHoverPaintStyle(t.hoverPaintStyle, doNotRepaint);\n            if (t.parameters) {\n                for (var i in t.parameters)\n                    this.setParameter(i, t.parameters[i]);\n            }\n            this._jsPlumb.paintStyleInUse = this.getPaintStyle();\n        },\n        setPaintStyle: function (style, doNotRepaint) {\n//\t\t    \tthis._jsPlumb.paintStyle = jsPlumb.extend({}, style);\n// TODO figure out if we want components to clone paintStyle so as not to share it.\n            this._jsPlumb.paintStyle = style;\n            this._jsPlumb.paintStyleInUse = this._jsPlumb.paintStyle;\n            _updateHoverStyle(this);\n            if (!doNotRepaint) this.repaint();\n        },\n        getPaintStyle: function () {\n            return this._jsPlumb.paintStyle;\n        },\n        setHoverPaintStyle: function (style, doNotRepaint) {\n            //this._jsPlumb.hoverPaintStyle = jsPlumb.extend({}, style);\n// TODO figure out if we want components to clone paintStyle so as not to share it.\t\t    \t\n            this._jsPlumb.hoverPaintStyle = style;\n            _updateHoverStyle(this);\n            if (!doNotRepaint) this.repaint();\n        },\n        getHoverPaintStyle: function () {\n            return this._jsPlumb.hoverPaintStyle;\n        },\n        destroy: function (force) {\n            if (force || this.typeId == null) {\n                this.cleanupListeners(); // this is on EventGenerator\n                this.clone = null;\n                this._jsPlumb = null;\n            }\n        },\n\n        isHover: function () {\n            return this._jsPlumb.hover;\n        },\n\n        setHover: function (hover, ignoreAttachedElements, timestamp) {\n            // while dragging, we ignore these events.  this keeps the UI from flashing and\n            // swishing and whatevering.\n            if (this._jsPlumb && !this._jsPlumb.instance.currentlyDragging && !this._jsPlumb.instance.isHoverSuspended()) {\n\n                this._jsPlumb.hover = hover;\n\n                if (this.canvas != null) {\n                    if (this._jsPlumb.instance.hoverClass != null) {\n                        var method = hover ? \"addClass\" : \"removeClass\";\n                        this._jsPlumb.instance[method](this.canvas, this._jsPlumb.instance.hoverClass);\n                    }\n                    if (this._jsPlumb.hoverClass != null) {\n                        this._jsPlumb.instance[method](this.canvas, this._jsPlumb.hoverClass);\n                    }\n                }\n                if (this._jsPlumb.hoverPaintStyle != null) {\n                    this._jsPlumb.paintStyleInUse = hover ? this._jsPlumb.hoverPaintStyle : this._jsPlumb.paintStyle;\n                    if (!this._jsPlumb.instance.isSuspendDrawing()) {\n                        timestamp = timestamp || _timestamp();\n                        this.repaint({timestamp: timestamp, recalc: false});\n                    }\n                }\n                // get the list of other affected elements, if supported by this component.\n                // for a connection, its the endpoints.  for an endpoint, its the connections! surprise.\n                if (this.getAttachedElements && !ignoreAttachedElements)\n                    _updateAttachedElements(this, hover, _timestamp(), this);\n            }\n        }\n    });\n\n// ------------------------------ END jsPlumbUIComponent --------------------------------------------\n\n    var _jsPlumbInstanceIndex = 0,\n        getInstanceIndex = function () {\n            var i = _jsPlumbInstanceIndex + 1;\n            _jsPlumbInstanceIndex++;\n            return i;\n        };\n\n    var jsPlumbInstance = root.jsPlumbInstance = function (_defaults) {\n\n        this.version = \"2.4.2\";\n\n        if (_defaults) jsPlumb.extend(this.Defaults, _defaults);\n\n        this.logEnabled = this.Defaults.LogEnabled;\n        this._connectionTypes = {};\n        this._endpointTypes = {};\n\n        _ju.EventGenerator.apply(this);\n\n        var _currentInstance = this,\n            _instanceIndex = getInstanceIndex(),\n            _bb = _currentInstance.bind,\n            _initialDefaults = {},\n            _zoom = 1,\n            _info = function (el) {\n                if (el == null) return null;\n                else if (el.nodeType == 3 || el.nodeType == 8) {\n                    return { el:el, text:true };\n                }\n                else {\n                    var _el = _currentInstance.getElement(el);\n                    return { el: _el, id: (_ju.isString(el) && _el == null) ? el : _getId(_el) };\n                }\n            };\n\n        this.getInstanceIndex = function () {\n            return _instanceIndex;\n        };\n\n        this.setZoom = function (z, repaintEverything) {\n            _zoom = z;\n            _currentInstance.fire(\"zoom\", _zoom);\n            if (repaintEverything) _currentInstance.repaintEverything();\n            return true;\n        };\n        this.getZoom = function () {\n            return _zoom;\n        };\n\n        for (var i in this.Defaults)\n            _initialDefaults[i] = this.Defaults[i];\n\n        var _container, _containerDelegations = [];\n        this.unbindContainer = function() {\n            if (_container != null && _containerDelegations.length > 0) {\n                for (var i = 0; i < _containerDelegations.length; i++) {\n                    _currentInstance.off(_container, _containerDelegations[i][0], _containerDelegations[i][1]);\n                }\n            }\n        };\n        this.setContainer = function (c) {\n\n            this.unbindContainer();\n\n            // get container as dom element.\n            c = this.getElement(c);\n            // move existing connections and endpoints, if any.\n            this.select().each(function (conn) {\n                conn.moveParent(c);\n            });\n            this.selectEndpoints().each(function (ep) {\n                ep.moveParent(c);\n            });\n\n            // set container.\n            var previousContainer = _container;\n            _container = c;\n            _containerDelegations.length = 0;\n            var eventAliases = {\n                \"endpointclick\":\"endpointClick\",\n                \"endpointdblclick\":\"endpointDblClick\"\n            };\n\n            var _oneDelegateHandler = function (id, e, componentType) {\n                var t = e.srcElement || e.target,\n                    jp = (t && t.parentNode ? t.parentNode._jsPlumb : null) || (t ? t._jsPlumb : null) || (t && t.parentNode && t.parentNode.parentNode ? t.parentNode.parentNode._jsPlumb : null);\n                if (jp) {\n                    jp.fire(id, jp, e);\n                    var alias = componentType ? eventAliases[componentType + id] || id : id;\n                    // jsplumb also fires every event coming from components/overlays. That's what the test for `jp.component` is for.\n                    _currentInstance.fire(alias, jp.component || jp, e);\n                }\n            };\n\n            var _addOneDelegate = function(eventId, selector, fn) {\n                _containerDelegations.push([eventId, fn]);\n                _currentInstance.on(_container, eventId, selector, fn);\n            };\n\n            // delegate one event on the container to jsplumb elements. it might be possible to\n            // abstract this out: each of endpoint, connection and overlay could register themselves with\n            // jsplumb as \"component types\" or whatever, and provide a suitable selector. this would be\n            // done by the renderer (although admittedly from 2.0 onwards we're not supporting vml anymore)\n            var _oneDelegate = function (id) {\n                // connections.\n                _addOneDelegate(id, \".jtk-connector\", function (e) {\n                    _oneDelegateHandler(id, e);\n                });\n                // endpoints. note they can have an enclosing div, or not.\n                _addOneDelegate(id, \".jtk-endpoint\", function (e) {\n                    _oneDelegateHandler(id, e, \"endpoint\");\n                });\n                // overlays\n                _addOneDelegate(id, \".jtk-overlay\", function (e) {\n                    _oneDelegateHandler(id, e);\n                });\n            };\n\n            for (var i = 0; i < events.length; i++)\n                _oneDelegate(events[i]);\n\n            // managed elements\n            for (var elId in managedElements) {\n                var el = managedElements[elId].el;\n                if (el.parentNode === previousContainer) {\n                    previousContainer.removeChild(el);\n                    _container.appendChild(el);\n                }\n            }\n\n        };\n        this.getContainer = function () {\n            return _container;\n        };\n\n        this.bind = function (event, fn) {\n            if (\"ready\" === event && initialized) fn();\n            else _bb.apply(_currentInstance, [event, fn]);\n        };\n\n        _currentInstance.importDefaults = function (d) {\n            for (var i in d) {\n                _currentInstance.Defaults[i] = d[i];\n            }\n            if (d.Container)\n                _currentInstance.setContainer(d.Container);\n\n            return _currentInstance;\n        };\n\n        _currentInstance.restoreDefaults = function () {\n            _currentInstance.Defaults = jsPlumb.extend({}, _initialDefaults);\n            return _currentInstance;\n        };\n\n        var log = null,\n            initialized = false,\n        // TODO remove from window scope\n            connections = [],\n        // map of element id -> endpoint lists. an element can have an arbitrary\n        // number of endpoints on it, and not all of them have to be connected\n        // to anything.\n            endpointsByElement = {},\n            endpointsByUUID = {},\n            managedElements = {},\n            offsets = {},\n            offsetTimestamps = {},\n            draggableStates = {},\n            connectionBeingDragged = false,\n            sizes = [],\n            _suspendDrawing = false,\n            _suspendedAt = null,\n            DEFAULT_SCOPE = this.Defaults.Scope,\n            _curIdStamp = 1,\n            _idstamp = function () {\n                return \"\" + _curIdStamp++;\n            },\n\n        //\n        // appends an element to some other element, which is calculated as follows:\n        //\n        // 1. if Container exists, use that element.\n        // 2. if the 'parent' parameter exists, use that.\n        // 3. otherwise just use the root element.\n        //\n        //\n            _appendElement = function (el, parent) {\n                if (_container)\n                    _container.appendChild(el);\n                else if (!parent)\n                    this.appendToRoot(el);\n                else\n                    this.getElement(parent).appendChild(el);\n            }.bind(this),\n\n        //\n        // Draws an endpoint and its connections. this is the main entry point into drawing connections as well\n        // as endpoints, since jsPlumb is endpoint-centric under the hood.\n        //\n        // @param element element to draw (of type library specific element object)\n        // @param ui UI object from current library's event system. optional.\n        // @param timestamp timestamp for this paint cycle. used to speed things up a little by cutting down the amount of offset calculations we do.\n        // @param clearEdits defaults to false; indicates that mouse edits for connectors should be cleared\n        ///\n            _draw = function (element, ui, timestamp, clearEdits) {\n\n                if (!_suspendDrawing) {\n                    var id = _getId(element),\n                        repaintEls,\n                        dm = _currentInstance.getDragManager();\n\n                    if (dm) repaintEls = dm.getElementsForDraggable(id);\n\n                    if (timestamp == null) timestamp = _timestamp();\n\n                    // update the offset of everything _before_ we try to draw anything.\n                    var o = _updateOffset({ elId: id, offset: ui, recalc: false, timestamp: timestamp });\n\n                    if (repaintEls && o && o.o) {\n                        for (var i in repaintEls) {\n                            _updateOffset({\n                                elId: repaintEls[i].id,\n                                offset: {\n                                    left: o.o.left + repaintEls[i].offset.left,\n                                    top: o.o.top + repaintEls[i].offset.top\n                                },\n                                recalc: false,\n                                timestamp: timestamp\n                            });\n                        }\n                    }\n\n                    _currentInstance.anchorManager.redraw(id, ui, timestamp, null, clearEdits);\n\n                    if (repaintEls) {\n                        for (var j in repaintEls) {\n                            _currentInstance.anchorManager.redraw(repaintEls[j].id, ui, timestamp, repaintEls[j].offset, clearEdits, true);\n                        }\n                    }\n                }\n            },\n\n        //\n        // gets an Endpoint by uuid.\n        //\n            _getEndpoint = function (uuid) {\n                return endpointsByUUID[uuid];\n            },\n\n            /**\n             * inits a draggable if it's not already initialised.\n             * TODO: somehow abstract this to the adapter, because the concept of \"draggable\" has no\n             * place on the server.\n             */\n            _initDraggableIfNecessary = function (element, isDraggable, dragOptions, id, fireEvent) {\n                // move to DragManager?\n                if (!jsPlumb.headless) {\n                    var _draggable = isDraggable == null ? false : isDraggable;\n                    if (_draggable) {\n                        if (jsPlumb.isDragSupported(element, _currentInstance)) {\n                            var options = dragOptions || _currentInstance.Defaults.DragOptions;\n                            options = jsPlumb.extend({}, options); // make a copy.\n                            if (!jsPlumb.isAlreadyDraggable(element, _currentInstance)) {\n                                var dragEvent = jsPlumb.dragEvents.drag,\n                                    stopEvent = jsPlumb.dragEvents.stop,\n                                    startEvent = jsPlumb.dragEvents.start,\n                                    _started = false;\n\n                                _manage(id, element);\n\n                                options[startEvent] = _ju.wrap(options[startEvent], function () {\n                                    _currentInstance.setHoverSuspended(true);\n                                    _currentInstance.select({source: element}).addClass(_currentInstance.elementDraggingClass + \" \" + _currentInstance.sourceElementDraggingClass, true);\n                                    _currentInstance.select({target: element}).addClass(_currentInstance.elementDraggingClass + \" \" + _currentInstance.targetElementDraggingClass, true);\n                                    _currentInstance.setConnectionBeingDragged(true);\n                                    if (options.canDrag) return dragOptions.canDrag();\n                                }, false);\n\n                                options[dragEvent] = _ju.wrap(options[dragEvent], function () {\n                                    // TODO: here we could actually use getDragObject, and then compute it ourselves,\n                                    // since every adapter does the same thing. but i'm not sure why YUI's getDragObject\n                                    // differs from getUIPosition so much\n                                    var ui = _currentInstance.getUIPosition(arguments, _currentInstance.getZoom());\n                                    if (ui != null) {\n                                        _draw(element, ui, null, true);\n                                        if (_started) _currentInstance.addClass(element, \"jtk-dragged\");\n                                        _started = true;\n                                    }\n                                });\n                                options[stopEvent] = _ju.wrap(options[stopEvent], function () {\n                                    var elements = arguments[0].selection, uip;\n\n                                    var _one = function (_e) {\n                                        if (_e[1] != null) {\n                                            // run the reported offset through the code that takes parent containers\n                                            // into account, to adjust if necessary (issue 554)\n                                            uip = _currentInstance.getUIPosition([{\n                                                el:_e[2].el,\n                                                pos:[_e[1].left, _e[1].top]\n                                            }]);\n                                            _draw(_e[2].el, uip);\n                                        }\n                                        _currentInstance.removeClass(_e[0], \"jtk-dragged\");\n                                        _currentInstance.select({source: _e[2].el}).removeClass(_currentInstance.elementDraggingClass + \" \" + _currentInstance.sourceElementDraggingClass, true);\n                                        _currentInstance.select({target: _e[2].el}).removeClass(_currentInstance.elementDraggingClass + \" \" + _currentInstance.targetElementDraggingClass, true);\n                                        _currentInstance.getDragManager().dragEnded(_e[2].el);\n                                    };\n\n                                    for (var i = 0; i < elements.length; i++) {\n                                        _one(elements[i]);\n                                    }\n\n                                    _started = false;\n                                    _currentInstance.setHoverSuspended(false);\n                                    _currentInstance.setConnectionBeingDragged(false);\n                                });\n                                var elId = _getId(element); // need ID\n                                draggableStates[elId] = true;\n                                var draggable = draggableStates[elId];\n                                options.disabled = draggable == null ? false : !draggable;\n                                _currentInstance.initDraggable(element, options);\n                                _currentInstance.getDragManager().register(element);\n                                if (fireEvent) _currentInstance.fire(\"elementDraggable\", {el:element, options:options});\n                            }\n                            else {\n                                // already draggable. attach any start, drag or stop listeners to the current Drag.\n                                if (dragOptions.force) {\n                                    _currentInstance.initDraggable(element, options);\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n\n            _scopeMatch = function (e1, e2) {\n                var s1 = e1.scope.split(/\\s/), s2 = e2.scope.split(/\\s/);\n                for (var i = 0; i < s1.length; i++)\n                    for (var j = 0; j < s2.length; j++)\n                        if (s2[j] == s1[i]) return true;\n\n                return false;\n            },\n\n        /*\n         * prepares a final params object that can be passed to _newConnection, taking into account defaults, events, etc.\n         */\n            _prepareConnectionParams = function (params, referenceParams) {\n                var _p = jsPlumb.extend({ }, params);\n                if (referenceParams) jsPlumb.extend(_p, referenceParams);\n\n                // hotwire endpoints passed as source or target to sourceEndpoint/targetEndpoint, respectively.\n                if (_p.source) {\n                    if (_p.source.endpoint)\n                        _p.sourceEndpoint = _p.source;\n                    else\n                        _p.source = _currentInstance.getElement(_p.source);\n                }\n                if (_p.target) {\n                    if (_p.target.endpoint)\n                        _p.targetEndpoint = _p.target;\n                    else\n                        _p.target = _currentInstance.getElement(_p.target);\n                }\n\n                // test for endpoint uuids to connect\n                if (params.uuids) {\n                    _p.sourceEndpoint = _getEndpoint(params.uuids[0]);\n                    _p.targetEndpoint = _getEndpoint(params.uuids[1]);\n                }\n\n                // now ensure that if we do have Endpoints already, they're not full.\n                // source:\n                if (_p.sourceEndpoint && _p.sourceEndpoint.isFull()) {\n                    _ju.log(_currentInstance, \"could not add connection; source endpoint is full\");\n                    return;\n                }\n\n                // target:\n                if (_p.targetEndpoint && _p.targetEndpoint.isFull()) {\n                    _ju.log(_currentInstance, \"could not add connection; target endpoint is full\");\n                    return;\n                }\n\n                // if source endpoint mandates connection type and nothing specified in our params, use it.\n                if (!_p.type && _p.sourceEndpoint)\n                    _p.type = _p.sourceEndpoint.connectionType;\n\n                // copy in any connectorOverlays that were specified on the source endpoint.\n                // it doesnt copy target endpoint overlays.  i'm not sure if we want it to or not.\n                if (_p.sourceEndpoint && _p.sourceEndpoint.connectorOverlays) {\n                    _p.overlays = _p.overlays || [];\n                    for (var i = 0, j = _p.sourceEndpoint.connectorOverlays.length; i < j; i++) {\n                        _p.overlays.push(_p.sourceEndpoint.connectorOverlays[i]);\n                    }\n                }\n\n                // scope\n                if (_p.sourceEndpoint && _p.sourceEndpoint.scope) {\n                    _p.scope = _p.sourceEndpoint.scope;\n                }\n\n                // pointer events\n                if (!_p[\"pointer-events\"] && _p.sourceEndpoint && _p.sourceEndpoint.connectorPointerEvents)\n                    _p[\"pointer-events\"] = _p.sourceEndpoint.connectorPointerEvents;\n\n                var _mergeOverrides = function (def, values) {\n                    var m = jsPlumb.extend({}, def);\n                    for (var i in values) {\n                        if (values[i]) m[i] = values[i];\n                    }\n                    return m;\n                };\n\n                var _addEndpoint = function (el, def, idx) {\n                    return _currentInstance.addEndpoint(el, _mergeOverrides(def, {\n                        anchor: _p.anchors ? _p.anchors[idx] : _p.anchor,\n                        endpoint: _p.endpoints ? _p.endpoints[idx] : _p.endpoint,\n                        paintStyle: _p.endpointStyles ? _p.endpointStyles[idx] : _p.endpointStyle,\n                        hoverPaintStyle: _p.endpointHoverStyles ? _p.endpointHoverStyles[idx] : _p.endpointHoverStyle\n                    }));\n                };\n\n                // check for makeSource/makeTarget specs.\n\n                var _oneElementDef = function (type, idx, defs, matchType) {\n                    if (_p[type] && !_p[type].endpoint && !_p[type + \"Endpoint\"] && !_p.newConnection) {\n                        var tid = _getId(_p[type]), tep = defs[tid];\n\n                        tep = tep ? tep[matchType] : null;\n\n                        if (tep) {\n                            // if not enabled, return.\n                            if (!tep.enabled) return false;\n                            var newEndpoint = tep.endpoint != null && tep.endpoint._jsPlumb ? tep.endpoint : _addEndpoint(_p[type], tep.def, idx);\n                            if (newEndpoint.isFull()) return false;\n                            _p[type + \"Endpoint\"] = newEndpoint;\n                            if (!_p.scope && tep.def.scope) _p.scope = tep.def.scope; // provide scope if not already provided and endpoint def has one.\n                            newEndpoint.setDeleteOnEmpty(true);\n                            if (tep.uniqueEndpoint) {\n                                if (!tep.endpoint) {\n                                    tep.endpoint = newEndpoint;\n                                    newEndpoint.setDeleteOnEmpty(false);\n                                }\n                                else\n                                    newEndpoint.finalEndpoint = tep.endpoint;\n                            }\n                        }\n                    }\n                };\n\n                if (_oneElementDef(\"source\", 0, this.sourceEndpointDefinitions, _p.type || \"default\") === false) return;\n                if (_oneElementDef(\"target\", 1, this.targetEndpointDefinitions, _p.type || \"default\") === false) return;\n\n                // last, ensure scopes match\n                if (_p.sourceEndpoint && _p.targetEndpoint)\n                    if (!_scopeMatch(_p.sourceEndpoint, _p.targetEndpoint)) _p = null;\n\n                return _p;\n            }.bind(_currentInstance),\n\n            _newConnection = function (params) {\n                var connectionFunc = _currentInstance.Defaults.ConnectionType || _currentInstance.getDefaultConnectionType();\n\n                params._jsPlumb = _currentInstance;\n                params.newConnection = _newConnection;\n                params.newEndpoint = _newEndpoint;\n                params.endpointsByUUID = endpointsByUUID;\n                params.endpointsByElement = endpointsByElement;\n                params.finaliseConnection = _finaliseConnection;\n                params.id = \"con_\" + _idstamp();\n                var con = new connectionFunc(params);\n\n                // if the connection is draggable, then maybe we need to tell the target endpoint to init the\n                // dragging code. it won't run again if it already configured to be draggable.\n                if (con.isDetachable()) {\n                    con.endpoints[0].initDraggable(\"_jsPlumbSource\");\n                    con.endpoints[1].initDraggable(\"_jsPlumbTarget\");\n                }\n\n                return con;\n            },\n\n        //\n        // adds the connection to the backing model, fires an event if necessary and then redraws\n        //\n            _finaliseConnection = _currentInstance.finaliseConnection = function (jpc, params, originalEvent, doInformAnchorManager) {\n                params = params || {};\n                // add to list of connections (by scope).\n                if (!jpc.suspendedEndpoint)\n                    connections.push(jpc);\n\n                jpc.pending = null;\n\n                // turn off isTemporarySource on the source endpoint (only viable on first draw)\n                jpc.endpoints[0].isTemporarySource = false;\n\n                // always inform the anchor manager\n                // except that if jpc has a suspended endpoint it's not true to say the\n                // connection is new; it has just (possibly) moved. the question is whether\n                // to make that call here or in the anchor manager.  i think perhaps here.\n                if (doInformAnchorManager !== false)\n                    _currentInstance.anchorManager.newConnection(jpc);\n\n                // force a paint\n                _draw(jpc.source);\n\n                // fire an event\n                if (!params.doNotFireConnectionEvent && params.fireEvent !== false) {\n\n                    var eventArgs = {\n                        connection: jpc,\n                        source: jpc.source, target: jpc.target,\n                        sourceId: jpc.sourceId, targetId: jpc.targetId,\n                        sourceEndpoint: jpc.endpoints[0], targetEndpoint: jpc.endpoints[1]\n                    };\n\n                    _currentInstance.fire(\"connection\", eventArgs, originalEvent);\n                }\n            },\n\n        /*\n         factory method to prepare a new endpoint.  this should always be used instead of creating Endpoints\n         manually, since this method attaches event listeners and an id.\n         */\n            _newEndpoint = function (params, id) {\n                var endpointFunc = _currentInstance.Defaults.EndpointType || jsPlumb.Endpoint;\n                var _p = jsPlumb.extend({}, params);\n                _p._jsPlumb = _currentInstance;\n                _p.newConnection = _newConnection;\n                _p.newEndpoint = _newEndpoint;\n                _p.endpointsByUUID = endpointsByUUID;\n                _p.endpointsByElement = endpointsByElement;\n                _p.fireDetachEvent = fireDetachEvent;\n                _p.elementId = id || _getId(_p.source);\n                var ep = new endpointFunc(_p);\n                ep.id = \"ep_\" + _idstamp();\n                _manage(_p.elementId, _p.source);\n\n                if (!jsPlumb.headless)\n                    _currentInstance.getDragManager().endpointAdded(_p.source, id);\n\n                return ep;\n            },\n\n        /*\n         * performs the given function operation on all the connections found\n         * for the given element id; this means we find all the endpoints for\n         * the given element, and then for each endpoint find the connectors\n         * connected to it. then we pass each connection in to the given\n         * function.\n         */\n            _operation = function (elId, func, endpointFunc) {\n                var endpoints = endpointsByElement[elId];\n                if (endpoints && endpoints.length) {\n                    for (var i = 0, ii = endpoints.length; i < ii; i++) {\n                        for (var j = 0, jj = endpoints[i].connections.length; j < jj; j++) {\n                            var retVal = func(endpoints[i].connections[j]);\n                            // if the function passed in returns true, we exit.\n                            // most functions return false.\n                            if (retVal) return;\n                        }\n                        if (endpointFunc) endpointFunc(endpoints[i]);\n                    }\n                }\n            },\n\n            _setDraggable = function (element, draggable) {\n                return jsPlumb.each(element, function (el) {\n                    if (_currentInstance.isDragSupported(el)) {\n                        draggableStates[_currentInstance.getAttribute(el, \"id\")] = draggable;\n                        _currentInstance.setElementDraggable(el, draggable);\n                    }\n                });\n            },\n        /*\n         * private method to do the business of hiding/showing.\n         *\n         * @param el\n         *            either Id of the element in question or a library specific\n         *            object for the element.\n         * @param state\n         *            String specifying a value for the css 'display' property\n         *            ('block' or 'none').\n         */\n            _setVisible = function (el, state, alsoChangeEndpoints) {\n                state = state === \"block\";\n                var endpointFunc = null;\n                if (alsoChangeEndpoints) {\n                    endpointFunc = function (ep) {\n                        ep.setVisible(state, true, true);\n                    };\n                }\n                var info = _info(el);\n                _operation(info.id, function (jpc) {\n                    if (state && alsoChangeEndpoints) {\n                        // this test is necessary because this functionality is new, and i wanted to maintain backwards compatibility.\n                        // this block will only set a connection to be visible if the other endpoint in the connection is also visible.\n                        var oidx = jpc.sourceId === info.id ? 1 : 0;\n                        if (jpc.endpoints[oidx].isVisible()) jpc.setVisible(true);\n                    }\n                    else  // the default behaviour for show, and what always happens for hide, is to just set the visibility without getting clever.\n                        jpc.setVisible(state);\n                }, endpointFunc);\n            },\n        /*\n         * toggles the draggable state of the given element(s).\n         * el is either an id, or an element object, or a list of ids/element objects.\n         */\n            _toggleDraggable = function (el) {\n                var state;\n                jsPlumb.each(el, function (el) {\n                    var elId = _currentInstance.getAttribute(el, \"id\");\n                    state = draggableStates[elId] == null ? false : draggableStates[elId];\n                    state = !state;\n                    draggableStates[elId] = state;\n                    _currentInstance.setDraggable(el, state);\n                    return state;\n                }.bind(this));\n                return state;\n            },\n            /**\n             * private method to do the business of toggling hiding/showing.\n             */\n            _toggleVisible = function (elId, changeEndpoints) {\n                var endpointFunc = null;\n                if (changeEndpoints) {\n                    endpointFunc = function (ep) {\n                        var state = ep.isVisible();\n                        ep.setVisible(!state);\n                    };\n                }\n                _operation(elId, function (jpc) {\n                    var state = jpc.isVisible();\n                    jpc.setVisible(!state);\n                }, endpointFunc);\n            },\n\n        // TODO comparison performance\n            _getCachedData = function (elId) {\n                var o = offsets[elId];\n                if (!o)\n                    return _updateOffset({elId: elId});\n                else\n                    return {o: o, s: sizes[elId]};\n            },\n\n            /**\n             * gets an id for the given element, creating and setting one if\n             * necessary.  the id is of the form\n             *\n             *    jsPlumb_<instance index>_<index in instance>\n             *\n             * where \"index in instance\" is a monotonically increasing integer that starts at 0,\n             * for each instance.  this method is used not only to assign ids to elements that do not\n             * have them but also to connections and endpoints.\n             */\n            _getId = function (element, uuid, doNotCreateIfNotFound) {\n                if (_ju.isString(element)) return element;\n                if (element == null) return null;\n                var id = _currentInstance.getAttribute(element, \"id\");\n                if (!id || id === \"undefined\") {\n                    // check if fixed uuid parameter is given\n                    if (arguments.length == 2 && arguments[1] !== undefined)\n                        id = uuid;\n                    else if (arguments.length == 1 || (arguments.length == 3 && !arguments[2]))\n                        id = \"jsPlumb_\" + _instanceIndex + \"_\" + _idstamp();\n\n                    if (!doNotCreateIfNotFound) _currentInstance.setAttribute(element, \"id\", id);\n                }\n                return id;\n            };\n\n        this.setConnectionBeingDragged = function (v) {\n            connectionBeingDragged = v;\n        };\n        this.isConnectionBeingDragged = function () {\n            return connectionBeingDragged;\n        };\n\n        /**\n         * Returns a map of all the elements this jsPlumbInstance is currently managing.\n         * @returns {Object} Map of [id-> {el, endpoint[], connection, position}] information.\n         */\n        this.getManagedElements = function() {\n            return managedElements;\n        };\n\n        this.connectorClass = \"jtk-connector\";\n        this.connectorOutlineClass = \"jtk-connector-outline\";\n        this.editableConnectorClass = \"jtk-connector-editable\";\n        this.connectedClass = \"jtk-connected\";\n        this.hoverClass = \"jtk-hover\";\n        this.endpointClass = \"jtk-endpoint\";\n        this.endpointConnectedClass = \"jtk-endpoint-connected\";\n        this.endpointFullClass = \"jtk-endpoint-full\";\n        this.endpointDropAllowedClass = \"jtk-endpoint-drop-allowed\";\n        this.endpointDropForbiddenClass = \"jtk-endpoint-drop-forbidden\";\n        this.overlayClass = \"jtk-overlay\";\n        this.draggingClass = \"jtk-dragging\";\n        this.elementDraggingClass = \"jtk-element-dragging\";\n        this.sourceElementDraggingClass = \"jtk-source-element-dragging\";\n        this.targetElementDraggingClass = \"jtk-target-element-dragging\";\n        this.endpointAnchorClassPrefix = \"jtk-endpoint-anchor\";\n        this.hoverSourceClass = \"jtk-source-hover\";\n        this.hoverTargetClass = \"jtk-target-hover\";\n        this.dragSelectClass = \"jtk-drag-select\";\n\n        this.Anchors = {};\n        this.Connectors = {  \"svg\": {} };\n        this.Endpoints = { \"svg\": {} };\n        this.Overlays = { \"svg\": {} } ;\n        this.ConnectorRenderers = {};\n        this.SVG = \"svg\";\n\n// --------------------------- jsPlumbInstance public API ---------------------------------------------------------\n\n\n        this.addEndpoint = function (el, params, referenceParams) {\n            referenceParams = referenceParams || {};\n            var p = jsPlumb.extend({}, referenceParams);\n            jsPlumb.extend(p, params);\n            p.endpoint = p.endpoint || _currentInstance.Defaults.Endpoint;\n            p.paintStyle = p.paintStyle || _currentInstance.Defaults.EndpointStyle;\n\n            var results = [],\n                inputs = (_ju.isArray(el) || (el.length != null && !_ju.isString(el))) ? el : [ el ];\n\n            for (var i = 0, j = inputs.length; i < j; i++) {\n                p.source = _currentInstance.getElement(inputs[i]);\n                _ensureContainer(p.source);\n\n                var id = _getId(p.source), e = _newEndpoint(p, id);\n\n                // ensure element is managed.\n                var myOffset = _manage(id, p.source).info.o;\n                _ju.addToList(endpointsByElement, id, e);\n\n                if (!_suspendDrawing) {\n                    e.paint({\n                        anchorLoc: e.anchor.compute({ xy: [ myOffset.left, myOffset.top ], wh: sizes[id], element: e, timestamp: _suspendedAt }),\n                        timestamp: _suspendedAt\n                    });\n                }\n\n                results.push(e);\n            }\n\n            return results.length == 1 ? results[0] : results;\n        };\n\n        this.addEndpoints = function (el, endpoints, referenceParams) {\n            var results = [];\n            for (var i = 0, j = endpoints.length; i < j; i++) {\n                var e = _currentInstance.addEndpoint(el, endpoints[i], referenceParams);\n                if (_ju.isArray(e))\n                    Array.prototype.push.apply(results, e);\n                else results.push(e);\n            }\n            return results;\n        };\n\n        this.animate = function (el, properties, options) {\n            if (!this.animationSupported) return false;\n\n            options = options || {};\n            var del = _currentInstance.getElement(el),\n                id = _getId(del),\n                stepFunction = jsPlumb.animEvents.step,\n                completeFunction = jsPlumb.animEvents.complete;\n\n            options[stepFunction] = _ju.wrap(options[stepFunction], function () {\n                _currentInstance.revalidate(id);\n            });\n\n            // onComplete repaints, just to make sure everything looks good at the end of the animation.\n            options[completeFunction] = _ju.wrap(options[completeFunction], function () {\n                _currentInstance.revalidate(id);\n            });\n\n            _currentInstance.doAnimate(del, properties, options);\n        };\n\n        /**\n         * checks for a listener for the given condition, executing it if found, passing in the given value.\n         * condition listeners would have been attached using \"bind\" (which is, you could argue, now overloaded, since\n         * firing click events etc is a bit different to what this does).  i thought about adding a \"bindCondition\"\n         * or something, but decided against it, for the sake of simplicity. jsPlumb will never fire one of these\n         * condition events anyway.\n         */\n        this.checkCondition = function (conditionName, args) {\n            var l = _currentInstance.getListener(conditionName),\n                r = true;\n\n            if (l && l.length > 0) {\n                var values = Array.prototype.slice.call(arguments, 1);\n                try {\n                    for (var i = 0, j = l.length; i < j; i++) {\n                        r = r && l[i].apply(l[i], values);\n                    }\n                }\n                catch (e) {\n                    _ju.log(_currentInstance, \"cannot check condition [\" + conditionName + \"]\" + e);\n                }\n            }\n            return r;\n        };\n\n        this.connect = function (params, referenceParams) {\n            // prepare a final set of parameters to create connection with\n            var _p = _prepareConnectionParams(params, referenceParams), jpc;\n            // TODO probably a nicer return value if the connection was not made.  _prepareConnectionParams\n            // will return null (and log something) if either endpoint was full.  what would be nicer is to\n            // create a dedicated 'error' object.\n            if (_p) {\n                if (_p.source == null && _p.sourceEndpoint == null) {\n                    _ju.log(\"Cannot establish connection - source does not exist\");\n                    return;\n                }\n                if (_p.target == null && _p.targetEndpoint == null) {\n                    _ju.log(\"Cannot establish connection - target does not exist\");\n                    return;\n                }\n                _ensureContainer(_p.source);\n                // create the connection.  it is not yet registered\n                jpc = _newConnection(_p);\n                // now add it the model, fire an event, and redraw\n                _finaliseConnection(jpc, _p);\n            }\n            return jpc;\n        };\n\n        var stTypes = [\n            { el: \"source\", elId: \"sourceId\", epDefs: \"sourceEndpointDefinitions\" },\n            { el: \"target\", elId: \"targetId\", epDefs: \"targetEndpointDefinitions\" }\n        ];\n\n        var _set = function (c, el, idx, doNotRepaint) {\n            var ep, _st = stTypes[idx], cId = c[_st.elId], cEl = c[_st.el], sid, sep,\n                oldEndpoint = c.endpoints[idx];\n\n            var evtParams = {\n                index: idx,\n                originalSourceId: idx === 0 ? cId : c.sourceId,\n                newSourceId: c.sourceId,\n                originalTargetId: idx == 1 ? cId : c.targetId,\n                newTargetId: c.targetId,\n                connection: c\n            };\n\n            if (el.constructor == jsPlumb.Endpoint) {\n                ep = el;\n                ep.addConnection(c);\n                el = ep.element;\n            }\n            else {\n                sid = _getId(el);\n                sep = this[_st.epDefs][sid];\n\n                if (sid === c[_st.elId])\n                    ep = null;  // dont change source/target if the element is already the one given.\n                else if (sep) {\n                    for (var t in sep) {\n                        if (!sep[t].enabled) return;\n                        ep = sep[t].endpoint != null && sep[t].endpoint._jsPlumb ? sep[t].endpoint : this.addEndpoint(el, sep[t].def);\n                        if (sep[t].uniqueEndpoint) {\n                            sep[t].endpoint = ep;\n                        }\n                        ep.addConnection(c);\n                    }\n                }\n                else {\n                    ep = c.makeEndpoint(idx === 0, el, sid);\n                }\n            }\n\n            if (ep != null) {\n                oldEndpoint.detachFromConnection(c);\n                c.endpoints[idx] = ep;\n                c[_st.el] = ep.element;\n                c[_st.elId] = ep.elementId;\n                evtParams[idx === 0 ? \"newSourceId\" : \"newTargetId\"] = ep.elementId;\n\n                fireMoveEvent(evtParams);\n\n                if (!doNotRepaint) {\n                    c.repaint();\n                }\n            }\n\n            evtParams.element = el;\n            return evtParams;\n\n        }.bind(this);\n\n        this.setSource = function (connection, el, doNotRepaint) {\n            var p = _set(connection, el, 0, doNotRepaint);\n            this.anchorManager.sourceChanged(p.originalSourceId, p.newSourceId, connection, p.el);\n        };\n        this.setTarget = function (connection, el, doNotRepaint) {\n            var p = _set(connection, el, 1, doNotRepaint);\n            this.anchorManager.updateOtherEndpoint(p.originalSourceId, p.originalTargetId, p.newTargetId, connection);\n        };\n\n        this.deleteEndpoint = function (object, dontUpdateHover, deleteAttachedObjects) {\n            var endpoint = (typeof object === \"string\") ? endpointsByUUID[object] : object;\n            if (endpoint) {\n                _currentInstance.deleteObject({ endpoint: endpoint, dontUpdateHover: dontUpdateHover, deleteAttachedObjects:deleteAttachedObjects });\n            }\n            return _currentInstance;\n        };\n\n        this.deleteEveryEndpoint = function () {\n            var _is = _currentInstance.setSuspendDrawing(true);\n            for (var id in endpointsByElement) {\n                var endpoints = endpointsByElement[id];\n                if (endpoints && endpoints.length) {\n                    for (var i = 0, j = endpoints.length; i < j; i++) {\n                        _currentInstance.deleteEndpoint(endpoints[i], true);\n                    }\n                }\n            }\n            endpointsByElement = {};\n            managedElements = {};\n            endpointsByUUID = {};\n            offsets = {};\n            offsetTimestamps = {};\n            _currentInstance.anchorManager.reset();\n            var dm = _currentInstance.getDragManager();\n            if (dm) {\n                dm.reset();\n            }\n            if (!_is) {\n                _currentInstance.setSuspendDrawing(false);\n            }\n            return _currentInstance;\n        };\n\n        var fireDetachEvent = function (jpc, doFireEvent, originalEvent) {\n            // may have been given a connection, or in special cases, an object\n            var connType = _currentInstance.Defaults.ConnectionType || _currentInstance.getDefaultConnectionType(),\n                argIsConnection = jpc.constructor == connType,\n                params = argIsConnection ? {\n                    connection: jpc,\n                    source: jpc.source, target: jpc.target,\n                    sourceId: jpc.sourceId, targetId: jpc.targetId,\n                    sourceEndpoint: jpc.endpoints[0], targetEndpoint: jpc.endpoints[1]\n                } : jpc;\n\n            if (doFireEvent) {\n                _currentInstance.fire(\"connectionDetached\", params, originalEvent);\n            }\n\n            // always fire this. used by internal jsplumb stuff.\n            _currentInstance.fire(\"internal.connectionDetached\", params, originalEvent);\n\n            _currentInstance.anchorManager.connectionDetached(params);\n        };\n\n        var fireMoveEvent = _currentInstance.fireMoveEvent = function (params, evt) {\n            _currentInstance.fire(\"connectionMoved\", params, evt);\n        };\n\n        this.unregisterEndpoint = function (endpoint) {\n            if (endpoint._jsPlumb.uuid) {\n                endpointsByUUID[endpoint._jsPlumb.uuid] = null;\n            }\n            _currentInstance.anchorManager.deleteEndpoint(endpoint);\n            // TODO at least replace this with a removeWithFunction call.\n            for (var e in endpointsByElement) {\n                var endpoints = endpointsByElement[e];\n                if (endpoints) {\n                    var newEndpoints = [];\n                    for (var i = 0, j = endpoints.length; i < j; i++)\n                        if (endpoints[i] != endpoint) newEndpoints.push(endpoints[i]);\n\n                    endpointsByElement[e] = newEndpoints;\n                }\n                if (endpointsByElement[e].length < 1) {\n                    delete endpointsByElement[e];\n                }\n            }\n        };\n\n        var IS_DETACH_ALLOWED = \"isDetachAllowed\";\n        var BEFORE_DETACH = \"beforeDetach\";\n        var CHECK_CONDITION = \"checkCondition\";\n\n        /**\n         * Deletes a Connection.\n         * @method deleteConnection\n         * @param connection Connection to delete\n         * @param {Object} [params] Optional delete parameters\n         * @param {Boolean} [params.doNotFireEvent=false] If true, a connection detached event will not be fired. Otherwise one will.\n         * @param {Boolean} [params.force=false] If true, the connection will be deleted even if a beforeDetach interceptor tries to stop the deletion.\n         * @returns {Boolean} True if the connection was deleted, false otherwise.\n         */\n        this.deleteConnection = function(connection, params) {\n\n            if (connection != null) {\n                params = params || {};\n\n                if (params.force || _ju.functionChain(true, false, [\n                    [ connection.endpoints[0], IS_DETACH_ALLOWED, [ connection ] ],\n                    [ connection.endpoints[1], IS_DETACH_ALLOWED, [ connection ] ],\n                    [ connection, IS_DETACH_ALLOWED, [ connection ] ],\n                    [ _currentInstance, CHECK_CONDITION, [ BEFORE_DETACH, connection ] ]\n                ])) {\n\n                    connection.setHover(false);\n                    fireDetachEvent(connection, !connection.pending && params.fireEvent !== false, params.originalEvent);\n\n                    connection.endpoints[0].detachFromConnection(connection);\n                    connection.endpoints[1].detachFromConnection(connection);\n                    _ju.removeWithFunction(connections, function (_c) {\n                        return connection.id == _c.id;\n                    });\n\n                    connection.cleanup();\n                    connection.destroy();\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        /**\n         * Remove all Connections from all elements, but leaves Endpoints in place ((unless a connection is set to auto delete its Endpoints).\n         * @method deleteEveryConnection\n         * @param {Object} [params] optional params object for the call\n         * @param {Boolean} [params.fireEvent=true] Whether or not to fire detach events\n         * @param {Boolean} [params.forceDetach=false] If true, this call will ignore any `beforeDetach` interceptors.\n         * @returns {Number} The number of connections that were deleted.\n         */\n        this.deleteEveryConnection = function (params) {\n            params = params || {};\n            var count = connections.length, deletedCount = 0;\n            _currentInstance.batch(function () {\n                for (var i = 0; i < count; i++) {\n                    deletedCount += _currentInstance.deleteConnection(connections[0], params) ? 1 : 0;\n                }\n            });\n            return deletedCount;\n        };\n\n        /**\n         * Removes all an element's Connections.\n         * @method deleteConnectionsForElement\n         * @param {Object} el Either the id of the element, or a selector for the element.\n         * @param {Object} [params] Optional parameters.\n         * @param {Boolean} [params.fireEvent=true] Whether or not to fire the detach event.\n         * @param {Boolean} [params.forceDetach=false] If true, this call will ignore any `beforeDetach` interceptors.\n         * @return {jsPlumbInstance} The current jsPlumb instance.\n         */\n        this.deleteConnectionsForElement = function (el, params) {\n            params = params || {};\n            el = _currentInstance.getElement(el);\n            var id = _getId(el), endpoints = endpointsByElement[id];\n            if (endpoints && endpoints.length) {\n                for (var i = 0, j = endpoints.length; i < j; i++) {\n                    endpoints[i].deleteEveryConnection(params);\n                }\n            }\n            return _currentInstance;\n        };\n\n        /// not public.  but of course its exposed. how to change this.\n        this.deleteObject = function (params) {\n            var result = {\n                    endpoints: {},\n                    connections: {},\n                    endpointCount: 0,\n                    connectionCount: 0\n                },\n                deleteAttachedObjects = params.deleteAttachedObjects !== false;\n\n            var unravelConnection = function (connection) {\n                if (connection != null && result.connections[connection.id] == null) {\n                    if (!params.dontUpdateHover && connection._jsPlumb != null) connection.setHover(false);\n                    result.connections[connection.id] = connection;\n                    result.connectionCount++;\n                    if (deleteAttachedObjects) {\n                        for (var j = 0; j < connection.endpoints.length; j++) {\n//                            if (connection.endpoints[j]._deleteOnDetach)\n//                                unravelEndpoint(connection.endpoints[j]);\n                        }\n                    }\n                }\n            };\n            var unravelEndpoint = function (endpoint) {\n                if (endpoint != null && result.endpoints[endpoint.id] == null) {\n                    if (!params.dontUpdateHover && endpoint._jsPlumb != null) endpoint.setHover(false);\n                    result.endpoints[endpoint.id] = endpoint;\n                    result.endpointCount++;\n\n                    if (deleteAttachedObjects) {\n                        for (var i = 0; i < endpoint.connections.length; i++) {\n                            var c = endpoint.connections[i];\n                            unravelConnection(c);\n                        }\n                    }\n                }\n            };\n\n            if (params.connection)\n                unravelConnection(params.connection);\n            else unravelEndpoint(params.endpoint);\n\n            // loop through connections\n            for (var i in result.connections) {\n                var c = result.connections[i];\n                if (c._jsPlumb) {\n                    _ju.removeWithFunction(connections, function (_c) {\n                        return c.id == _c.id;\n                    });\n\n                    fireDetachEvent(c, params.fireEvent === false ? false : !c.pending, params.originalEvent);\n                    var doNotCleanup = params.deleteAttachedObjects == null ? null : !params.deleteAttachedObjects;\n\n                    c.endpoints[0].detachFromConnection(c, null, doNotCleanup);\n                    c.endpoints[1].detachFromConnection(c, null, doNotCleanup);\n\n                    c.cleanup(true);\n                    c.destroy(true);\n                }\n            }\n\n            // loop through endpoints\n            for (var j in result.endpoints) {\n                var e = result.endpoints[j];\n                if (e._jsPlumb) {\n                    _currentInstance.unregisterEndpoint(e);\n                    // FIRE some endpoint deleted event?\n                    e.cleanup(true);\n                    e.destroy(true);\n                }\n            }\n\n            return result;\n        };\n\n        this.draggable = function (el, options) {\n            var info;\n            _each(function(_el) {\n                 info = _info(_el);\n                if (info.el) _initDraggableIfNecessary(info.el, true, options, info.id, true);\n            }, el);\n            return _currentInstance;\n        };\n\n        this.droppable = function(el, options) {\n            var info;\n            options = options || {};\n            options.allowLoopback = false;\n            _each(function(_el) {\n                info = _info(_el);\n                if (info.el) _currentInstance.initDroppable(info.el, options);\n            }, el);\n            return _currentInstance;\n        };\n\n        // helpers for select/selectEndpoints\n        var _setOperation = function (list, func, args, selector) {\n                for (var i = 0, j = list.length; i < j; i++) {\n                    list[i][func].apply(list[i], args);\n                }\n                return selector(list);\n            },\n            _getOperation = function (list, func, args) {\n                var out = [];\n                for (var i = 0, j = list.length; i < j; i++) {\n                    out.push([ list[i][func].apply(list[i], args), list[i] ]);\n                }\n                return out;\n            },\n            setter = function (list, func, selector) {\n                return function () {\n                    return _setOperation(list, func, arguments, selector);\n                };\n            },\n            getter = function (list, func) {\n                return function () {\n                    return _getOperation(list, func, arguments);\n                };\n            },\n            prepareList = function (input, doNotGetIds) {\n                var r = [];\n                if (input) {\n                    if (typeof input == 'string') {\n                        if (input === \"*\") return input;\n                        r.push(input);\n                    }\n                    else {\n                        if (doNotGetIds) r = input;\n                        else {\n                            if (input.length) {\n                                for (var i = 0, j = input.length; i < j; i++)\n                                    r.push(_info(input[i]).id);\n                            }\n                            else\n                                r.push(_info(input).id);\n                        }\n                    }\n                }\n                return r;\n            },\n            filterList = function (list, value, missingIsFalse) {\n                if (list === \"*\") return true;\n                return list.length > 0 ? list.indexOf(value) != -1 : !missingIsFalse;\n            };\n\n        // get some connections, specifying source/target/scope\n        this.getConnections = function (options, flat) {\n            if (!options) {\n                options = {};\n            } else if (options.constructor == String) {\n                options = { \"scope\": options };\n            }\n            var scope = options.scope || _currentInstance.getDefaultScope(),\n                scopes = prepareList(scope, true),\n                sources = prepareList(options.source),\n                targets = prepareList(options.target),\n                results = (!flat && scopes.length > 1) ? {} : [],\n                _addOne = function (scope, obj) {\n                    if (!flat && scopes.length > 1) {\n                        var ss = results[scope];\n                        if (ss == null) {\n                            ss = results[scope] = [];\n                        }\n                        ss.push(obj);\n                    } else results.push(obj);\n                };\n\n            for (var j = 0, jj = connections.length; j < jj; j++) {\n                var c = connections[j],\n                    sourceId = c.proxies && c.proxies[0] ? c.proxies[0].originalEp.elementId : c.sourceId,\n                    targetId = c.proxies && c.proxies[1] ? c.proxies[1].originalEp.elementId : c.targetId;\n\n                if (filterList(scopes, c.scope) && filterList(sources, sourceId) && filterList(targets, targetId))\n                    _addOne(c.scope, c);\n            }\n\n            return results;\n        };\n\n        var _curryEach = function (list, executor) {\n                return function (f) {\n                    for (var i = 0, ii = list.length; i < ii; i++) {\n                        f(list[i]);\n                    }\n                    return executor(list);\n                };\n            },\n            _curryGet = function (list) {\n                return function (idx) {\n                    return list[idx];\n                };\n            };\n\n        var _makeCommonSelectHandler = function (list, executor) {\n            var out = {\n                    length: list.length,\n                    each: _curryEach(list, executor),\n                    get: _curryGet(list)\n                },\n                setters = [\"setHover\", \"removeAllOverlays\", \"setLabel\", \"addClass\", \"addOverlay\", \"removeOverlay\",\n                    \"removeOverlays\", \"showOverlay\", \"hideOverlay\", \"showOverlays\", \"hideOverlays\", \"setPaintStyle\",\n                    \"setHoverPaintStyle\", \"setSuspendEvents\", \"setParameter\", \"setParameters\", \"setVisible\",\n                    \"repaint\", \"addType\", \"toggleType\", \"removeType\", \"removeClass\", \"setType\", \"bind\", \"unbind\" ],\n\n                getters = [\"getLabel\", \"getOverlay\", \"isHover\", \"getParameter\", \"getParameters\", \"getPaintStyle\",\n                    \"getHoverPaintStyle\", \"isVisible\", \"hasType\", \"getType\", \"isSuspendEvents\" ],\n                i, ii;\n\n            for (i = 0, ii = setters.length; i < ii; i++)\n                out[setters[i]] = setter(list, setters[i], executor);\n\n            for (i = 0, ii = getters.length; i < ii; i++)\n                out[getters[i]] = getter(list, getters[i]);\n\n            return out;\n        };\n\n        var _makeConnectionSelectHandler = function (list) {\n            var common = _makeCommonSelectHandler(list, _makeConnectionSelectHandler);\n            return jsPlumb.extend(common, {\n                // setters\n                setDetachable: setter(list, \"setDetachable\", _makeConnectionSelectHandler),\n                setReattach: setter(list, \"setReattach\", _makeConnectionSelectHandler),\n                setConnector: setter(list, \"setConnector\", _makeConnectionSelectHandler),\n                delete: function () {\n                    for (var i = 0, ii = list.length; i < ii; i++)\n                        _currentInstance.deleteConnection(list[i]);\n                },\n                // getters\n                isDetachable: getter(list, \"isDetachable\"),\n                isReattach: getter(list, \"isReattach\")\n            });\n        };\n\n        var _makeEndpointSelectHandler = function (list) {\n            var common = _makeCommonSelectHandler(list, _makeEndpointSelectHandler);\n            return jsPlumb.extend(common, {\n                setEnabled: setter(list, \"setEnabled\", _makeEndpointSelectHandler),\n                setAnchor: setter(list, \"setAnchor\", _makeEndpointSelectHandler),\n                isEnabled: getter(list, \"isEnabled\"),\n                deleteEveryConnection: function () {\n                    for (var i = 0, ii = list.length; i < ii; i++)\n                        list[i].deleteEveryConnection();\n                },\n                \"delete\": function () {\n                    for (var i = 0, ii = list.length; i < ii; i++)\n                        _currentInstance.deleteEndpoint(list[i]);\n                }\n            });\n        };\n\n        this.select = function (params) {\n            params = params || {};\n            params.scope = params.scope || \"*\";\n            return _makeConnectionSelectHandler(params.connections || _currentInstance.getConnections(params, true));\n        };\n\n        this.selectEndpoints = function (params) {\n            params = params || {};\n            params.scope = params.scope || \"*\";\n            var noElementFilters = !params.element && !params.source && !params.target,\n                elements = noElementFilters ? \"*\" : prepareList(params.element),\n                sources = noElementFilters ? \"*\" : prepareList(params.source),\n                targets = noElementFilters ? \"*\" : prepareList(params.target),\n                scopes = prepareList(params.scope, true);\n\n            var ep = [];\n\n            for (var el in endpointsByElement) {\n                var either = filterList(elements, el, true),\n                    source = filterList(sources, el, true),\n                    sourceMatchExact = sources != \"*\",\n                    target = filterList(targets, el, true),\n                    targetMatchExact = targets != \"*\";\n\n                // if they requested 'either' then just match scope. otherwise if they requested 'source' (not as a wildcard) then we have to match only endpoints that have isSource set to to true, and the same thing with isTarget.\n                if (either || source || target) {\n                    inner:\n                        for (var i = 0, ii = endpointsByElement[el].length; i < ii; i++) {\n                            var _ep = endpointsByElement[el][i];\n                            if (filterList(scopes, _ep.scope, true)) {\n\n                                var noMatchSource = (sourceMatchExact && sources.length > 0 && !_ep.isSource),\n                                    noMatchTarget = (targetMatchExact && targets.length > 0 && !_ep.isTarget);\n\n                                if (noMatchSource || noMatchTarget)\n                                    continue inner;\n\n                                ep.push(_ep);\n                            }\n                        }\n                }\n            }\n\n            return _makeEndpointSelectHandler(ep);\n        };\n\n        // get all connections managed by the instance of jsplumb.\n        this.getAllConnections = function () {\n            return connections;\n        };\n        this.getDefaultScope = function () {\n            return DEFAULT_SCOPE;\n        };\n        // get an endpoint by uuid.\n        this.getEndpoint = _getEndpoint;\n        /**\n         * Gets the list of Endpoints for a given element.\n         * @method getEndpoints\n         * @param {String|Element|Selector} el The element to get endpoints for.\n         * @return {Endpoint[]} An array of Endpoints for the specified element.\n         */\n        this.getEndpoints = function (el) {\n            return endpointsByElement[_info(el).id] || [];\n        };\n        // gets the default endpoint type. used when subclassing. see wiki.\n        this.getDefaultEndpointType = function () {\n            return jsPlumb.Endpoint;\n        };\n        // gets the default connection type. used when subclassing.  see wiki.\n        this.getDefaultConnectionType = function () {\n            return jsPlumb.Connection;\n        };\n        /*\n         * Gets an element's id, creating one if necessary. really only exposed\n         * for the lib-specific functionality to access; would be better to pass\n         * the current instance into the lib-specific code (even though this is\n         * a static call. i just don't want to expose it to the public API).\n         */\n        this.getId = _getId;\n\n        this.appendElement = _appendElement;\n\n        var _hoverSuspended = false;\n        this.isHoverSuspended = function () {\n            return _hoverSuspended;\n        };\n        this.setHoverSuspended = function (s) {\n            _hoverSuspended = s;\n        };\n\n        // set an element's connections to be hidden\n        this.hide = function (el, changeEndpoints) {\n            _setVisible(el, \"none\", changeEndpoints);\n            return _currentInstance;\n        };\n\n        // exposed for other objects to use to get a unique id.\n        this.idstamp = _idstamp;\n\n        this.connectorsInitialized = false;\n        this.registerConnectorType = function (connector, name) {\n            connectorTypes.push([connector, name]);\n        };\n\n        // ensure that, if the current container exists, it is a DOM element and not a selector.\n        // if it does not exist and `candidate` is supplied, the offset parent of that element will be set as the Container.\n        // this is used to do a better default behaviour for the case that the user has not set a container:\n        // addEndpoint, makeSource, makeTarget and connect all call this method with the offsetParent of the\n        // element in question (for connect it is the source element). So if no container is set, it is inferred\n        // to be the offsetParent of the first element the user tries to connect.\n        var _ensureContainer = function (candidate) {\n            if (!_container && candidate) {\n                var can = _currentInstance.getElement(candidate);\n                if (can.offsetParent) _currentInstance.setContainer(can.offsetParent);\n            }\n        };\n\n        var _getContainerFromDefaults = function () {\n            if (_currentInstance.Defaults.Container)\n                _currentInstance.setContainer(_currentInstance.Defaults.Container);\n        };\n\n        // check if a given element is managed or not. if not, add to our map. if drawing is not suspended then\n        // we'll also stash its dimensions; otherwise we'll do this in a lazy way through updateOffset.\n        var _manage = _currentInstance.manage = function (id, element, _transient) {\n            if (!managedElements[id]) {\n                managedElements[id] = {\n                    el: element,\n                    endpoints: [],\n                    connections: []\n                };\n\n                managedElements[id].info = _updateOffset({ elId: id, timestamp: _suspendedAt });\n                if (!_transient) {\n                    _currentInstance.fire(\"manageElement\", { id:id, info:managedElements[id].info, el:element });\n                }\n            }\n\n            return managedElements[id];\n        };\n\n        var _unmanage = function(id) {\n            if (managedElements[id]) {\n                delete managedElements[id];\n                _currentInstance.fire(\"unmanageElement\", id);\n            }\n        };\n\n        /**\n         * updates the offset and size for a given element, and stores the\n         * values. if 'offset' is not null we use that (it would have been\n         * passed in from a drag call) because it's faster; but if it is null,\n         * or if 'recalc' is true in order to force a recalculation, we get the current values.\n         */\n        var _updateOffset = this.updateOffset = function (params) {\n\n            var timestamp = params.timestamp, recalc = params.recalc, offset = params.offset, elId = params.elId, s;\n            if (_suspendDrawing && !timestamp) timestamp = _suspendedAt;\n            if (!recalc) {\n                if (timestamp && timestamp === offsetTimestamps[elId]) {\n                    return {o: params.offset || offsets[elId], s: sizes[elId]};\n                }\n            }\n            if (recalc || (!offset && offsets[elId] == null)) { // if forced repaint or no offset available, we recalculate.\n\n                // get the current size and offset, and store them\n                s = managedElements[elId] ? managedElements[elId].el : null;\n                if (s != null) {\n                    sizes[elId] = _currentInstance.getSize(s);\n                    offsets[elId] = _currentInstance.getOffset(s);\n                    offsetTimestamps[elId] = timestamp;\n                }\n            } else {\n                offsets[elId] = offset || offsets[elId];\n                if (sizes[elId] == null) {\n                    s = managedElements[elId].el;\n                    if (s != null) sizes[elId] = _currentInstance.getSize(s);\n                }\n                offsetTimestamps[elId] = timestamp;\n            }\n\n            if (offsets[elId] && !offsets[elId].right) {\n                offsets[elId].right = offsets[elId].left + sizes[elId][0];\n                offsets[elId].bottom = offsets[elId].top + sizes[elId][1];\n                offsets[elId].width = sizes[elId][0];\n                offsets[elId].height = sizes[elId][1];\n                offsets[elId].centerx = offsets[elId].left + (offsets[elId].width / 2);\n                offsets[elId].centery = offsets[elId].top + (offsets[elId].height / 2);\n            }\n\n            return {o: offsets[elId], s: sizes[elId]};\n        };\n\n        /**\n         * callback from the current library to tell us to prepare ourselves (attach\n         * mouse listeners etc; can't do that until the library has provided a bind method)\n         */\n        this.init = function () {\n            rendererTypes = root.jsPlumb.getRenderModes();\n\n            var _oneType = function (renderer, name, fn) {\n                root.jsPlumb.Connectors[renderer][name] = function () {\n                    fn.apply(this, arguments);\n                    root.jsPlumb.ConnectorRenderers[renderer].apply(this, arguments);\n                };\n                _ju.extend(root.jsPlumb.Connectors[renderer][name], [ fn, root.jsPlumb.ConnectorRenderers[renderer]]);\n            };\n\n            if (!root.jsPlumb.connectorsInitialized) {\n                for (var i = 0; i < connectorTypes.length; i++) {\n                    for (var j = 0; j < rendererTypes.length; j++) {\n                        _oneType(rendererTypes[j], connectorTypes[i][1], connectorTypes[i][0]);\n                    }\n\n                }\n                root.jsPlumb.connectorsInitialized = true;\n            }\n\n            if (!initialized) {\n                _getContainerFromDefaults();\n                _currentInstance.anchorManager = new root.jsPlumb.AnchorManager({jsPlumbInstance: _currentInstance});\n                initialized = true;\n                _currentInstance.fire(\"ready\", _currentInstance);\n            }\n        }.bind(this);\n\n        this.log = log;\n        this.jsPlumbUIComponent = jsPlumbUIComponent;\n\n        /*\n         * Creates an anchor with the given params.\n         *\n         *\n         * Returns: The newly created Anchor.\n         * Throws: an error if a named anchor was not found.\n         */\n        this.makeAnchor = function () {\n            var pp, _a = function (t, p) {\n                if (root.jsPlumb.Anchors[t]) return new root.jsPlumb.Anchors[t](p);\n                if (!_currentInstance.Defaults.DoNotThrowErrors)\n                    throw { msg: \"jsPlumb: unknown anchor type '\" + t + \"'\" };\n            };\n            if (arguments.length === 0) return null;\n            var specimen = arguments[0], elementId = arguments[1], jsPlumbInstance = arguments[2], newAnchor = null;\n            // if it appears to be an anchor already...\n            if (specimen.compute && specimen.getOrientation) return specimen;  //TODO hazy here about whether it should be added or is already added somehow.\n            // is it the name of an anchor type?\n            else if (typeof specimen == \"string\") {\n                newAnchor = _a(arguments[0], {elementId: elementId, jsPlumbInstance: _currentInstance});\n            }\n            // is it an array? it will be one of:\n            // \t\tan array of [spec, params] - this defines a single anchor, which may be dynamic, but has parameters.\n            //\t\tan array of arrays - this defines some dynamic anchors\n            //\t\tan array of numbers - this defines a single anchor.\n            else if (_ju.isArray(specimen)) {\n                if (_ju.isArray(specimen[0]) || _ju.isString(specimen[0])) {\n                    // if [spec, params] format\n                    if (specimen.length == 2 && _ju.isObject(specimen[1])) {\n                        // if first arg is a string, its a named anchor with params\n                        if (_ju.isString(specimen[0])) {\n                            pp = root.jsPlumb.extend({elementId: elementId, jsPlumbInstance: _currentInstance}, specimen[1]);\n                            newAnchor = _a(specimen[0], pp);\n                        }\n                        // otherwise first arg is array, second is params. we treat as a dynamic anchor, which is fine\n                        // even if the first arg has only one entry. you could argue all anchors should be implicitly dynamic in fact.\n                        else {\n                            pp = root.jsPlumb.extend({elementId: elementId, jsPlumbInstance: _currentInstance, anchors: specimen[0]}, specimen[1]);\n                            newAnchor = new root.jsPlumb.DynamicAnchor(pp);\n                        }\n                    }\n                    else\n                        newAnchor = new jsPlumb.DynamicAnchor({anchors: specimen, selector: null, elementId: elementId, jsPlumbInstance: _currentInstance});\n\n                }\n                else {\n                    var anchorParams = {\n                        x: specimen[0], y: specimen[1],\n                        orientation: (specimen.length >= 4) ? [ specimen[2], specimen[3] ] : [0, 0],\n                        offsets: (specimen.length >= 6) ? [ specimen[4], specimen[5] ] : [ 0, 0 ],\n                        elementId: elementId,\n                        jsPlumbInstance: _currentInstance,\n                        cssClass: specimen.length == 7 ? specimen[6] : null\n                    };\n                    newAnchor = new root.jsPlumb.Anchor(anchorParams);\n                    newAnchor.clone = function () {\n                        return new root.jsPlumb.Anchor(anchorParams);\n                    };\n                }\n            }\n\n            if (!newAnchor.id) newAnchor.id = \"anchor_\" + _idstamp();\n            return newAnchor;\n        };\n\n        /**\n         * makes a list of anchors from the given list of types or coords, eg\n         * [\"TopCenter\", \"RightMiddle\", \"BottomCenter\", [0, 1, -1, -1] ]\n         */\n        this.makeAnchors = function (types, elementId, jsPlumbInstance) {\n            var r = [];\n            for (var i = 0, ii = types.length; i < ii; i++) {\n                if (typeof types[i] == \"string\")\n                    r.push(root.jsPlumb.Anchors[types[i]]({elementId: elementId, jsPlumbInstance: jsPlumbInstance}));\n                else if (_ju.isArray(types[i]))\n                    r.push(_currentInstance.makeAnchor(types[i], elementId, jsPlumbInstance));\n            }\n            return r;\n        };\n\n        /**\n         * Makes a dynamic anchor from the given list of anchors (which may be in shorthand notation as strings or dimension arrays, or Anchor\n         * objects themselves) and the given, optional, anchorSelector function (jsPlumb uses a default if this is not provided; most people will\n         * not need to provide this - i think).\n         */\n        this.makeDynamicAnchor = function (anchors, anchorSelector) {\n            return new root.jsPlumb.DynamicAnchor({anchors: anchors, selector: anchorSelector, elementId: null, jsPlumbInstance: _currentInstance});\n        };\n\n// --------------------- makeSource/makeTarget ---------------------------------------------- \n\n        this.targetEndpointDefinitions = {};\n        this.sourceEndpointDefinitions = {};\n\n        var selectorFilter = function (evt, _el, selector, _instance, negate) {\n            var t = evt.target || evt.srcElement, ok = false,\n                sel = _instance.getSelector(_el, selector);\n            for (var j = 0; j < sel.length; j++) {\n                if (sel[j] == t) {\n                    ok = true;\n                    break;\n                }\n            }\n            return negate ? !ok : ok;\n        };\n\n        var _makeElementDropHandler = function (elInfo, p, dropOptions, isSource, isTarget) {\n            var proxyComponent = new jsPlumbUIComponent(p);\n            var _drop = p._jsPlumb.EndpointDropHandler({\n                jsPlumb: _currentInstance,\n                enabled: function () {\n                    return elInfo.def.enabled;\n                },\n                isFull: function () {\n                    var targetCount = _currentInstance.select({target: elInfo.id}).length;\n                    return elInfo.def.maxConnections > 0 && targetCount >= elInfo.def.maxConnections;\n                },\n                element: elInfo.el,\n                elementId: elInfo.id,\n                isSource: isSource,\n                isTarget: isTarget,\n                addClass: function (clazz) {\n                    _currentInstance.addClass(elInfo.el, clazz);\n                },\n                removeClass: function (clazz) {\n                    _currentInstance.removeClass(elInfo.el, clazz);\n                },\n                onDrop: function (jpc) {\n                    var source = jpc.endpoints[0];\n                    source.anchor.locked = false;\n                },\n                isDropAllowed: function () {\n                    return proxyComponent.isDropAllowed.apply(proxyComponent, arguments);\n                },\n                isRedrop:function(jpc) {\n                    return (jpc.suspendedElement != null && jpc.suspendedEndpoint != null && jpc.suspendedEndpoint.element === elInfo.el);\n                },\n                getEndpoint: function (jpc) {\n\n                    // make a new Endpoint for the target, or get it from the cache if uniqueEndpoint\n                    // is set. if its a redrop the new endpoint will be immediately cleaned up.\n\n                    var newEndpoint = elInfo.def.endpoint;\n\n                    // if no cached endpoint, or there was one but it has been cleaned up\n                    // (ie. detached), create a new one\n                    if (newEndpoint == null || newEndpoint._jsPlumb == null) {\n                        var eps = _currentInstance.deriveEndpointAndAnchorSpec(jpc.getType().join(\" \"), true);\n                        var pp = eps.endpoints ? root.jsPlumb.extend(p, {\n                            endpoint:elInfo.def.def.endpoint || eps.endpoints[1]\n                        }) :p;\n                        if (eps.anchors) {\n                            pp = root.jsPlumb.extend(pp, {\n                                anchor:elInfo.def.def.anchor || eps.anchors[1]\n                            });\n                        }\n                        newEndpoint = _currentInstance.addEndpoint(elInfo.el, pp);\n                        newEndpoint._mtNew = true;\n                    }\n\n                    if (p.uniqueEndpoint) {\n                        elInfo.def.endpoint = newEndpoint;\n                    }\n\n                    newEndpoint.setDeleteOnEmpty(true);\n\n                    // if connection is detachable, init the new endpoint to be draggable, to support that happening.\n                    if (jpc.isDetachable())\n                        newEndpoint.initDraggable();\n\n                    // if the anchor has a 'positionFinder' set, then delegate to that function to find\n                    // out where to locate the anchor.\n                    if (newEndpoint.anchor.positionFinder != null) {\n                        var dropPosition = _currentInstance.getUIPosition(arguments, _currentInstance.getZoom()),\n                            elPosition = _currentInstance.getOffset(elInfo.el),\n                            elSize = _currentInstance.getSize(elInfo.el),\n                            ap = dropPosition == null ? [0,0] : newEndpoint.anchor.positionFinder(dropPosition, elPosition, elSize, newEndpoint.anchor.constructorParams);\n\n                        newEndpoint.anchor.x = ap[0];\n                        newEndpoint.anchor.y = ap[1];\n                        // now figure an orientation for it..kind of hard to know what to do actually. probably the best thing i can do is to\n                        // support specifying an orientation in the anchor's spec. if one is not supplied then i will make the orientation\n                        // be what will cause the most natural link to the source: it will be pointing at the source, but it needs to be\n                        // specified in one axis only, and so how to make that choice? i think i will use whichever axis is the one in which\n                        // the target is furthest away from the source.\n                    }\n\n                    return newEndpoint;\n                },\n                maybeCleanup: function (ep) {\n                    if (ep._mtNew && ep.connections.length === 0) {\n                        _currentInstance.deleteObject({endpoint: ep});\n                    }\n                    else\n                        delete ep._mtNew;\n                }\n            });\n\n            // wrap drop events as needed and initialise droppable\n            var dropEvent = root.jsPlumb.dragEvents.drop;\n            dropOptions.scope = dropOptions.scope || (p.scope || _currentInstance.Defaults.Scope);\n            dropOptions[dropEvent] = _ju.wrap(dropOptions[dropEvent], _drop, true);\n\n            // if target, return true from the over event. this will cause katavorio to stop setting drops to hover\n            // if multipleDrop is set to false.\n            if (isTarget) {\n                dropOptions[root.jsPlumb.dragEvents.over] = function () { return true; };\n            }\n\n            // vanilla jsplumb only\n            if (p.allowLoopback === false) {\n                dropOptions.canDrop = function (_drag) {\n                    var de = _drag.getDragElement()._jsPlumbRelatedElement;\n                    return de != elInfo.el;\n                };\n            }\n            _currentInstance.initDroppable(elInfo.el, dropOptions, \"internal\");\n\n            return _drop;\n\n        };\n\n        // see API docs\n        this.makeTarget = function (el, params, referenceParams) {\n\n            // put jsplumb ref into params without altering the params passed in\n            var p = root.jsPlumb.extend({_jsPlumb: this}, referenceParams);\n            root.jsPlumb.extend(p, params);\n\n            var maxConnections = p.maxConnections || -1,\n\n                _doOne = function (el) {\n\n                    // get the element's id and store the endpoint definition for it.  jsPlumb.connect calls will look for one of these,\n                    // and use the endpoint definition if found.\n                    // decode the info for this element (id and element)\n                    var elInfo = _info(el),\n                        elid = elInfo.id,\n                        dropOptions = root.jsPlumb.extend({}, p.dropOptions || {}),\n                        type = p.connectionType || \"default\";\n\n                    this.targetEndpointDefinitions[elid] = this.targetEndpointDefinitions[elid] || {};\n\n                    _ensureContainer(elid);\n\n                    // if this is a group and the user has not mandated a rank, set to -1 so that Nodes takes\n                    // precedence.\n                    if (elInfo.el._isJsPlumbGroup && dropOptions.rank == null) {\n                        dropOptions.rank = -1;\n                    }\n\n                    // store the definition\n                    var _def = {\n                        def: root.jsPlumb.extend({}, p),\n                        uniqueEndpoint: p.uniqueEndpoint,\n                        maxConnections: maxConnections,\n                        enabled: true\n                    };\n                    elInfo.def = _def;\n                    this.targetEndpointDefinitions[elid][type] = _def;\n                    _makeElementDropHandler(elInfo, p, dropOptions, p.isSource === true, true);\n                    // stash the definition on the drop\n                    elInfo.el._katavorioDrop[elInfo.el._katavorioDrop.length - 1].targetDef = _def;\n\n                }.bind(this);\n\n            // make an array if only given one element\n            var inputs = el.length && el.constructor != String ? el : [ el ];\n\n            // register each one in the list.\n            for (var i = 0, ii = inputs.length; i < ii; i++) {\n                _doOne(inputs[i]);\n            }\n\n            return this;\n        };\n\n        // see api docs\n        this.unmakeTarget = function (el, doNotClearArrays) {\n            var info = _info(el);\n            _currentInstance.destroyDroppable(info.el, \"internal\");\n            if (!doNotClearArrays) {\n                delete this.targetEndpointDefinitions[info.id];\n            }\n\n            return this;\n        };\n\n        // see api docs\n        this.makeSource = function (el, params, referenceParams) {\n            var p = root.jsPlumb.extend({_jsPlumb: this}, referenceParams);\n            root.jsPlumb.extend(p, params);\n            var type = p.connectionType || \"default\";\n            var aae = _currentInstance.deriveEndpointAndAnchorSpec(type);\n            p.endpoint = p.endpoint || aae.endpoints[0];\n            p.anchor = p.anchor || aae.anchors[0];\n            var maxConnections = p.maxConnections || -1,\n                onMaxConnections = p.onMaxConnections,\n                _doOne = function (elInfo) {\n                    // get the element's id and store the endpoint definition for it.  jsPlumb.connect calls will look for one of these,\n                    // and use the endpoint definition if found.\n                    var elid = elInfo.id,\n                        _del = this.getElement(elInfo.el);\n\n                    this.sourceEndpointDefinitions[elid] = this.sourceEndpointDefinitions[elid] || {};\n                    _ensureContainer(elid);\n\n                    var _def = {\n                        def:root.jsPlumb.extend({}, p),\n                        uniqueEndpoint: p.uniqueEndpoint,\n                        maxConnections: maxConnections,\n                        enabled: true\n                    };\n\n\n                    this.sourceEndpointDefinitions[elid][type] = _def;\n                    elInfo.def = _def;\n\n                    var stopEvent = root.jsPlumb.dragEvents.stop,\n                        dragEvent = root.jsPlumb.dragEvents.drag,\n                        dragOptions = root.jsPlumb.extend({ }, p.dragOptions || {}),\n                        existingDrag = dragOptions.drag,\n                        existingStop = dragOptions.stop,\n                        ep = null,\n                        endpointAddedButNoDragYet = false;\n\n                    // set scope if its not set in dragOptions but was passed in in params\n                    dragOptions.scope = dragOptions.scope || p.scope;\n\n                    dragOptions[dragEvent] = _ju.wrap(dragOptions[dragEvent], function () {\n                        if (existingDrag) existingDrag.apply(this, arguments);\n                        endpointAddedButNoDragYet = false;\n                    });\n\n                    dragOptions[stopEvent] = _ju.wrap(dragOptions[stopEvent], function () {\n\n                        if (existingStop) existingStop.apply(this, arguments);\n                        this.currentlyDragging = false;\n                        if (ep._jsPlumb != null) { // if not cleaned up...\n\n                            // reset the anchor to the anchor that was initially provided. the one we were using to drag\n                            // the connection was just a placeholder that was located at the place the user pressed the\n                            // mouse button to initiate the drag.\n                            var anchorDef = p.anchor || this.Defaults.Anchor,\n                                oldAnchor = ep.anchor,\n                                oldConnection = ep.connections[0];\n\n                            var    newAnchor = this.makeAnchor(anchorDef, elid, this),\n                                _el = ep.element;\n\n                            // if the anchor has a 'positionFinder' set, then delegate to that function to find\n                            // out where to locate the anchor. issue 117.\n                            if (newAnchor.positionFinder != null) {\n                                var elPosition = _currentInstance.getOffset(_el),\n                                    elSize = this.getSize(_el),\n                                    dropPosition = { left: elPosition.left + (oldAnchor.x * elSize[0]), top: elPosition.top + (oldAnchor.y * elSize[1]) },\n                                    ap = newAnchor.positionFinder(dropPosition, elPosition, elSize, newAnchor.constructorParams);\n\n                                newAnchor.x = ap[0];\n                                newAnchor.y = ap[1];\n                            }\n\n                            ep.setAnchor(newAnchor, true);\n                            ep.repaint();\n                            this.repaint(ep.elementId);\n                            if (oldConnection != null) this.repaint(oldConnection.targetId);\n                        }\n                    }.bind(this));\n\n                    // when the user presses the mouse, add an Endpoint, if we are enabled.\n                    var mouseDownListener = function (e) {\n                        // on right mouse button, abort.\n                        if (e.which === 3 || e.button === 2) return;\n\n                        // TODO store def on element.\n                        var def = this.sourceEndpointDefinitions[elid][type];\n\n                        // if disabled, return.\n                        if (!def.enabled) return;\n\n                        elid = this.getId(this.getElement(elInfo.el)); // elid might have changed since this method was called to configure the element.\n\n                        // if a filter was given, run it, and return if it says no.\n                        if (p.filter) {\n                            var r = _ju.isString(p.filter) ? selectorFilter(e, elInfo.el, p.filter, this, p.filterExclude) : p.filter(e, elInfo.el);\n                            if (r === false) return;\n                        }\n\n                        // if maxConnections reached\n                        var sourceCount = this.select({source: elid}).length;\n                        if (def.maxConnections >= 0 && (sourceCount >= def.maxConnections)) {\n                            if (onMaxConnections) {\n                                onMaxConnections({\n                                    element: elInfo.el,\n                                    maxConnections: maxConnections\n                                }, e);\n                            }\n                            return false;\n                        }\n\n                        // find the position on the element at which the mouse was pressed; this is where the endpoint\n                        // will be located.\n                        var elxy = root.jsPlumb.getPositionOnElement(e, _del, _zoom);\n\n                        // we need to override the anchor in here, and force 'isSource', but we don't want to mess with\n                        // the params passed in, because after a connection is established we're going to reset the endpoint\n                        // to have the anchor we were given.\n                        var tempEndpointParams = {};\n                        root.jsPlumb.extend(tempEndpointParams, p);\n                        tempEndpointParams.isTemporarySource = true;\n                        tempEndpointParams.anchor = [ elxy[0], elxy[1] , 0, 0];\n                        tempEndpointParams.dragOptions = dragOptions;\n\n                        if (def.def.scope) tempEndpointParams.scope = def.def.scope;\n\n                        ep = this.addEndpoint(elid, tempEndpointParams);\n                        endpointAddedButNoDragYet = true;\n                        ep.setDeleteOnEmpty(true);\n\n                        // if unique endpoint and it's already been created, push it onto the endpoint we create. at the end\n                        // of a successful connection we'll switch to that endpoint.\n                        // TODO this is the same code as the programmatic endpoints create on line 1050 ish\n                        if (def.uniqueEndpoint) {\n                            if (!def.endpoint) {\n                                def.endpoint = ep;\n                                ep.setDeleteOnEmpty(false);\n                            }\n                            else\n                                ep.finalEndpoint = def.endpoint;\n                        }\n\n                        var _delTempEndpoint = function () {\n                            // this mouseup event is fired only if no dragging occurred, by jquery and yui, but for mootools\n                            // it is fired even if dragging has occurred, in which case we would blow away a perfectly\n                            // legitimate endpoint, were it not for this check.  the flag is set after adding an\n                            // endpoint and cleared in a drag listener we set in the dragOptions above.\n                            _currentInstance.off(ep.canvas, \"mouseup\", _delTempEndpoint);\n                            _currentInstance.off(elInfo.el, \"mouseup\", _delTempEndpoint);\n                            if (endpointAddedButNoDragYet) {\n                                endpointAddedButNoDragYet = false;\n                                _currentInstance.deleteEndpoint(ep);\n                            }\n                        };\n\n                        _currentInstance.on(ep.canvas, \"mouseup\", _delTempEndpoint);\n                        _currentInstance.on(elInfo.el, \"mouseup\", _delTempEndpoint);\n\n                        // optionally check for attributes to extract from the source element\n                        var payload = {};\n                        if (def.def.extract) {\n                            for (var att in def.def.extract) {\n                                var v = (e.srcElement || e.target).getAttribute(att);\n                                if (v) {\n                                    payload[def.def.extract[att]] = v;\n                                }\n                            }\n                        }\n\n                        // and then trigger its mousedown event, which will kick off a drag, which will start dragging\n                        // a new connection from this endpoint.\n                        _currentInstance.trigger(ep.canvas, \"mousedown\", e, payload);\n\n                        _ju.consume(e);\n\n                    }.bind(this);\n\n                    this.on(elInfo.el, \"mousedown\", mouseDownListener);\n                    _def.trigger = mouseDownListener;\n\n                    // if a filter was provided, set it as a dragFilter on the element,\n                    // to prevent the element drag function from kicking in when we want to\n                    // drag a new connection\n                    if (p.filter && (_ju.isString(p.filter) || _ju.isFunction(p.filter))) {\n                        _currentInstance.setDragFilter(elInfo.el, p.filter);\n                    }\n\n                    var dropOptions = root.jsPlumb.extend({}, p.dropOptions || {});\n\n                    _makeElementDropHandler(elInfo, p, dropOptions, true, p.isTarget === true);\n\n                }.bind(this);\n\n            var inputs = el.length && el.constructor != String ? el : [ el ];\n            for (var i = 0, ii = inputs.length; i < ii; i++) {\n                _doOne(_info(inputs[i]));\n            }\n\n            return this;\n        };\n\n        // see api docs\n        this.unmakeSource = function (el, connectionType, doNotClearArrays) {\n            var info = _info(el);\n            _currentInstance.destroyDroppable(info.el, \"internal\");\n            var eldefs = this.sourceEndpointDefinitions[info.id];\n            if (eldefs) {\n                for (var def in eldefs) {\n                    if (connectionType == null || connectionType === def) {\n                        var mouseDownListener = eldefs[def].trigger;\n                        if (mouseDownListener)\n                            _currentInstance.off(info.el, \"mousedown\", mouseDownListener);\n                        if (!doNotClearArrays) {\n                            delete this.sourceEndpointDefinitions[info.id][def];\n                        }\n                    }\n                }\n            }\n\n            return this;\n        };\n\n        // see api docs\n        this.unmakeEverySource = function () {\n            for (var i in this.sourceEndpointDefinitions)\n                _currentInstance.unmakeSource(i, null, true);\n\n            this.sourceEndpointDefinitions = {};\n            return this;\n        };\n\n        var _getScope = function (el, types, connectionType) {\n            types = _ju.isArray(types) ? types : [ types ];\n            var id = _getId(el);\n            connectionType = connectionType || \"default\";\n            for (var i = 0; i < types.length; i++) {\n                var eldefs = this[types[i]][id];\n                if (eldefs && eldefs[connectionType]) return eldefs[connectionType].def.scope || this.Defaults.Scope;\n            }\n        }.bind(this);\n\n        var _setScope = function (el, scope, types, connectionType) {\n            types = _ju.isArray(types) ? types : [ types ];\n            var id = _getId(el);\n            connectionType = connectionType || \"default\";\n            for (var i = 0; i < types.length; i++) {\n                var eldefs = this[types[i]][id];\n                if (eldefs && eldefs[connectionType]) {\n                    eldefs[connectionType].def.scope = scope;\n                }\n            }\n\n        }.bind(this);\n\n        this.getScope = function (el, scope) {\n            return _getScope(el, [ \"sourceEndpointDefinitions\", \"targetEndpointDefinitions\" ]);\n        };\n        this.getSourceScope = function (el) {\n            return _getScope(el, \"sourceEndpointDefinitions\");\n        };\n        this.getTargetScope = function (el) {\n            return _getScope(el, \"targetEndpointDefinitions\");\n        };\n        this.setScope = function (el, scope, connectionType) {\n            this.setSourceScope(el, scope, connectionType);\n            this.setTargetScope(el, scope, connectionType);\n        };\n        this.setSourceScope = function (el, scope, connectionType) {\n            _setScope(el, scope, \"sourceEndpointDefinitions\", connectionType);\n            // we get the source scope during the mousedown event, but we also want to set this.\n            this.setDragScope(el, scope);\n        };\n        this.setTargetScope = function (el, scope, connectionType) {\n            _setScope(el, scope, \"targetEndpointDefinitions\", connectionType);\n            this.setDropScope(el, scope);\n        };\n\n        // see api docs\n        this.unmakeEveryTarget = function () {\n            for (var i in this.targetEndpointDefinitions)\n                _currentInstance.unmakeTarget(i, true);\n\n            this.targetEndpointDefinitions = {};\n            return this;\n        };\n\n        // does the work of setting a source enabled or disabled.\n        var _setEnabled = function (type, el, state, toggle, connectionType) {\n            var a = type == \"source\" ? this.sourceEndpointDefinitions : this.targetEndpointDefinitions,\n                originalState, info, newState;\n\n            connectionType = connectionType || \"default\";\n\n            // a selector or an array\n            if (el.length && !_ju.isString(el)) {\n                originalState = [];\n                for (var i = 0, ii = el.length; i < ii; i++) {\n                    info = _info(el[i]);\n                    if (a[info.id] && a[info.id][connectionType]) {\n                        originalState[i] = a[info.id][connectionType].enabled;\n                        newState = toggle ? !originalState[i] : state;\n                        a[info.id][connectionType].enabled = newState;\n                        _currentInstance[newState ? \"removeClass\" : \"addClass\"](info.el, \"jtk-\" + type + \"-disabled\");\n                    }\n                }\n            }\n            // otherwise a DOM element or a String ID.\n            else {\n                info = _info(el);\n                var id = info.id;\n                if (a[id] && a[id][connectionType]) {\n                    originalState = a[id][connectionType].enabled;\n                    newState = toggle ? !originalState : state;\n                    a[id][connectionType].enabled = newState;\n                    _currentInstance[newState ? \"removeClass\" : \"addClass\"](info.el, \"jtk-\" + type + \"-disabled\");\n                }\n            }\n            return originalState;\n        }.bind(this);\n\n        var _first = function (el, fn) {\n            if (_ju.isString(el) || !el.length)\n                return fn.apply(this, [ el ]);\n            else if (el.length)\n                return fn.apply(this, [ el[0] ]);\n\n        }.bind(this);\n\n        this.toggleSourceEnabled = function (el, connectionType) {\n            _setEnabled(\"source\", el, null, true, connectionType);\n            return this.isSourceEnabled(el, connectionType);\n        };\n\n        this.setSourceEnabled = function (el, state, connectionType) {\n            return _setEnabled(\"source\", el, state, null, connectionType);\n        };\n        this.isSource = function (el, connectionType) {\n            connectionType = connectionType || \"default\";\n            return _first(el, function (_el) {\n                var eldefs = this.sourceEndpointDefinitions[_info(_el).id];\n                return eldefs != null && eldefs[connectionType] != null;\n            }.bind(this));\n        };\n        this.isSourceEnabled = function (el, connectionType) {\n            connectionType = connectionType || \"default\";\n            return _first(el, function (_el) {\n                var sep = this.sourceEndpointDefinitions[_info(_el).id];\n                return sep && sep[connectionType] && sep[connectionType].enabled === true;\n            }.bind(this));\n        };\n\n        this.toggleTargetEnabled = function (el, connectionType) {\n            _setEnabled(\"target\", el, null, true, connectionType);\n            return this.isTargetEnabled(el, connectionType);\n        };\n\n        this.isTarget = function (el, connectionType) {\n            connectionType = connectionType || \"default\";\n            return _first(el, function (_el) {\n                var eldefs = this.targetEndpointDefinitions[_info(_el).id];\n                return eldefs != null && eldefs[connectionType] != null;\n            }.bind(this));\n        };\n        this.isTargetEnabled = function (el, connectionType) {\n            connectionType = connectionType || \"default\";\n            return _first(el, function (_el) {\n                var tep = this.targetEndpointDefinitions[_info(_el).id];\n                return tep && tep[connectionType] && tep[connectionType].enabled === true;\n            }.bind(this));\n        };\n        this.setTargetEnabled = function (el, state, connectionType) {\n            return _setEnabled(\"target\", el, state, null, connectionType);\n        };\n\n// --------------------- end makeSource/makeTarget ---------------------------------------------- \t\t\t\t\n\n        this.ready = function (fn) {\n            _currentInstance.bind(\"ready\", fn);\n        };\n\n        var _elEach = function(el, fn) {\n            // support both lists...\n            if (typeof el == 'object' && el.length)\n                for (var i = 0, ii = el.length; i < ii; i++) {\n                    fn(el[i]);\n                }\n            else // ...and single strings or elements.\n                fn(el);\n\n            return _currentInstance;\n        };\n\n        // repaint some element's endpoints and connections\n        this.repaint = function (el, ui, timestamp) {\n            return _elEach(el, function(_el) {\n                _draw(_el, ui, timestamp);\n            });\n        };\n\n        this.revalidate = function (el, timestamp, isIdAlready) {\n            return _elEach(el, function(_el) {\n                var elId = isIdAlready ? _el : _currentInstance.getId(_el);\n                _currentInstance.updateOffset({ elId: elId, recalc: true, timestamp:timestamp });\n                var dm = _currentInstance.getDragManager();\n                if (dm) {\n                    dm.updateOffsets(elId);\n                }\n                _currentInstance.repaint(_el);\n            });\n        };\n\n        // repaint every endpoint and connection.\n        this.repaintEverything = function () {\n            // TODO this timestamp causes continuous anchors to not repaint properly.\n            // fix this. do not just take out the timestamp. it runs a lot faster with\n            // the timestamp included.\n            var timestamp = _timestamp(), elId;\n\n            for (elId in endpointsByElement) {\n                _currentInstance.updateOffset({ elId: elId, recalc: true, timestamp: timestamp });\n            }\n\n            for (elId in endpointsByElement) {\n                _draw(elId, null, timestamp);\n            }\n\n            return this;\n        };\n\n        this.removeAllEndpoints = function (el, recurse, affectedElements) {\n            affectedElements = affectedElements || [];\n            var _one = function (_el) {\n                var info = _info(_el),\n                    ebe = endpointsByElement[info.id],\n                    i, ii;\n\n                if (ebe) {\n                    affectedElements.push(info);\n                    for (i = 0, ii = ebe.length; i < ii; i++)\n                        _currentInstance.deleteEndpoint(ebe[i], false);\n                }\n                delete endpointsByElement[info.id];\n\n                if (recurse) {\n                    if (info.el && info.el.nodeType != 3 && info.el.nodeType != 8) {\n                        for (i = 0, ii = info.el.childNodes.length; i < ii; i++) {\n                            _one(info.el.childNodes[i]);\n                        }\n                    }\n                }\n\n            };\n            _one(el);\n            return this;\n        };\n\n        var _doRemove = function(info, affectedElements) {\n            _currentInstance.removeAllEndpoints(info.id, true, affectedElements);\n            var dm = _currentInstance.getDragManager();\n            var _one = function(_info) {\n\n                if (dm) {\n                    dm.elementRemoved(_info.id);\n                }\n                _currentInstance.anchorManager.clearFor(_info.id);\n                _currentInstance.anchorManager.removeFloatingConnection(_info.id);\n\n                if (_currentInstance.isSource(_info.el)) _currentInstance.unmakeSource(_info.el);\n                if (_currentInstance.isTarget(_info.el)) _currentInstance.unmakeTarget(_info.el);\n                _currentInstance.destroyDraggable(_info.el);\n                _currentInstance.destroyDroppable(_info.el);\n\n\n                delete _currentInstance.floatingConnections[_info.id];\n                delete managedElements[_info.id];\n                delete offsets[_info.id];\n                if (_info.el) {\n                    _currentInstance.removeElement(_info.el);\n                    _info.el._jsPlumb = null;\n                }\n            };\n\n            // remove all affected child elements\n            for (var ae = 1; ae < affectedElements.length; ae++) {\n                _one(affectedElements[ae]);\n            }\n            // and always remove the requested one from the dom.\n            _one(info);\n        };\n\n        /**\n         * Remove the given element, including cleaning up all endpoints registered for it.\n         * This is exposed in the public API but also used internally by jsPlumb when removing the\n         * element associated with a connection drag.\n         */\n        this.remove = function (el, doNotRepaint) {\n            var info = _info(el), affectedElements = [];\n            if (info.text) {\n                info.el.parentNode.removeChild(info.el);\n            }\n            else if (info.id) {\n                _currentInstance.batch(function () {\n                    _doRemove(info, affectedElements);\n                }, doNotRepaint === false);\n            }\n            return _currentInstance;\n        };\n\n        this.empty = function (el, doNotRepaint) {\n            var affectedElements = [];\n            var _one = function(el, dontRemoveFocus) {\n                var info = _info(el);\n                if (info.text) {\n                    info.el.parentNode.removeChild(info.el);\n                }\n                else if (info.el) {\n                    while(info.el.childNodes.length > 0) {\n                        _one(info.el.childNodes[0]);\n                    }\n                    if (!dontRemoveFocus) _doRemove(info, affectedElements);\n                }\n            };\n\n            _currentInstance.batch(function() {\n                _one(el, true);\n            }, doNotRepaint === false);\n\n            return _currentInstance;\n        };\n\n        this.reset = function () {\n            _currentInstance.silently(function() {\n                _hoverSuspended = false;\n                _currentInstance.removeAllGroups();\n                _currentInstance.removeGroupManager();\n                _currentInstance.deleteEveryEndpoint();\n                _currentInstance.unbind();\n                this.targetEndpointDefinitions = {};\n                this.sourceEndpointDefinitions = {};\n                connections.length = 0;\n                if (this.doReset) this.doReset();\n            }.bind(this));\n        };\n\n        var _clearObject = function (obj) {\n            if (obj.canvas && obj.canvas.parentNode)\n                obj.canvas.parentNode.removeChild(obj.canvas);\n            obj.cleanup();\n            obj.destroy();\n        };\n\n        this.clear = function () {\n            _currentInstance.select().each(_clearObject);\n            _currentInstance.selectEndpoints().each(_clearObject);\n\n            endpointsByElement = {};\n            endpointsByUUID = {};\n        };\n\n        this.setDefaultScope = function (scope) {\n            DEFAULT_SCOPE = scope;\n            return _currentInstance;\n        };\n\n        // sets whether or not some element should be currently draggable.\n        this.setDraggable = _setDraggable;\n\n        this.deriveEndpointAndAnchorSpec = function(type, dontPrependDefault) {\n            var bits = ((dontPrependDefault ? \"\" : \"default \") + type).split(/[\\s]/), eps = null, ep = null, a = null, as = null;\n            for (var i = 0; i < bits.length; i++) {\n                var _t = _currentInstance.getType(bits[i], \"connection\");\n                if (_t) {\n                    if (_t.endpoints) eps = _t.endpoints;\n                    if (_t.endpoint) ep = _t.endpoint;\n                    if (_t.anchors) as = _t.anchors;\n                    if (_t.anchor) a = _t.anchor;\n                }\n            }\n            return { endpoints: eps ? eps : [ ep, ep ], anchors: as ? as : [a, a ]};\n        };\n\n        // sets the id of some element, changing whatever we need to to keep track.\n        this.setId = function (el, newId, doNotSetAttribute) {\n            //\n            var id;\n\n            if (_ju.isString(el)) {\n                id = el;\n            }\n            else {\n                el = this.getElement(el);\n                id = this.getId(el);\n            }\n\n            var sConns = this.getConnections({source: id, scope: '*'}, true),\n                tConns = this.getConnections({target: id, scope: '*'}, true);\n\n            newId = \"\" + newId;\n\n            if (!doNotSetAttribute) {\n                el = this.getElement(id);\n                this.setAttribute(el, \"id\", newId);\n            }\n            else\n                el = this.getElement(newId);\n\n            endpointsByElement[newId] = endpointsByElement[id] || [];\n            for (var i = 0, ii = endpointsByElement[newId].length; i < ii; i++) {\n                endpointsByElement[newId][i].setElementId(newId);\n                endpointsByElement[newId][i].setReferenceElement(el);\n            }\n            delete endpointsByElement[id];\n\n            this.sourceEndpointDefinitions[newId] = this.sourceEndpointDefinitions[id];\n            delete this.sourceEndpointDefinitions[id];\n            this.targetEndpointDefinitions[newId] = this.targetEndpointDefinitions[id];\n            delete this.targetEndpointDefinitions[id];\n\n            this.anchorManager.changeId(id, newId);\n            var dm = this.getDragManager();\n            if (dm) {\n                dm.changeId(id, newId);\n            }\n            managedElements[newId] = managedElements[id];\n            delete managedElements[id];\n\n            var _conns = function (list, epIdx, type) {\n                for (var i = 0, ii = list.length; i < ii; i++) {\n                    list[i].endpoints[epIdx].setElementId(newId);\n                    list[i].endpoints[epIdx].setReferenceElement(el);\n                    list[i][type + \"Id\"] = newId;\n                    list[i][type] = el;\n                }\n            };\n            _conns(sConns, 0, \"source\");\n            _conns(tConns, 1, \"target\");\n\n            this.repaint(newId);\n        };\n\n        this.setDebugLog = function (debugLog) {\n            log = debugLog;\n        };\n\n        this.setSuspendDrawing = function (val, repaintAfterwards) {\n            var curVal = _suspendDrawing;\n            _suspendDrawing = val;\n            if (val) _suspendedAt = new Date().getTime(); else _suspendedAt = null;\n            if (repaintAfterwards) this.repaintEverything();\n            return curVal;\n        };\n\n        // returns whether or not drawing is currently suspended.\n        this.isSuspendDrawing = function () {\n            return _suspendDrawing;\n        };\n\n        // return timestamp for when drawing was suspended.\n        this.getSuspendedAt = function () {\n            return _suspendedAt;\n        };\n\n        this.batch = function (fn, doNotRepaintAfterwards) {\n            var _wasSuspended = this.isSuspendDrawing();\n            if (!_wasSuspended)\n                this.setSuspendDrawing(true);\n            try {\n                fn();\n            }\n            catch (e) {\n                _ju.log(\"Function run while suspended failed\", e);\n            }\n            if (!_wasSuspended)\n                this.setSuspendDrawing(false, !doNotRepaintAfterwards);\n        };\n\n        this.doWhileSuspended = this.batch;\n\n        this.getCachedData = _getCachedData;\n        this.timestamp = _timestamp;\n        this.show = function (el, changeEndpoints) {\n            _setVisible(el, \"block\", changeEndpoints);\n            return _currentInstance;\n        };\n\n        // TODO: update this method to return the current state.\n        this.toggleVisible = _toggleVisible;\n        this.toggleDraggable = _toggleDraggable;\n        this.addListener = this.bind;\n    };\n\n    _ju.extend(root.jsPlumbInstance, _ju.EventGenerator, {\n        setAttribute: function (el, a, v) {\n            this.setAttribute(el, a, v);\n        },\n        getAttribute: function (el, a) {\n            return this.getAttribute(root.jsPlumb.getElement(el), a);\n        },\n        convertToFullOverlaySpec: function(spec) {\n            if (_ju.isString(spec)) {\n                spec = [ spec, { } ];\n            }\n            spec[1].id = spec[1].id || _ju.uuid();\n            return spec;\n        },\n        registerConnectionType: function (id, type) {\n            this._connectionTypes[id] = root.jsPlumb.extend({}, type);\n            if (type.overlays) {\n                var to = {};\n                for (var i = 0; i < type.overlays.length; i++) {\n                    // if a string, convert to object representation so that we can store the typeid on it.\n                    // also assign an id.\n                    var fo = this.convertToFullOverlaySpec(type.overlays[i]);\n                    to[fo[1].id] = fo;\n                }\n                this._connectionTypes[id].overlays = to;\n            }\n        },\n        registerConnectionTypes: function (types) {\n            for (var i in types)\n                this.registerConnectionType(i, types[i]);\n        },\n        registerEndpointType: function (id, type) {\n            this._endpointTypes[id] = root.jsPlumb.extend({}, type);\n            if (type.overlays) {\n                var to = {};\n                for (var i = 0; i < type.overlays.length; i++) {\n                    // if a string, convert to object representation so that we can store the typeid on it.\n                    // also assign an id.\n                    var fo = this.convertToFullOverlaySpec(type.overlays[i]);\n                    to[fo[1].id] = fo;\n                }\n                this._endpointTypes[id].overlays = to;\n            }\n        },\n        registerEndpointTypes: function (types) {\n            for (var i in types)\n                //this._endpointTypes[i] = jsPlumb.extend({}, types[i]);\n                this.registerEndpointType(i, types[i]);\n        },\n        getType: function (id, typeDescriptor) {\n            return typeDescriptor === \"connection\" ? this._connectionTypes[id] : this._endpointTypes[id];\n        },\n        setIdChanged: function (oldId, newId) {\n            this.setId(oldId, newId, true);\n        },\n        // set parent: change the parent for some node and update all the registrations we need to.\n        setParent: function (el, newParent) {\n            var _dom = this.getElement(el),\n                _id = this.getId(_dom),\n                _pdom = this.getElement(newParent),\n                _pid = this.getId(_pdom),\n                dm = this.getDragManager();\n\n            _dom.parentNode.removeChild(_dom);\n            _pdom.appendChild(_dom);\n            if (dm) {\n                dm.setParent(_dom, _id, _pdom, _pid);\n            }\n        },\n        extend: function (o1, o2, names) {\n            var i;\n            if (names) {\n                for (i = 0; i < names.length; i++)\n                    o1[names[i]] = o2[names[i]];\n            }\n            else\n                for (i in o2) o1[i] = o2[i];\n            return o1;\n        },\n        floatingConnections: {},\n        getFloatingAnchorIndex: function (jpc) {\n            return jpc.endpoints[0].isFloating() ? 0 : jpc.endpoints[1].isFloating() ? 1 : -1;\n        }\n    });\n\n    jsPlumbInstance.prototype.Defaults = {\n        Anchor: \"Bottom\",\n        Anchors: [ null, null ],\n        ConnectionsDetachable: true,\n        ConnectionOverlays: [ ],\n        Connector: \"Bezier\",\n        Container: null,\n        DoNotThrowErrors: false,\n        DragOptions: { },\n        DropOptions: { },\n        Endpoint: \"Dot\",\n        EndpointOverlays: [ ],\n        Endpoints: [ null, null ],\n        EndpointStyle: { fill: \"#456\" },\n        EndpointStyles: [ null, null ],\n        EndpointHoverStyle: null,\n        EndpointHoverStyles: [ null, null ],\n        HoverPaintStyle: null,\n        LabelStyle: { color: \"black\" },\n        LogEnabled: false,\n        Overlays: [ ],\n        MaxConnections: 1,\n        PaintStyle: { \"stroke-width\": 4, stroke: \"#456\" },\n        ReattachConnections: false,\n        RenderMode: \"svg\",\n        Scope: \"jsPlumb_DefaultScope\"\n    };\n\n// --------------------- static instance + module registration -------------------------------------------\n\n// create static instance and assign to window if window exists.\t\n    var jsPlumb = new jsPlumbInstance();\n    // register on 'root' (lets us run on server or browser)\n    root.jsPlumb = jsPlumb;\n    // add 'getInstance' method to static instance\n    jsPlumb.getInstance = function (_defaults, overrideFns) {\n        var j = new jsPlumbInstance(_defaults);\n        if (overrideFns) {\n            for (var ovf in overrideFns) {\n                j[ovf] = overrideFns[ovf];\n            }\n        }\n        j.init();\n        return j;\n    };\n    jsPlumb.each = function (spec, fn) {\n        if (spec == null) return;\n        if (typeof spec === \"string\")\n            fn(jsPlumb.getElement(spec));\n        else if (spec.length != null) {\n            for (var i = 0; i < spec.length; i++)\n                fn(jsPlumb.getElement(spec[i]));\n        }\n        else\n            fn(spec); // assume it's an element.\n    };\n\n    // CommonJS\n    if (typeof exports !== 'undefined') {\n        exports.jsPlumb = jsPlumb;\n    }\n\n// --------------------- end static instance + AMD registration -------------------------------------------\t\t\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the base functionality for DOM type adapters.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    var root = this, _ju = root.jsPlumbUtil;\n\n    var _genLoc = function (prefix, e) {\n            if (e == null) return [ 0, 0 ];\n            var ts = _touches(e), t = _getTouch(ts, 0);\n            return [t[prefix + \"X\"], t[prefix + \"Y\"]];\n        },\n        _pageLocation = _genLoc.bind(this, \"page\"),\n        _screenLocation = _genLoc.bind(this, \"screen\"),\n        _clientLocation = _genLoc.bind(this, \"client\"),\n        _getTouch = function (touches, idx) {\n            return touches.item ? touches.item(idx) : touches[idx];\n        },\n        _touches = function (e) {\n            return e.touches && e.touches.length > 0 ? e.touches :\n                    e.changedTouches && e.changedTouches.length > 0 ? e.changedTouches :\n                    e.targetTouches && e.targetTouches.length > 0 ? e.targetTouches :\n                [ e ];\n        };\n\n    /**\n     Manages dragging for some instance of jsPlumb.\n\n     TODO instead of this being accessed directly, it should subscribe to events on the jsPlumb instance: every method\n     in here is called directly by jsPlumb. But what should happen is that we have unpublished events that this listens\n     to.  The only trick is getting one of these instantiated with every jsPlumb instance: it needs to have a hook somehow.\n     Basically the general idea is to pull ALL the drag code out (prototype method registrations plus this) into a\n     dedicated drag script), that does not necessarily need to be included.\n\n\n     */\n    var DragManager = function (_currentInstance) {\n        var _draggables = {}, _dlist = [], _delements = {}, _elementsWithEndpoints = {},\n        // elementids mapped to the draggable to which they belong.\n            _draggablesForElements = {};\n\n        /**\n         register some element as draggable.  right now the drag init stuff is done elsewhere, and it is\n         possible that will continue to be the case.\n         */\n        this.register = function (el) {\n            var id = _currentInstance.getId(el),\n                parentOffset = _currentInstance.getOffset(el);\n\n            if (!_draggables[id]) {\n                _draggables[id] = el;\n                _dlist.push(el);\n                _delements[id] = {};\n            }\n\n            // look for child elements that have endpoints and register them against this draggable.\n            var _oneLevel = function (p) {\n                if (p) {\n                    for (var i = 0; i < p.childNodes.length; i++) {\n                        if (p.childNodes[i].nodeType != 3 && p.childNodes[i].nodeType != 8) {\n                            var cEl = jsPlumb.getElement(p.childNodes[i]),\n                                cid = _currentInstance.getId(p.childNodes[i], null, true);\n                            if (cid && _elementsWithEndpoints[cid] && _elementsWithEndpoints[cid] > 0) {\n                                var cOff = _currentInstance.getOffset(cEl);\n                                _delements[id][cid] = {\n                                    id: cid,\n                                    offset: {\n                                        left: cOff.left - parentOffset.left,\n                                        top: cOff.top - parentOffset.top\n                                    }\n                                };\n                                _draggablesForElements[cid] = id;\n                            }\n                            _oneLevel(p.childNodes[i]);\n                        }\n                    }\n                }\n            };\n\n            _oneLevel(el);\n        };\n\n        // refresh the offsets for child elements of this element.\n        this.updateOffsets = function (elId, childOffsetOverrides) {\n            if (elId != null) {\n                childOffsetOverrides = childOffsetOverrides || {};\n                var domEl = jsPlumb.getElement(elId),\n                    id = _currentInstance.getId(domEl),\n                    children = _delements[id],\n                    parentOffset = _currentInstance.getOffset(domEl);\n\n                if (children) {\n                    for (var i in children) {\n                        if (children.hasOwnProperty(i)) {\n                            var cel = jsPlumb.getElement(i),\n                                cOff = childOffsetOverrides[i] || _currentInstance.getOffset(cel);\n\n                            // do not update if we have a value already and we'd just be writing 0,0\n                            if (cel.offsetParent == null && _delements[id][i] != null) continue;\n\n                            _delements[id][i] = {\n                                id: i,\n                                offset: {\n                                    left: cOff.left - parentOffset.left,\n                                    top: cOff.top - parentOffset.top\n                                }\n                            };\n                            _draggablesForElements[i] = id;\n                        }\n                    }\n                }\n            }\n        };\n\n        /**\n         notification that an endpoint was added to the given el.  we go up from that el's parent\n         node, looking for a parent that has been registered as a draggable. if we find one, we add this\n         el to that parent's list of elements to update on drag (if it is not there already)\n         */\n        this.endpointAdded = function (el, id) {\n\n            id = id || _currentInstance.getId(el);\n\n            var b = document.body,\n                p = el.parentNode;\n\n            _elementsWithEndpoints[id] = _elementsWithEndpoints[id] ? _elementsWithEndpoints[id] + 1 : 1;\n\n            while (p != null && p != b) {\n                var pid = _currentInstance.getId(p, null, true);\n                if (pid && _draggables[pid]) {\n                    var pLoc = _currentInstance.getOffset(p);\n\n                    if (_delements[pid][id] == null) {\n                        var cLoc = _currentInstance.getOffset(el);\n                        _delements[pid][id] = {\n                            id: id,\n                            offset: {\n                                left: cLoc.left - pLoc.left,\n                                top: cLoc.top - pLoc.top\n                            }\n                        };\n                        _draggablesForElements[id] = pid;\n                    }\n                    break;\n                }\n                p = p.parentNode;\n            }\n        };\n\n        this.endpointDeleted = function (endpoint) {\n            if (_elementsWithEndpoints[endpoint.elementId]) {\n                _elementsWithEndpoints[endpoint.elementId]--;\n                if (_elementsWithEndpoints[endpoint.elementId] <= 0) {\n                    for (var i in _delements) {\n                        if (_delements.hasOwnProperty(i) && _delements[i]) {\n                            delete _delements[i][endpoint.elementId];\n                            delete _draggablesForElements[endpoint.elementId];\n                        }\n                    }\n                }\n            }\n        };\n\n        this.changeId = function (oldId, newId) {\n            _delements[newId] = _delements[oldId];\n            _delements[oldId] = {};\n            _draggablesForElements[newId] = _draggablesForElements[oldId];\n            _draggablesForElements[oldId] = null;\n        };\n\n        this.getElementsForDraggable = function (id) {\n            return _delements[id];\n        };\n\n        this.elementRemoved = function (elementId) {\n            var elId = _draggablesForElements[elementId];\n            if (elId) {\n                delete _delements[elId][elementId];\n                delete _draggablesForElements[elementId];\n            }\n        };\n\n        this.reset = function () {\n            _draggables = {};\n            _dlist = [];\n            _delements = {};\n            _elementsWithEndpoints = {};\n        };\n\n        //\n        // notification drag ended. We check automatically if need to update some\n        // ancestor's offsets.\n        //\n        this.dragEnded = function (el) {\n            if (el.offsetParent != null) {\n                var id = _currentInstance.getId(el),\n                    ancestor = _draggablesForElements[id];\n\n                if (ancestor) this.updateOffsets(ancestor);\n            }\n        };\n\n        this.setParent = function (el, elId, p, pId, currentChildLocation) {\n            var current = _draggablesForElements[elId];\n            if (!_delements[pId]) {\n                _delements[pId] = {};\n            }\n            var pLoc = _currentInstance.getOffset(p),\n                cLoc = currentChildLocation || _currentInstance.getOffset(el);\n\n            if (current && _delements[current]) {\n                delete _delements[current][elId];\n            }\n\n            _delements[pId][elId] = {\n                id:elId,\n                offset : {\n                    left: cLoc.left - pLoc.left,\n                    top: cLoc.top - pLoc.top\n                }\n            };\n            _draggablesForElements[elId] = pId;\n        };\n\n        this.clearParent = function(el, elId) {\n            var current = _draggablesForElements[elId];\n            if (current) {\n                delete _delements[current][elId];\n                delete _draggablesForElements[elId];\n            }\n        };\n\n        this.revalidateParent = function(el, elId, childOffset) {\n            var current = _draggablesForElements[elId];\n            if (current) {\n                var co = {};\n                co[elId] = childOffset;\n                this.updateOffsets(current, co);\n                _currentInstance.revalidate(current);\n            }\n        };\n\n        this.getDragAncestor = function (el) {\n            var de = jsPlumb.getElement(el),\n                id = _currentInstance.getId(de),\n                aid = _draggablesForElements[id];\n\n            if (aid)\n                return jsPlumb.getElement(aid);\n            else\n                return null;\n        };\n\n    };\n\n    var trim = function (str) {\n            return str == null ? null : (str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, ''));\n        },\n        _setClassName = function (el, cn) {\n            cn = trim(cn);\n            if (typeof el.className.baseVal != \"undefined\")  // SVG\n                el.className.baseVal = cn;\n            else\n                el.className = cn;\n        },\n        _getClassName = function (el) {\n            return (typeof el.className.baseVal == \"undefined\") ? el.className : el.className.baseVal;\n        },\n        _classManip = function (el, classesToAdd, classesToRemove) {\n            classesToAdd = classesToAdd == null ? [] : _ju.isArray(classesToAdd) ? classesToAdd : classesToAdd.split(/\\s+/);\n            classesToRemove = classesToRemove == null ? [] : _ju.isArray(classesToRemove) ? classesToRemove : classesToRemove.split(/\\s+/);\n\n            var className = _getClassName(el),\n                curClasses = className.split(/\\s+/);\n\n            var _oneSet = function (add, classes) {\n                for (var i = 0; i < classes.length; i++) {\n                    if (add) {\n                        if (curClasses.indexOf(classes[i]) == -1)\n                            curClasses.push(classes[i]);\n                    }\n                    else {\n                        var idx = curClasses.indexOf(classes[i]);\n                        if (idx != -1)\n                            curClasses.splice(idx, 1);\n                    }\n                }\n            };\n\n            _oneSet(true, classesToAdd);\n            _oneSet(false, classesToRemove);\n\n            _setClassName(el, curClasses.join(\" \"));\n        };\n\n    root.jsPlumb.extend(root.jsPlumbInstance.prototype, {\n\n        headless: false,\n\n        pageLocation: _pageLocation,\n        screenLocation: _screenLocation,\n        clientLocation: _clientLocation,\n\n        getDragManager:function() {\n            if (this.dragManager == null)\n                this.dragManager = new DragManager(this);\n\n            return this.dragManager;\n        },\n\n        recalculateOffsets:function(elId) {\n            this.getDragManager().updateOffsets(elId);\n        },\n\n        createElement:function(tag, style, clazz, atts) {\n            return this.createElementNS(null, tag, style, clazz, atts);\n        },\n\n        createElementNS:function(ns, tag, style, clazz, atts) {\n            var e = ns == null ? document.createElement(tag) : document.createElementNS(ns, tag);\n            var i;\n            style = style || {};\n            for (i in style)\n                e.style[i] = style[i];\n\n            if (clazz)\n                e.className = clazz;\n\n            atts = atts || {};\n            for (i in atts)\n                e.setAttribute(i, \"\" + atts[i]);\n\n            return e;\n        },\n\n        getAttribute: function (el, attName) {\n            return el.getAttribute != null ? el.getAttribute(attName) : null;\n        },\n\n        setAttribute: function (el, a, v) {\n            if (el.setAttribute != null) el.setAttribute(a, v);\n        },\n\n        setAttributes: function (el, atts) {\n            for (var i in atts)\n                if (atts.hasOwnProperty(i)) el.setAttribute(i, atts[i]);\n        },\n        appendToRoot: function (node) {\n            document.body.appendChild(node);\n        },\n        getRenderModes: function () {\n            return [ \"svg\"  ];\n        },\n        getClass:_getClassName,\n        addClass: function (el, clazz) {\n            jsPlumb.each(el, function (e) {\n                _classManip(e, clazz);\n            });\n        },\n        hasClass: function (el, clazz) {\n            el = jsPlumb.getElement(el);\n            if (el.classList) return el.classList.contains(clazz);\n            else {\n                return _getClassName(el).indexOf(clazz) != -1;\n            }\n        },\n        removeClass: function (el, clazz) {\n            jsPlumb.each(el, function (e) {\n                _classManip(e, null, clazz);\n            });\n        },\n        updateClasses: function (el, toAdd, toRemove) {\n            jsPlumb.each(el, function (e) {\n                _classManip(e, toAdd, toRemove);\n            });\n        },\n        setClass: function (el, clazz) {\n            jsPlumb.each(el, function (e) {\n                _setClassName(e, clazz);\n            });\n        },\n        setPosition: function (el, p) {\n            el.style.left = p.left + \"px\";\n            el.style.top = p.top + \"px\";\n        },\n        getPosition: function (el) {\n            var _one = function (prop) {\n                var v = el.style[prop];\n                return v ? v.substring(0, v.length - 2) : 0;\n            };\n            return {\n                left: _one(\"left\"),\n                top: _one(\"top\")\n            };\n        },\n        getStyle:function(el, prop) {\n            if (typeof window.getComputedStyle !== 'undefined') {\n                return getComputedStyle(el, null).getPropertyValue(prop);\n            } else {\n                return el.currentStyle[prop];\n            }\n        },\n        getSelector: function (ctx, spec) {\n            var sel = null;\n            if (arguments.length == 1) {\n                sel = ctx.nodeType != null ? ctx : document.querySelectorAll(ctx);\n            }\n            else\n                sel = ctx.querySelectorAll(spec);\n\n            return sel;\n        },\n        getOffset:function(el, relativeToRoot, container) {\n            el = jsPlumb.getElement(el);\n            container = container || this.getContainer();\n            var out = {\n                    left: el.offsetLeft,\n                    top: el.offsetTop\n                },\n                op = (relativeToRoot  || (container != null && (el != container && el.offsetParent != container))) ?  el.offsetParent : null,\n                _maybeAdjustScroll = function(offsetParent) {\n                    if (offsetParent != null && offsetParent !== document.body && (offsetParent.scrollTop > 0 || offsetParent.scrollLeft > 0)) {\n                        out.left -= offsetParent.scrollLeft;\n                        out.top -= offsetParent.scrollTop;\n                    }\n                }.bind(this);\n\n            while (op != null) {\n                out.left += op.offsetLeft;\n                out.top += op.offsetTop;\n                _maybeAdjustScroll(op);\n                op = relativeToRoot ? op.offsetParent :\n                        op.offsetParent == container ? null : op.offsetParent;\n            }\n\n            // if container is scrolled and the element (or its offset parent) is not absolute or fixed, adjust accordingly.\n            if (container != null && !relativeToRoot && (container.scrollTop > 0 || container.scrollLeft > 0)) {\n                var pp = el.offsetParent != null ? this.getStyle(el.offsetParent, \"position\") : \"static\",\n                    p = this.getStyle(el, \"position\");\n                if (p !== \"absolute\" && p !== \"fixed\" && pp !== \"absolute\" && pp != \"fixed\") {\n                    out.left -= container.scrollLeft;\n                    out.top -= container.scrollTop;\n                }\n            }\n            return out;\n        },\n        //\n        // return x+y proportion of the given element's size corresponding to the location of the given event.\n        //\n        getPositionOnElement: function (evt, el, zoom) {\n            var box = typeof el.getBoundingClientRect !== \"undefined\" ? el.getBoundingClientRect() : { left: 0, top: 0, width: 0, height: 0 },\n                body = document.body,\n                docElem = document.documentElement,\n                scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop,\n                scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft,\n                clientTop = docElem.clientTop || body.clientTop || 0,\n                clientLeft = docElem.clientLeft || body.clientLeft || 0,\n                pst = 0,\n                psl = 0,\n                top = box.top + scrollTop - clientTop + (pst * zoom),\n                left = box.left + scrollLeft - clientLeft + (psl * zoom),\n                cl = jsPlumb.pageLocation(evt),\n                w = box.width || (el.offsetWidth * zoom),\n                h = box.height || (el.offsetHeight * zoom),\n                x = (cl[0] - left) / w,\n                y = (cl[1] - top) / h;\n\n            return [ x, y ];\n        },\n\n        /**\n         * Gets the absolute position of some element as read from the left/top properties in its style.\n         * @method getAbsolutePosition\n         * @param {Element} el The element to retrieve the absolute coordinates from. **Note** this is a DOM element, not a selector from the underlying library.\n         * @return {Number[]} [left, top] pixel values.\n         */\n        getAbsolutePosition: function (el) {\n            var _one = function (s) {\n                var ss = el.style[s];\n                if (ss) return parseFloat(ss.substring(0, ss.length - 2));\n            };\n            return [ _one(\"left\"), _one(\"top\") ];\n        },\n\n        /**\n         * Sets the absolute position of some element by setting the left/top properties in its style.\n         * @method setAbsolutePosition\n         * @param {Element} el The element to set the absolute coordinates on. **Note** this is a DOM element, not a selector from the underlying library.\n         * @param {Number[]} xy x and y coordinates\n         * @param {Number[]} [animateFrom] Optional previous xy to animate from.\n         * @param {Object} [animateOptions] Options for the animation.\n         */\n        setAbsolutePosition: function (el, xy, animateFrom, animateOptions) {\n            if (animateFrom) {\n                this.animate(el, {\n                    left: \"+=\" + (xy[0] - animateFrom[0]),\n                    top: \"+=\" + (xy[1] - animateFrom[1])\n                }, animateOptions);\n            }\n            else {\n                el.style.left = xy[0] + \"px\";\n                el.style.top = xy[1] + \"px\";\n            }\n        },\n        /**\n         * gets the size for the element, in an array : [ width, height ].\n         */\n        getSize: function (el) {\n            return [ el.offsetWidth, el.offsetHeight ];\n        },\n        getWidth: function (el) {\n            return el.offsetWidth;\n        },\n        getHeight: function (el) {\n            return el.offsetHeight;\n        },\n        getRenderMode : function() { return \"svg\"; }\n\n    });\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains code for components that support overlays.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;(function() {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    // ------------------------------ BEGIN OverlayCapablejsPlumbUIComponent --------------------------------------------\n\n    var _internalLabelOverlayId = \"__label\",\n    // this is a shortcut helper method to let people add a label as\n    // overlay.\n        _makeLabelOverlay = function (component, params) {\n\n            var _params = {\n                    cssClass: params.cssClass,\n                    labelStyle: component.labelStyle,\n                    id: _internalLabelOverlayId,\n                    component: component,\n                    _jsPlumb: component._jsPlumb.instance  // TODO not necessary, since the instance can be accessed through the component.\n                },\n                mergedParams = _jp.extend(_params, params);\n\n            return new _jp.Overlays[component._jsPlumb.instance.getRenderMode()].Label(mergedParams);\n        },\n        _processOverlay = function (component, o) {\n            var _newOverlay = null;\n            if (_ju.isArray(o)) {\t// this is for the shorthand [\"Arrow\", { width:50 }] syntax\n                // there's also a three arg version:\n                // [\"Arrow\", { width:50 }, {location:0.7}]\n                // which merges the 3rd arg into the 2nd.\n                var type = o[0],\n                // make a copy of the object so as not to mess up anyone else's reference...\n                    p = _jp.extend({component: component, _jsPlumb: component._jsPlumb.instance}, o[1]);\n                if (o.length == 3) _jp.extend(p, o[2]);\n                _newOverlay = new _jp.Overlays[component._jsPlumb.instance.getRenderMode()][type](p);\n            } else if (o.constructor == String) {\n                _newOverlay = new _jp.Overlays[component._jsPlumb.instance.getRenderMode()][o]({component: component, _jsPlumb: component._jsPlumb.instance});\n            } else {\n                _newOverlay = o;\n            }\n\n            _newOverlay.id = _newOverlay.id || _ju.uuid();\n            component.cacheTypeItem(\"overlay\", _newOverlay, _newOverlay.id);\n            //component._jsPlumb.overlays.push(_newOverlay);\n            component._jsPlumb.overlays[_newOverlay.id] = _newOverlay;\n\n            return _newOverlay;\n        };\n\n    _jp.OverlayCapableJsPlumbUIComponent = function (params) {\n\n        root.jsPlumbUIComponent.apply(this, arguments);\n        this._jsPlumb.overlays = {};\n        this._jsPlumb.overlayPositions = {};\n\n        if (params.label) {\n            this.getDefaultType().overlays[_internalLabelOverlayId] = [\"Label\", {\n                label: params.label,\n                location: params.labelLocation || this.defaultLabelLocation || 0.5,\n                labelStyle: params.labelStyle || this._jsPlumb.instance.Defaults.LabelStyle,\n                id:_internalLabelOverlayId\n            }];\n        }\n\n        this.setListenerComponent = function (c) {\n            if (this._jsPlumb) {\n                for (var i in this._jsPlumb.overlays)\n                    this._jsPlumb.overlays[i].setListenerComponent(c);\n            }\n        };\n    };\n\n    _jp.OverlayCapableJsPlumbUIComponent.applyType = function (component, t) {\n        if (t.overlays) {\n            // loop through the ones in the type. if already present on the component,\n            // dont remove or re-add.\n            var keep = {}, i;\n\n            for (i in t.overlays) {\n\n                var existing = component._jsPlumb.overlays[t.overlays[i][1].id];\n                if (existing) {\n                    // maybe update from data, if there were parameterised values for instance.\n                    existing.updateFrom(t.overlays[i][1]);\n                    keep[t.overlays[i][1].id] = true;\n                }\n                else {\n                    var c = component.getCachedTypeItem(\"overlay\", t.overlays[i][1].id);\n                    if (c != null) {\n                        c.reattach(component._jsPlumb.instance);\n                        c.setVisible(true);\n                        // maybe update from data, if there were parameterised values for instance.\n                        c.updateFrom(t.overlays[i][1]);\n                        component._jsPlumb.overlays[c.id] = c;\n                    }\n                    else {\n                        c = component.addOverlay(t.overlays[i], true);\n                    }\n                    keep[c.id] = true;\n                }\n            }\n\n            // now loop through the full overlays and remove those that we dont want to keep\n            for (i in component._jsPlumb.overlays) {\n                if (keep[component._jsPlumb.overlays[i].id] == null)\n                    component.removeOverlay(component._jsPlumb.overlays[i].id, true); // remove overlay but dont clean it up.\n                    // that would remove event listeners etc; overlays are never discarded by the types stuff, they are\n                    // just detached/reattached.\n            }\n        }\n    };\n\n    _ju.extend(_jp.OverlayCapableJsPlumbUIComponent, root.jsPlumbUIComponent, {\n\n        setHover: function (hover, ignoreAttachedElements) {\n            if (this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged()) {\n                for (var i in this._jsPlumb.overlays) {\n                    this._jsPlumb.overlays[i][hover ? \"addClass\" : \"removeClass\"](this._jsPlumb.instance.hoverClass);\n                }\n            }\n        },\n        addOverlay: function (overlay, doNotRepaint) {\n            var o = _processOverlay(this, overlay);\n            if (!doNotRepaint) this.repaint();\n            return o;\n        },\n        getOverlay: function (id) {\n            return this._jsPlumb.overlays[id];\n        },\n        getOverlays: function () {\n            return this._jsPlumb.overlays;\n        },\n        hideOverlay: function (id) {\n            var o = this.getOverlay(id);\n            if (o) o.hide();\n        },\n        hideOverlays: function () {\n            for (var i in this._jsPlumb.overlays)\n                this._jsPlumb.overlays[i].hide();\n        },\n        showOverlay: function (id) {\n            var o = this.getOverlay(id);\n            if (o) o.show();\n        },\n        showOverlays: function () {\n            for (var i in this._jsPlumb.overlays)\n                this._jsPlumb.overlays[i].show();\n        },\n        removeAllOverlays: function (doNotRepaint) {\n            for (var i in this._jsPlumb.overlays) {\n                if (this._jsPlumb.overlays[i].cleanup) this._jsPlumb.overlays[i].cleanup();\n            }\n\n            this._jsPlumb.overlays = {};\n            this._jsPlumb.overlayPositions = null;\n            if (!doNotRepaint)\n                this.repaint();\n        },\n        removeOverlay: function (overlayId, dontCleanup) {\n            var o = this._jsPlumb.overlays[overlayId];\n            if (o) {\n                o.setVisible(false);\n                if (!dontCleanup && o.cleanup) o.cleanup();\n                delete this._jsPlumb.overlays[overlayId];\n                if (this._jsPlumb.overlayPositions)\n                    delete this._jsPlumb.overlayPositions[overlayId];\n            }\n        },\n        removeOverlays: function () {\n            for (var i = 0, j = arguments.length; i < j; i++)\n                this.removeOverlay(arguments[i]);\n        },\n        moveParent: function (newParent) {\n            if (this.bgCanvas) {\n                this.bgCanvas.parentNode.removeChild(this.bgCanvas);\n                newParent.appendChild(this.bgCanvas);\n            }\n\n            if (this.canvas && this.canvas.parentNode) {\n                this.canvas.parentNode.removeChild(this.canvas);\n                newParent.appendChild(this.canvas);\n\n                for (var i in this._jsPlumb.overlays) {\n                    if (this._jsPlumb.overlays[i].isAppendedAtTopLevel) {\n                        var el = this._jsPlumb.overlays[i].getElement();\n                        el.parentNode.removeChild(el);\n                        newParent.appendChild(el);\n                    }\n                }\n            }\n        },\n        getLabel: function () {\n            var lo = this.getOverlay(_internalLabelOverlayId);\n            return lo != null ? lo.getLabel() : null;\n        },\n        getLabelOverlay: function () {\n            return this.getOverlay(_internalLabelOverlayId);\n        },\n        setLabel: function (l) {\n            var lo = this.getOverlay(_internalLabelOverlayId);\n            if (!lo) {\n                var params = l.constructor == String || l.constructor == Function ? { label: l } : l;\n                lo = _makeLabelOverlay(this, params);\n                this._jsPlumb.overlays[_internalLabelOverlayId] = lo;\n            }\n            else {\n                if (l.constructor == String || l.constructor == Function) lo.setLabel(l);\n                else {\n                    if (l.label) lo.setLabel(l.label);\n                    if (l.location) lo.setLocation(l.location);\n                }\n            }\n\n            if (!this._jsPlumb.instance.isSuspendDrawing())\n                this.repaint();\n        },\n        cleanup: function (force) {\n            for (var i in this._jsPlumb.overlays) {\n                this._jsPlumb.overlays[i].cleanup(force);\n                this._jsPlumb.overlays[i].destroy(force);\n            }\n            if (force) {\n                this._jsPlumb.overlays = {};\n                this._jsPlumb.overlayPositions = null;\n            }\n        },\n        setVisible: function (v) {\n            this[v ? \"showOverlays\" : \"hideOverlays\"]();\n        },\n        setAbsoluteOverlayPosition: function (overlay, xy) {\n            this._jsPlumb.overlayPositions[overlay.id] = xy;\n        },\n        getAbsoluteOverlayPosition: function (overlay) {\n            return this._jsPlumb.overlayPositions ? this._jsPlumb.overlayPositions[overlay.id] : null;\n        },\n        _clazzManip:function(action, clazz, dontUpdateOverlays) {\n            if (!dontUpdateOverlays) {\n                for (var i in this._jsPlumb.overlays) {\n                    this._jsPlumb.overlays[i][action + \"Class\"](clazz);\n                }\n            }\n        },\n        addClass:function(clazz, dontUpdateOverlays) {\n            this._clazzManip(\"add\", clazz, dontUpdateOverlays)\n        },\n        removeClass:function(clazz, dontUpdateOverlays) {\n            this._clazzManip(\"remove\", clazz, dontUpdateOverlays)\n        }\n    });\n\n// ------------------------------ END OverlayCapablejsPlumbUIComponent --------------------------------------------\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the code for Endpoints.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    // create the drag handler for a connection\n    var _makeConnectionDragHandler = function (endpoint, placeholder, _jsPlumb) {\n        var stopped = false;\n        return {\n            drag: function () {\n                if (stopped) {\n                    stopped = false;\n                    return true;\n                }\n\n                if (placeholder.element) {\n                    var _ui = _jsPlumb.getUIPosition(arguments, _jsPlumb.getZoom());\n                    if (_ui != null) jsPlumb.setPosition(placeholder.element, _ui);\n                    _jsPlumb.repaint(placeholder.element, _ui);\n                    // always repaint the source endpoint, because only continuous/dynamic anchors cause the endpoint\n                    // to be repainted, so static anchors need to be told (or the endpoint gets dragged around)\n                    endpoint.paint({anchorPoint:endpoint.anchor.getCurrentLocation({element:endpoint})});\n                }\n            },\n            stopDrag: function () {\n                stopped = true;\n            }\n        };\n    };\n\n    // creates a placeholder div for dragging purposes, adds it, and pre-computes its offset.\n    var _makeDraggablePlaceholder = function (placeholder, _jsPlumb, ipco, ips) {\n        var n = jsPlumb.createElement(\"div\", { position : \"absolute\" });\n        _jsPlumb.appendElement(n);\n        var id = _jsPlumb.getId(n);\n        jsPlumb.setPosition(n, ipco);\n        n.style.width = ips[0] + \"px\";\n        n.style.height = ips[1] + \"px\";\n        _jsPlumb.manage(id, n, true); // TRANSIENT MANAGE\n        // create and assign an id, and initialize the offset.\n        placeholder.id = id;\n        placeholder.element = n;\n    };\n\n    // create a floating endpoint (for drag connections)\n    var _makeFloatingEndpoint = function (paintStyle, referenceAnchor, endpoint, referenceCanvas, sourceElement, _jsPlumb, _newEndpoint, scope) {\n        var floatingAnchor = new _jp.FloatingAnchor({ reference: referenceAnchor, referenceCanvas: referenceCanvas, jsPlumbInstance: _jsPlumb });\n        //setting the scope here should not be the way to fix that mootools issue.  it should be fixed by not\n        // adding the floating endpoint as a droppable.  that makes more sense anyway!\n        // TRANSIENT MANAGE\n        return _newEndpoint({\n            paintStyle: paintStyle,\n            endpoint: endpoint,\n            anchor: floatingAnchor,\n            source: sourceElement,\n            scope: scope\n        });\n    };\n\n    var typeParameters = [ \"connectorStyle\", \"connectorHoverStyle\", \"connectorOverlays\",\n        \"connector\", \"connectionType\", \"connectorClass\", \"connectorHoverClass\" ];\n\n    // a helper function that tries to find a connection to the given element, and returns it if so. if elementWithPrecedence is null,\n    // or no connection to it is found, we return the first connection in our list.\n    var findConnectionToUseForDynamicAnchor = function (ep, elementWithPrecedence) {\n        var idx = 0;\n        if (elementWithPrecedence != null) {\n            for (var i = 0; i < ep.connections.length; i++) {\n                if (ep.connections[i].sourceId == elementWithPrecedence || ep.connections[i].targetId == elementWithPrecedence) {\n                    idx = i;\n                    break;\n                }\n            }\n        }\n\n        return ep.connections[idx];\n    };\n\n    _jp.Endpoint = function (params) {\n        var _jsPlumb = params._jsPlumb,\n            _newConnection = params.newConnection,\n            _newEndpoint = params.newEndpoint;\n\n        this.idPrefix = \"_jsplumb_e_\";\n        this.defaultLabelLocation = [ 0.5, 0.5 ];\n        this.defaultOverlayKeys = [\"Overlays\", \"EndpointOverlays\"];\n        _jp.OverlayCapableJsPlumbUIComponent.apply(this, arguments);\n\n// TYPE\n\n        this.appendToDefaultType({\n            connectionType:params.connectionType,\n            maxConnections: params.maxConnections == null ? this._jsPlumb.instance.Defaults.MaxConnections : params.maxConnections, // maximum number of connections this endpoint can be the source of.,\n            paintStyle: params.endpointStyle || params.paintStyle || params.style || this._jsPlumb.instance.Defaults.EndpointStyle || _jp.Defaults.EndpointStyle,\n            hoverPaintStyle: params.endpointHoverStyle || params.hoverPaintStyle || this._jsPlumb.instance.Defaults.EndpointHoverStyle || _jp.Defaults.EndpointHoverStyle,\n            connectorStyle: params.connectorStyle,\n            connectorHoverStyle: params.connectorHoverStyle,\n            connectorClass: params.connectorClass,\n            connectorHoverClass: params.connectorHoverClass,\n            connectorOverlays: params.connectorOverlays,\n            connector: params.connector,\n            connectorTooltip: params.connectorTooltip\n        });\n\n// END TYPE\n\n        this._jsPlumb.enabled = !(params.enabled === false);\n        this._jsPlumb.visible = true;\n        this.element = _jp.getElement(params.source);\n        this._jsPlumb.uuid = params.uuid;\n        this._jsPlumb.floatingEndpoint = null;\n        var inPlaceCopy = null;\n        if (this._jsPlumb.uuid) params.endpointsByUUID[this._jsPlumb.uuid] = this;\n        this.elementId = params.elementId;\n        this.dragProxy = params.dragProxy;\n\n        this._jsPlumb.connectionCost = params.connectionCost;\n        this._jsPlumb.connectionsDirected = params.connectionsDirected;\n        this._jsPlumb.currentAnchorClass = \"\";\n        this._jsPlumb.events = {};\n\n        var deleteOnEmpty = params.deleteOnEmpty === true;\n        this.setDeleteOnEmpty = function(d) { deleteOnEmpty = d; };\n\n        var _updateAnchorClass = function () {\n            // stash old, get new\n            var oldAnchorClass = _jsPlumb.endpointAnchorClassPrefix + \"-\" + this._jsPlumb.currentAnchorClass;\n            this._jsPlumb.currentAnchorClass = this.anchor.getCssClass();\n            var anchorClass = _jsPlumb.endpointAnchorClassPrefix + (this._jsPlumb.currentAnchorClass ? \"-\" + this._jsPlumb.currentAnchorClass : \"\");\n\n            this.removeClass(oldAnchorClass);\n            this.addClass(anchorClass);\n            // add and remove at the same time to reduce the number of reflows.\n            _jp.updateClasses(this.element, anchorClass, oldAnchorClass);\n        }.bind(this);\n\n        this.prepareAnchor = function(anchorParams) {\n            var a = this._jsPlumb.instance.makeAnchor(anchorParams, this.elementId, _jsPlumb);\n            a.bind(\"anchorChanged\", function (currentAnchor) {\n                this.fire(\"anchorChanged\", {endpoint: this, anchor: currentAnchor});\n                _updateAnchorClass();\n            }.bind(this));\n            return a;\n        };\n\n        this.setPreparedAnchor = function(anchor, doNotRepaint) {\n            this._jsPlumb.instance.continuousAnchorFactory.clear(this.elementId);\n            this.anchor = anchor;\n            _updateAnchorClass();\n\n            if (!doNotRepaint)\n                this._jsPlumb.instance.repaint(this.elementId);\n\n            return this;\n        };\n\n        this.setAnchor = function (anchorParams, doNotRepaint) {\n            var a = this.prepareAnchor(anchorParams);\n            this.setPreparedAnchor(a, doNotRepaint);\n            return this;\n        };\n\n        var internalHover = function (state) {\n            if (this.connections.length > 0) {\n                for (var i = 0; i < this.connections.length; i++)\n                    this.connections[i].setHover(state, false);\n            }\n            else\n                this.setHover(state);\n        }.bind(this);\n\n        this.bind(\"mouseover\", function () {\n            internalHover(true);\n        });\n        this.bind(\"mouseout\", function () {\n            internalHover(false);\n        });\n\n        // ANCHOR MANAGER\n        if (!params._transient) // in place copies, for example, are transient.  they will never need to be retrieved during a paint cycle, because they dont move, and then they are deleted.\n            this._jsPlumb.instance.anchorManager.add(this, this.elementId);\n\n        this.prepareEndpoint = function(ep, typeId) {\n            var _e = function (t, p) {\n                var rm = _jsPlumb.getRenderMode();\n                if (_jp.Endpoints[rm][t]) return new _jp.Endpoints[rm][t](p);\n                if (!_jsPlumb.Defaults.DoNotThrowErrors)\n                    throw { msg: \"jsPlumb: unknown endpoint type '\" + t + \"'\" };\n            };\n\n            var endpointArgs = {\n                _jsPlumb: this._jsPlumb.instance,\n                cssClass: params.cssClass,\n                container: params.container,\n                tooltip: params.tooltip,\n                connectorTooltip: params.connectorTooltip,\n                endpoint: this\n            };\n\n            var endpoint;\n\n            if (_ju.isString(ep))\n                endpoint = _e(ep, endpointArgs);\n            else if (_ju.isArray(ep)) {\n                endpointArgs = _ju.merge(ep[1], endpointArgs);\n                endpoint = _e(ep[0], endpointArgs);\n            }\n            else {\n                endpoint = ep.clone();\n            }\n\n            // assign a clone function using a copy of endpointArgs. this is used when a drag starts: the endpoint that was dragged is cloned,\n            // and the clone is left in its place while the original one goes off on a magical journey.\n            // the copy is to get around a closure problem, in which endpointArgs ends up getting shared by\n            // the whole world.\n            //var argsForClone = jsPlumb.extend({}, endpointArgs);\n            endpoint.clone = function () {\n                // TODO this, and the code above, can be refactored to be more dry.\n                if (_ju.isString(ep))\n                    return _e(ep, endpointArgs);\n                else if (_ju.isArray(ep)) {\n                    endpointArgs = _ju.merge(ep[1], endpointArgs);\n                    return _e(ep[0], endpointArgs);\n                }\n            }.bind(this);\n\n            endpoint.typeId = typeId;\n            return endpoint;\n        };\n\n        this.setEndpoint = function(ep, doNotRepaint) {\n            var _ep = this.prepareEndpoint(ep);\n            this.setPreparedEndpoint(_ep, true);\n        };\n\n        this.setPreparedEndpoint = function (ep, doNotRepaint) {\n            if (this.endpoint != null) {\n                this.endpoint.cleanup();\n                this.endpoint.destroy();\n            }\n            this.endpoint = ep;\n            this.type = this.endpoint.type;\n            this.canvas = this.endpoint.canvas;\n        };\n\n        _jp.extend(this, params, typeParameters);\n\n        this.isSource = params.isSource || false;\n        this.isTemporarySource = params.isTemporarySource || false;\n        this.isTarget = params.isTarget || false;\n\n        this.connections = params.connections || [];\n        this.connectorPointerEvents = params[\"connector-pointer-events\"];\n\n        this.scope = params.scope || _jsPlumb.getDefaultScope();\n        this.timestamp = null;\n        this.reattachConnections = params.reattach || _jsPlumb.Defaults.ReattachConnections;\n        this.connectionsDetachable = _jsPlumb.Defaults.ConnectionsDetachable;\n        if (params.connectionsDetachable === false || params.detachable === false)\n            this.connectionsDetachable = false;\n        this.dragAllowedWhenFull = params.dragAllowedWhenFull !== false;\n\n        if (params.onMaxConnections)\n            this.bind(\"maxConnections\", params.onMaxConnections);\n\n        //\n        // add a connection. not part of public API.\n        //\n        this.addConnection = function (connection) {\n            this.connections.push(connection);\n            this[(this.connections.length > 0 ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointConnectedClass);\n            this[(this.isFull() ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointFullClass);\n        };\n\n        this.detachFromConnection = function (connection, idx, doNotCleanup) {\n            idx = idx == null ? this.connections.indexOf(connection) : idx;\n            if (idx >= 0) {\n                this.connections.splice(idx, 1);\n                this[(this.connections.length > 0 ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointConnectedClass);\n                this[(this.isFull() ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointFullClass);\n            }\n\n            //if ((this._forceDeleteOnDetach || (!doNotCleanup && this._deleteOnDetach)) && this.connections.length === 0) {\n            if (!doNotCleanup && deleteOnEmpty && this.connections.length === 0) {\n                _jsPlumb.deleteObject({\n                    endpoint: this,\n                    fireEvent: false,\n                    deleteAttachedObjects: doNotCleanup !== true\n                });\n            }\n        };\n\n        this.deleteEveryConnection = function(params) {\n            var c = this.connections.length;\n            for (var i = 0; i < c; i++) {\n                _jsPlumb.deleteConnection(this.connections[0], params);\n            }\n        };\n\n        //this.detach = function (connection, ignoreTarget, forceDetach, fireEvent, originalEvent, endpointBeingDeleted, connectionIndex) {\n\n//        this.detach = function (params) {\n//            var connectionIndex = params.connectionIndex,\n//                connection = params.connection,\n//                ignoreTarget = params.ignoreTarget,\n//                fireEvent = params.fireEvent,\n//                originalEvent = params.originalEvent,\n//                endpointBeingDeleted = params.endpointBeingDeleted,\n//                forceDetach = params.forceDetach;\n//\n//            var idx = connectionIndex == null ? this.connections.indexOf(connection) : connectionIndex,\n//                actuallyDetached = false;\n//            fireEvent = (fireEvent !== false);\n//\n//            if (idx >= 0) {\n//\n//                if (forceDetach || connection._forceDetach || (connection.isDetachable() && connection.isDetachAllowed(connection) && this.isDetachAllowed(connection) && _jsPlumb.checkCondition(\"beforeDetach\", connection, endpointBeingDeleted) )) {\n//\n//                    _jsPlumb.deleteObject({\n//                        connection: connection,\n//                        fireEvent: (!ignoreTarget && fireEvent),\n//                        originalEvent: originalEvent,\n//                        deleteAttachedObjects:params.deleteAttachedObjects\n//                        //deleteAttachedObjects:null\n//                    });\n//                    actuallyDetached = true;\n//                }\n//            }\n//            return actuallyDetached;\n//        };\n\n//        this.detachAll = function (fireEvent, forceDetach) {\n//            var unaffectedConns = [];\n//            while (this.connections.length > 0) {\n//                // TODO this could pass the index in to the detach method to save some time (index will always be zero in this while loop)\n//                var actuallyDetached = _jsPlumb.detach({\n//                    connection:this.connections[0],\n//                    ignoreTarget:false,\n//                    forceDetach:forceDetach === true,\n//                    fireEvent:fireEvent !== false,\n//                    originalEvent:null,\n//                    endpointBeingDeleted:this,\n//                    connectionIndex:0\n//                });\n//                if (!actuallyDetached) {\n//                    unaffectedConns.push(this.connections[0]);\n//                    this.connections.splice(0, 1);\n//                }\n//            }\n//            this.connections = unaffectedConns;\n//            return this;\n//        };\n\n        this.detachFrom = function (targetEndpoint, fireEvent, originalEvent) {\n            var c = [];\n            for (var i = 0; i < this.connections.length; i++) {\n                if (this.connections[i].endpoints[1] == targetEndpoint || this.connections[i].endpoints[0] == targetEndpoint) {\n                    c.push(this.connections[i]);\n                }\n            }\n            var count = c.length;\n            for (var j = 0; j < count; j++) {\n//                this.detach({\n//                    connection:c[j],\n//                    ignoreTarget:false,\n//                    forceDetach:true,\n//                    fireEvent:fireEvent,\n//                    originalEvent:originalEvent\n//                });\n                _jsPlumb.deleteConnection(c[0]);\n            }\n            return this;\n        };\n\n        this.getElement = function () {\n            return this.element;\n        };\n\n        this.setElement = function (el) {\n            var parentId = this._jsPlumb.instance.getId(el),\n                curId = this.elementId;\n            // remove the endpoint from the list for the current endpoint's element\n            _ju.removeWithFunction(params.endpointsByElement[this.elementId], function (e) {\n                return e.id == this.id;\n            }.bind(this));\n            this.element = _jp.getElement(el);\n            this.elementId = _jsPlumb.getId(this.element);\n            _jsPlumb.anchorManager.rehomeEndpoint(this, curId, this.element);\n            _jsPlumb.dragManager.endpointAdded(this.element);\n            _ju.addToList(params.endpointsByElement, parentId, this);\n            return this;\n        };\n\n        /**\n         * private but must be exposed.\n         */\n        this.makeInPlaceCopy = function () {\n            var loc = this.anchor.getCurrentLocation({element: this}),\n                o = this.anchor.getOrientation(this),\n                acc = this.anchor.getCssClass(),\n                inPlaceAnchor = {\n                    bind: function () {\n                    },\n                    compute: function () {\n                        return [ loc[0], loc[1] ];\n                    },\n                    getCurrentLocation: function () {\n                        return [ loc[0], loc[1] ];\n                    },\n                    getOrientation: function () {\n                        return o;\n                    },\n                    getCssClass: function () {\n                        return acc;\n                    }\n                };\n\n            return _newEndpoint({\n                dropOptions: params.dropOptions,\n                anchor: inPlaceAnchor,\n                source: this.element,\n                paintStyle: this.getPaintStyle(),\n                endpoint: params.hideOnDrag ? \"Blank\" : this.endpoint,\n                _transient: true,\n                scope: this.scope,\n                reference:this\n            });\n        };\n\n        /**\n         * returns a connection from the pool; used when dragging starts.  just gets the head of the array if it can.\n         */\n        this.connectorSelector = function () {\n            var candidate = this.connections[0];\n            // SP target source refactor\n            if (/*this.isTarget && */candidate) return candidate;\n            else {\n                return (this.connections.length < this._jsPlumb.maxConnections) || this._jsPlumb.maxConnections == -1 ? null : candidate;\n            }\n        };\n\n        this.setStyle = this.setPaintStyle;\n\n        this.paint = function (params) {\n            params = params || {};\n            var timestamp = params.timestamp, recalc = !(params.recalc === false);\n            if (!timestamp || this.timestamp !== timestamp) {\n\n                var info = _jsPlumb.updateOffset({ elId: this.elementId, timestamp: timestamp });\n\n                var xy = params.offset ? params.offset.o : info.o;\n                if (xy != null) {\n                    var ap = params.anchorPoint, connectorPaintStyle = params.connectorPaintStyle;\n                    if (ap == null) {\n                        var wh = params.dimensions || info.s,\n                            anchorParams = { xy: [ xy.left, xy.top ], wh: wh, element: this, timestamp: timestamp };\n                        if (recalc && this.anchor.isDynamic && this.connections.length > 0) {\n                            var c = findConnectionToUseForDynamicAnchor(this, params.elementWithPrecedence),\n                                oIdx = c.endpoints[0] == this ? 1 : 0,\n                                oId = oIdx === 0 ? c.sourceId : c.targetId,\n                                oInfo = _jsPlumb.getCachedData(oId),\n                                oOffset = oInfo.o, oWH = oInfo.s;\n                            anchorParams.txy = [ oOffset.left, oOffset.top ];\n                            anchorParams.twh = oWH;\n                            anchorParams.tElement = c.endpoints[oIdx];\n                        }\n                        ap = this.anchor.compute(anchorParams);\n                    }\n\n                    this.endpoint.compute(ap, this.anchor.getOrientation(this), this._jsPlumb.paintStyleInUse, connectorPaintStyle || this.paintStyleInUse);\n                    this.endpoint.paint(this._jsPlumb.paintStyleInUse, this.anchor);\n                    this.timestamp = timestamp;\n\n                    // paint overlays\n                    for (var i in this._jsPlumb.overlays) {\n                        if (this._jsPlumb.overlays.hasOwnProperty(i)) {\n                            var o = this._jsPlumb.overlays[i];\n                            if (o.isVisible()) {\n                                this._jsPlumb.overlayPlacements[i] = o.draw(this.endpoint, this._jsPlumb.paintStyleInUse);\n                                o.paint(this._jsPlumb.overlayPlacements[i]);\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        this.getTypeDescriptor = function () {\n            return \"endpoint\";\n        };\n        this.isVisible = function () {\n            return this._jsPlumb.visible;\n        };\n\n        this.repaint = this.paint;\n\n        var draggingInitialised = false;\n        this.initDraggable = function () {\n\n            // is this a connection source? we make it draggable and have the\n            // drag listener maintain a connection with a floating endpoint.\n            if (!draggingInitialised && _jp.isDragSupported(this.element)) {\n                var placeholderInfo = { id: null, element: null },\n                    jpc = null,\n                    existingJpc = false,\n                    existingJpcParams = null,\n                    _dragHandler = _makeConnectionDragHandler(this, placeholderInfo, _jsPlumb),\n                    dragOptions = params.dragOptions || {},\n                    defaultOpts = {},\n                    startEvent = _jp.dragEvents.start,\n                    stopEvent = _jp.dragEvents.stop,\n                    dragEvent = _jp.dragEvents.drag,\n                    beforeStartEvent = _jp.dragEvents.beforeStart,\n                    payload;\n\n                // respond to beforeStart from katavorio; this will have, optionally, a payload of attribute values\n                // that were placed there by the makeSource mousedown listener.\n                var beforeStart = function(beforeStartParams) {\n                    payload = beforeStartParams.e.payload || {};\n                };\n\n                var start = function (startParams) {\n\n// -------------   first, get a connection to drag. this may be null, in which case we are dragging a new one.\n\n                    jpc = this.connectorSelector();\n\n// -------------------------------- now a bunch of tests about whether or not to proceed -------------------------\n\n                    var _continue = true;\n                    // if not enabled, return\n                    if (!this.isEnabled()) _continue = false;\n                    // if no connection and we're not a source - or temporarily a source, as is the case with makeSource - return.\n                    if (jpc == null && !this.isSource && !this.isTemporarySource) _continue = false;\n                    // otherwise if we're full and not allowed to drag, also return false.\n                    if (this.isSource && this.isFull() && !(jpc != null && this.dragAllowedWhenFull)) _continue = false;\n                    // if the connection was setup as not detachable or one of its endpoints\n                    // was setup as connectionsDetachable = false, or Defaults.ConnectionsDetachable\n                    // is set to false...\n                    if (jpc != null && !jpc.isDetachable(this)) _continue = false;\n\n                    var beforeDrag = _jsPlumb.checkCondition(jpc == null ? \"beforeDrag\" : \"beforeStartDetach\", {\n                        endpoint:this,\n                        source:this.element,\n                        sourceId:this.elementId,\n                        connection:jpc\n                    });\n                    if (beforeDrag === false) _continue = false;\n                    // else we might have been given some data. we'll pass it in to a new connection as 'data'.\n                    // here we also merge in the optional payload we were given on mousedown.\n                    else if (typeof beforeDrag === \"object\") {\n                        _jp.extend(beforeDrag, payload || {});\n                    }\n                    else\n                        // or if no beforeDrag data, maybe use the payload on its own.\n                        beforeDrag = payload || {};\n\n                    if (_continue === false) {\n                        // this is for mootools and yui. returning false from this causes jquery to stop drag.\n                        // the events are wrapped in both mootools and yui anyway, but i don't think returning\n                        // false from the start callback would stop a drag.\n                        if (_jsPlumb.stopDrag) _jsPlumb.stopDrag(this.canvas);\n                        _dragHandler.stopDrag();\n                        return false;\n                    }\n\n// ---------------------------------------------------------------------------------------------------------------------\n\n                    // ok to proceed.\n\n                    // clear hover for all connections for this endpoint before continuing.\n                    for (var i = 0; i < this.connections.length; i++)\n                        this.connections[i].setHover(false);\n\n                    this.addClass(\"endpointDrag\");\n                    _jsPlumb.setConnectionBeingDragged(true);\n\n                    // if we're not full but there was a connection, make it null. we'll create a new one.\n                    if (jpc && !this.isFull() && this.isSource) jpc = null;\n\n                    _jsPlumb.updateOffset({ elId: this.elementId });\n\n// ----------------    make the element we will drag around, and position it -----------------------------\n\n                    var ipco = this._jsPlumb.instance.getOffset(this.canvas),\n                        canvasElement = this.canvas,\n                        ips = this._jsPlumb.instance.getSize(this.canvas);\n\n                    _makeDraggablePlaceholder(placeholderInfo, _jsPlumb, ipco, ips);\n\n                    // store the id of the dragging div and the source element. the drop function will pick these up.                   \n                    _jsPlumb.setAttributes(this.canvas, {\n                        \"dragId\": placeholderInfo.id,\n                        \"elId\": this.elementId\n                    });\n\n// ------------------- create an endpoint that will be our floating endpoint ------------------------------------\n\n                    var endpointToFloat = this.dragProxy || this.endpoint;\n                    if (this.dragProxy == null && this.connectionType != null) {\n                        var aae = this._jsPlumb.instance.deriveEndpointAndAnchorSpec(this.connectionType);\n                        if (aae.endpoints[1]) endpointToFloat = aae.endpoints[1];\n                    }\n                    var centerAnchor = this._jsPlumb.instance.makeAnchor(\"Center\");\n                    centerAnchor.isFloating = true;\n                    this._jsPlumb.floatingEndpoint = _makeFloatingEndpoint(this.getPaintStyle(), centerAnchor, endpointToFloat, this.canvas, placeholderInfo.element, _jsPlumb, _newEndpoint, this.scope);\n                    var _savedAnchor = this._jsPlumb.floatingEndpoint.anchor;\n\n\n                    if (jpc == null) {\n\n                        this.setHover(false, false);\n                        // create a connection. one end is this endpoint, the other is a floating endpoint.                    \n                        jpc = _newConnection({\n                            sourceEndpoint: this,\n                            targetEndpoint: this._jsPlumb.floatingEndpoint,\n                            source: this.element,  // for makeSource with parent option.  ensure source element is represented correctly.\n                            target: placeholderInfo.element,\n                            anchors: [ this.anchor, this._jsPlumb.floatingEndpoint.anchor ],\n                            paintStyle: params.connectorStyle, // this can be null. Connection will use the default.\n                            hoverPaintStyle: params.connectorHoverStyle,\n                            connector: params.connector, // this can also be null. Connection will use the default.\n                            overlays: params.connectorOverlays,\n                            type: this.connectionType,\n                            cssClass: this.connectorClass,\n                            hoverClass: this.connectorHoverClass,\n                            scope:params.scope,\n                            data:beforeDrag\n                        });\n                        jpc.pending = true;\n                        jpc.addClass(_jsPlumb.draggingClass);\n                        this._jsPlumb.floatingEndpoint.addClass(_jsPlumb.draggingClass);\n                        this._jsPlumb.floatingEndpoint.anchor = _savedAnchor;\n                        // fire an event that informs that a connection is being dragged\n                        _jsPlumb.fire(\"connectionDrag\", jpc);\n\n                        // register the new connection on the drag manager. This connection, at this point, is 'pending',\n                        // and has as its target a temporary element (the 'placeholder'). If the connection subsequently\n                        // becomes established, the anchor manager is informed that the target of the connection has\n                        // changed.\n\n                        _jsPlumb.anchorManager.newConnection(jpc);\n\n                    } else {\n                        existingJpc = true;\n                        jpc.setHover(false);\n                        // new anchor idx\n                        var anchorIdx = jpc.endpoints[0].id == this.id ? 0 : 1;\n                        this.detachFromConnection(jpc, null, true);                         // detach from the connection while dragging is occurring. but dont cleanup automatically.\n\n                        // store the original scope (issue 57)\n                        var dragScope = _jsPlumb.getDragScope(canvasElement);\n                        _jsPlumb.setAttribute(this.canvas, \"originalScope\", dragScope);\n\n                        // fire an event that informs that a connection is being dragged. we do this before\n                        // replacing the original target with the floating element info.\n                        _jsPlumb.fire(\"connectionDrag\", jpc);\n\n                        // now we replace ourselves with the temporary div we created above:\n                        if (anchorIdx === 0) {\n                            existingJpcParams = [ jpc.source, jpc.sourceId, canvasElement, dragScope ];\n                            _jsPlumb.anchorManager.sourceChanged(jpc.endpoints[anchorIdx].elementId, placeholderInfo.id, jpc, placeholderInfo.element);\n\n                        } else {\n                            existingJpcParams = [ jpc.target, jpc.targetId, canvasElement, dragScope ];\n                            jpc.target = placeholderInfo.element;\n                            jpc.targetId = placeholderInfo.id;\n\n                            _jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.endpoints[anchorIdx].elementId, jpc.targetId, jpc);\n                        }\n\n                        // store the original endpoint and assign the new floating endpoint for the drag.\n                        jpc.suspendedEndpoint = jpc.endpoints[anchorIdx];\n\n                        // PROVIDE THE SUSPENDED ELEMENT, BE IT A SOURCE OR TARGET (ISSUE 39)\n                        jpc.suspendedElement = jpc.endpoints[anchorIdx].getElement();\n                        jpc.suspendedElementId = jpc.endpoints[anchorIdx].elementId;\n                        jpc.suspendedElementType = anchorIdx === 0 ? \"source\" : \"target\";\n\n                        jpc.suspendedEndpoint.setHover(false);\n                        this._jsPlumb.floatingEndpoint.referenceEndpoint = jpc.suspendedEndpoint;\n                        jpc.endpoints[anchorIdx] = this._jsPlumb.floatingEndpoint;\n\n                        jpc.addClass(_jsPlumb.draggingClass);\n                        this._jsPlumb.floatingEndpoint.addClass(_jsPlumb.draggingClass);\n                    }\n\n                    // register it and register connection on it.\n                    _jsPlumb.floatingConnections[placeholderInfo.id] = jpc;\n                    // only register for the target endpoint; we will not be dragging the source at any time\n                    // before this connection is either discarded or made into a permanent connection.\n                    _ju.addToList(params.endpointsByElement, placeholderInfo.id, this._jsPlumb.floatingEndpoint);\n                    // tell jsplumb about it\n                    _jsPlumb.currentlyDragging = true;\n                }.bind(this);\n\n                var stop = function () {\n                    _jsPlumb.setConnectionBeingDragged(false);\n\n                    if (jpc && jpc.endpoints != null) {\n                        // get the actual drop event (decode from library args to stop function)\n                        var originalEvent = _jsPlumb.getDropEvent(arguments);\n                        // unlock the other endpoint (if it is dynamic, it would have been locked at drag start)\n                        var idx = _jsPlumb.getFloatingAnchorIndex(jpc);\n                        jpc.endpoints[idx === 0 ? 1 : 0].anchor.locked = false;\n                        // TODO: Dont want to know about css classes inside jsplumb, ideally.\n                        jpc.removeClass(_jsPlumb.draggingClass);\n\n                        // if we have the floating endpoint then the connection has not been dropped\n                        // on another endpoint.  If it is a new connection we throw it away. If it is an\n                        // existing connection we check to see if we should reattach it, throwing it away\n                        // if not.\n                        if (this._jsPlumb && (jpc.deleteConnectionNow || jpc.endpoints[idx] == this._jsPlumb.floatingEndpoint)) {\n                            // 6a. if the connection was an existing one...\n                            if (existingJpc && jpc.suspendedEndpoint) {\n                                // fix for issue35, thanks Sylvain Gizard: when firing the detach event make sure the\n                                // floating endpoint has been replaced.\n                                if (idx === 0) {\n                                    jpc.floatingElement = jpc.source;\n                                    jpc.floatingId = jpc.sourceId;\n                                    jpc.floatingEndpoint = jpc.endpoints[0];\n                                    jpc.floatingIndex = 0;\n                                    jpc.source = existingJpcParams[0];\n                                    jpc.sourceId = existingJpcParams[1];\n                                } else {\n                                    // keep a copy of the floating element; the anchor manager will want to clean up.\n                                    jpc.floatingElement = jpc.target;\n                                    jpc.floatingId = jpc.targetId;\n                                    jpc.floatingEndpoint = jpc.endpoints[1];\n                                    jpc.floatingIndex = 1;\n                                    jpc.target = existingJpcParams[0];\n                                    jpc.targetId = existingJpcParams[1];\n                                }\n\n                                var fe = this._jsPlumb.floatingEndpoint; // store for later removal.\n                                // restore the original scope (issue 57)\n                                _jsPlumb.setDragScope(existingJpcParams[2], existingJpcParams[3]);\n                                jpc.endpoints[idx] = jpc.suspendedEndpoint;\n                                // IF the connection should be reattached, or the other endpoint refuses detach, then\n                                // reset the connection to its original state\n                                //if (jpc.isReattach() || jpc._forceReattach || jpc._forceDetach || !jpc.endpoints[idx === 0 ? 1 : 0].detach({connection:jpc, ignoreTarget:false, forceDetach:false, fireEvent:true, originalEvent:originalEvent, endpointBeingDeleted:true})) {\n                                if (jpc.isReattach() || jpc._forceReattach || jpc._forceDetach || !_jsPlumb.deleteConnection(jpc)) {\n\n                                    jpc.setHover(false);\n                                    jpc._forceDetach = null;\n                                    jpc._forceReattach = null;\n                                    this._jsPlumb.floatingEndpoint.detachFromConnection(jpc);\n                                    jpc.suspendedEndpoint.addConnection(jpc);\n\n                                    // TODO this code is duplicated in lots of places...and there is nothing external\n                                    // in the code; it all refers to the connection itself. we could add a\n                                    // `checkSanity(connection)` method to anchorManager that did this.\n                                    if (idx == 1) {\n                                        _jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.floatingId, jpc.targetId, jpc);\n                                    }\n                                    else {\n                                        _jsPlumb.anchorManager.sourceChanged(jpc.floatingId, jpc.sourceId, jpc, jpc.source);\n                                    }\n\n                                    _jsPlumb.repaint(existingJpcParams[1]);\n                                }\n                                else {\n                                    _jsPlumb.deleteObject({endpoint: fe});\n                                }\n                            }\n                        }\n\n                        // makeTargets sets this flag, to tell us we have been replaced and should delete this object.\n                        if (this.deleteAfterDragStop) {\n                            _jsPlumb.deleteObject({endpoint: this});\n                        }\n                        else {\n                            if (this._jsPlumb) {\n                                 this.paint({recalc: false});\n                            }\n                        }\n\n                        // although the connection is no longer valid, there are use cases where this is useful.\n                        _jsPlumb.fire(\"connectionDragStop\", jpc, originalEvent);\n                        // fire this event to give people more fine-grained control (connectionDragStop fires a lot)\n                        if (jpc.pending) {\n                            _jsPlumb.fire(\"connectionAborted\", jpc, originalEvent);\n                        }\n                        // tell jsplumb that dragging is finished.\n                        _jsPlumb.currentlyDragging = false;\n                        jpc.suspendedElement = null;\n                        jpc.suspendedEndpoint = null;\n                        jpc = null;\n                    }\n\n                    // if no endpoints, jpc already cleaned up. but still we want to ensure we're reset properly.\n                    // remove the element associated with the floating endpoint\n                    // (and its associated floating endpoint and visual artefacts)\n                    if (placeholderInfo && placeholderInfo.element) {\n                        _jsPlumb.remove(placeholderInfo.element, false, false);\n                    }\n                    // remove the inplace copy\n                    if (inPlaceCopy) {\n                        _jsPlumb.deleteObject({endpoint: inPlaceCopy});\n                    }\n\n                    if (this._jsPlumb) {\n                        // make our canvas visible (TODO: hand off to library; we should not know about DOM)\n                        this.canvas.style.visibility = \"visible\";\n                        // unlock our anchor\n                        this.anchor.locked = false;\n                        // clear floating anchor.\n                        this._jsPlumb.floatingEndpoint = null;\n                    }\n\n                }.bind(this);\n\n                dragOptions = _jp.extend(defaultOpts, dragOptions);\n                dragOptions.scope = this.scope || dragOptions.scope;\n                dragOptions[beforeStartEvent] = _ju.wrap(dragOptions[beforeStartEvent], beforeStart, false);\n                dragOptions[startEvent] = _ju.wrap(dragOptions[startEvent], start, false);\n                // extracted drag handler function so can be used by makeSource\n                dragOptions[dragEvent] = _ju.wrap(dragOptions[dragEvent], _dragHandler.drag);\n                dragOptions[stopEvent] = _ju.wrap(dragOptions[stopEvent], stop);\n                dragOptions.multipleDrop = false;\n\n                dragOptions.canDrag = function () {\n                    return this.isSource || this.isTemporarySource || /*(this.isTarget && */this.connections.length > 0/*)*/;\n                }.bind(this);\n\n                _jsPlumb.initDraggable(this.canvas, dragOptions, \"internal\");\n\n                this.canvas._jsPlumbRelatedElement = this.element;\n\n                draggingInitialised = true;\n            }\n        };\n\n        var ep = params.endpoint || this._jsPlumb.instance.Defaults.Endpoint || _jp.Defaults.Endpoint;\n        this.setEndpoint(ep, true);\n        var anchorParamsToUse = params.anchor ? params.anchor : params.anchors ? params.anchors : (_jsPlumb.Defaults.Anchor || \"Top\");\n        this.setAnchor(anchorParamsToUse, true);\n\n        // finally, set type if it was provided\n        var type = [ \"default\", (params.type || \"\")].join(\" \");\n        this.addType(type, params.data, true);\n        this.canvas = this.endpoint.canvas;\n        this.canvas._jsPlumb = this;\n\n        this.initDraggable();\n\n        // pulled this out into a function so we can reuse it for the inPlaceCopy canvas; you can now drop detached connections\n        // back onto the endpoint you detached it from.\n        var _initDropTarget = function (canvas, isTransient, endpoint, referenceEndpoint) {\n\n            if (_jp.isDropSupported(this.element)) {\n                var dropOptions = params.dropOptions || _jsPlumb.Defaults.DropOptions || _jp.Defaults.DropOptions;\n                dropOptions = _jp.extend({}, dropOptions);\n                dropOptions.scope = dropOptions.scope || this.scope;\n                var dropEvent = _jp.dragEvents.drop,\n                    overEvent = _jp.dragEvents.over,\n                    outEvent = _jp.dragEvents.out,\n                    _ep = this,\n                    drop = _jsPlumb.EndpointDropHandler({\n                        getEndpoint: function () {\n                            return _ep;\n                        },\n                        jsPlumb: _jsPlumb,\n                        enabled: function () {\n                            return endpoint != null ? endpoint.isEnabled() : true;\n                        },\n                        isFull: function () {\n                            return endpoint.isFull();\n                        },\n                        element: this.element,\n                        elementId: this.elementId,\n                        isSource: this.isSource,\n                        isTarget: this.isTarget,\n                        addClass: function (clazz) {\n                            _ep.addClass(clazz);\n                        },\n                        removeClass: function (clazz) {\n                            _ep.removeClass(clazz);\n                        },\n                        isDropAllowed: function () {\n                            return _ep.isDropAllowed.apply(_ep, arguments);\n                        },\n                        reference:referenceEndpoint,\n                        isRedrop:function(jpc, dhParams) {\n                            return jpc.suspendedEndpoint && dhParams.reference && (jpc.suspendedEndpoint.id === dhParams.reference.id);\n                        }\n                    });\n\n                dropOptions[dropEvent] = _ju.wrap(dropOptions[dropEvent], drop, true);\n                dropOptions[overEvent] = _ju.wrap(dropOptions[overEvent], function () {\n                    var draggable = _jp.getDragObject(arguments),\n                        id = _jsPlumb.getAttribute(_jp.getElement(draggable), \"dragId\"),\n                        _jpc = _jsPlumb.floatingConnections[id];\n\n                    if (_jpc != null) {\n                        var idx = _jsPlumb.getFloatingAnchorIndex(_jpc);\n                        // here we should fire the 'over' event if we are a target and this is a new connection,\n                        // or we are the same as the floating endpoint.\n                        var _cont = (this.isTarget && idx !== 0) || (_jpc.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == _jpc.suspendedEndpoint.id);\n                        if (_cont) {\n                            var bb = _jsPlumb.checkCondition(\"checkDropAllowed\", {\n                                sourceEndpoint: _jpc.endpoints[idx],\n                                targetEndpoint: this,\n                                connection: _jpc\n                            });\n                            this[(bb ? \"add\" : \"remove\") + \"Class\"](_jsPlumb.endpointDropAllowedClass);\n                            this[(bb ? \"remove\" : \"add\") + \"Class\"](_jsPlumb.endpointDropForbiddenClass);\n                            _jpc.endpoints[idx].anchor.over(this.anchor, this);\n                        }\n                    }\n                }.bind(this));\n\n                dropOptions[outEvent] = _ju.wrap(dropOptions[outEvent], function () {\n                    var draggable = _jp.getDragObject(arguments),\n                        id = draggable == null ? null : _jsPlumb.getAttribute(_jp.getElement(draggable), \"dragId\"),\n                        _jpc = id ? _jsPlumb.floatingConnections[id] : null;\n\n                    if (_jpc != null) {\n                        var idx = _jsPlumb.getFloatingAnchorIndex(_jpc);\n                        var _cont = (this.isTarget && idx !== 0) || (_jpc.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == _jpc.suspendedEndpoint.id);\n                        if (_cont) {\n                            this.removeClass(_jsPlumb.endpointDropAllowedClass);\n                            this.removeClass(_jsPlumb.endpointDropForbiddenClass);\n                            _jpc.endpoints[idx].anchor.out();\n                        }\n                    }\n                }.bind(this));\n\n                _jsPlumb.initDroppable(canvas, dropOptions, \"internal\", isTransient);\n            }\n        }.bind(this);\n\n        // Initialise the endpoint's canvas as a drop target. The drop handler will take care of the logic of whether\n        // something can actually be dropped.\n        if (!this.anchor.isFloating)\n            _initDropTarget(this.canvas, !(params._transient || this.anchor.isFloating), this, params.reference);\n\n\n        return this;\n    };\n\n    _ju.extend(_jp.Endpoint, _jp.OverlayCapableJsPlumbUIComponent, {\n\n        setVisible: function (v, doNotChangeConnections, doNotNotifyOtherEndpoint) {\n            this._jsPlumb.visible = v;\n            if (this.canvas) this.canvas.style.display = v ? \"block\" : \"none\";\n            this[v ? \"showOverlays\" : \"hideOverlays\"]();\n            if (!doNotChangeConnections) {\n                for (var i = 0; i < this.connections.length; i++) {\n                    this.connections[i].setVisible(v);\n                    if (!doNotNotifyOtherEndpoint) {\n                        var oIdx = this === this.connections[i].endpoints[0] ? 1 : 0;\n                        // only change the other endpoint if this is its only connection.\n                        if (this.connections[i].endpoints[oIdx].connections.length == 1) this.connections[i].endpoints[oIdx].setVisible(v, true, true);\n                    }\n                }\n            }\n        },\n        getAttachedElements: function () {\n            return this.connections;\n        },\n        applyType: function (t, doNotRepaint) {\n            this.setPaintStyle(t.endpointStyle || t.paintStyle, doNotRepaint);\n            this.setHoverPaintStyle(t.endpointHoverStyle || t.hoverPaintStyle, doNotRepaint);\n            if (t.maxConnections != null) this._jsPlumb.maxConnections = t.maxConnections;\n            if (t.scope) this.scope = t.scope;\n            _jp.extend(this, t, typeParameters);\n            if (t.cssClass != null && this.canvas) this._jsPlumb.instance.addClass(this.canvas, t.cssClass);\n            _jp.OverlayCapableJsPlumbUIComponent.applyType(this, t);\n        },\n        isEnabled: function () {\n            return this._jsPlumb.enabled;\n        },\n        setEnabled: function (e) {\n            this._jsPlumb.enabled = e;\n        },\n        cleanup: function () {\n            var anchorClass = this._jsPlumb.instance.endpointAnchorClassPrefix + (this._jsPlumb.currentAnchorClass ? \"-\" + this._jsPlumb.currentAnchorClass : \"\");\n            _jp.removeClass(this.element, anchorClass);\n            this.anchor = null;\n            this.endpoint.cleanup(true);\n            this.endpoint.destroy();\n            this.endpoint = null;\n            // drag/drop\n            this._jsPlumb.instance.destroyDraggable(this.canvas, \"internal\");\n            this._jsPlumb.instance.destroyDroppable(this.canvas, \"internal\");\n        },\n        setHover: function (h) {\n            if (this.endpoint && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged())\n                this.endpoint.setHover(h);\n        },\n        isFull: function () {\n            return this._jsPlumb.maxConnections === 0 ? true : !(this.isFloating() || this._jsPlumb.maxConnections < 0 || this.connections.length < this._jsPlumb.maxConnections);\n        },\n        /**\n         * private but needs to be exposed.\n         */\n        isFloating: function () {\n            return this.anchor != null && this.anchor.isFloating;\n        },\n        isConnectedTo: function (endpoint) {\n            var found = false;\n            if (endpoint) {\n                for (var i = 0; i < this.connections.length; i++) {\n                    if (this.connections[i].endpoints[1] == endpoint || this.connections[i].endpoints[0] == endpoint) {\n                        found = true;\n                        break;\n                    }\n                }\n            }\n            return found;\n        },\n        getConnectionCost: function () {\n            return this._jsPlumb.connectionCost;\n        },\n        setConnectionCost: function (c) {\n            this._jsPlumb.connectionCost = c;\n        },\n        areConnectionsDirected: function () {\n            return this._jsPlumb.connectionsDirected;\n        },\n        setConnectionsDirected: function (b) {\n            this._jsPlumb.connectionsDirected = b;\n        },\n        setElementId: function (_elId) {\n            this.elementId = _elId;\n            this.anchor.elementId = _elId;\n        },\n        setReferenceElement: function (_el) {\n            this.element = _jp.getElement(_el);\n        },\n        setDragAllowedWhenFull: function (allowed) {\n            this.dragAllowedWhenFull = allowed;\n        },\n        equals: function (endpoint) {\n            return this.anchor.equals(endpoint.anchor);\n        },\n        getUuid: function () {\n            return this._jsPlumb.uuid;\n        },\n        computeAnchor: function (params) {\n            return this.anchor.compute(params);\n        }\n    });\n\n    root.jsPlumbInstance.prototype.EndpointDropHandler = function (dhParams) {\n        return function (e) {\n\n            var _jsPlumb = dhParams.jsPlumb;\n\n            // remove the classes that are added dynamically. drop is neither forbidden nor allowed now that\n            // the drop is finishing.\n            dhParams.removeClass(_jsPlumb.endpointDropAllowedClass);\n            dhParams.removeClass(_jsPlumb.endpointDropForbiddenClass);\n\n            var originalEvent = _jsPlumb.getDropEvent(arguments),\n                draggable = _jsPlumb.getDragObject(arguments),\n                id = _jsPlumb.getAttribute(draggable, \"dragId\"),\n                elId = _jsPlumb.getAttribute(draggable, \"elId\"),\n                scope = _jsPlumb.getAttribute(draggable, \"originalScope\"),\n                jpc = _jsPlumb.floatingConnections[id];\n\n            // if no active connection, bail.\n            if (jpc == null) return;\n\n            // calculate if this is an existing connection.\n            var existingConnection = jpc.suspendedEndpoint != null;\n\n            // if suspended endpoint exists but has been cleaned up, bail. This means it's an existing connection\n            // that has been detached and will shortly be discarded.\n            if (existingConnection && jpc.suspendedEndpoint._jsPlumb == null) return;\n\n            // get the drop endpoint. for a normal connection this is just the one that would replace the currently\n            // floating endpoint. for a makeTarget this is a new endpoint that is created on drop. But we leave that to\n            // the handler to figure out.\n            var _ep = dhParams.getEndpoint(jpc);\n\n            // If we're not given an endpoint to use, bail.\n            if (_ep == null) return;\n\n            // if this is a drop back where the connection came from, mark it force reattach and\n            // return; the stop handler will reattach. without firing an event.\n            if (dhParams.isRedrop(jpc, dhParams)) {\n                jpc._forceReattach = true;\n                jpc.setHover(false);\n                if (dhParams.maybeCleanup) dhParams.maybeCleanup(_ep);\n                return;\n            }\n\n            // ensure we dont bother trying to drop sources on non-source eps, and same for target.\n            var idx = _jsPlumb.getFloatingAnchorIndex(jpc);\n            if ((idx === 0 && !dhParams.isSource)|| (idx === 1 && !dhParams.isTarget)){\n                if (dhParams.maybeCleanup) dhParams.maybeCleanup(_ep);\n                return;\n            }\n\n            if (dhParams.onDrop) dhParams.onDrop(jpc);\n\n            // restore the original scope if necessary (issue 57)\n            if (scope) _jsPlumb.setDragScope(draggable, scope);\n\n            // if the target of the drop is full, fire an event (we abort below)\n            // makeTarget: keep.\n            var isFull = dhParams.isFull(e);\n            if (isFull) {\n                _ep.fire(\"maxConnections\", {\n                    endpoint: this,\n                    connection: jpc,\n                    maxConnections: _ep._jsPlumb.maxConnections\n                }, originalEvent);\n            }\n            //\n            // if endpoint enabled, not full, and matches the index of the floating endpoint...\n            if (!isFull &&  dhParams.enabled()) {\n                var _doContinue = true;\n\n                // before testing for beforeDrop, reset the connection's source/target to be the actual DOM elements\n                // involved (that is, stash any temporary stuff used for dragging. but we need to keep it around in\n                // order that the anchor manager can clean things up properly).\n                if (idx === 0) {\n                    jpc.floatingElement = jpc.source;\n                    jpc.floatingId = jpc.sourceId;\n                    jpc.floatingEndpoint = jpc.endpoints[0];\n                    jpc.floatingIndex = 0;\n                    jpc.source = dhParams.element;\n                    jpc.sourceId = dhParams.elementId;\n                } else {\n                    jpc.floatingElement = jpc.target;\n                    jpc.floatingId = jpc.targetId;\n                    jpc.floatingEndpoint = jpc.endpoints[1];\n                    jpc.floatingIndex = 1;\n                    jpc.target = dhParams.element;\n                    jpc.targetId = dhParams.elementId;\n                }\n\n                // if this is an existing connection and detach is not allowed we won't continue. The connection's\n                // endpoints have been reinstated; everything is back to how it was.\n                if (existingConnection && jpc.suspendedEndpoint.id != _ep.id) {\n\n                    if (!jpc.isDetachAllowed(jpc) || !jpc.endpoints[idx].isDetachAllowed(jpc) || !jpc.suspendedEndpoint.isDetachAllowed(jpc) || !_jsPlumb.checkCondition(\"beforeDetach\", jpc))\n                        _doContinue = false;\n                }\n\n// ------------ wrap the execution path in a function so we can support asynchronous beforeDrop\n\n                var continueFunction = function (optionalData) {\n                    // remove this jpc from the current endpoint, which is a floating endpoint that we will\n                    // subsequently discard.\n                    jpc.endpoints[idx].detachFromConnection(jpc);\n\n                    // if there's a suspended endpoint, detach it from the connection.\n                    if (jpc.suspendedEndpoint) jpc.suspendedEndpoint.detachFromConnection(jpc);\n\n                    jpc.endpoints[idx] = _ep;\n                    _ep.addConnection(jpc);\n\n                    // copy our parameters in to the connection:\n                    var params = _ep.getParameters();\n                    for (var aParam in params)\n                        jpc.setParameter(aParam, params[aParam]);\n\n                    if (!existingConnection) {\n                        // if not an existing connection and\n                        if (params.draggable)\n                            _jsPlumb.initDraggable(this.element, dragOptions, \"internal\", _jsPlumb);\n                    }\n                    else {\n                        var suspendedElementId = jpc.suspendedEndpoint.elementId;\n                        _jsPlumb.fireMoveEvent({\n                            index: idx,\n                            originalSourceId: idx === 0 ? suspendedElementId : jpc.sourceId,\n                            newSourceId: idx === 0 ? _ep.elementId : jpc.sourceId,\n                            originalTargetId: idx == 1 ? suspendedElementId : jpc.targetId,\n                            newTargetId: idx == 1 ? _ep.elementId : jpc.targetId,\n                            originalSourceEndpoint: idx === 0 ? jpc.suspendedEndpoint : jpc.endpoints[0],\n                            newSourceEndpoint: idx === 0 ? _ep : jpc.endpoints[0],\n                            originalTargetEndpoint: idx == 1 ? jpc.suspendedEndpoint : jpc.endpoints[1],\n                            newTargetEndpoint: idx == 1 ? _ep : jpc.endpoints[1],\n                            connection: jpc\n                        }, originalEvent);\n                    }\n\n                    if (idx == 1) {\n                        _jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.floatingId, jpc.targetId, jpc);\n                    }\n                    else {\n                        _jsPlumb.anchorManager.sourceChanged(jpc.floatingId, jpc.sourceId, jpc, jpc.source);\n                    }\n\n                    // when makeSource has uniqueEndpoint:true, we want to create connections with new endpoints\n                    // that are subsequently deleted. So makeSource sets `finalEndpoint`, which is the Endpoint to\n                    // which the connection should be attached. The `detachFromConnection` call below results in the\n                    // temporary endpoint being cleaned up.\n                    if (jpc.endpoints[0].finalEndpoint) {\n                        var _toDelete = jpc.endpoints[0];\n                        _toDelete.detachFromConnection(jpc);\n                        jpc.endpoints[0] = jpc.endpoints[0].finalEndpoint;\n                        jpc.endpoints[0].addConnection(jpc);\n                    }\n\n                    // if optionalData was given, merge it onto the connection's data.\n                    if (_ju.isObject(optionalData)) {\n                        jpc.mergeData(optionalData);\n                    }\n                    // finalise will inform the anchor manager and also add to\n                    // connectionsByScope if necessary.\n                    _jsPlumb.finaliseConnection(jpc, null, originalEvent, false);\n                    jpc.setHover(false);\n\n                }.bind(this);\n\n                var dontContinueFunction = function () {\n                    // otherwise just put it back on the endpoint it was on before the drag.\n                    if (jpc.suspendedEndpoint) {\n                        jpc.endpoints[idx] = jpc.suspendedEndpoint;\n                        jpc.setHover(false);\n                        jpc._forceDetach = true;\n                        if (idx === 0) {\n                            jpc.source = jpc.suspendedEndpoint.element;\n                            jpc.sourceId = jpc.suspendedEndpoint.elementId;\n                        } else {\n                            jpc.target = jpc.suspendedEndpoint.element;\n                            jpc.targetId = jpc.suspendedEndpoint.elementId;\n                        }\n                        jpc.suspendedEndpoint.addConnection(jpc);\n\n                        // TODO checkSanity\n                        if (idx == 1) {\n                            _jsPlumb.anchorManager.updateOtherEndpoint(jpc.sourceId, jpc.floatingId, jpc.targetId, jpc);\n                        }\n                        else {\n                            _jsPlumb.anchorManager.sourceChanged(jpc.floatingId, jpc.sourceId, jpc, jpc.source);\n                        }\n\n                        _jsPlumb.repaint(jpc.sourceId);\n                        jpc._forceDetach = false;\n                    }\n                };\n\n// --------------------------------------\n                // now check beforeDrop.  this will be available only on Endpoints that are setup to\n                // have a beforeDrop condition (although, secretly, under the hood all Endpoints and\n                // the Connection have them, because they are on jsPlumbUIComponent.  shhh!), because\n                // it only makes sense to have it on a target endpoint.\n                _doContinue = _doContinue && dhParams.isDropAllowed(jpc.sourceId, jpc.targetId, jpc.scope, jpc, _ep);// && jpc.pending;\n\n                if (_doContinue) {\n                    continueFunction(_doContinue);\n                    return true;\n                }\n                else {\n                    dontContinueFunction();\n                }\n            }\n\n            if (dhParams.maybeCleanup) dhParams.maybeCleanup(_ep);\n\n            _jsPlumb.currentlyDragging = false;\n        };\n    };\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the code for Connections.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * https://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this,\n        _jp = root.jsPlumb,\n        _ju = root.jsPlumbUtil;\n\n    var makeConnector = function (_jsPlumb, renderMode, connectorName, connectorArgs, forComponent) {\n            if (!_jsPlumb.Defaults.DoNotThrowErrors && _jp.Connectors[renderMode][connectorName] == null)\n                throw { msg: \"jsPlumb: unknown connector type '\" + connectorName + \"'\" };\n\n            return new _jp.Connectors[renderMode][connectorName](connectorArgs, forComponent);\n        },\n        _makeAnchor = function (anchorParams, elementId, _jsPlumb) {\n            return (anchorParams) ? _jsPlumb.makeAnchor(anchorParams, elementId, _jsPlumb) : null;\n        },\n        _updateConnectedClass = function (conn, element, _jsPlumb, remove) {\n            if (element != null) {\n                element._jsPlumbConnections = element._jsPlumbConnections || {};\n                if (remove)\n                    delete element._jsPlumbConnections[conn.id];\n                else\n                    element._jsPlumbConnections[conn.id] = true;\n\n                if (_ju.isEmpty(element._jsPlumbConnections)) {\n                    _jsPlumb.removeClass(element, _jsPlumb.connectedClass);\n                }\n                else\n                    _jsPlumb.addClass(element, _jsPlumb.connectedClass);\n            }\n        };\n\n    _jp.Connection = function (params) {\n        var _newEndpoint = params.newEndpoint;\n\n        this.id = params.id;\n        this.connector = null;\n        this.idPrefix = \"_jsplumb_c_\";\n        this.defaultLabelLocation = 0.5;\n        this.defaultOverlayKeys = [\"Overlays\", \"ConnectionOverlays\"];\n        // if a new connection is the result of moving some existing connection, params.previousConnection\n        // will have that Connection in it. listeners for the jsPlumbConnection event can look for that\n        // member and take action if they need to.\n        this.previousConnection = params.previousConnection;\n        this.source = _jp.getElement(params.source);\n        this.target = _jp.getElement(params.target);\n        // sourceEndpoint and targetEndpoint override source/target, if they are present. but \n        // source is not overridden if the Endpoint has declared it is not the final target of a connection;\n        // instead we use the source that the Endpoint declares will be the final source element.\n        if (params.sourceEndpoint) this.source = params.sourceEndpoint.getElement();\n        if (params.targetEndpoint) this.target = params.targetEndpoint.getElement();\n\n        _jp.OverlayCapableJsPlumbUIComponent.apply(this, arguments);\n\n        this.sourceId = this._jsPlumb.instance.getId(this.source);\n        this.targetId = this._jsPlumb.instance.getId(this.target);\n        this.scope = params.scope; // scope may have been passed in to the connect call. if it wasn't, we will pull it from the source endpoint, after having initialised the endpoints.            \n        this.endpoints = [];\n        this.endpointStyles = [];\n\n        var _jsPlumb = this._jsPlumb.instance;\n\n        _jsPlumb.manage(this.sourceId, this.source);\n        _jsPlumb.manage(this.targetId, this.target);\n\n        this._jsPlumb.visible = true;\n        this._jsPlumb.editable = params.editable === true;\n        this._jsPlumb.params = {\n            cssClass: params.cssClass,\n            container: params.container,\n            \"pointer-events\": params[\"pointer-events\"],\n            editorParams: params.editorParams,\n            overlays: params.overlays\n        };\n        this._jsPlumb.lastPaintedAt = null;\n\n        // listen to mouseover and mouseout events passed from the container delegate.\n        this.bind(\"mouseover\", function () {\n            this.setHover(true);\n        }.bind(this));\n        this.bind(\"mouseout\", function () {\n            this.setHover(false);\n        }.bind(this));\n\n        this.editableRequested = params.editable !== false;\n        this.setEditable = function(e) {\n            return this.connector ? this.connector.setEditable(e) : false;\n        };\n        this.isEditable = function() { return this.connector ? this.connector.isEditable() : false; };\n        this.isEditing = function() { return this.connector ? this.connector.isEditing() : false; };\n\n// INITIALISATION CODE\n\n        this.makeEndpoint = function (isSource, el, elId, ep) {\n            elId = elId || this._jsPlumb.instance.getId(el);\n            return this.prepareEndpoint(_jsPlumb, _newEndpoint, this, ep, isSource ? 0 : 1, params, el, elId);\n        };\n\n        // if type given, get the endpoint definitions mapping to that type from the jsplumb instance, and use those.\n        // we apply types at the end of this constructor but endpoints are only honoured in a type definition at\n        // create time.\n        if (params.type) {\n            params.endpoints = params.endpoints || this._jsPlumb.instance.deriveEndpointAndAnchorSpec(params.type).endpoints;\n        }\n\n        var eS = this.makeEndpoint(true, this.source, this.sourceId, params.sourceEndpoint),\n            eT = this.makeEndpoint(false, this.target, this.targetId, params.targetEndpoint);\n\n        if (eS) _ju.addToList(params.endpointsByElement, this.sourceId, eS);\n        if (eT) _ju.addToList(params.endpointsByElement, this.targetId, eT);\n        // if scope not set, set it to be the scope for the source endpoint.\n        if (!this.scope) this.scope = this.endpoints[0].scope;\n\n        // if explicitly told to (or not to) delete endpoints when empty, override endpoint's preferences\n        if (params.deleteEndpointsOnEmpty != null) {\n            this.endpoints[0].setDeleteOnEmpty(params.deleteEndpointsOnEmpty);\n            this.endpoints[1].setDeleteOnEmpty(params.deleteEndpointsOnEmpty);\n        }\n//        else {\n//            // otherwise, unless the endpoints say otherwise, mark them for deletion.\n//            if (!this.endpoints[0]._doNotDeleteOnDetach) this.endpoints[0]._deleteOnDetach = true;\n//            if (!this.endpoints[1]._doNotDeleteOnDetach) this.endpoints[1]._deleteOnDetach = true;\n//        }\n\n// -------------------------- DEFAULT TYPE ---------------------------------------------\n\n        // DETACHABLE\n        var _detachable = _jsPlumb.Defaults.ConnectionsDetachable;\n        if (params.detachable === false) _detachable = false;\n        if (this.endpoints[0].connectionsDetachable === false) _detachable = false;\n        if (this.endpoints[1].connectionsDetachable === false) _detachable = false;\n        // REATTACH\n        var _reattach = params.reattach || this.endpoints[0].reattachConnections || this.endpoints[1].reattachConnections || _jsPlumb.Defaults.ReattachConnections;\n\n        this.appendToDefaultType({\n            detachable: _detachable,\n            reattach: _reattach,\n            paintStyle:this.endpoints[0].connectorStyle || this.endpoints[1].connectorStyle || params.paintStyle || _jsPlumb.Defaults.PaintStyle || _jp.Defaults.PaintStyle,\n            hoverPaintStyle:this.endpoints[0].connectorHoverStyle || this.endpoints[1].connectorHoverStyle || params.hoverPaintStyle || _jsPlumb.Defaults.HoverPaintStyle || _jp.Defaults.HoverPaintStyle\n        });\n\n\n        var _suspendedAt = _jsPlumb.getSuspendedAt();\n        if (!_jsPlumb.isSuspendDrawing()) {\n            // paint the endpoints\n            var myInfo = _jsPlumb.getCachedData(this.sourceId),\n                myOffset = myInfo.o, myWH = myInfo.s,\n                otherInfo = _jsPlumb.getCachedData(this.targetId),\n                otherOffset = otherInfo.o,\n                otherWH = otherInfo.s,\n                initialTimestamp = _suspendedAt || _jsPlumb.timestamp(),\n                anchorLoc = this.endpoints[0].anchor.compute({\n                    xy: [ myOffset.left, myOffset.top ], wh: myWH, element: this.endpoints[0],\n                    elementId: this.endpoints[0].elementId,\n                    txy: [ otherOffset.left, otherOffset.top ], twh: otherWH, tElement: this.endpoints[1],\n                    timestamp: initialTimestamp\n                });\n\n            this.endpoints[0].paint({ anchorLoc: anchorLoc, timestamp: initialTimestamp });\n\n            anchorLoc = this.endpoints[1].anchor.compute({\n                xy: [ otherOffset.left, otherOffset.top ], wh: otherWH, element: this.endpoints[1],\n                elementId: this.endpoints[1].elementId,\n                txy: [ myOffset.left, myOffset.top ], twh: myWH, tElement: this.endpoints[0],\n                timestamp: initialTimestamp\n            });\n            this.endpoints[1].paint({ anchorLoc: anchorLoc, timestamp: initialTimestamp });\n        }\n\n        this.getTypeDescriptor = function () {\n            return \"connection\";\n        };\n        this.getAttachedElements = function () {\n            return this.endpoints;\n        };\n\n        this.isDetachable = function () {\n            return this._jsPlumb.detachable === true;\n        };\n        this.setDetachable = function (detachable) {\n            this._jsPlumb.detachable = detachable === true;\n        };\n        this.isReattach = function () {\n            return this._jsPlumb.reattach === true || this.endpoints[0].reattachConnections === true || this.endpoints[1].reattachConnections === true;\n        };\n        this.setReattach = function (reattach) {\n            this._jsPlumb.reattach = reattach === true;\n        };\n\n//        this[\"delete\"] = function() {\n//            this.endpoints[0].detachFromConnection(this);\n//            this.endpoints[1].detachFromConnection(this);\n//            params.deleteConnection(this);\n//        };\n\n// END INITIALISATION CODE\n\n\n// COST + DIRECTIONALITY\n        // if cost not supplied, try to inherit from source endpoint\n        this._jsPlumb.cost = params.cost || this.endpoints[0].getConnectionCost();\n        this._jsPlumb.directed = params.directed;\n        // inherit directed flag if set no source endpoint\n        if (params.directed == null) this._jsPlumb.directed = this.endpoints[0].areConnectionsDirected();\n// END COST + DIRECTIONALITY\n\n// PARAMETERS\n        // merge all the parameters objects into the connection.  parameters set\n        // on the connection take precedence; then source endpoint params, then\n        // finally target endpoint params.\n        var _p = _jp.extend({}, this.endpoints[1].getParameters());\n        _jp.extend(_p, this.endpoints[0].getParameters());\n        _jp.extend(_p, this.getParameters());\n        this.setParameters(_p);\n// END PARAMETERS\n\n// PAINTING\n\n        this.setConnector(this.endpoints[0].connector || this.endpoints[1].connector || params.connector || _jsPlumb.Defaults.Connector || _jp.Defaults.Connector, true);\n        if (params.geometry) {\n            this.connector.setGeometry(params.geometry);\n        }\n        var data = params.data == null || !_ju.isObject(params.data) ? {} : params.data;\n        this.getData = function() { return data; };\n        this.setData = function(d) { data = d || {}; };\n        this.mergeData = function(d) { data = _jp.extend(data, d); };\n\n        // the very last thing we do is apply types, if there are any.\n        var _types = [ \"default\", this.endpoints[0].connectionType, this.endpoints[1].connectionType,  params.type ].join(\" \");\n        if (/[^\\s]/.test(_types))\n            this.addType(_types, params.data, true);\n\n        this.updateConnectedClass();\n\n// END PAINTING    \n    };\n\n    _ju.extend(_jp.Connection, _jp.OverlayCapableJsPlumbUIComponent, {\n        applyType: function (t, doNotRepaint, typeMap) {\n\n            // none of these things result in the creation of objects so can be ignored.\n            if (t.detachable != null) this.setDetachable(t.detachable);\n            if (t.reattach != null) this.setReattach(t.reattach);\n            if (t.scope) this.scope = t.scope;\n\n            if (t.cssClass != null && this.canvas) this._jsPlumb.instance.addClass(this.canvas, t.cssClass);\n\n            var _anchors = null;\n            // this also results in the creation of objects.\n            if (t.anchor) {\n                // note that even if the param was anchor, we store `anchors`.\n                _anchors = this.getCachedTypeItem(\"anchors\", typeMap.anchor);\n                if (_anchors == null) {\n                    _anchors = [ this._jsPlumb.instance.makeAnchor(t.anchor), this._jsPlumb.instance.makeAnchor(t.anchor) ];\n                    this.cacheTypeItem(\"anchors\", _anchors, typeMap.anchor);\n                }\n            }\n            else if (t.anchors) {\n                _anchors = this.getCachedTypeItem(\"anchors\", typeMap.anchors);\n                if (_anchors == null) {\n                    _anchors = [\n                        this._jsPlumb.instance.makeAnchor(t.anchors[0]),\n                        this._jsPlumb.instance.makeAnchor(t.anchors[1])\n                    ];\n                    this.cacheTypeItem(\"anchors\", _anchors, typeMap.anchors);\n                }\n            }\n            if (_anchors != null) {\n                this.endpoints[0].anchor = _anchors[0];\n                this.endpoints[1].anchor = _anchors[1];\n                if (this.endpoints[1].anchor.isDynamic) this._jsPlumb.instance.repaint(this.endpoints[1].elementId);\n            }\n\n            _jp.OverlayCapableJsPlumbUIComponent.applyType(this, t);\n        },\n        addClass: function (c, informEndpoints) {\n            if (informEndpoints) {\n                this.endpoints[0].addClass(c);\n                this.endpoints[1].addClass(c);\n                if (this.suspendedEndpoint) this.suspendedEndpoint.addClass(c);\n            }\n            if (this.connector) {\n                this.connector.addClass(c);\n            }\n        },\n        removeClass: function (c, informEndpoints) {\n            if (informEndpoints) {\n                this.endpoints[0].removeClass(c);\n                this.endpoints[1].removeClass(c);\n                if (this.suspendedEndpoint) this.suspendedEndpoint.removeClass(c);\n            }\n            if (this.connector) {\n                this.connector.removeClass(c);\n            }\n        },\n        isVisible: function () {\n            return this._jsPlumb.visible;\n        },\n        setVisible: function (v) {\n            this._jsPlumb.visible = v;\n            if (this.connector)\n                this.connector.setVisible(v);\n            this.repaint();\n        },\n        cleanup: function () {\n            this.updateConnectedClass(true);\n            this.endpoints = null;\n            this.source = null;\n            this.target = null;\n            if (this.connector != null) {\n                this.connector.cleanup(true);\n                this.connector.destroy(true);\n            }\n            this.connector = null;\n        },\n        updateConnectedClass:function(remove) {\n            if (this._jsPlumb) {\n                _updateConnectedClass(this, this.source, this._jsPlumb.instance, remove);\n                _updateConnectedClass(this, this.target, this._jsPlumb.instance, remove);\n            }\n        },\n        setHover: function (state) {\n            if (this.connector && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged()) {\n                this.connector.setHover(state);\n                root.jsPlumb[state ? \"addClass\" : \"removeClass\"](this.source, this._jsPlumb.instance.hoverSourceClass);\n                root.jsPlumb[state ? \"addClass\" : \"removeClass\"](this.target, this._jsPlumb.instance.hoverTargetClass);\n            }\n        },\n        getUuids:function() {\n            return [ this.endpoints[0].getUuid(), this.endpoints[1].getUuid() ];\n        },\n        getCost: function () {\n            return this._jsPlumb ? this._jsPlumb.cost : -Infinity;\n        },\n        setCost: function (c) {\n            this._jsPlumb.cost = c;\n        },\n        isDirected: function () {\n            return this._jsPlumb.directed === true;\n        },\n        getConnector: function () {\n            return this.connector;\n        },\n        getGeometry : function() { return this.connector ? this.connector.getGeometry() : null; },\n        setGeometry : function(g) { if (this.connector) this.connector.setGeometry(g); },\n        prepareConnector:function(connectorSpec, typeId) {\n            var connectorArgs = {\n                    _jsPlumb: this._jsPlumb.instance,\n                    cssClass: (this._jsPlumb.params.cssClass || \"\") + (this.isEditable() ? this._jsPlumb.instance.editableConnectorClass : \"\"),\n                    container: this._jsPlumb.params.container,\n                    \"pointer-events\": this._jsPlumb.params[\"pointer-events\"],\n                    editable:this.editableRequested\n                },\n                renderMode = this._jsPlumb.instance.getRenderMode(),\n                connector;\n\n            if (_ju.isString(connectorSpec))\n                connector = makeConnector(this._jsPlumb.instance, renderMode, connectorSpec, connectorArgs, this); // lets you use a string as shorthand.\n            else if (_ju.isArray(connectorSpec)) {\n                if (connectorSpec.length == 1)\n                    connector = makeConnector(this._jsPlumb.instance, renderMode, connectorSpec[0], connectorArgs, this);\n                else\n                    connector = makeConnector(this._jsPlumb.instance, renderMode, connectorSpec[0], _ju.merge(connectorSpec[1], connectorArgs), this);\n            }\n            if (typeId != null) connector.typeId = typeId;\n            return connector;\n        },\n        setPreparedConnector: function(connector, doNotRepaint, doNotChangeListenerComponent, typeId) {\n\n            var previous, previousClasses = \"\";\n            // the connector will not be cleaned up if it was set as part of a type, because `typeId` will be set on it\n            // and we havent passed in `true` for \"force\" here.\n            if (this.connector != null) {\n                previous = this.connector;\n                previousClasses = previous.getClass();\n                this.connector.cleanup();\n                this.connector.destroy();\n            }\n\n            this.connector = connector;\n            if (typeId) {\n                this.cacheTypeItem(\"connector\", connector, typeId);\n            }\n\n            this.canvas = this.connector.canvas;\n            this.bgCanvas = this.connector.bgCanvas;\n\n            // put classes from prior connector onto the canvas\n            this.addClass(previousClasses);\n\n            // new: instead of binding listeners per connector, we now just have one delegate on the container.\n            // so for that handler we set the connection as the '_jsPlumb' member of the canvas element, and\n            // bgCanvas, if it exists, which it does right now in the VML renderer, so it won't from v 2.0.0 onwards.\n            if (this.canvas) this.canvas._jsPlumb = this;\n            if (this.bgCanvas) this.bgCanvas._jsPlumb = this;\n\n            if (previous != null) {\n                var o = this.getOverlays();\n                for (var i = 0; i < o.length; i++) {\n                    if (o[i].transfer) o[i].transfer(this.connector);\n                }\n            }\n\n            if (!doNotChangeListenerComponent) this.setListenerComponent(this.connector);\n            if (!doNotRepaint) this.repaint();\n        },\n        setConnector: function (connectorSpec, doNotRepaint, doNotChangeListenerComponent, typeId) {\n            var connector = this.prepareConnector(connectorSpec, typeId);\n            this.setPreparedConnector(connector, doNotRepaint, doNotChangeListenerComponent, typeId);\n        },\n        paint: function (params) {\n\n            if (!this._jsPlumb.instance.isSuspendDrawing() && this._jsPlumb.visible) {\n                params = params || {};\n                var timestamp = params.timestamp,\n                // if the moving object is not the source we must transpose the two references.\n                    swap = false,\n                    tId = swap ? this.sourceId : this.targetId, sId = swap ? this.targetId : this.sourceId,\n                    tIdx = swap ? 0 : 1, sIdx = swap ? 1 : 0;\n\n                if (timestamp == null || timestamp != this._jsPlumb.lastPaintedAt) {\n                    var sourceInfo = this._jsPlumb.instance.updateOffset({elId:sId}).o,\n                        targetInfo = this._jsPlumb.instance.updateOffset({elId:tId}).o,\n                        sE = this.endpoints[sIdx], tE = this.endpoints[tIdx];\n\n                    var sAnchorP = sE.anchor.getCurrentLocation({xy: [sourceInfo.left, sourceInfo.top], wh: [sourceInfo.width, sourceInfo.height], element: sE, timestamp: timestamp}),\n                        tAnchorP = tE.anchor.getCurrentLocation({xy: [targetInfo.left, targetInfo.top], wh: [targetInfo.width, targetInfo.height], element: tE, timestamp: timestamp});\n\n                    this.connector.resetBounds();\n\n                    this.connector.compute({\n                        sourcePos: sAnchorP,\n                        targetPos: tAnchorP,\n                        sourceEndpoint: this.endpoints[sIdx],\n                        targetEndpoint: this.endpoints[tIdx],\n                        \"stroke-width\": this._jsPlumb.paintStyleInUse.strokeWidth,\n                        sourceInfo: sourceInfo,\n                        targetInfo: targetInfo\n                    });\n\n                    var overlayExtents = { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity };\n\n                    // compute overlays. we do this first so we can get their placements, and adjust the\n                    // container if needs be (if an overlay would be clipped)\n                    for (var i in this._jsPlumb.overlays) {\n                        if (this._jsPlumb.overlays.hasOwnProperty(i)) {\n                            var o = this._jsPlumb.overlays[i];\n                            if (o.isVisible()) {\n                                this._jsPlumb.overlayPlacements[i] = o.draw(this.connector, this._jsPlumb.paintStyleInUse, this.getAbsoluteOverlayPosition(o));\n                                overlayExtents.minX = Math.min(overlayExtents.minX, this._jsPlumb.overlayPlacements[i].minX);\n                                overlayExtents.maxX = Math.max(overlayExtents.maxX, this._jsPlumb.overlayPlacements[i].maxX);\n                                overlayExtents.minY = Math.min(overlayExtents.minY, this._jsPlumb.overlayPlacements[i].minY);\n                                overlayExtents.maxY = Math.max(overlayExtents.maxY, this._jsPlumb.overlayPlacements[i].maxY);\n                            }\n                        }\n                    }\n\n                    var lineWidth = parseFloat(this._jsPlumb.paintStyleInUse.strokeWidth || 1) / 2,\n                        outlineWidth = parseFloat(this._jsPlumb.paintStyleInUse.strokeWidth || 0),\n                        extents = {\n                            xmin: Math.min(this.connector.bounds.minX - (lineWidth + outlineWidth), overlayExtents.minX),\n                            ymin: Math.min(this.connector.bounds.minY - (lineWidth + outlineWidth), overlayExtents.minY),\n                            xmax: Math.max(this.connector.bounds.maxX + (lineWidth + outlineWidth), overlayExtents.maxX),\n                            ymax: Math.max(this.connector.bounds.maxY + (lineWidth + outlineWidth), overlayExtents.maxY)\n                        };\n                    // paint the connector.\n                    this.connector.paint(this._jsPlumb.paintStyleInUse, null, extents);\n                    // and then the overlays\n                    for (var j in this._jsPlumb.overlays) {\n                        if (this._jsPlumb.overlays.hasOwnProperty(j)) {\n                            var p = this._jsPlumb.overlays[j];\n                            if (p.isVisible()) {\n                                p.paint(this._jsPlumb.overlayPlacements[j], extents);\n                            }\n                        }\n                    }\n                }\n                this._jsPlumb.lastPaintedAt = timestamp;\n            }\n        },\n        repaint: function (params) {\n            params = params || {};\n            this.paint({ elId: this.sourceId, recalc: !(params.recalc === false), timestamp: params.timestamp});\n        },\n        prepareEndpoint: function (_jsPlumb, _newEndpoint, conn, existing, index, params, element, elementId) {\n            var e;\n            if (existing) {\n                conn.endpoints[index] = existing;\n                existing.addConnection(conn);\n            } else {\n                if (!params.endpoints) params.endpoints = [ null, null ];\n                var ep = params.endpoints[index] || params.endpoint || _jsPlumb.Defaults.Endpoints[index] || _jp.Defaults.Endpoints[index] || _jsPlumb.Defaults.Endpoint || _jp.Defaults.Endpoint;\n                if (!params.endpointStyles) params.endpointStyles = [ null, null ];\n                if (!params.endpointHoverStyles) params.endpointHoverStyles = [ null, null ];\n                var es = params.endpointStyles[index] || params.endpointStyle || _jsPlumb.Defaults.EndpointStyles[index] || _jp.Defaults.EndpointStyles[index] || _jsPlumb.Defaults.EndpointStyle || _jp.Defaults.EndpointStyle;\n                // Endpoints derive their fill from the connector's stroke, if no fill was specified.\n                if (es.fill == null && params.paintStyle != null)\n                    es.fill = params.paintStyle.stroke;\n\n                if (es.outlineStroke == null && params.paintStyle != null)\n                    es.outlineStroke = params.paintStyle.outlineStroke;\n                if (es.outlineWidth == null && params.paintStyle != null)\n                    es.outlineWidth = params.paintStyle.outlineWidth;\n\n                var ehs = params.endpointHoverStyles[index] || params.endpointHoverStyle || _jsPlumb.Defaults.EndpointHoverStyles[index] || _jp.Defaults.EndpointHoverStyles[index] || _jsPlumb.Defaults.EndpointHoverStyle || _jp.Defaults.EndpointHoverStyle;\n                // endpoint hover fill style is derived from connector's hover stroke style\n                if (params.hoverPaintStyle != null) {\n                    if (ehs == null) ehs = {};\n                    if (ehs.fill == null) {\n                        ehs.fill = params.hoverPaintStyle.stroke;\n                    }\n                }\n                var a = params.anchors ? params.anchors[index] :\n                        params.anchor ? params.anchor :\n                            _makeAnchor(_jsPlumb.Defaults.Anchors[index], elementId, _jsPlumb) ||\n                            _makeAnchor(_jp.Defaults.Anchors[index], elementId, _jsPlumb) ||\n                            _makeAnchor(_jsPlumb.Defaults.Anchor, elementId, _jsPlumb) ||\n                            _makeAnchor(_jp.Defaults.Anchor, elementId, _jsPlumb),\n                    u = params.uuids ? params.uuids[index] : null;\n\n                e = _newEndpoint({\n                    paintStyle: es, hoverPaintStyle: ehs, endpoint: ep, connections: [ conn ],\n                    uuid: u, anchor: a, source: element, scope: params.scope,\n                    reattach: params.reattach || _jsPlumb.Defaults.ReattachConnections,\n                    detachable: params.detachable || _jsPlumb.Defaults.ConnectionsDetachable\n                });\n                if (existing == null) {\n                    e.setDeleteOnEmpty(true);\n                }\n                conn.endpoints[index] = e;\n\n                if (params.drawEndpoints === false) e.setVisible(false, true, true);\n\n            }\n            return e;\n        }\n\n    }); // END Connection class            \n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the code for creating and manipulating anchors.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n\n    var root = this,\n        _ju = root.jsPlumbUtil,\n        _jp = root.jsPlumb;\n\n    //\n    // manages anchors for all elements.\n    //\n    _jp.AnchorManager = function (params) {\n        var _amEndpoints = {},\n            continuousAnchorLocations = {},\n            userDefinedContinuousAnchorLocations = {},\n            continuousAnchorOrientations = {},\n            Orientation = { HORIZONTAL: \"horizontal\", VERTICAL: \"vertical\", DIAGONAL: \"diagonal\", IDENTITY: \"identity\" },\n            axes = [\"left\", \"top\", \"right\", \"bottom\"],\n            connectionsByElementId = {},\n            self = this,\n            anchorLists = {},\n            jsPlumbInstance = params.jsPlumbInstance,\n            floatingConnections = {},\n            calculateOrientation = function (sourceId, targetId, sd, td, sourceAnchor, targetAnchor) {\n\n                if (sourceId === targetId) return {\n                    orientation: Orientation.IDENTITY,\n                    a: [\"top\", \"top\"]\n                };\n\n                var theta = Math.atan2((td.centery - sd.centery), (td.centerx - sd.centerx)),\n                    theta2 = Math.atan2((sd.centery - td.centery), (sd.centerx - td.centerx));\n\n// --------------------------------------------------------------------------------------\n\n                // improved face calculation. get midpoints of each face for source and target, then put in an array with all combinations of\n                // source/target faces. sort this array by distance between midpoints. the entry at index 0 is our preferred option. we can\n                // go through the array one by one until we find an entry in which each requested face is supported.\n                var candidates = [], midpoints = { };\n                (function (types, dim) {\n                    for (var i = 0; i < types.length; i++) {\n                        midpoints[types[i]] = {\n                            \"left\": [ dim[i].left, dim[i].centery ],\n                            \"right\": [ dim[i].right, dim[i].centery ],\n                            \"top\": [ dim[i].centerx, dim[i].top ],\n                            \"bottom\": [ dim[i].centerx , dim[i].bottom]\n                        };\n                    }\n                })([ \"source\", \"target\" ], [ sd, td ]);\n\n                for (var sf = 0; sf < axes.length; sf++) {\n                    for (var tf = 0; tf < axes.length; tf++) {\n                        candidates.push({\n                            source: axes[sf],\n                            target: axes[tf],\n                            dist: Biltong.lineLength(midpoints.source[axes[sf]], midpoints.target[axes[tf]])\n                        });\n                    }\n                }\n\n                candidates.sort(function (a, b) {\n                    return a.dist < b.dist ? -1 : a.dist > b.dist ? 1 : 0;\n                });\n\n                // now go through this list and try to get an entry that satisfies both (there will be one, unless one of the anchors\n                // declares no available faces)\n                var sourceEdge = candidates[0].source, targetEdge = candidates[0].target;\n                for (var i = 0; i < candidates.length; i++) {\n\n                    if (!sourceAnchor.isContinuous || sourceAnchor.isEdgeSupported(candidates[i].source))\n                        sourceEdge = candidates[i].source;\n                    else\n                        sourceEdge = null;\n\n                    if (!targetAnchor.isContinuous || targetAnchor.isEdgeSupported(candidates[i].target))\n                        targetEdge = candidates[i].target;\n                    else {\n                        targetEdge = null;\n                    }\n\n                    if (sourceEdge != null && targetEdge != null) break;\n                }\n\n// --------------------------------------------------------------------------------------\n\n                return {\n                    a: [ sourceEdge, targetEdge ],\n                    theta: theta,\n                    theta2: theta2\n                };\n            },\n        // used by placeAnchors function\n            placeAnchorsOnLine = function (desc, elementDimensions, elementPosition, connections, horizontal, otherMultiplier, reverse) {\n                var a = [], step = elementDimensions[horizontal ? 0 : 1] / (connections.length + 1);\n\n                for (var i = 0; i < connections.length; i++) {\n                    var val = (i + 1) * step, other = otherMultiplier * elementDimensions[horizontal ? 1 : 0];\n                    if (reverse)\n                        val = elementDimensions[horizontal ? 0 : 1] - val;\n\n                    var dx = (horizontal ? val : other), x = elementPosition[0] + dx, xp = dx / elementDimensions[0],\n                        dy = (horizontal ? other : val), y = elementPosition[1] + dy, yp = dy / elementDimensions[1];\n\n                    a.push([ x, y, xp, yp, connections[i][1], connections[i][2] ]);\n                }\n\n                return a;\n            },\n        // used by edgeSortFunctions\n            currySort = function (reverseAngles) {\n                return function (a, b) {\n                    var r = true;\n                    if (reverseAngles) {\n                        r = a[0][0] < b[0][0];\n                    }\n                    else {\n                        r = a[0][0] > b[0][0];\n                    }\n                    return r === false ? -1 : 1;\n                };\n            },\n        // used by edgeSortFunctions\n            leftSort = function (a, b) {\n                // first get adjusted values\n                var p1 = a[0][0] < 0 ? -Math.PI - a[0][0] : Math.PI - a[0][0],\n                    p2 = b[0][0] < 0 ? -Math.PI - b[0][0] : Math.PI - b[0][0];\n                if (p1 > p2) return 1;\n                else return -1;\n            },\n        // used by placeAnchors\n            edgeSortFunctions = {\n                \"top\": function (a, b) {\n                    return a[0] > b[0] ? 1 : -1;\n                },\n                \"right\": currySort(true),\n                \"bottom\": currySort(true),\n                \"left\": leftSort\n            },\n        // used by placeAnchors\n            _sortHelper = function (_array, _fn) {\n                return _array.sort(_fn);\n            },\n        // used by AnchorManager.redraw\n            placeAnchors = function (elementId, _anchorLists) {\n                var cd = jsPlumbInstance.getCachedData(elementId), sS = cd.s, sO = cd.o,\n                    placeSomeAnchors = function (desc, elementDimensions, elementPosition, unsortedConnections, isHorizontal, otherMultiplier, orientation) {\n                        if (unsortedConnections.length > 0) {\n                            var sc = _sortHelper(unsortedConnections, edgeSortFunctions[desc]), // puts them in order based on the target element's pos on screen\n                                reverse = desc === \"right\" || desc === \"top\",\n                                anchors = placeAnchorsOnLine(desc, elementDimensions,\n                                    elementPosition, sc,\n                                    isHorizontal, otherMultiplier, reverse);\n\n                            // takes a computed anchor position and adjusts it for parent offset and scroll, then stores it.\n                            var _setAnchorLocation = function (endpoint, anchorPos) {\n                                continuousAnchorLocations[endpoint.id] = [ anchorPos[0], anchorPos[1], anchorPos[2], anchorPos[3] ];\n                                continuousAnchorOrientations[endpoint.id] = orientation;\n                            };\n\n                            for (var i = 0; i < anchors.length; i++) {\n                                var c = anchors[i][4], weAreSource = c.endpoints[0].elementId === elementId, weAreTarget = c.endpoints[1].elementId === elementId;\n                                if (weAreSource)\n                                    _setAnchorLocation(c.endpoints[0], anchors[i]);\n                                if (weAreTarget)\n                                    _setAnchorLocation(c.endpoints[1], anchors[i]);\n                            }\n                        }\n                    };\n\n                placeSomeAnchors(\"bottom\", sS, [sO.left, sO.top], _anchorLists.bottom, true, 1, [0, 1]);\n                placeSomeAnchors(\"top\", sS, [sO.left, sO.top], _anchorLists.top, true, 0, [0, -1]);\n                placeSomeAnchors(\"left\", sS, [sO.left, sO.top], _anchorLists.left, false, 0, [-1, 0]);\n                placeSomeAnchors(\"right\", sS, [sO.left, sO.top], _anchorLists.right, false, 1, [1, 0]);\n            };\n\n        this.reset = function () {\n            _amEndpoints = {};\n            connectionsByElementId = {};\n            anchorLists = {};\n        };\n        this.addFloatingConnection = function (key, conn) {\n            floatingConnections[key] = conn;\n        };\n        this.removeFloatingConnection = function (key) {\n            delete floatingConnections[key];\n        };\n        this.newConnection = function (conn) {\n            var sourceId = conn.sourceId, targetId = conn.targetId,\n                ep = conn.endpoints,\n                doRegisterTarget = true,\n                registerConnection = function (otherIndex, otherEndpoint, otherAnchor, elId, c) {\n                    if ((sourceId == targetId) && otherAnchor.isContinuous) {\n                        // remove the target endpoint's canvas.  we dont need it.\n                        conn._jsPlumb.instance.removeElement(ep[1].canvas);\n                        doRegisterTarget = false;\n                    }\n                    _ju.addToList(connectionsByElementId, elId, [c, otherEndpoint, otherAnchor.constructor == _jp.DynamicAnchor]);\n                };\n\n            registerConnection(0, ep[0], ep[0].anchor, targetId, conn);\n            if (doRegisterTarget)\n                registerConnection(1, ep[1], ep[1].anchor, sourceId, conn);\n        };\n        var removeEndpointFromAnchorLists = function (endpoint) {\n            (function (list, eId) {\n                if (list) {  // transient anchors dont get entries in this list.\n                    var f = function (e) {\n                        return e[4] == eId;\n                    };\n                    _ju.removeWithFunction(list.top, f);\n                    _ju.removeWithFunction(list.left, f);\n                    _ju.removeWithFunction(list.bottom, f);\n                    _ju.removeWithFunction(list.right, f);\n                }\n            })(anchorLists[endpoint.elementId], endpoint.id);\n        };\n        this.connectionDetached = function (connInfo, doNotRedraw) {\n            var connection = connInfo.connection || connInfo,\n                sourceId = connInfo.sourceId,\n                targetId = connInfo.targetId,\n                ep = connection.endpoints,\n                removeConnection = function (otherIndex, otherEndpoint, otherAnchor, elId, c) {\n                   _ju.removeWithFunction(connectionsByElementId[elId], function (_c) {\n                        return _c[0].id == c.id;\n                    });\n                };\n\n            removeConnection(1, ep[1], ep[1].anchor, sourceId, connection);\n            removeConnection(0, ep[0], ep[0].anchor, targetId, connection);\n            if (connection.floatingId) {\n                removeConnection(connection.floatingIndex, connection.floatingEndpoint, connection.floatingEndpoint.anchor, connection.floatingId, connection);\n                removeEndpointFromAnchorLists(connection.floatingEndpoint);\n            }\n\n            // remove from anchorLists            \n            removeEndpointFromAnchorLists(connection.endpoints[0]);\n            removeEndpointFromAnchorLists(connection.endpoints[1]);\n\n            if (!doNotRedraw) {\n                self.redraw(connection.sourceId);\n                if (connection.targetId !== connection.sourceId)\n                    self.redraw(connection.targetId);\n            }\n        };\n        this.add = function (endpoint, elementId) {\n            _ju.addToList(_amEndpoints, elementId, endpoint);\n        };\n        this.changeId = function (oldId, newId) {\n            connectionsByElementId[newId] = connectionsByElementId[oldId];\n            _amEndpoints[newId] = _amEndpoints[oldId];\n            delete connectionsByElementId[oldId];\n            delete _amEndpoints[oldId];\n        };\n        this.getConnectionsFor = function (elementId) {\n            return connectionsByElementId[elementId] || [];\n        };\n        this.getEndpointsFor = function (elementId) {\n            return _amEndpoints[elementId] || [];\n        };\n        this.deleteEndpoint = function (endpoint) {\n            _ju.removeWithFunction(_amEndpoints[endpoint.elementId], function (e) {\n                return e.id == endpoint.id;\n            });\n            removeEndpointFromAnchorLists(endpoint);\n        };\n        this.clearFor = function (elementId) {\n            delete _amEndpoints[elementId];\n            _amEndpoints[elementId] = [];\n        };\n        // updates the given anchor list by either updating an existing anchor's info, or adding it. this function\n        // also removes the anchor from its previous list, if the edge it is on has changed.\n        // all connections found along the way (those that are connected to one of the faces this function\n        // operates on) are added to the connsToPaint list, as are their endpoints. in this way we know to repaint\n        // them wthout having to calculate anything else about them.\n        var _updateAnchorList = function (lists, theta, order, conn, aBoolean, otherElId, idx, reverse, edgeId, elId, connsToPaint, endpointsToPaint) {\n            // first try to find the exact match, but keep track of the first index of a matching element id along the way.s\n            var exactIdx = -1,\n                firstMatchingElIdx = -1,\n                endpoint = conn.endpoints[idx],\n                endpointId = endpoint.id,\n                oIdx = [1, 0][idx],\n                values = [\n                    [ theta, order ],\n                    conn,\n                    aBoolean,\n                    otherElId,\n                    endpointId\n                ],\n                listToAddTo = lists[edgeId],\n                listToRemoveFrom = endpoint._continuousAnchorEdge ? lists[endpoint._continuousAnchorEdge] : null,\n                i,\n                candidate;\n\n            if (listToRemoveFrom) {\n                var rIdx = _ju.findWithFunction(listToRemoveFrom, function (e) {\n                    return e[4] == endpointId;\n                });\n                if (rIdx != -1) {\n                    listToRemoveFrom.splice(rIdx, 1);\n                    // get all connections from this list\n                    for (i = 0; i < listToRemoveFrom.length; i++) {\n                        candidate = listToRemoveFrom[i][1];\n                        _ju.addWithFunction(connsToPaint, candidate, function (c) {\n                            return c.id == candidate.id;\n                        });\n                        _ju.addWithFunction(endpointsToPaint, listToRemoveFrom[i][1].endpoints[idx], function (e) {\n                            return e.id == candidate.endpoints[idx].id;\n                        });\n                        _ju.addWithFunction(endpointsToPaint, listToRemoveFrom[i][1].endpoints[oIdx], function (e) {\n                            return e.id == candidate.endpoints[oIdx].id;\n                        });\n                    }\n                }\n            }\n\n            for (i = 0; i < listToAddTo.length; i++) {\n                candidate = listToAddTo[i][1];\n                if (params.idx == 1 && listToAddTo[i][3] === otherElId && firstMatchingElIdx == -1)\n                    firstMatchingElIdx = i;\n                _ju.addWithFunction(connsToPaint, candidate, function (c) {\n                    return c.id == candidate.id;\n                });\n                _ju.addWithFunction(endpointsToPaint, listToAddTo[i][1].endpoints[idx], function (e) {\n                    return e.id == candidate.endpoints[idx].id;\n                });\n                _ju.addWithFunction(endpointsToPaint, listToAddTo[i][1].endpoints[oIdx], function (e) {\n                    return e.id == candidate.endpoints[oIdx].id;\n                });\n            }\n            if (exactIdx != -1) {\n                listToAddTo[exactIdx] = values;\n            }\n            else {\n                var insertIdx = reverse ? firstMatchingElIdx != -1 ? firstMatchingElIdx : 0 : listToAddTo.length; // of course we will get this from having looked through the array shortly.\n                listToAddTo.splice(insertIdx, 0, values);\n            }\n\n            // store this for next time.\n            endpoint._continuousAnchorEdge = edgeId;\n        };\n\n        //\n        // find the entry in an endpoint's list for this connection and update its target endpoint\n        // with the current target in the connection.\n        // This method and sourceChanged need to be folder into one.\n        //\n        this.updateOtherEndpoint = function (sourceElId, oldTargetId, newTargetId, connection) {\n            var sIndex = _ju.findWithFunction(connectionsByElementId[sourceElId], function (i) {\n                    return i[0].id === connection.id;\n                }),\n                tIndex = _ju.findWithFunction(connectionsByElementId[oldTargetId], function (i) {\n                    return i[0].id === connection.id;\n                });\n\n            // update or add data for source\n            if (sIndex != -1) {\n                connectionsByElementId[sourceElId][sIndex][0] = connection;\n                connectionsByElementId[sourceElId][sIndex][1] = connection.endpoints[1];\n                connectionsByElementId[sourceElId][sIndex][2] = connection.endpoints[1].anchor.constructor == _jp.DynamicAnchor;\n            }\n\n            // remove entry for previous target (if there)\n            if (tIndex > -1) {\n                connectionsByElementId[oldTargetId].splice(tIndex, 1);\n                // add entry for new target\n                _ju.addToList(connectionsByElementId, newTargetId, [connection, connection.endpoints[0], connection.endpoints[0].anchor.constructor == _jp.DynamicAnchor]);\n            }\n\n            connection.updateConnectedClass();\n        };\n\n        //\n        // notification that the connection given has changed source from the originalId to the newId.\n        // This involves:\n        // 1. removing the connection from the list of connections stored for the originalId\n        // 2. updating the source information for the target of the connection\n        // 3. re-registering the connection in connectionsByElementId with the newId\n        //\n        this.sourceChanged = function (originalId, newId, connection, newElement) {\n            if (originalId !== newId) {\n\n                connection.sourceId = newId;\n                connection.source = newElement;\n\n                // remove the entry that points from the old source to the target\n                _ju.removeWithFunction(connectionsByElementId[originalId], function (info) {\n                    return info[0].id === connection.id;\n                });\n                // find entry for target and update it\n                var tIdx = _ju.findWithFunction(connectionsByElementId[connection.targetId], function (i) {\n                    return i[0].id === connection.id;\n                });\n                if (tIdx > -1) {\n                    connectionsByElementId[connection.targetId][tIdx][0] = connection;\n                    connectionsByElementId[connection.targetId][tIdx][1] = connection.endpoints[0];\n                    connectionsByElementId[connection.targetId][tIdx][2] = connection.endpoints[0].anchor.constructor == _jp.DynamicAnchor;\n                }\n                // add entry for new source\n                _ju.addToList(connectionsByElementId, newId, [connection, connection.endpoints[1], connection.endpoints[1].anchor.constructor == _jp.DynamicAnchor]);\n\n                // TODO SP not final on this yet. when a user drags an existing connection and it turns into a self\n                // loop, then this code hides the target endpoint (by removing it from the DOM) But I think this should\n                // occur only if the anchor is Continuous\n                if (connection.endpoints[1].anchor.isContinuous) {\n                    if (connection.source === connection.target) {\n                        connection._jsPlumb.instance.removeElement(connection.endpoints[1].canvas);\n                    }\n                    else {\n                        if (connection.endpoints[1].canvas.parentNode == null) {\n                            connection._jsPlumb.instance.appendElement(connection.endpoints[1].canvas);\n                        }\n                    }\n                }\n\n                connection.updateConnectedClass();\n            }\n        };\n\n        //\n        // moves the given endpoint from `currentId` to `element`.\n        // This involves:\n        //\n        // 1. changing the key in _amEndpoints under which the endpoint is stored\n        // 2. changing the source or target values in all of the endpoint's connections\n        // 3. changing the array in connectionsByElementId in which the endpoint's connections\n        //    are stored (done by either sourceChanged or updateOtherEndpoint)\n        //\n        this.rehomeEndpoint = function (ep, currentId, element) {\n            var eps = _amEndpoints[currentId] || [],\n                elementId = jsPlumbInstance.getId(element);\n\n            if (elementId !== currentId) {\n                var idx = eps.indexOf(ep);\n                if (idx > -1) {\n                    var _ep = eps.splice(idx, 1)[0];\n                    self.add(_ep, elementId);\n                }\n            }\n\n            for (var i = 0; i < ep.connections.length; i++) {\n                if (ep.connections[i].sourceId == currentId) {\n                    //ep.connections[i].sourceId = ep.elementId;\n                    //ep.connections[i].source = ep.element;\n                    self.sourceChanged(currentId, ep.elementId, ep.connections[i], ep.element);\n                }\n                else if (ep.connections[i].targetId == currentId) {\n                    ep.connections[i].targetId = ep.elementId;\n                    ep.connections[i].target = ep.element;\n                    self.updateOtherEndpoint(ep.connections[i].sourceId, currentId, ep.elementId, ep.connections[i]);\n                }\n            }\n        };\n\n        this.redraw = function (elementId, ui, timestamp, offsetToUI, clearEdits, doNotRecalcEndpoint) {\n\n            if (!jsPlumbInstance.isSuspendDrawing()) {\n                // get all the endpoints for this element\n                var ep = _amEndpoints[elementId] || [],\n                    endpointConnections = connectionsByElementId[elementId] || [],\n                    connectionsToPaint = [],\n                    endpointsToPaint = [],\n                    anchorsToUpdate = [];\n\n                timestamp = timestamp || jsPlumbInstance.timestamp();\n                // offsetToUI are values that would have been calculated in the dragManager when registering\n                // an endpoint for an element that had a parent (somewhere in the hierarchy) that had been\n                // registered as draggable.\n                offsetToUI = offsetToUI || {left: 0, top: 0};\n                if (ui) {\n                    ui = {\n                        left: ui.left + offsetToUI.left,\n                        top: ui.top + offsetToUI.top\n                    };\n                }\n\n                // valid for one paint cycle.\n                var myOffset = jsPlumbInstance.updateOffset({ elId: elementId, offset: ui, recalc: false, timestamp: timestamp }),\n                    orientationCache = {};\n\n                // actually, first we should compute the orientation of this element to all other elements to which\n                // this element is connected with a continuous anchor (whether both ends of the connection have\n                // a continuous anchor or just one)\n\n                for (var i = 0; i < endpointConnections.length; i++) {\n                    var conn = endpointConnections[i][0],\n                        sourceId = conn.sourceId,\n                        targetId = conn.targetId,\n                        sourceContinuous = conn.endpoints[0].anchor.isContinuous,\n                        targetContinuous = conn.endpoints[1].anchor.isContinuous;\n\n                    if (sourceContinuous || targetContinuous) {\n                        var oKey = sourceId + \"_\" + targetId,\n                            o = orientationCache[oKey],\n                            oIdx = conn.sourceId == elementId ? 1 : 0;\n\n                        if (sourceContinuous && !anchorLists[sourceId]) anchorLists[sourceId] = { top: [], right: [], bottom: [], left: [] };\n                        if (targetContinuous && !anchorLists[targetId]) anchorLists[targetId] = { top: [], right: [], bottom: [], left: [] };\n\n                        if (elementId != targetId) jsPlumbInstance.updateOffset({ elId: targetId, timestamp: timestamp });\n                        if (elementId != sourceId) jsPlumbInstance.updateOffset({ elId: sourceId, timestamp: timestamp });\n\n                        var td = jsPlumbInstance.getCachedData(targetId),\n                            sd = jsPlumbInstance.getCachedData(sourceId);\n\n                        if (targetId == sourceId && (sourceContinuous || targetContinuous)) {\n                            // here we may want to improve this by somehow determining the face we'd like\n                            // to put the connector on.  ideally, when drawing, the face should be calculated\n                            // by determining which face is closest to the point at which the mouse button\n                            // was released.  for now, we're putting it on the top face.\n                            _updateAnchorList( anchorLists[sourceId], -Math.PI / 2, 0, conn, false, targetId, 0, false, \"top\", sourceId, connectionsToPaint, endpointsToPaint);\n                            _updateAnchorList( anchorLists[targetId], -Math.PI / 2, 0, conn, false, sourceId, 1, false, \"top\", targetId, connectionsToPaint, endpointsToPaint);\n                        }\n                        else {\n                            if (!o) {\n                                o = calculateOrientation(sourceId, targetId, sd.o, td.o, conn.endpoints[0].anchor, conn.endpoints[1].anchor);\n                                orientationCache[oKey] = o;\n                                // this would be a performance enhancement, but the computed angles need to be clamped to\n                                //the (-PI/2 -> PI/2) range in order for the sorting to work properly.\n                                /*  orientationCache[oKey2] = {\n                                 orientation:o.orientation,\n                                 a:[o.a[1], o.a[0]],\n                                 theta:o.theta + Math.PI,\n                                 theta2:o.theta2 + Math.PI\n                                 };*/\n                            }\n                            if (sourceContinuous) _updateAnchorList(anchorLists[sourceId], o.theta, 0, conn, false, targetId, 0, false, o.a[0], sourceId, connectionsToPaint, endpointsToPaint);\n                            if (targetContinuous) _updateAnchorList(anchorLists[targetId], o.theta2, -1, conn, true, sourceId, 1, true, o.a[1], targetId, connectionsToPaint, endpointsToPaint);\n                        }\n\n                        if (sourceContinuous) _ju.addWithFunction(anchorsToUpdate, sourceId, function (a) {\n                            return a === sourceId;\n                        });\n                        if (targetContinuous) _ju.addWithFunction(anchorsToUpdate, targetId, function (a) {\n                            return a === targetId;\n                        });\n                        _ju.addWithFunction(connectionsToPaint, conn, function (c) {\n                            return c.id == conn.id;\n                        });\n                        if ((sourceContinuous && oIdx === 0) || (targetContinuous && oIdx === 1))\n                            _ju.addWithFunction(endpointsToPaint, conn.endpoints[oIdx], function (e) {\n                                return e.id == conn.endpoints[oIdx].id;\n                            });\n                    }\n                }\n\n                // place Endpoints whose anchors are continuous but have no Connections\n                for (i = 0; i < ep.length; i++) {\n                    if (ep[i].connections.length === 0 && ep[i].anchor.isContinuous) {\n                        if (!anchorLists[elementId]) anchorLists[elementId] = { top: [], right: [], bottom: [], left: [] };\n                        _updateAnchorList(anchorLists[elementId], -Math.PI / 2, 0, {endpoints: [ep[i], ep[i]], paint: function () {\n                        }}, false, elementId, 0, false, ep[i].anchor.getDefaultFace(), elementId, connectionsToPaint, endpointsToPaint);\n                        _ju.addWithFunction(anchorsToUpdate, elementId, function (a) {\n                            return a === elementId;\n                        });\n                    }\n                }\n\n\n                // now place all the continuous anchors we need to;\n                for (i = 0; i < anchorsToUpdate.length; i++) {\n                    placeAnchors(anchorsToUpdate[i], anchorLists[anchorsToUpdate[i]]);\n                }\n\n                // now that continuous anchors have been placed, paint all the endpoints for this element\n                // TODO performance: add the endpoint ids to a temp array, and then when iterating in the next\n                // loop, check that we didn't just paint that endpoint. we can probably shave off a few more milliseconds this way.\n                for (i = 0; i < ep.length; i++) {\n                    ep[i].paint({ timestamp: timestamp, offset: myOffset, dimensions: myOffset.s, recalc: doNotRecalcEndpoint !== true });\n                }\n\n                // ... and any other endpoints we came across as a result of the continuous anchors.\n                for (i = 0; i < endpointsToPaint.length; i++) {\n                    var cd = jsPlumbInstance.getCachedData(endpointsToPaint[i].elementId);\n                    endpointsToPaint[i].paint({ timestamp: timestamp, offset: cd, dimensions: cd.s });\n                }\n\n                // paint all the standard and \"dynamic connections\", which are connections whose other anchor is\n                // static and therefore does need to be recomputed; we make sure that happens only one time.\n\n                // TODO we could have compiled a list of these in the first pass through connections; might save some time.\n                for (i = 0; i < endpointConnections.length; i++) {\n                    var otherEndpoint = endpointConnections[i][1];\n                    if (otherEndpoint.anchor.constructor == _jp.DynamicAnchor) {\n                        otherEndpoint.paint({ elementWithPrecedence: elementId, timestamp: timestamp });\n                        _ju.addWithFunction(connectionsToPaint, endpointConnections[i][0], function (c) {\n                            return c.id == endpointConnections[i][0].id;\n                        });\n                        // all the connections for the other endpoint now need to be repainted\n                        for (var k = 0; k < otherEndpoint.connections.length; k++) {\n                            if (otherEndpoint.connections[k] !== endpointConnections[i][0])\n                                _ju.addWithFunction(connectionsToPaint, otherEndpoint.connections[k], function (c) {\n                                    return c.id == otherEndpoint.connections[k].id;\n                                });\n                        }\n                    } else if (otherEndpoint.anchor.constructor == _jp.Anchor) {\n                        _ju.addWithFunction(connectionsToPaint, endpointConnections[i][0], function (c) {\n                            return c.id == endpointConnections[i][0].id;\n                        });\n                    }\n                }\n\n                // paint current floating connection for this element, if there is one.\n                var fc = floatingConnections[elementId];\n                if (fc)\n                    fc.paint({timestamp: timestamp, recalc: false, elId: elementId});\n\n                // paint all the connections\n                for (i = 0; i < connectionsToPaint.length; i++) {\n                    connectionsToPaint[i].paint({elId: elementId, timestamp: timestamp, recalc: false, clearEdits: clearEdits});\n                }\n            }\n        };\n\n        var ContinuousAnchor = function (anchorParams) {\n            _ju.EventGenerator.apply(this);\n            this.type = \"Continuous\";\n            this.isDynamic = true;\n            this.isContinuous = true;\n            var faces = anchorParams.faces || [\"top\", \"right\", \"bottom\", \"left\"],\n                clockwise = !(anchorParams.clockwise === false),\n                availableFaces = { },\n                opposites = { \"top\": \"bottom\", \"right\": \"left\", \"left\": \"right\", \"bottom\": \"top\" },\n                clockwiseOptions = { \"top\": \"right\", \"right\": \"bottom\", \"left\": \"top\", \"bottom\": \"left\" },\n                antiClockwiseOptions = { \"top\": \"left\", \"right\": \"top\", \"left\": \"bottom\", \"bottom\": \"right\" },\n                secondBest = clockwise ? clockwiseOptions : antiClockwiseOptions,\n                lastChoice = clockwise ? antiClockwiseOptions : clockwiseOptions,\n                cssClass = anchorParams.cssClass || \"\";\n\n            for (var i = 0; i < faces.length; i++) {\n                availableFaces[faces[i]] = true;\n            }\n\n            this.getDefaultFace = function () {\n                return faces.length === 0 ? \"top\" : faces[0];\n            };\n\n            // if the given edge is supported, returns it. otherwise looks for a substitute that _is_\n            // supported. if none supported we also return the request edge.\n            this.verifyEdge = function (edge) {\n                if (availableFaces[edge]) return edge;\n                else if (availableFaces[opposites[edge]]) return opposites[edge];\n                else if (availableFaces[secondBest[edge]]) return secondBest[edge];\n                else if (availableFaces[lastChoice[edge]]) return lastChoice[edge];\n                return edge; // we have to give them something.\n            };\n\n            this.isEdgeSupported = function (edge) {\n                return availableFaces[edge] === true;\n            };\n\n            this.compute = function (params) {\n                return userDefinedContinuousAnchorLocations[params.element.id] || continuousAnchorLocations[params.element.id] || [0, 0];\n            };\n            this.getCurrentLocation = function (params) {\n                return userDefinedContinuousAnchorLocations[params.element.id] || continuousAnchorLocations[params.element.id] || [0, 0];\n            };\n            this.getOrientation = function (endpoint) {\n                return continuousAnchorOrientations[endpoint.id] || [0, 0];\n            };\n            this.clearUserDefinedLocation = function () {\n                delete userDefinedContinuousAnchorLocations[anchorParams.elementId];\n            };\n            this.setUserDefinedLocation = function (loc) {\n                userDefinedContinuousAnchorLocations[anchorParams.elementId] = loc;\n            };\n            this.getCssClass = function () {\n                return cssClass;\n            };\n        };\n\n        // continuous anchors\n        jsPlumbInstance.continuousAnchorFactory = {\n            get: function (params) {\n                return new ContinuousAnchor(params);\n            },\n            clear: function (elementId) {\n                delete userDefinedContinuousAnchorLocations[elementId];\n                delete continuousAnchorLocations[elementId];\n            }\n        };\n    };\n\n    /**\n     * Anchors model a position on some element at which an Endpoint may be located.  They began as a first class citizen of jsPlumb, ie. a user\n     * was required to create these themselves, but over time this has been replaced by the concept of referring to them either by name (eg. \"TopMiddle\"),\n     * or by an array describing their coordinates (eg. [ 0, 0.5, 0, -1 ], which is the same as \"TopMiddle\").  jsPlumb now handles all of the\n     * creation of Anchors without user intervention.\n     */\n    _jp.Anchor = function (params) {\n        this.x = params.x || 0;\n        this.y = params.y || 0;\n        this.elementId = params.elementId;\n        this.cssClass = params.cssClass || \"\";\n        this.userDefinedLocation = null;\n        this.orientation = params.orientation || [ 0, 0 ];\n        this.lastReturnValue = null;\n        this.offsets = params.offsets || [ 0, 0 ];\n        this.timestamp = null;\n\n        _ju.EventGenerator.apply(this);\n\n        this.compute = function (params) {\n\n            var xy = params.xy, wh = params.wh, timestamp = params.timestamp;\n\n            if (params.clearUserDefinedLocation)\n                this.userDefinedLocation = null;\n\n            if (timestamp && timestamp === this.timestamp)\n                return this.lastReturnValue;\n\n            if (this.userDefinedLocation != null) {\n                this.lastReturnValue = this.userDefinedLocation;\n            }\n            else {\n                this.lastReturnValue = [ xy[0] + (this.x * wh[0]) + this.offsets[0], xy[1] + (this.y * wh[1]) + this.offsets[1] ];\n            }\n\n            this.timestamp = timestamp;\n            return this.lastReturnValue;\n        };\n\n        this.getCurrentLocation = function (params) {\n            params = params || {};\n            return (this.lastReturnValue == null || (params.timestamp != null && this.timestamp != params.timestamp)) ? this.compute(params) : this.lastReturnValue;\n        };\n    };\n    _ju.extend(_jp.Anchor, _ju.EventGenerator, {\n        equals: function (anchor) {\n            if (!anchor) return false;\n            var ao = anchor.getOrientation(),\n                o = this.getOrientation();\n            return this.x == anchor.x && this.y == anchor.y && this.offsets[0] == anchor.offsets[0] && this.offsets[1] == anchor.offsets[1] && o[0] == ao[0] && o[1] == ao[1];\n        },\n        getUserDefinedLocation: function () {\n            return this.userDefinedLocation;\n        },\n        setUserDefinedLocation: function (l) {\n            this.userDefinedLocation = l;\n        },\n        clearUserDefinedLocation: function () {\n            this.userDefinedLocation = null;\n        },\n        getOrientation: function () {\n            return this.orientation;\n        },\n        getCssClass: function () {\n            return this.cssClass;\n        }\n    });\n\n    /**\n     * An Anchor that floats. its orientation is computed dynamically from\n     * its position relative to the anchor it is floating relative to.  It is used when creating\n     * a connection through drag and drop.\n     *\n     * TODO FloatingAnchor could totally be refactored to extend Anchor just slightly.\n     */\n    _jp.FloatingAnchor = function (params) {\n\n        _jp.Anchor.apply(this, arguments);\n\n        // this is the anchor that this floating anchor is referenced to for\n        // purposes of calculating the orientation.\n        var ref = params.reference,\n            // the canvas this refers to.\n            refCanvas = params.referenceCanvas,\n            size = _jp.getSize(refCanvas),\n            // these are used to store the current relative position of our\n            // anchor wrt the reference anchor. they only indicate\n            // direction, so have a value of 1 or -1 (or, very rarely, 0). these\n            // values are written by the compute method, and read\n            // by the getOrientation method.\n            xDir = 0, yDir = 0,\n            // temporary member used to store an orientation when the floating\n            // anchor is hovering over another anchor.\n            orientation = null,\n            _lastResult = null;\n\n        // clear from parent. we want floating anchor orientation to always be computed.\n        this.orientation = null;\n\n        // set these to 0 each; they are used by certain types of connectors in the loopback case,\n        // when the connector is trying to clear the element it is on. but for floating anchor it's not\n        // very important.\n        this.x = 0;\n        this.y = 0;\n\n        this.isFloating = true;\n\n        this.compute = function (params) {\n            var xy = params.xy,\n                result = [ xy[0] + (size[0] / 2), xy[1] + (size[1] / 2) ]; // return origin of the element. we may wish to improve this so that any object can be the drag proxy.\n            _lastResult = result;\n            return result;\n        };\n\n        this.getOrientation = function (_endpoint) {\n            if (orientation) return orientation;\n            else {\n                var o = ref.getOrientation(_endpoint);\n                // here we take into account the orientation of the other\n                // anchor: if it declares zero for some direction, we declare zero too. this might not be the most awesome. perhaps we can come\n                // up with a better way. it's just so that the line we draw looks like it makes sense. maybe this wont make sense.\n                return [ Math.abs(o[0]) * xDir * -1,\n                        Math.abs(o[1]) * yDir * -1 ];\n            }\n        };\n\n        /**\n         * notification the endpoint associated with this anchor is hovering\n         * over another anchor; we want to assume that anchor's orientation\n         * for the duration of the hover.\n         */\n        this.over = function (anchor, endpoint) {\n            orientation = anchor.getOrientation(endpoint);\n        };\n\n        /**\n         * notification the endpoint associated with this anchor is no\n         * longer hovering over another anchor; we should resume calculating\n         * orientation as we normally do.\n         */\n        this.out = function () {\n            orientation = null;\n        };\n\n        this.getCurrentLocation = function (params) {\n            return _lastResult == null ? this.compute(params) : _lastResult;\n        };\n    };\n    _ju.extend(_jp.FloatingAnchor, _jp.Anchor);\n\n    var _convertAnchor = function (anchor, jsPlumbInstance, elementId) {\n        return anchor.constructor == _jp.Anchor ? anchor : jsPlumbInstance.makeAnchor(anchor, elementId, jsPlumbInstance);\n    };\n\n    /* \n     * A DynamicAnchor is an Anchor that contains a list of other Anchors, which it cycles\n     * through at compute time to find the one that is located closest to\n     * the center of the target element, and returns that Anchor's compute\n     * method result. this causes endpoints to follow each other with\n     * respect to the orientation of their target elements, which is a useful\n     * feature for some applications.\n     * \n     */\n    _jp.DynamicAnchor = function (params) {\n        _jp.Anchor.apply(this, arguments);\n\n        this.isDynamic = true;\n        this.anchors = [];\n        this.elementId = params.elementId;\n        this.jsPlumbInstance = params.jsPlumbInstance;\n\n        for (var i = 0; i < params.anchors.length; i++)\n            this.anchors[i] = _convertAnchor(params.anchors[i], this.jsPlumbInstance, this.elementId);\n\n        this.getAnchors = function () {\n            return this.anchors;\n        };\n        this.locked = false;\n        var _curAnchor = this.anchors.length > 0 ? this.anchors[0] : null,\n            _lastAnchor = _curAnchor,\n            self = this,\n\n        // helper method to calculate the distance between the centers of the two elements.\n            _distance = function (anchor, cx, cy, xy, wh) {\n                var ax = xy[0] + (anchor.x * wh[0]), ay = xy[1] + (anchor.y * wh[1]),\n                    acx = xy[0] + (wh[0] / 2), acy = xy[1] + (wh[1] / 2);\n                return (Math.sqrt(Math.pow(cx - ax, 2) + Math.pow(cy - ay, 2)) +\n                    Math.sqrt(Math.pow(acx - ax, 2) + Math.pow(acy - ay, 2)));\n            },\n        // default method uses distance between element centers.  you can provide your own method in the dynamic anchor\n        // constructor (and also to jsPlumb.makeDynamicAnchor). the arguments to it are four arrays:\n        // xy - xy loc of the anchor's element\n        // wh - anchor's element's dimensions\n        // txy - xy loc of the element of the other anchor in the connection\n        // twh - dimensions of the element of the other anchor in the connection.\n        // anchors - the list of selectable anchors\n            _anchorSelector = params.selector || function (xy, wh, txy, twh, anchors) {\n                var cx = txy[0] + (twh[0] / 2), cy = txy[1] + (twh[1] / 2);\n                var minIdx = -1, minDist = Infinity;\n                for (var i = 0; i < anchors.length; i++) {\n                    var d = _distance(anchors[i], cx, cy, xy, wh);\n                    if (d < minDist) {\n                        minIdx = i + 0;\n                        minDist = d;\n                    }\n                }\n                return anchors[minIdx];\n            };\n\n        this.compute = function (params) {\n            var xy = params.xy, wh = params.wh, txy = params.txy, twh = params.twh;\n\n            this.timestamp = params.timestamp;\n\n            var udl = self.getUserDefinedLocation();\n            if (udl != null) {\n                return udl;\n            }\n\n            // if anchor is locked or an opposite element was not given, we\n            // maintain our state. anchor will be locked\n            // if it is the source of a drag and drop.\n            if (this.locked || txy == null || twh == null)\n                return _curAnchor.compute(params);\n            else\n                params.timestamp = null; // otherwise clear this, i think. we want the anchor to compute.\n\n            _curAnchor = _anchorSelector(xy, wh, txy, twh, this.anchors);\n            this.x = _curAnchor.x;\n            this.y = _curAnchor.y;\n\n            if (_curAnchor != _lastAnchor)\n                this.fire(\"anchorChanged\", _curAnchor);\n\n            _lastAnchor = _curAnchor;\n\n            return _curAnchor.compute(params);\n        };\n\n        this.getCurrentLocation = function (params) {\n            return this.getUserDefinedLocation() || (_curAnchor != null ? _curAnchor.getCurrentLocation(params) : null);\n        };\n\n        this.getOrientation = function (_endpoint) {\n            return _curAnchor != null ? _curAnchor.getOrientation(_endpoint) : [ 0, 0 ];\n        };\n        this.over = function (anchor, endpoint) {\n            if (_curAnchor != null) _curAnchor.over(anchor, endpoint);\n        };\n        this.out = function () {\n            if (_curAnchor != null) _curAnchor.out();\n        };\n\n        this.getCssClass = function () {\n            return (_curAnchor && _curAnchor.getCssClass()) || \"\";\n        };\n    };\n    _ju.extend(_jp.DynamicAnchor, _jp.Anchor);\n\n// -------- basic anchors ------------------    \n    var _curryAnchor = function (x, y, ox, oy, type, fnInit) {\n        _jp.Anchors[type] = function (params) {\n            var a = params.jsPlumbInstance.makeAnchor([ x, y, ox, oy, 0, 0 ], params.elementId, params.jsPlumbInstance);\n            a.type = type;\n            if (fnInit) fnInit(a, params);\n            return a;\n        };\n    };\n\n    _curryAnchor(0.5, 0, 0, -1, \"TopCenter\");\n    _curryAnchor(0.5, 1, 0, 1, \"BottomCenter\");\n    _curryAnchor(0, 0.5, -1, 0, \"LeftMiddle\");\n    _curryAnchor(1, 0.5, 1, 0, \"RightMiddle\");\n\n    _curryAnchor(0.5, 0, 0, -1, \"Top\");\n    _curryAnchor(0.5, 1, 0, 1, \"Bottom\");\n    _curryAnchor(0, 0.5, -1, 0, \"Left\");\n    _curryAnchor(1, 0.5, 1, 0, \"Right\");\n    _curryAnchor(0.5, 0.5, 0, 0, \"Center\");\n    _curryAnchor(1, 0, 0, -1, \"TopRight\");\n    _curryAnchor(1, 1, 0, 1, \"BottomRight\");\n    _curryAnchor(0, 0, 0, -1, \"TopLeft\");\n    _curryAnchor(0, 1, 0, 1, \"BottomLeft\");\n\n// ------- dynamic anchors -------------------    \n\n    // default dynamic anchors chooses from Top, Right, Bottom, Left\n    _jp.Defaults.DynamicAnchors = function (params) {\n        return params.jsPlumbInstance.makeAnchors([\"TopCenter\", \"RightMiddle\", \"BottomCenter\", \"LeftMiddle\"], params.elementId, params.jsPlumbInstance);\n    };\n\n    // default dynamic anchors bound to name 'AutoDefault'\n    _jp.Anchors.AutoDefault = function (params) {\n        var a = params.jsPlumbInstance.makeDynamicAnchor(_jp.Defaults.DynamicAnchors(params));\n        a.type = \"AutoDefault\";\n        return a;\n    };\n\n// ------- continuous anchors -------------------    \n\n    var _curryContinuousAnchor = function (type, faces) {\n        _jp.Anchors[type] = function (params) {\n            var a = params.jsPlumbInstance.makeAnchor([\"Continuous\", { faces: faces }], params.elementId, params.jsPlumbInstance);\n            a.type = type;\n            return a;\n        };\n    };\n\n    _jp.Anchors.Continuous = function (params) {\n        return params.jsPlumbInstance.continuousAnchorFactory.get(params);\n    };\n\n    _curryContinuousAnchor(\"ContinuousLeft\", [\"left\"]);\n    _curryContinuousAnchor(\"ContinuousTop\", [\"top\"]);\n    _curryContinuousAnchor(\"ContinuousBottom\", [\"bottom\"]);\n    _curryContinuousAnchor(\"ContinuousRight\", [\"right\"]);\n\n// ------- position assign anchors -------------------    \n\n    // this anchor type lets you assign the position at connection time.\n    _curryAnchor(0, 0, 0, 0, \"Assign\", function (anchor, params) {\n        // find what to use as the \"position finder\". the user may have supplied a String which represents\n        // the id of a position finder in jsPlumb.AnchorPositionFinders, or the user may have supplied the\n        // position finder as a function.  we find out what to use and then set it on the anchor.\n        var pf = params.position || \"Fixed\";\n        anchor.positionFinder = pf.constructor == String ? params.jsPlumbInstance.AnchorPositionFinders[pf] : pf;\n        // always set the constructor params; the position finder might need them later (the Grid one does,\n        // for example)\n        anchor.constructorParams = params;\n    });\n\n    // these are the default anchor positions finders, which are used by the makeTarget function.  supplying\n    // a position finder argument to that function allows you to specify where the resulting anchor will\n    // be located\n    root.jsPlumbInstance.prototype.AnchorPositionFinders = {\n        \"Fixed\": function (dp, ep, es) {\n            return [ (dp.left - ep.left) / es[0], (dp.top - ep.top) / es[1] ];\n        },\n        \"Grid\": function (dp, ep, es, params) {\n            var dx = dp.left - ep.left, dy = dp.top - ep.top,\n                gx = es[0] / (params.grid[0]), gy = es[1] / (params.grid[1]),\n                mx = Math.floor(dx / gx), my = Math.floor(dy / gy);\n            return [ ((mx * gx) + (gx / 2)) / es[0], ((my * gy) + (gy / 2)) / es[1] ];\n        }\n    };\n\n// ------- perimeter anchors -------------------    \n\n    _jp.Anchors.Perimeter = function (params) {\n        params = params || {};\n        var anchorCount = params.anchorCount || 60,\n            shape = params.shape;\n\n        if (!shape) throw new Error(\"no shape supplied to Perimeter Anchor type\");\n\n        var _circle = function () {\n                var r = 0.5, step = Math.PI * 2 / anchorCount, current = 0, a = [];\n                for (var i = 0; i < anchorCount; i++) {\n                    var x = r + (r * Math.sin(current)),\n                        y = r + (r * Math.cos(current));\n                    a.push([ x, y, 0, 0 ]);\n                    current += step;\n                }\n                return a;\n            },\n            _path = function (segments) {\n                var anchorsPerFace = anchorCount / segments.length, a = [],\n                    _computeFace = function (x1, y1, x2, y2, fractionalLength) {\n                        anchorsPerFace = anchorCount * fractionalLength;\n                        var dx = (x2 - x1) / anchorsPerFace, dy = (y2 - y1) / anchorsPerFace;\n                        for (var i = 0; i < anchorsPerFace; i++) {\n                            a.push([\n                                    x1 + (dx * i),\n                                    y1 + (dy * i),\n                                0,\n                                0\n                            ]);\n                        }\n                    };\n\n                for (var i = 0; i < segments.length; i++)\n                    _computeFace.apply(null, segments[i]);\n\n                return a;\n            },\n            _shape = function (faces) {\n                var s = [];\n                for (var i = 0; i < faces.length; i++) {\n                    s.push([faces[i][0], faces[i][1], faces[i][2], faces[i][3], 1 / faces.length]);\n                }\n                return _path(s);\n            },\n            _rectangle = function () {\n                return _shape([\n                    [ 0, 0, 1, 0 ],\n                    [ 1, 0, 1, 1 ],\n                    [ 1, 1, 0, 1 ],\n                    [ 0, 1, 0, 0 ]\n                ]);\n            };\n\n        var _shapes = {\n                \"Circle\": _circle,\n                \"Ellipse\": _circle,\n                \"Diamond\": function () {\n                    return _shape([\n                        [ 0.5, 0, 1, 0.5 ],\n                        [ 1, 0.5, 0.5, 1 ],\n                        [ 0.5, 1, 0, 0.5 ],\n                        [ 0, 0.5, 0.5, 0 ]\n                    ]);\n                },\n                \"Rectangle\": _rectangle,\n                \"Square\": _rectangle,\n                \"Triangle\": function () {\n                    return _shape([\n                        [ 0.5, 0, 1, 1 ],\n                        [ 1, 1, 0, 1 ],\n                        [ 0, 1, 0.5, 0]\n                    ]);\n                },\n                \"Path\": function (params) {\n                    var points = params.points, p = [], tl = 0;\n                    for (var i = 0; i < points.length - 1; i++) {\n                        var l = Math.sqrt(Math.pow(points[i][2] - points[i][0]) + Math.pow(points[i][3] - points[i][1]));\n                        tl += l;\n                        p.push([points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], l]);\n                    }\n                    for (var j = 0; j < p.length; j++) {\n                        p[j][4] = p[j][4] / tl;\n                    }\n                    return _path(p);\n                }\n            },\n            _rotate = function (points, amountInDegrees) {\n                var o = [], theta = amountInDegrees / 180 * Math.PI;\n                for (var i = 0; i < points.length; i++) {\n                    var _x = points[i][0] - 0.5,\n                        _y = points[i][1] - 0.5;\n\n                    o.push([\n                            0.5 + ((_x * Math.cos(theta)) - (_y * Math.sin(theta))),\n                            0.5 + ((_x * Math.sin(theta)) + (_y * Math.cos(theta))),\n                        points[i][2],\n                        points[i][3]\n                    ]);\n                }\n                return o;\n            };\n\n        if (!_shapes[shape]) throw new Error(\"Shape [\" + shape + \"] is unknown by Perimeter Anchor type\");\n\n        var da = _shapes[shape](params);\n        if (params.rotation) da = _rotate(da, params.rotation);\n        var a = params.jsPlumbInstance.makeDynamicAnchor(da);\n        a.type = \"Perimeter\";\n        return a;\n    };\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the default Connectors, Endpoint and Overlay definitions.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil, _jg = root.Biltong;\n\n    _jp.Segments = {\n\n        /*\n         * Class: AbstractSegment\n         * A Connector is made up of 1..N Segments, each of which has a Type, such as 'Straight', 'Arc',\n         * 'Bezier'. This is new from 1.4.2, and gives us a lot more flexibility when drawing connections: things such\n         * as rounded corners for flowchart connectors, for example, or a straight line stub for Bezier connections, are\n         * much easier to do now.\n         *\n         * A Segment is responsible for providing coordinates for painting it, and also must be able to report its length.\n         * \n         */\n        AbstractSegment: function (params) {\n            this.params = params;\n\n            /**\n             * Function: findClosestPointOnPath\n             * Finds the closest point on this segment to the given [x, y],\n             * returning both the x and y of the point plus its distance from\n             * the supplied point, and its location along the length of the\n             * path inscribed by the segment.  This implementation returns\n             * Infinity for distance and null values for everything else;\n             * subclasses are expected to override.\n             */\n            this.findClosestPointOnPath = function (x, y) {\n                return {\n                    d: Infinity,\n                    x: null,\n                    y: null,\n                    l: null\n                };\n            };\n\n            this.getBounds = function () {\n                return {\n                    minX: Math.min(params.x1, params.x2),\n                    minY: Math.min(params.y1, params.y2),\n                    maxX: Math.max(params.x1, params.x2),\n                    maxY: Math.max(params.y1, params.y2)\n                };\n            };\n        },\n        Straight: function (params) {\n            var _super = _jp.Segments.AbstractSegment.apply(this, arguments),\n                length, m, m2, x1, x2, y1, y2,\n                _recalc = function () {\n                    length = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n                    m = _jg.gradient({x: x1, y: y1}, {x: x2, y: y2});\n                    m2 = -1 / m;\n                };\n\n            this.type = \"Straight\";\n\n            this.getLength = function () {\n                return length;\n            };\n            this.getGradient = function () {\n                return m;\n            };\n\n            this.getCoordinates = function () {\n                return { x1: x1, y1: y1, x2: x2, y2: y2 };\n            };\n            this.setCoordinates = function (coords) {\n                x1 = coords.x1;\n                y1 = coords.y1;\n                x2 = coords.x2;\n                y2 = coords.y2;\n                _recalc();\n            };\n            this.setCoordinates({x1: params.x1, y1: params.y1, x2: params.x2, y2: params.y2});\n\n            this.getBounds = function () {\n                return {\n                    minX: Math.min(x1, x2),\n                    minY: Math.min(y1, y2),\n                    maxX: Math.max(x1, x2),\n                    maxY: Math.max(y1, y2)\n                };\n            };\n\n            /**\n             * returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n             * 0 to 1 inclusive. for the straight line segment this is simple maths.\n             */\n            this.pointOnPath = function (location, absolute) {\n                if (location === 0 && !absolute)\n                    return { x: x1, y: y1 };\n                else if (location == 1 && !absolute)\n                    return { x: x2, y: y2 };\n                else {\n                    var l = absolute ? location > 0 ? location : length + location : location * length;\n                    return _jg.pointOnLine({x: x1, y: y1}, {x: x2, y: y2}, l);\n                }\n            };\n\n            /**\n             * returns the gradient of the segment at the given point - which for us is constant.\n             */\n            this.gradientAtPoint = function (_) {\n                return m;\n            };\n\n            /**\n             * returns the point on the segment's path that is 'distance' along the length of the path from 'location', where\n             * 'location' is a decimal from 0 to 1 inclusive, and 'distance' is a number of pixels.\n             * this hands off to jsPlumbUtil to do the maths, supplying two points and the distance.\n             */\n            this.pointAlongPathFrom = function (location, distance, absolute) {\n                var p = this.pointOnPath(location, absolute),\n                    farAwayPoint = distance <= 0 ? {x: x1, y: y1} : {x: x2, y: y2 };\n\n                /*\n                 location == 1 ? {\n                 x:x1 + ((x2 - x1) * 10),\n                 y:y1 + ((y1 - y2) * 10)\n                 } :\n                 */\n\n                if (distance <= 0 && Math.abs(distance) > 1) distance *= -1;\n\n                return _jg.pointOnLine(p, farAwayPoint, distance);\n            };\n\n            // is c between a and b?\n            var within = function (a, b, c) {\n                return c >= Math.min(a, b) && c <= Math.max(a, b);\n            };\n            // find which of a and b is closest to c\n            var closest = function (a, b, c) {\n                return Math.abs(c - a) < Math.abs(c - b) ? a : b;\n            };\n\n            /**\n             Function: findClosestPointOnPath\n             Finds the closest point on this segment to [x,y]. See\n             notes on this method in AbstractSegment.\n             */\n            this.findClosestPointOnPath = function (x, y) {\n                var out = {\n                    d: Infinity,\n                    x: null,\n                    y: null,\n                    l: null,\n                    x1: x1,\n                    x2: x2,\n                    y1: y1,\n                    y2: y2\n                };\n\n                if (m === 0) {\n                    out.y = y1;\n                    out.x = within(x1, x2, x) ? x : closest(x1, x2, x);\n                }\n                else if (m == Infinity || m == -Infinity) {\n                    out.x = x1;\n                    out.y = within(y1, y2, y) ? y : closest(y1, y2, y);\n                }\n                else {\n                    // closest point lies on normal from given point to this line.  \n                    var b = y1 - (m * x1),\n                        b2 = y - (m2 * x),\n                    // y1 = m.x1 + b and y1 = m2.x1 + b2\n                    // so m.x1 + b = m2.x1 + b2\n                    // x1(m - m2) = b2 - b\n                    // x1 = (b2 - b) / (m - m2)\n                        _x1 = (b2 - b) / (m - m2),\n                        _y1 = (m * _x1) + b;\n\n                    out.x = within(x1, x2, _x1) ? _x1 : closest(x1, x2, _x1);//_x1;\n                    out.y = within(y1, y2, _y1) ? _y1 : closest(y1, y2, _y1);//_y1;\n                }\n\n                var fractionInSegment = _jg.lineLength([ out.x, out.y ], [ x1, y1 ]);\n                out.d = _jg.lineLength([x, y], [out.x, out.y]);\n                out.l = fractionInSegment / length;\n                return out;\n            };\n        },\n\n        /*\n         Arc Segment. You need to supply:\n\n         r   -   radius\n         cx  -   center x for the arc\n         cy  -   center y for the arc\n         ac  -   whether the arc is anticlockwise or not. default is clockwise.\n\n         and then either:\n\n         startAngle  -   startAngle for the arc.\n         endAngle    -   endAngle for the arc.\n\n         or:\n\n         x1          -   x for start point\n         y1          -   y for start point\n         x2          -   x for end point\n         y2          -   y for end point\n\n         */\n        Arc: function (params) {\n            var _super = _jp.Segments.AbstractSegment.apply(this, arguments),\n                _calcAngle = function (_x, _y) {\n                    return _jg.theta([params.cx, params.cy], [_x, _y]);\n                },\n                _calcAngleForLocation = function (segment, location) {\n                    if (segment.anticlockwise) {\n                        var sa = segment.startAngle < segment.endAngle ? segment.startAngle + TWO_PI : segment.startAngle,\n                            s = Math.abs(sa - segment.endAngle);\n                        return sa - (s * location);\n                    }\n                    else {\n                        var ea = segment.endAngle < segment.startAngle ? segment.endAngle + TWO_PI : segment.endAngle,\n                            ss = Math.abs(ea - segment.startAngle);\n\n                        return segment.startAngle + (ss * location);\n                    }\n                },\n                TWO_PI = 2 * Math.PI;\n\n            this.radius = params.r;\n            this.anticlockwise = params.ac;\n            this.type = \"Arc\";\n\n            if (params.startAngle && params.endAngle) {\n                this.startAngle = params.startAngle;\n                this.endAngle = params.endAngle;\n                this.x1 = params.cx + (this.radius * Math.cos(params.startAngle));\n                this.y1 = params.cy + (this.radius * Math.sin(params.startAngle));\n                this.x2 = params.cx + (this.radius * Math.cos(params.endAngle));\n                this.y2 = params.cy + (this.radius * Math.sin(params.endAngle));\n            }\n            else {\n                this.startAngle = _calcAngle(params.x1, params.y1);\n                this.endAngle = _calcAngle(params.x2, params.y2);\n                this.x1 = params.x1;\n                this.y1 = params.y1;\n                this.x2 = params.x2;\n                this.y2 = params.y2;\n            }\n\n            if (this.endAngle < 0) this.endAngle += TWO_PI;\n            if (this.startAngle < 0) this.startAngle += TWO_PI;\n\n            // segment is used by vml     \n            //this.segment = _jg.quadrant([this.x1, this.y1], [this.x2, this.y2]);\n\n            // we now have startAngle and endAngle as positive numbers, meaning the\n            // absolute difference (|d|) between them is the sweep (s) of this arc, unless the\n            // arc is 'anticlockwise' in which case 's' is given by 2PI - |d|.\n\n            var ea = this.endAngle < this.startAngle ? this.endAngle + TWO_PI : this.endAngle;\n            this.sweep = Math.abs(ea - this.startAngle);\n            if (this.anticlockwise) this.sweep = TWO_PI - this.sweep;\n            var circumference = 2 * Math.PI * this.radius,\n                frac = this.sweep / TWO_PI,\n                length = circumference * frac;\n\n            this.getLength = function () {\n                return length;\n            };\n\n            this.getBounds = function () {\n                return {\n                    minX: params.cx - params.r,\n                    maxX: params.cx + params.r,\n                    minY: params.cy - params.r,\n                    maxY: params.cy + params.r\n                };\n            };\n\n            var VERY_SMALL_VALUE = 0.0000000001,\n                gentleRound = function (n) {\n                    var f = Math.floor(n), r = Math.ceil(n);\n                    if (n - f < VERY_SMALL_VALUE)\n                        return f;\n                    else if (r - n < VERY_SMALL_VALUE)\n                        return r;\n                    return n;\n                };\n\n            /**\n             * returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n             * 0 to 1 inclusive.\n             */\n            this.pointOnPath = function (location, absolute) {\n\n                if (location === 0) {\n                    return { x: this.x1, y: this.y1, theta: this.startAngle };\n                }\n                else if (location == 1) {\n                    return { x: this.x2, y: this.y2, theta: this.endAngle };\n                }\n\n                if (absolute) {\n                    location = location / length;\n                }\n\n                var angle = _calcAngleForLocation(this, location),\n                    _x = params.cx + (params.r * Math.cos(angle)),\n                    _y = params.cy + (params.r * Math.sin(angle));\n\n                return { x: gentleRound(_x), y: gentleRound(_y), theta: angle };\n            };\n\n            /**\n             * returns the gradient of the segment at the given point.\n             */\n            this.gradientAtPoint = function (location, absolute) {\n                var p = this.pointOnPath(location, absolute);\n                var m = _jg.normal([ params.cx, params.cy ], [p.x, p.y ]);\n                if (!this.anticlockwise && (m == Infinity || m == -Infinity)) m *= -1;\n                return m;\n            };\n\n            this.pointAlongPathFrom = function (location, distance, absolute) {\n                var p = this.pointOnPath(location, absolute),\n                    arcSpan = distance / circumference * 2 * Math.PI,\n                    dir = this.anticlockwise ? -1 : 1,\n                    startAngle = p.theta + (dir * arcSpan),\n                    startX = params.cx + (this.radius * Math.cos(startAngle)),\n                    startY = params.cy + (this.radius * Math.sin(startAngle));\n\n                return {x: startX, y: startY};\n            };\n        },\n\n        Bezier: function (params) {\n            this.curve = [\n                { x: params.x1, y: params.y1},\n                { x: params.cp1x, y: params.cp1y },\n                { x: params.cp2x, y: params.cp2y },\n                { x: params.x2, y: params.y2 }\n            ];\n\n            var _super = _jp.Segments.AbstractSegment.apply(this, arguments);\n            // although this is not a strictly rigorous determination of bounds\n            // of a bezier curve, it works for the types of curves that this segment\n            // type produces.\n            this.bounds = {\n                minX: Math.min(params.x1, params.x2, params.cp1x, params.cp2x),\n                minY: Math.min(params.y1, params.y2, params.cp1y, params.cp2y),\n                maxX: Math.max(params.x1, params.x2, params.cp1x, params.cp2x),\n                maxY: Math.max(params.y1, params.y2, params.cp1y, params.cp2y)\n            };\n\n            this.type = \"Bezier\";\n\n            var _translateLocation = function (_curve, location, absolute) {\n                if (absolute)\n                    location = root.jsBezier.locationAlongCurveFrom(_curve, location > 0 ? 0 : 1, location);\n\n                return location;\n            };\n\n            /**\n             * returns the point on the segment's path that is 'location' along the length of the path, where 'location' is a decimal from\n             * 0 to 1 inclusive.\n             */\n            this.pointOnPath = function (location, absolute) {\n                location = _translateLocation(this.curve, location, absolute);\n                return root.jsBezier.pointOnCurve(this.curve, location);\n            };\n\n            /**\n             * returns the gradient of the segment at the given point.\n             */\n            this.gradientAtPoint = function (location, absolute) {\n                location = _translateLocation(this.curve, location, absolute);\n                return root.jsBezier.gradientAtPoint(this.curve, location);\n            };\n\n            this.pointAlongPathFrom = function (location, distance, absolute) {\n                location = _translateLocation(this.curve, location, absolute);\n                return root.jsBezier.pointAlongCurveFrom(this.curve, location, distance);\n            };\n\n            this.getLength = function () {\n                return root.jsBezier.getLength(this.curve);\n            };\n\n            this.getBounds = function () {\n                return this.bounds;\n            };\n        }\n    };\n\n    _jp.SegmentRenderer = {\n        getPath: function (segment) {\n            return ({\n                \"Straight\": function () {\n                    var d = segment.getCoordinates();\n                    return \"M \" + d.x1 + \" \" + d.y1 + \" L \" + d.x2 + \" \" + d.y2;\n                },\n                \"Bezier\": function () {\n                    var d = segment.params;\n                    return \"M \" + d.x1 + \" \" + d.y1 +\n                        \" C \" + d.cp1x + \" \" + d.cp1y + \" \" + d.cp2x + \" \" + d.cp2y + \" \" + d.x2 + \" \" + d.y2;\n                },\n                \"Arc\": function () {\n                    var d = segment.params,\n                        laf = segment.sweep > Math.PI ? 1 : 0,\n                        sf = segment.anticlockwise ? 0 : 1;\n\n                    return \"M\" + segment.x1 + \" \" + segment.y1 + \" A \" + segment.radius + \" \" + d.r + \" 0 \" + laf + \",\" + sf + \" \" + segment.x2 + \" \" + segment.y2;\n                }\n            })[segment.type]();\n        }\n    };\n\n    /*\n     Class: AbstractComponent\n     Superclass for AbstractConnector and AbstractEndpoint.\n     */\n    var AbstractComponent = function () {\n        this.resetBounds = function () {\n            this.bounds = { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity };\n        };\n        this.resetBounds();\n    };\n\n    /*\n     * Class: AbstractConnector\n     * Superclass for all Connectors; here is where Segments are managed.  This is exposed on jsPlumb just so it\n     * can be accessed from other files. You should not try to instantiate one of these directly.\n     *\n     * When this class is asked for a pointOnPath, or gradient etc, it must first figure out which segment to dispatch\n     * that request to. This is done by keeping track of the total connector length as segments are added, and also\n     * their cumulative ratios to the total length.  Then when the right segment is found it is a simple case of dispatching\n     * the request to it (and adjusting 'location' so that it is relative to the beginning of that segment.)\n     */\n    _jp.Connectors.AbstractConnector = function (params) {\n\n        AbstractComponent.apply(this, arguments);\n\n        var segments = [],\n            totalLength = 0,\n            segmentProportions = [],\n            segmentProportionalLengths = [],\n            stub = params.stub || 0,\n            sourceStub = _ju.isArray(stub) ? stub[0] : stub,\n            targetStub = _ju.isArray(stub) ? stub[1] : stub,\n            gap = params.gap || 0,\n            sourceGap = _ju.isArray(gap) ? gap[0] : gap,\n            targetGap = _ju.isArray(gap) ? gap[1] : gap,\n            userProvidedSegments = null,\n            edited = false,\n            paintInfo = null,\n            geometry = null,\n            editable = params.editable !== false && _jp.ConnectorEditors != null && _jp.ConnectorEditors[this.type] != null;\n\n        var _setGeometry = this.setGeometry = function(g, internallyComputed) {\n            edited = (!internallyComputed);\n            geometry = g;\n        };\n        var _getGeometry = this.getGeometry = function() {\n            return geometry;\n        };\n\n        this.getPathData = function() {\n            var p = \"\";\n            for (var i = 0; i < segments.length; i++) {\n                p += _jp.SegmentRenderer.getPath(segments[i]);\n                p += \" \";\n            }\n            return p;\n        };\n\n        this.hasBeenEdited = function() { return edited; };\n        this.isEditing = function() { return this.editor != null && this.editor.isActive(); };\n        this.setEditable = function(e) {\n            // if this connector has an editor already, or\n            // if an editor for this connector's type is available, or\n            // if the child declares an overrideSetEditable and it does not return false, editable is true.\n            if (e && _jp.ConnectorEditors != null && _jp.ConnectorEditors[this.type] != null && (this.overrideSetEditable == null || this.overrideSetEditable())) {\n                editable = e;\n            } else {\n                editable = false;\n            }\n            return editable;\n        };\n        this.isEditable = function() { return editable; };\n\n        /**\n         * Function: findSegmentForPoint\n         * Returns the segment that is closest to the given [x,y],\n         * null if nothing found.  This function returns a JS\n         * object with:\n         *\n         *   d   -   distance from segment\n         *   l   -   proportional location in segment\n         *   x   -   x point on the segment\n         *   y   -   y point on the segment\n         *   s   -   the segment itself.\n         */\n        this.findSegmentForPoint = function (x, y) {\n            var out = { d: Infinity, s: null, x: null, y: null, l: null };\n            for (var i = 0; i < segments.length; i++) {\n                var _s = segments[i].findClosestPointOnPath(x, y);\n                if (_s.d < out.d) {\n                    out.d = _s.d;\n                    out.l = _s.l;\n                    out.x = _s.x;\n                    out.y = _s.y;\n                    out.s = segments[i];\n                    out.x1 = _s.x1;\n                    out.x2 = _s.x2;\n                    out.y1 = _s.y1;\n                    out.y2 = _s.y2;\n                    out.index = i;\n                }\n            }\n\n            return out;\n        };\n\n        var _updateSegmentProportions = function () {\n                var curLoc = 0;\n                for (var i = 0; i < segments.length; i++) {\n                    var sl = segments[i].getLength();\n                    segmentProportionalLengths[i] = sl / totalLength;\n                    segmentProportions[i] = [curLoc, (curLoc += (sl / totalLength)) ];\n                }\n            },\n\n            /**\n             * returns [segment, proportion of travel in segment, segment index] for the segment\n             * that contains the point which is 'location' distance along the entire path, where\n             * 'location' is a decimal between 0 and 1 inclusive. in this connector type, paths\n             * are made up of a list of segments, each of which contributes some fraction to\n             * the total length.\n             * From 1.3.10 this also supports the 'absolute' property, which lets us specify a location\n             * as the absolute distance in pixels, rather than a proportion of the total path.\n             */\n            _findSegmentForLocation = function (location, absolute) {\n                if (absolute) {\n                    location = location > 0 ? location / totalLength : (totalLength + location) / totalLength;\n                }\n                var idx = segmentProportions.length - 1, inSegmentProportion = 1;\n                for (var i = 0; i < segmentProportions.length; i++) {\n                    if (segmentProportions[i][1] >= location) {\n                        idx = i;\n                        // todo is this correct for all connector path types?\n                        inSegmentProportion = location == 1 ? 1 : location === 0 ? 0 : (location - segmentProportions[i][0]) / segmentProportionalLengths[i];\n                        break;\n                    }\n                }\n                return { segment: segments[idx], proportion: inSegmentProportion, index: idx };\n            },\n            _addSegment = function (conn, type, params) {\n                if (params.x1 == params.x2 && params.y1 == params.y2) return;\n                var s = new _jp.Segments[type](params);\n                segments.push(s);\n                totalLength += s.getLength();\n                conn.updateBounds(s);\n            },\n            _clearSegments = function () {\n                totalLength = segments.length = segmentProportions.length = segmentProportionalLengths.length = 0;\n            };\n\n        this.setSegments = function (_segs) {\n            userProvidedSegments = [];\n            totalLength = 0;\n            for (var i = 0; i < _segs.length; i++) {\n                userProvidedSegments.push(_segs[i]);\n                totalLength += _segs[i].getLength();\n            }\n        };\n\n        this.getLength = function() {\n            return totalLength;\n        };\n\n        var _prepareCompute = function (params) {\n            this.strokeWidth = params.strokeWidth;\n            var segment = _jg.quadrant(params.sourcePos, params.targetPos),\n                swapX = params.targetPos[0] < params.sourcePos[0],\n                swapY = params.targetPos[1] < params.sourcePos[1],\n                lw = params.strokeWidth || 1,\n                so = params.sourceEndpoint.anchor.getOrientation(params.sourceEndpoint),\n                to = params.targetEndpoint.anchor.getOrientation(params.targetEndpoint),\n                x = swapX ? params.targetPos[0] : params.sourcePos[0],\n                y = swapY ? params.targetPos[1] : params.sourcePos[1],\n                w = Math.abs(params.targetPos[0] - params.sourcePos[0]),\n                h = Math.abs(params.targetPos[1] - params.sourcePos[1]);\n\n            // if either anchor does not have an orientation set, we derive one from their relative\n            // positions.  we fix the axis to be the one in which the two elements are further apart, and\n            // point each anchor at the other element.  this is also used when dragging a new connection.\n            if (so[0] === 0 && so[1] === 0 || to[0] === 0 && to[1] === 0) {\n                var index = w > h ? 0 : 1, oIndex = [1, 0][index];\n                so = [];\n                to = [];\n                so[index] = params.sourcePos[index] > params.targetPos[index] ? -1 : 1;\n                to[index] = params.sourcePos[index] > params.targetPos[index] ? 1 : -1;\n                so[oIndex] = 0;\n                to[oIndex] = 0;\n            }\n\n            var sx = swapX ? w + (sourceGap * so[0]) : sourceGap * so[0],\n                sy = swapY ? h + (sourceGap * so[1]) : sourceGap * so[1],\n                tx = swapX ? targetGap * to[0] : w + (targetGap * to[0]),\n                ty = swapY ? targetGap * to[1] : h + (targetGap * to[1]),\n                oProduct = ((so[0] * to[0]) + (so[1] * to[1]));\n\n            var result = {\n                sx: sx, sy: sy, tx: tx, ty: ty, lw: lw,\n                xSpan: Math.abs(tx - sx),\n                ySpan: Math.abs(ty - sy),\n                mx: (sx + tx) / 2,\n                my: (sy + ty) / 2,\n                so: so, to: to, x: x, y: y, w: w, h: h,\n                segment: segment,\n                startStubX: sx + (so[0] * sourceStub),\n                startStubY: sy + (so[1] * sourceStub),\n                endStubX: tx + (to[0] * targetStub),\n                endStubY: ty + (to[1] * targetStub),\n                isXGreaterThanStubTimes2: Math.abs(sx - tx) > (sourceStub + targetStub),\n                isYGreaterThanStubTimes2: Math.abs(sy - ty) > (sourceStub + targetStub),\n                opposite: oProduct == -1,\n                perpendicular: oProduct === 0,\n                orthogonal: oProduct == 1,\n                sourceAxis: so[0] === 0 ? \"y\" : \"x\",\n                points: [x, y, w, h, sx, sy, tx, ty ]\n            };\n            result.anchorOrientation = result.opposite ? \"opposite\" : result.orthogonal ? \"orthogonal\" : \"perpendicular\";\n            return result;\n        };\n\n        this.getSegments = function () {\n            return segments;\n        };\n\n        this.updateBounds = function (segment) {\n            var segBounds = segment.getBounds();\n            this.bounds.minX = Math.min(this.bounds.minX, segBounds.minX);\n            this.bounds.maxX = Math.max(this.bounds.maxX, segBounds.maxX);\n            this.bounds.minY = Math.min(this.bounds.minY, segBounds.minY);\n            this.bounds.maxY = Math.max(this.bounds.maxY, segBounds.maxY);\n        };\n\n        var dumpSegmentsToConsole = function () {\n            console.log(\"SEGMENTS:\");\n            for (var i = 0; i < segments.length; i++) {\n                console.log(segments[i].type, segments[i].getLength(), segmentProportions[i]);\n            }\n        };\n\n        this.pointOnPath = function (location, absolute) {\n            var seg = _findSegmentForLocation(location, absolute);\n            return seg.segment && seg.segment.pointOnPath(seg.proportion, false) || [0, 0];\n        };\n\n        this.gradientAtPoint = function (location, absolute) {\n            var seg = _findSegmentForLocation(location, absolute);\n            return seg.segment && seg.segment.gradientAtPoint(seg.proportion, false) || 0;\n        };\n\n        this.pointAlongPathFrom = function (location, distance, absolute) {\n            var seg = _findSegmentForLocation(location, absolute);\n            // TODO what happens if this crosses to the next segment?\n            return seg.segment && seg.segment.pointAlongPathFrom(seg.proportion, distance, false) || [0, 0];\n        };\n\n        this.compute = function (params) {\n            paintInfo = _prepareCompute.call(this, params);\n\n            _clearSegments();\n            this._compute(paintInfo, params);\n            this.x = paintInfo.points[0];\n            this.y = paintInfo.points[1];\n            this.w = paintInfo.points[2];\n            this.h = paintInfo.points[3];\n            this.segment = paintInfo.segment;\n            _updateSegmentProportions();\n        };\n\n        return {\n            addSegment: _addSegment,\n            prepareCompute: _prepareCompute,\n            sourceStub: sourceStub,\n            targetStub: targetStub,\n            maxStub: Math.max(sourceStub, targetStub),\n            sourceGap: sourceGap,\n            targetGap: targetGap,\n            maxGap: Math.max(sourceGap, targetGap),\n            setGeometry:_setGeometry,\n            getGeometry:_getGeometry\n        };\n    };\n    _ju.extend(_jp.Connectors.AbstractConnector, AbstractComponent);\n\n\n    // ********************************* END OF CONNECTOR TYPES *******************************************************************\n\n    // ********************************* ENDPOINT TYPES *******************************************************************\n\n    _jp.Endpoints.AbstractEndpoint = function (params) {\n        AbstractComponent.apply(this, arguments);\n        var compute = this.compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            var out = this._compute.apply(this, arguments);\n            this.x = out[0];\n            this.y = out[1];\n            this.w = out[2];\n            this.h = out[3];\n            this.bounds.minX = this.x;\n            this.bounds.minY = this.y;\n            this.bounds.maxX = this.x + this.w;\n            this.bounds.maxY = this.y + this.h;\n            return out;\n        };\n        return {\n            compute: compute,\n            cssClass: params.cssClass\n        };\n    };\n    _ju.extend(_jp.Endpoints.AbstractEndpoint, AbstractComponent);\n\n    /**\n     * Class: Endpoints.Dot\n     * A round endpoint, with default radius 10 pixels.\n     */\n\n    /**\n     * Function: Constructor\n     *\n     * Parameters:\n     *\n     *    radius    -    radius of the endpoint.  defaults to 10 pixels.\n     */\n    _jp.Endpoints.Dot = function (params) {\n        this.type = \"Dot\";\n        var _super = _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n        params = params || {};\n        this.radius = params.radius || 10;\n        this.defaultOffset = 0.5 * this.radius;\n        this.defaultInnerRadius = this.radius / 3;\n\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            this.radius = endpointStyle.radius || this.radius;\n            var x = anchorPoint[0] - this.radius,\n                y = anchorPoint[1] - this.radius,\n                w = this.radius * 2,\n                h = this.radius * 2;\n\n            if (endpointStyle.stroke) {\n                var lw = endpointStyle.strokeWidth || 1;\n                x -= lw;\n                y -= lw;\n                w += (lw * 2);\n                h += (lw * 2);\n            }\n            return [ x, y, w, h, this.radius ];\n        };\n    };\n    _ju.extend(_jp.Endpoints.Dot, _jp.Endpoints.AbstractEndpoint);\n\n    _jp.Endpoints.Rectangle = function (params) {\n        this.type = \"Rectangle\";\n        var _super = _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n        params = params || {};\n        this.width = params.width || 20;\n        this.height = params.height || 20;\n\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            var width = endpointStyle.width || this.width,\n                height = endpointStyle.height || this.height,\n                x = anchorPoint[0] - (width / 2),\n                y = anchorPoint[1] - (height / 2);\n\n            return [ x, y, width, height];\n        };\n    };\n    _ju.extend(_jp.Endpoints.Rectangle, _jp.Endpoints.AbstractEndpoint);\n\n    var DOMElementEndpoint = function (params) {\n        _jp.jsPlumbUIComponent.apply(this, arguments);\n        this._jsPlumb.displayElements = [];\n    };\n    _ju.extend(DOMElementEndpoint, _jp.jsPlumbUIComponent, {\n        getDisplayElements: function () {\n            return this._jsPlumb.displayElements;\n        },\n        appendDisplayElement: function (el) {\n            this._jsPlumb.displayElements.push(el);\n        }\n    });\n\n    /**\n     * Class: Endpoints.Image\n     * Draws an image as the Endpoint.\n     */\n    /**\n     * Function: Constructor\n     *\n     * Parameters:\n     *\n     *    src    -    location of the image to use.\n\n     TODO: multiple references to self. not sure quite how to get rid of them entirely. perhaps self = null in the cleanup\n     function will suffice\n\n     TODO this class still might leak memory.\n\n     */\n    _jp.Endpoints.Image = function (params) {\n\n        this.type = \"Image\";\n        DOMElementEndpoint.apply(this, arguments);\n        _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n\n        var _onload = params.onload,\n            src = params.src || params.url,\n            clazz = params.cssClass ? \" \" + params.cssClass : \"\";\n\n        this._jsPlumb.img = new Image();\n        this._jsPlumb.ready = false;\n        this._jsPlumb.initialized = false;\n        this._jsPlumb.deleted = false;\n        this._jsPlumb.widthToUse = params.width;\n        this._jsPlumb.heightToUse = params.height;\n        this._jsPlumb.endpoint = params.endpoint;\n\n        this._jsPlumb.img.onload = function () {\n            if (this._jsPlumb != null) {\n                this._jsPlumb.ready = true;\n                this._jsPlumb.widthToUse = this._jsPlumb.widthToUse || this._jsPlumb.img.width;\n                this._jsPlumb.heightToUse = this._jsPlumb.heightToUse || this._jsPlumb.img.height;\n                if (_onload) {\n                    _onload(this);\n                }\n            }\n        }.bind(this);\n\n        /*\n         Function: setImage\n         Sets the Image to use in this Endpoint.\n\n         Parameters:\n         img         -   may be a URL or an Image object\n         onload      -   optional; a callback to execute once the image has loaded.\n         */\n        this._jsPlumb.endpoint.setImage = function (_img, onload) {\n            var s = _img.constructor == String ? _img : _img.src;\n            _onload = onload;\n            this._jsPlumb.img.src = s;\n\n            if (this.canvas != null)\n                this.canvas.setAttribute(\"src\", this._jsPlumb.img.src);\n        }.bind(this);\n\n        this._jsPlumb.endpoint.setImage(src, _onload);\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            this.anchorPoint = anchorPoint;\n            if (this._jsPlumb.ready) return [anchorPoint[0] - this._jsPlumb.widthToUse / 2, anchorPoint[1] - this._jsPlumb.heightToUse / 2,\n                this._jsPlumb.widthToUse, this._jsPlumb.heightToUse];\n            else return [0, 0, 0, 0];\n        };\n\n        this.canvas = _jp.createElement(\"img\", {\n            position:\"absolute\",\n            margin:0,\n            padding:0,\n            outline:0\n        }, this._jsPlumb.instance.endpointClass + clazz);\n\n        if (this._jsPlumb.widthToUse) this.canvas.setAttribute(\"width\", this._jsPlumb.widthToUse);\n        if (this._jsPlumb.heightToUse) this.canvas.setAttribute(\"height\", this._jsPlumb.heightToUse);\n        this._jsPlumb.instance.appendElement(this.canvas);\n\n        this.actuallyPaint = function (d, style, anchor) {\n            if (!this._jsPlumb.deleted) {\n                if (!this._jsPlumb.initialized) {\n                    this.canvas.setAttribute(\"src\", this._jsPlumb.img.src);\n                    this.appendDisplayElement(this.canvas);\n                    this._jsPlumb.initialized = true;\n                }\n                var x = this.anchorPoint[0] - (this._jsPlumb.widthToUse / 2),\n                    y = this.anchorPoint[1] - (this._jsPlumb.heightToUse / 2);\n                _ju.sizeElement(this.canvas, x, y, this._jsPlumb.widthToUse, this._jsPlumb.heightToUse);\n            }\n        };\n\n        this.paint = function (style, anchor) {\n            if (this._jsPlumb != null) {  // may have been deleted\n                if (this._jsPlumb.ready) {\n                    this.actuallyPaint(style, anchor);\n                }\n                else {\n                    root.setTimeout(function () {\n                        this.paint(style, anchor);\n                    }.bind(this), 200);\n                }\n            }\n        };\n    };\n    _ju.extend(_jp.Endpoints.Image, [ DOMElementEndpoint, _jp.Endpoints.AbstractEndpoint ], {\n        cleanup: function (force) {\n            if (force) {\n                this._jsPlumb.deleted = true;\n                if (this.canvas) this.canvas.parentNode.removeChild(this.canvas);\n                this.canvas = null;\n            }\n        }\n    });\n\n    /*\n     * Class: Endpoints.Blank\n     * An Endpoint that paints nothing (visible) on the screen.  Supports cssClass and hoverClass parameters like all Endpoints.\n     */\n    _jp.Endpoints.Blank = function (params) {\n        var _super = _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n        this.type = \"Blank\";\n        DOMElementEndpoint.apply(this, arguments);\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            return [anchorPoint[0], anchorPoint[1], 10, 0];\n        };\n\n        var clazz = params.cssClass ? \" \" + params.cssClass : \"\";\n\n        this.canvas = _jp.createElement(\"div\", {\n            display: \"block\",\n            width: \"1px\",\n            height: \"1px\",\n            background: \"transparent\",\n            position: \"absolute\"\n        }, this._jsPlumb.instance.endpointClass + clazz);\n\n        this._jsPlumb.instance.appendElement(this.canvas);\n\n        this.paint = function (style, anchor) {\n            _ju.sizeElement(this.canvas, this.x, this.y, this.w, this.h);\n        };\n    };\n    _ju.extend(_jp.Endpoints.Blank, [_jp.Endpoints.AbstractEndpoint, DOMElementEndpoint], {\n        cleanup: function () {\n            if (this.canvas && this.canvas.parentNode) {\n                this.canvas.parentNode.removeChild(this.canvas);\n            }\n        }\n    });\n\n    /*\n     * Class: Endpoints.Triangle\n     * A triangular Endpoint.\n     */\n    /*\n     * Function: Constructor\n     *\n     * Parameters:\n     *\n     * \twidth\t-\twidth of the triangle's base.  defaults to 55 pixels.\n     * \theight\t-\theight of the triangle from base to apex.  defaults to 55 pixels.\n     */\n    _jp.Endpoints.Triangle = function (params) {\n        this.type = \"Triangle\";\n        _jp.Endpoints.AbstractEndpoint.apply(this, arguments);\n        params = params || {  };\n        params.width = params.width || 55;\n        params.height = params.height || 55;\n        this.width = params.width;\n        this.height = params.height;\n        this._compute = function (anchorPoint, orientation, endpointStyle, connectorPaintStyle) {\n            var width = endpointStyle.width || self.width,\n                height = endpointStyle.height || self.height,\n                x = anchorPoint[0] - (width / 2),\n                y = anchorPoint[1] - (height / 2);\n            return [ x, y, width, height ];\n        };\n    };\n// ********************************* END OF ENDPOINT TYPES *******************************************************************\n\n\n// ********************************* OVERLAY DEFINITIONS ***********************************************************************    \n\n    var AbstractOverlay = _jp.Overlays.AbstractOverlay = function (params) {\n        this.visible = true;\n        this.isAppendedAtTopLevel = true;\n        this.component = params.component;\n        this.loc = params.location == null ? 0.5 : params.location;\n        this.endpointLoc = params.endpointLocation == null ? [ 0.5, 0.5] : params.endpointLocation;\n        this.visible = params.visible !== false;\n    };\n    AbstractOverlay.prototype = {\n        cleanup: function (force) {\n            if (force) {\n                this.component = null;\n                this.canvas = null;\n                this.endpointLoc = null;\n            }\n        },\n        reattach:function(instance) {\n\n        },\n        setVisible: function (val) {\n            this.visible = val;\n            this.component.repaint();\n        },\n        isVisible: function () {\n            return this.visible;\n        },\n        hide: function () {\n            this.setVisible(false);\n        },\n        show: function () {\n            this.setVisible(true);\n        },\n        incrementLocation: function (amount) {\n            this.loc += amount;\n            this.component.repaint();\n        },\n        setLocation: function (l) {\n            this.loc = l;\n            this.component.repaint();\n        },\n        getLocation: function () {\n            return this.loc;\n        },\n        updateFrom:function() { }\n    };\n\n\n    /*\n     * Class: Overlays.Arrow\n     *\n     * An arrow overlay, defined by four points: the head, the two sides of the tail, and a 'foldback' point at some distance along the length\n     * of the arrow that lines from each tail point converge into.  The foldback point is defined using a decimal that indicates some fraction\n     * of the length of the arrow and has a default value of 0.623.  A foldback point value of 1 would mean that the arrow had a straight line\n     * across the tail.\n     */\n    /*\n     * @constructor\n     *\n     * @param {Object} params Constructor params.\n     * @param {Number} [params.length] Distance in pixels from head to tail baseline. default 20.\n     * @param {Number} [params.width] Width in pixels of the tail baseline. default 20.\n     * @param {String} [params.fill] Style to use when filling the arrow.  defaults to \"black\".\n     * @param {String} [params.stroke] Style to use when stroking the arrow. defaults to null, which means the arrow is not stroked.\n     * @param {Number} [params.stroke-width] Line width to use when stroking the arrow. defaults to 1, but only used if stroke is not null.\n     * @param {Number} [params.foldback] Distance (as a decimal from 0 to 1 inclusive) along the length of the arrow marking the point the tail points should fold back to.  defaults to 0.623.\n     * @param {Number} [params.location] Distance (as a decimal from 0 to 1 inclusive) marking where the arrow should sit on the connector. defaults to 0.5.\n     * @param {NUmber} [params.direction] Indicates the direction the arrow points in. valid values are -1 and 1; 1 is default.\n     */\n    _jp.Overlays.Arrow = function (params) {\n        this.type = \"Arrow\";\n        AbstractOverlay.apply(this, arguments);\n        this.isAppendedAtTopLevel = false;\n        params = params || {};\n\n        this.length = params.length || 20;\n        this.width = params.width || 20;\n        this.id = params.id;\n        var direction = (params.direction || 1) < 0 ? -1 : 1,\n            paintStyle = params.paintStyle || { \"stroke-width\": 1 },\n        // how far along the arrow the lines folding back in come to. default is 62.3%.\n            foldback = params.foldback || 0.623;\n\n        this.computeMaxSize = function () {\n            return self.width * 1.5;\n        };\n\n        this.elementCreated = function(p, component) {\n            this.path = p;\n            if (params.events) {\n                for (var i in params.events) {\n                    _jp.on(p, i, params.events[i]);\n                }\n            }\n        };\n\n        this.draw = function (component, currentConnectionPaintStyle) {\n\n            var hxy, mid, txy, tail, cxy;\n            if (component.pointAlongPathFrom) {\n\n                if (_ju.isString(this.loc) || this.loc > 1 || this.loc < 0) {\n                    var l = parseInt(this.loc, 10),\n                        fromLoc = this.loc < 0 ? 1 : 0;\n                    hxy = component.pointAlongPathFrom(fromLoc, l, false);\n                    mid = component.pointAlongPathFrom(fromLoc, l - (direction * this.length / 2), false);\n                    txy = _jg.pointOnLine(hxy, mid, this.length);\n                }\n                else if (this.loc == 1) {\n                    hxy = component.pointOnPath(this.loc);\n                    mid = component.pointAlongPathFrom(this.loc, -(this.length));\n                    txy = _jg.pointOnLine(hxy, mid, this.length);\n\n                    if (direction == -1) {\n                        var _ = txy;\n                        txy = hxy;\n                        hxy = _;\n                    }\n                }\n                else if (this.loc === 0) {\n                    txy = component.pointOnPath(this.loc);\n                    mid = component.pointAlongPathFrom(this.loc, this.length);\n                    hxy = _jg.pointOnLine(txy, mid, this.length);\n                    if (direction == -1) {\n                        var __ = txy;\n                        txy = hxy;\n                        hxy = __;\n                    }\n                }\n                else {\n                    hxy = component.pointAlongPathFrom(this.loc, direction * this.length / 2);\n                    mid = component.pointOnPath(this.loc);\n                    txy = _jg.pointOnLine(hxy, mid, this.length);\n                }\n\n                tail = _jg.perpendicularLineTo(hxy, txy, this.width);\n                cxy = _jg.pointOnLine(hxy, txy, foldback * this.length);\n\n                var d = { hxy: hxy, tail: tail, cxy: cxy },\n                    stroke = paintStyle.stroke || currentConnectionPaintStyle.stroke,\n                    fill = paintStyle.fill || currentConnectionPaintStyle.stroke,\n                    lineWidth = paintStyle.strokeWidth || currentConnectionPaintStyle.strokeWidth;\n\n                return {\n                    component: component,\n                    d: d,\n                    \"stroke-width\": lineWidth,\n                    stroke: stroke,\n                    fill: fill,\n                    minX: Math.min(hxy.x, tail[0].x, tail[1].x),\n                    maxX: Math.max(hxy.x, tail[0].x, tail[1].x),\n                    minY: Math.min(hxy.y, tail[0].y, tail[1].y),\n                    maxY: Math.max(hxy.y, tail[0].y, tail[1].y)\n                };\n            }\n            else return {component: component, minX: 0, maxX: 0, minY: 0, maxY: 0};\n        };\n    };\n    _ju.extend(_jp.Overlays.Arrow, AbstractOverlay, {\n        updateFrom:function(d) {\n            this.length = d.length || this.length;\n            this.width = d.width|| this.width;\n            this.direction = d.direction != null ? d.direction : this.direction;\n            this.foldback = d.foldback|| this.foldback;\n        }\n    });\n\n    /*\n     * Class: Overlays.PlainArrow\n     *\n     * A basic arrow.  This is in fact just one instance of the more generic case in which the tail folds back on itself to some\n     * point along the length of the arrow: in this case, that foldback point is the full length of the arrow.  so it just does\n     * a 'call' to Arrow with foldback set appropriately.\n     */\n    /*\n     * Function: Constructor\n     * See <Overlays.Arrow> for allowed parameters for this overlay.\n     */\n    _jp.Overlays.PlainArrow = function (params) {\n        params = params || {};\n        var p = _jp.extend(params, {foldback: 1});\n        _jp.Overlays.Arrow.call(this, p);\n        this.type = \"PlainArrow\";\n    };\n    _ju.extend(_jp.Overlays.PlainArrow, _jp.Overlays.Arrow);\n\n    /*\n     * Class: Overlays.Diamond\n     * \n     * A diamond. Like PlainArrow, this is a concrete case of the more generic case of the tail points converging on some point...it just\n     * happens that in this case, that point is greater than the length of the the arrow.\n     *\n     *      this could probably do with some help with positioning...due to the way it reuses the Arrow paint code, what Arrow thinks is the\n     *      center is actually 1/4 of the way along for this guy.  but we don't have any knowledge of pixels at this point, so we're kind of\n     *      stuck when it comes to helping out the Arrow class. possibly we could pass in a 'transpose' parameter or something. the value\n     *      would be -l/4 in this case - move along one quarter of the total length.\n     */\n    /*\n     * Function: Constructor\n     * See <Overlays.Arrow> for allowed parameters for this overlay.\n     */\n    _jp.Overlays.Diamond = function (params) {\n        params = params || {};\n        var l = params.length || 40,\n            p = _jp.extend(params, {length: l / 2, foldback: 2});\n        _jp.Overlays.Arrow.call(this, p);\n        this.type = \"Diamond\";\n    };\n    _ju.extend(_jp.Overlays.Diamond, _jp.Overlays.Arrow);\n\n    var _getDimensions = function (component, forceRefresh) {\n        if (component._jsPlumb.cachedDimensions == null || forceRefresh)\n            component._jsPlumb.cachedDimensions = component.getDimensions();\n        return component._jsPlumb.cachedDimensions;\n    };\n\n    // abstract superclass for overlays that add an element to the DOM.\n    var AbstractDOMOverlay = function (params) {\n        _jp.jsPlumbUIComponent.apply(this, arguments);\n        AbstractOverlay.apply(this, arguments);\n\n        // hand off fired events to associated component.\n        var _f = this.fire;\n        this.fire = function () {\n            _f.apply(this, arguments);\n            if (this.component) this.component.fire.apply(this.component, arguments);\n        };\n\n        this.detached=false;\n        this.id = params.id;\n        this._jsPlumb.div = null;\n        this._jsPlumb.initialised = false;\n        this._jsPlumb.component = params.component;\n        this._jsPlumb.cachedDimensions = null;\n        this._jsPlumb.create = params.create;\n        this._jsPlumb.initiallyInvisible = params.visible === false;\n\n        this.getElement = function () {\n            if (this._jsPlumb.div == null) {\n                var div = this._jsPlumb.div = _jp.getElement(this._jsPlumb.create(this._jsPlumb.component));\n                div.style.position = \"absolute\";\n                div.className = this._jsPlumb.instance.overlayClass + \" \" +\n                    (this.cssClass ? this.cssClass :\n                        params.cssClass ? params.cssClass : \"\");\n                this._jsPlumb.instance.appendElement(div);\n                this._jsPlumb.instance.getId(div);\n                this.canvas = div;\n\n                // in IE the top left corner is what it placed at the desired location.  This will not\n                // be fixed. IE8 is not going to be supported for much longer.\n                var ts = \"translate(-50%, -50%)\";\n                div.style.webkitTransform = ts;\n                div.style.mozTransform = ts;\n                div.style.msTransform = ts;\n                div.style.oTransform = ts;\n                div.style.transform = ts;\n\n                // write the related component into the created element\n                div._jsPlumb = this;\n\n                if (params.visible === false)\n                    div.style.display = \"none\";\n            }\n            return this._jsPlumb.div;\n        };\n\n        this.draw = function (component, currentConnectionPaintStyle, absolutePosition) {\n            var td = _getDimensions(this);\n            if (td != null && td.length == 2) {\n                var cxy = { x: 0, y: 0 };\n\n                // absolutePosition would have been set by a call to connection.setAbsoluteOverlayPosition.\n                if (absolutePosition) {\n                    cxy = { x: absolutePosition[0], y: absolutePosition[1] };\n                }\n                else if (component.pointOnPath) {\n                    var loc = this.loc, absolute = false;\n                    if (_ju.isString(this.loc) || this.loc < 0 || this.loc > 1) {\n                        loc = parseInt(this.loc, 10);\n                        absolute = true;\n                    }\n                    cxy = component.pointOnPath(loc, absolute);  // a connection\n                }\n                else {\n                    var locToUse = this.loc.constructor == Array ? this.loc : this.endpointLoc;\n                    cxy = { x: locToUse[0] * component.w,\n                        y: locToUse[1] * component.h };\n                }\n\n                var minx = cxy.x - (td[0] / 2),\n                    miny = cxy.y - (td[1] / 2);\n\n                return {\n                    component: component,\n                    d: { minx: minx, miny: miny, td: td, cxy: cxy },\n                    minX: minx,\n                    maxX: minx + td[0],\n                    minY: miny,\n                    maxY: miny + td[1]\n                };\n            }\n            else return {minX: 0, maxX: 0, minY: 0, maxY: 0};\n        };\n    };\n    _ju.extend(AbstractDOMOverlay, [_jp.jsPlumbUIComponent, AbstractOverlay], {\n        getDimensions: function () {\n            return [1,1];\n        },\n        setVisible: function (state) {\n            if (this._jsPlumb.div) {\n                this._jsPlumb.div.style.display = state ? \"block\" : \"none\";\n                // if initially invisible, dimensions are 0,0 and never get updated\n                if (state && this._jsPlumb.initiallyInvisible) {\n                    _getDimensions(this, true);\n                    this.component.repaint();\n                    this._jsPlumb.initiallyInvisible = false;\n                }\n            }\n        },\n        /*\n         * Function: clearCachedDimensions\n         * Clears the cached dimensions for the label. As a performance enhancement, label dimensions are\n         * cached from 1.3.12 onwards. The cache is cleared when you change the label text, of course, but\n         * there are other reasons why the text dimensions might change - if you make a change through CSS, for\n         * example, you might change the font size.  in that case you should explicitly call this method.\n         */\n        clearCachedDimensions: function () {\n            this._jsPlumb.cachedDimensions = null;\n        },\n        cleanup: function (force) {\n            if (force) {\n                if (this._jsPlumb.div != null) {\n                    this._jsPlumb.div._jsPlumb = null;\n                    this._jsPlumb.instance.removeElement(this._jsPlumb.div);\n                }\n            }\n            else {\n                // if not a forced cleanup, just detach child from parent for now.\n                if (this._jsPlumb && this._jsPlumb.div && this._jsPlumb.div.parentNode)\n                    this._jsPlumb.div.parentNode.removeChild(this._jsPlumb.div);\n                this.detached = true;\n            }\n\n        },\n        reattach:function(instance) {\n            if (this._jsPlumb.div != null) instance.getContainer().appendChild(this._jsPlumb.div);\n            this.detached = false;\n        },\n        computeMaxSize: function () {\n            var td = _getDimensions(this);\n            return Math.max(td[0], td[1]);\n        },\n        paint: function (p, containerExtents) {\n            if (!this._jsPlumb.initialised) {\n                this.getElement();\n                p.component.appendDisplayElement(this._jsPlumb.div);\n                this._jsPlumb.initialised = true;\n                if (this.detached) this._jsPlumb.div.parentNode.removeChild(this._jsPlumb.div);\n            }\n            this._jsPlumb.div.style.left = (p.component.x + p.d.minx) + \"px\";\n            this._jsPlumb.div.style.top = (p.component.y + p.d.miny) + \"px\";\n        }\n    });\n\n    /*\n     * Class: Overlays.Custom\n     * A Custom overlay. You supply a 'create' function which returns some DOM element, and jsPlumb positions it.\n     * The 'create' function is passed a Connection or Endpoint.\n     */\n    /*\n     * Function: Constructor\n     * \n     * Parameters:\n     * \tcreate - function for jsPlumb to call that returns a DOM element.\n     * \tlocation - distance (as a decimal from 0 to 1 inclusive) marking where the label should sit on the connector. defaults to 0.5.\n     * \tid - optional id to use for later retrieval of this overlay.\n     * \t\n     */\n    _jp.Overlays.Custom = function (params) {\n        this.type = \"Custom\";\n        AbstractDOMOverlay.apply(this, arguments);\n    };\n    _ju.extend(_jp.Overlays.Custom, AbstractDOMOverlay);\n\n    _jp.Overlays.GuideLines = function () {\n        var self = this;\n        self.length = 50;\n        self.strokeWidth = 5;\n        this.type = \"GuideLines\";\n        AbstractOverlay.apply(this, arguments);\n        _jp.jsPlumbUIComponent.apply(this, arguments);\n        this.draw = function (connector, currentConnectionPaintStyle) {\n\n            var head = connector.pointAlongPathFrom(self.loc, self.length / 2),\n                mid = connector.pointOnPath(self.loc),\n                tail = _jg.pointOnLine(head, mid, self.length),\n                tailLine = _jg.perpendicularLineTo(head, tail, 40),\n                headLine = _jg.perpendicularLineTo(tail, head, 20);\n\n            return {\n                connector: connector,\n                head: head,\n                tail: tail,\n                headLine: headLine,\n                tailLine: tailLine,\n                minX: Math.min(head.x, tail.x, headLine[0].x, headLine[1].x),\n                minY: Math.min(head.y, tail.y, headLine[0].y, headLine[1].y),\n                maxX: Math.max(head.x, tail.x, headLine[0].x, headLine[1].x),\n                maxY: Math.max(head.y, tail.y, headLine[0].y, headLine[1].y)\n            };\n        };\n\n        // this.cleanup = function() { };  // nothing to clean up for GuideLines\n    };\n\n    /*\n     * Class: Overlays.Label\n\n     */\n    /*\n     * Function: Constructor\n     * \n     * Parameters:\n     * \tcssClass - optional css class string to append to css class. This string is appended \"as-is\", so you can of course have multiple classes\n     *             defined.  This parameter is preferred to using labelStyle, borderWidth and borderStyle.\n     * \tlabel - the label to paint.  May be a string or a function that returns a string.  Nothing will be painted if your label is null or your\n     *         label function returns null.  empty strings _will_ be painted.\n     * \tlocation - distance (as a decimal from 0 to 1 inclusive) marking where the label should sit on the connector. defaults to 0.5.\n     * \tid - optional id to use for later retrieval of this overlay.\n     * \n     * \t\n     */\n    _jp.Overlays.Label = function (params) {\n        this.labelStyle = params.labelStyle;\n\n        var labelWidth = null, labelHeight = null, labelText = null, labelPadding = null;\n        this.cssClass = this.labelStyle != null ? this.labelStyle.cssClass : null;\n        var p = _jp.extend({\n            create: function () {\n                return _jp.createElement(\"div\");\n            }}, params);\n        _jp.Overlays.Custom.call(this, p);\n        this.type = \"Label\";\n        this.label = params.label || \"\";\n        this.labelText = null;\n        if (this.labelStyle) {\n            var el = this.getElement();\n            this.labelStyle.font = this.labelStyle.font || \"12px sans-serif\";\n            el.style.font = this.labelStyle.font;\n            el.style.color = this.labelStyle.color || \"black\";\n            if (this.labelStyle.fill) el.style.background = this.labelStyle.fill;\n            if (this.labelStyle.borderWidth > 0) {\n                var dStyle = this.labelStyle.borderStyle ? this.labelStyle.borderStyle : \"black\";\n                el.style.border = this.labelStyle.borderWidth + \"px solid \" + dStyle;\n            }\n            if (this.labelStyle.padding) el.style.padding = this.labelStyle.padding;\n        }\n\n    };\n    _ju.extend(_jp.Overlays.Label, _jp.Overlays.Custom, {\n        cleanup: function (force) {\n            if (force) {\n                this.div = null;\n                this.label = null;\n                this.labelText = null;\n                this.cssClass = null;\n                this.labelStyle = null;\n            }\n        },\n        getLabel: function () {\n            return this.label;\n        },\n        /*\n         * Function: setLabel\n         * sets the label's, um, label.  you would think i'd call this function\n         * 'setText', but you can pass either a Function or a String to this, so\n         * it makes more sense as 'setLabel'. This uses innerHTML on the label div, so keep\n         * that in mind if you need escaped HTML.\n         */\n        setLabel: function (l) {\n            this.label = l;\n            this.labelText = null;\n            this.clearCachedDimensions();\n            this.update();\n            this.component.repaint();\n        },\n        getDimensions: function () {\n            this.update();\n            return AbstractDOMOverlay.prototype.getDimensions.apply(this, arguments);\n        },\n        update: function () {\n            if (typeof this.label == \"function\") {\n                var lt = this.label(this);\n                this.getElement().innerHTML = lt.replace(/\\r\\n/g, \"<br/>\");\n            }\n            else {\n                if (this.labelText == null) {\n                    this.labelText = this.label;\n                    this.getElement().innerHTML = this.labelText.replace(/\\r\\n/g, \"<br/>\");\n                }\n            }\n        },\n        updateFrom:function(d) {\n            if(d.label != null){\n                this.setLabel(d.label);\n            }\n        }\n    });\n\n    // ********************************* END OF OVERLAY DEFINITIONS ***********************************************************************\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the base class for library adapters.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;(function() {\n    \"use strict\";\n    var root = this,\n        _jp = root.jsPlumb;\n\n    var _getEventManager = function(instance) {\n        var e = instance._mottle;\n        if (!e) {\n            e = instance._mottle = new root.Mottle();\n        }\n        return e;\n    };\n\n    _jp.extend(root.jsPlumbInstance.prototype, {\n        getEventManager:function() {\n            return _getEventManager(this);\n        },\n        on : function(el, event, callback) {\n            // TODO: here we would like to map the tap event if we know its\n            // an internal bind to a click. we have to know its internal because only\n            // then can we be sure that the UP event wont be consumed (tap is a synthesized\n            // event from a mousedown followed by a mouseup).\n            //event = { \"click\":\"tap\", \"dblclick\":\"dbltap\"}[event] || event;\n            this.getEventManager().on.apply(this, arguments);\n            return this;\n        },\n        off : function(el, event, callback) {\n            this.getEventManager().off.apply(this, arguments);\n            return this;\n        }\n    });\n\n\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the code for working with Groups.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;(function() {\n    \"use strict\";\n\n    var root = this,\n        _ju = root.jsPlumbUtil,\n        _jpi = root.jsPlumbInstance;\n\n    var GROUP_COLLAPSED_CLASS = \"jtk-group-collapsed\";\n    var GROUP_EXPANDED_CLASS = \"jtk-group-expanded\";\n    var GROUP_CONTAINER_SELECTOR = \"[jtk-group-content]\";\n    var ELEMENT_DRAGGABLE_EVENT = \"elementDraggable\";\n    var STOP = \"stop\";\n    var REVERT = \"revert\";\n    var GROUP_MANAGER = \"_groupManager\";\n    var GROUP = \"_jsPlumbGroup\";\n    var GROUP_DRAG_SCOPE = \"_jsPlumbGroupDrag\";\n    var EVT_CHILD_ADDED = \"group:addMember\";\n    var EVT_CHILD_REMOVED = \"group:removeMember\";\n    var EVT_GROUP_ADDED = \"group:add\";\n    var EVT_GROUP_REMOVED = \"group:remove\";\n    var EVT_EXPAND = \"group:expand\";\n    var EVT_COLLAPSE = \"group:collapse\";\n    var EVT_GROUP_DRAG_STOP = \"groupDragStop\";\n    var EVT_CONNECTION_MOVED = \"connectionMoved\";\n    var EVT_INTERNAL_CONNECTION_DETACHED = \"internal.connectionDetached\";\n\n    var CMD_REMOVE_ALL = \"removeAll\";\n    var CMD_ORPHAN_ALL = \"orphanAll\";\n    var CMD_SHOW = \"show\";\n    var CMD_HIDE = \"hide\";\n\n    var GroupManager = function(_jsPlumb) {\n        var _managedGroups = {}, _connectionSourceMap = {}, _connectionTargetMap = {}, self = this;\n\n        _jsPlumb.bind(\"connection\", function(p) {\n            if (p.source[GROUP] != null && p.target[GROUP] != null && p.source[GROUP] === p.target[GROUP]) {\n                _connectionSourceMap[p.connection.id] = p.source[GROUP];\n                _connectionTargetMap[p.connection.id] = p.source[GROUP];\n            }\n            else {\n                if (p.source[GROUP] != null) {\n                    _ju.suggest(p.source[GROUP].connections.source, p.connection);\n                    _connectionSourceMap[p.connection.id] = p.source[GROUP];\n                }\n                if (p.target[GROUP] != null) {\n                    _ju.suggest(p.target[GROUP].connections.target, p.connection);\n                    _connectionTargetMap[p.connection.id] = p.target[GROUP];\n                }\n            }\n        });\n\n        function _cleanupDetachedConnection(conn) {\n            delete conn.proxies;\n            var group = _connectionSourceMap[conn.id], f;\n            if (group != null) {\n                f = function(c) { return c.id === conn.id; };\n                _ju.removeWithFunction(group.connections.source, f);\n                _ju.removeWithFunction(group.connections.target, f);\n                delete _connectionSourceMap[conn.id];\n            }\n\n            group = _connectionTargetMap[conn.id];\n            if (group != null) {\n                f = function(c) { return c.id === conn.id; };\n                _ju.removeWithFunction(group.connections.source, f);\n                _ju.removeWithFunction(group.connections.target, f);\n                delete _connectionTargetMap[conn.id];\n            }\n        }\n\n        _jsPlumb.bind(EVT_INTERNAL_CONNECTION_DETACHED, function(p) {\n            _cleanupDetachedConnection(p.connection);\n        });\n\n        _jsPlumb.bind(EVT_CONNECTION_MOVED, function(p) {\n            var connMap = p.index === 0 ? _connectionSourceMap : _connectionTargetMap;\n            var group = connMap[p.connection.id];\n            if (group) {\n                var list = group.connections[p.index === 0 ? \"source\" : \"target\"];\n                var idx = list.indexOf(p.connection);\n                if (idx != -1) {\n                    list.splice(idx, 1);\n                }\n            }\n        });\n\n        this.addGroup = function(group) {\n            _jsPlumb.addClass(group.getEl(), GROUP_EXPANDED_CLASS);\n            _managedGroups[group.id] = group;\n            group.manager = this;\n            _updateConnectionsForGroup(group);\n            _jsPlumb.fire(EVT_GROUP_ADDED, { group:group });\n        };\n\n        this.addToGroup = function(group, el, doNotFireEvent) {\n            group = this.getGroup(group);\n            if (group) {\n                //group.add(el, doNotFireEvent);\n                var groupEl = group.getEl();\n\n                if (el._isJsPlumbGroup) return;\n                var currentGroup = el._jsPlumbGroup;\n                // if already a member of this group, do nothing\n                if (currentGroup !== group) {\n                    var elpos = _jsPlumb.getOffset(el, true);\n                    var cpos = group.collapsed ? _jsPlumb.getOffset(groupEl, true) : _jsPlumb.getOffset(group.getDragArea(), true);\n\n                    // otherwise, transfer to this group.\n                    if (currentGroup != null) {\n                        currentGroup.remove(el, doNotFireEvent);\n                        self.updateConnectionsForGroup(currentGroup);\n                    }\n                    group.add(el, doNotFireEvent);\n\n                    var handleDroppedConnections = function (list, index) {\n                        var oidx = index == 0 ? 1 : 0;\n                        list.each(function (c) {\n                            c.setVisible(false);\n                            if (c.endpoints[oidx].element._jsPlumbGroup === group) {\n                                c.endpoints[oidx].setVisible(false);\n                                self.expandConnection(c, oidx, group);\n                            }\n                            else {\n                                c.endpoints[index].setVisible(false);\n                                self.collapseConnection(c, index, group);\n                            }\n                        });\n                    };\n\n                    if (group.collapsed) {\n                        handleDroppedConnections(_jsPlumb.select({source: el}), 0);\n                        handleDroppedConnections(_jsPlumb.select({target: el}), 1);\n                    }\n\n                    var elId = _jsPlumb.getId(el);\n                    _jsPlumb.dragManager.setParent(el, elId, groupEl, _jsPlumb.getId(groupEl), elpos);\n\n                    var newPosition = { left: elpos.left - cpos.left, top: elpos.top - cpos.top };\n\n                    _jsPlumb.setPosition(el, newPosition);\n\n                    _jsPlumb.dragManager.revalidateParent(el, elId, elpos);\n\n                    self.updateConnectionsForGroup(group);\n\n                    _jsPlumb.revalidate(elId);\n\n                    setTimeout(function () {\n                        _jsPlumb.fire(EVT_CHILD_ADDED, {group: group, el: el});\n                    }, 0);\n                }\n            }\n        };\n\n        this.removeFromGroup = function(group, el, doNotFireEvent) {\n            group = this.getGroup(group);\n            if (group) {\n                group.remove(el, null, doNotFireEvent);\n            }\n        };\n\n        this.getGroup = function(groupId) {\n            var group = groupId;\n            if (_ju.isString(groupId)) {\n                group = _managedGroups[groupId];\n                if (group == null) throw new TypeError(\"No such group [\" + groupId + \"]\");\n            }\n            return group;\n        };\n\n        this.getGroups = function() {\n            var o = [];\n            for (var g in _managedGroups) {\n                o.push(_managedGroups[g]);\n            }\n            return o;\n        };\n\n        this.removeGroup = function(group, deleteMembers, manipulateDOM, doNotFireEvent) {\n            group = this.getGroup(group);\n            this.expandGroup(group, true); // this reinstates any original connections and removes all proxies, but does not fire an event.\n            group[deleteMembers ? CMD_REMOVE_ALL : CMD_ORPHAN_ALL](manipulateDOM, doNotFireEvent);\n            _jsPlumb.remove(group.getEl());\n            delete _managedGroups[group.id];\n            delete _jsPlumb._groups[group.id];\n            _jsPlumb.fire(EVT_GROUP_REMOVED, { group:group });\n        };\n\n        this.removeAllGroups = function(deleteMembers, manipulateDOM, doNotFireEvent) {\n            for (var g in _managedGroups) {\n                this.removeGroup(_managedGroups[g], deleteMembers, manipulateDOM, doNotFireEvent);\n            }\n        };\n\n        function _setVisible(group, state) {\n            var m = group.getMembers();\n            for (var i = 0; i < m.length; i++) {\n                _jsPlumb[state ? CMD_SHOW : CMD_HIDE](m[i], true);\n            }\n        }\n\n        var _collapseConnection = this.collapseConnection = function(c, index, group) {\n\n            var proxyEp, groupEl = group.getEl(), groupElId = _jsPlumb.getId(groupEl),\n                originalElementId = c.endpoints[index].elementId;\n\n            var otherEl = c.endpoints[index === 0 ? 1 : 0].element;\n            if (otherEl[GROUP] && (!otherEl[GROUP].shouldProxy() && otherEl[GROUP].collapsed)) {\n                return;\n            }\n\n            c.proxies = c.proxies || [];\n            if(c.proxies[index]) {\n                proxyEp = c.proxies[index].ep;\n            }else {\n                proxyEp = _jsPlumb.addEndpoint(groupEl, {\n                    endpoint:group.getEndpoint(c, index),\n                    anchor:group.getAnchor(c, index),\n                    parameters:{\n                        isProxyEndpoint:true\n                    }\n                });\n            }\n            proxyEp.setDeleteOnEmpty(true);\n\n            // for this index, stash proxy info: the new EP, the original EP.\n            c.proxies[index] = { ep:proxyEp, originalEp: c.endpoints[index] };\n\n            // and advise the anchor manager\n            if (index === 0) {\n                // TODO why are there two differently named methods? Why is there not one method that says \"some end of this\n                // connection changed (you give the index), and here's the new element and element id.\"\n                _jsPlumb.anchorManager.sourceChanged(originalElementId, groupElId, c, groupEl);\n            }\n            else {\n                _jsPlumb.anchorManager.updateOtherEndpoint(c.endpoints[0].elementId, originalElementId, groupElId, c);\n                c.target = groupEl;\n                c.targetId = groupElId;\n            }\n\n\n            // detach the original EP from the connection.\n            c.proxies[index].originalEp.detachFromConnection(c, null, true);\n\n            // set the proxy as the new ep\n            proxyEp.connections = [ c ];\n            c.endpoints[index] = proxyEp;\n\n            c.setVisible(true);\n        };\n\n        this.collapseGroup = function(group) {\n            group = this.getGroup(group);\n            if (group == null || group.collapsed) return;\n            var groupEl = group.getEl();\n\n            // todo remove old proxy endpoints first, just in case?\n            //group.proxies.length = 0;\n\n            // hide all connections\n            _setVisible(group, false);\n\n            if (group.shouldProxy()) {\n                // collapses all connections in a group.\n                var _collapseSet = function (conns, index) {\n                    for (var i = 0; i < conns.length; i++) {\n                        var c = conns[i];\n                        _collapseConnection(c, index, group);\n                    }\n                };\n\n                // setup proxies for sources and targets\n                _collapseSet(group.connections.source, 0);\n                _collapseSet(group.connections.target, 1);\n            }\n\n            group.collapsed = true;\n            _jsPlumb.removeClass(groupEl, GROUP_EXPANDED_CLASS);\n            _jsPlumb.addClass(groupEl, GROUP_COLLAPSED_CLASS);\n            _jsPlumb.revalidate(groupEl);\n            _jsPlumb.fire(EVT_COLLAPSE, { group:group  });\n        };\n\n        var _expandConnection = this.expandConnection = function(c, index, group) {\n\n            // if no proxies or none for this end of the connection, abort.\n            if (c.proxies == null || c.proxies[index] == null) return;\n\n            var groupElId = _jsPlumb.getId(group.getEl()),\n                originalElement = c.proxies[index].originalEp.element,\n                originalElementId = c.proxies[index].originalEp.elementId;\n\n            c.endpoints[index] = c.proxies[index].originalEp;\n            // and advise the anchor manager\n            if (index === 0) {\n                // TODO why are there two differently named methods? Why is there not one method that says \"some end of this\n                // connection changed (you give the index), and here's the new element and element id.\"\n                _jsPlumb.anchorManager.sourceChanged(groupElId, originalElementId, c, originalElement);\n            }\n            else {\n                _jsPlumb.anchorManager.updateOtherEndpoint(c.endpoints[0].elementId, groupElId, originalElementId, c);\n                c.target = originalElement;\n                c.targetId = originalElementId;\n            }\n\n            // detach the proxy EP from the connection (which will cause it to be removed as we no longer need it)\n            c.proxies[index].ep.detachFromConnection(c, null);\n\n            c.proxies[index].originalEp.addConnection(c);\n\n            // cleanup\n            delete c.proxies[index];\n        };\n\n        this.expandGroup = function(group, doNotFireEvent) {\n\n            group = this.getGroup(group);\n\n            if (group == null || !group.collapsed) return;\n            var groupEl = group.getEl();\n\n            _setVisible(group, true);\n\n            if (group.shouldProxy()) {\n                // collapses all connections in a group.\n                var _expandSet = function (conns, index) {\n                    for (var i = 0; i < conns.length; i++) {\n                        var c = conns[i];\n                        _expandConnection(c, index, group);\n                    }\n                };\n\n                // setup proxies for sources and targets\n                _expandSet(group.connections.source, 0);\n                _expandSet(group.connections.target, 1);\n            }\n\n            group.collapsed = false;\n            _jsPlumb.addClass(groupEl, GROUP_EXPANDED_CLASS);\n            _jsPlumb.removeClass(groupEl, GROUP_COLLAPSED_CLASS);\n            _jsPlumb.revalidate(groupEl);\n            this.repaintGroup(group);\n            if (!doNotFireEvent) {\n                _jsPlumb.fire(EVT_EXPAND, { group: group});\n            }\n        };\n\n        this.repaintGroup = function(group) {\n            group = this.getGroup(group);\n            var m = group.getMembers();\n            for (var i = 0; i < m.length; i++) {\n                _jsPlumb.revalidate(m[i]);\n            }\n        };\n\n        // TODO refactor this with the code that responds to `connection` events.\n        function _updateConnectionsForGroup(group) {\n            var members = group.getMembers();\n            var c1 = _jsPlumb.getConnections({source:members}, true);\n            var c2 = _jsPlumb.getConnections({target:members}, true);\n            var processed = {};\n            group.connections.source.length = 0;\n            group.connections.target.length = 0;\n            var oneSet = function(c) {\n                for (var i = 0; i < c.length; i++) {\n                    if (processed[c[i].id]) continue;\n                    processed[c[i].id] = true;\n                    if (c[i].source._jsPlumbGroup === group) {\n                        if (c[i].target._jsPlumbGroup !== group) {\n                            group.connections.source.push(c[i]);\n                        }\n                        _connectionSourceMap[c[i].id] = group;\n                    }\n                    else if (c[i].target._jsPlumbGroup === group) {\n                        group.connections.target.push(c[i]);\n                        _connectionTargetMap[c[i].id] = group;\n                    }\n                }\n            };\n            oneSet(c1); oneSet(c2);\n        }\n\n        this.updateConnectionsForGroup = _updateConnectionsForGroup;\n        this.refreshAllGroups = function() {\n            for (var g in _managedGroups) {\n                _updateConnectionsForGroup(_managedGroups[g]);\n                _jsPlumb.dragManager.updateOffsets(_jsPlumb.getId(_managedGroups[g].getEl()));\n            }\n        };\n    };\n\n    /**\n     *\n     * @param {jsPlumbInstance} _jsPlumb Associated jsPlumb instance.\n     * @param {Object} params\n     * @param {Element} params.el The DOM element representing the Group.\n     * @param {String} [params.id] Optional ID for the Group. A UUID will be assigned as the Group's ID if you do not provide one.\n     * @param {Boolean} [params.constrain=false] If true, child elements will not be able to be dragged outside of the Group container.\n     * @param {Boolean} [params.revert=true] By default, child elements revert to the container if dragged outside. You can change this by setting `revert:false`. This behaviour is also overridden if you set `orphan` or `prune`.\n     * @param {Boolean} [params.orphan=false] If true, child elements dropped outside of the Group container will be removed from the Group (but not from the DOM).\n     * @param {Boolean} [params.prune=false] If true, child elements dropped outside of the Group container will be removed from the Group and also from the DOM.\n     * @param {Boolean} [params.dropOverride=false] If true, a child element that has been dropped onto some other Group will not be subject to the controls imposed by `prune`, `revert` or `orphan`.\n     * @constructor\n     */\n    var Group = function(_jsPlumb, params) {\n        var self = this;\n        var el = params.el;\n        this.getEl = function() { return el; };\n        this.id = params.id || _ju.uuid();\n        el._isJsPlumbGroup = true;\n\n        var getDragArea = this.getDragArea = function() {\n            var da = _jsPlumb.getSelector(el, GROUP_CONTAINER_SELECTOR);\n            return da && da.length > 0 ? da[0] : el;\n        };\n\n        var ghost = params.ghost === true;\n        var constrain = ghost || (params.constrain === true);\n        var revert = params.revert !== false;\n        var orphan = params.orphan === true;\n        var prune = params.prune === true;\n        var dropOverride = params.dropOverride === true;\n        var proxied = params.proxied !== false;\n        var elements = [];\n        this.connections = { source:[], target:[], internal:[] };\n\n        // this function, and getEndpoint below, are stubs for a future setup in which we can choose endpoint\n        // and anchor based upon the connection and the index (source/target) of the endpoint to be proxied.\n        this.getAnchor = function(conn, endpointIndex) {\n            return params.anchor || \"Continuous\";\n        };\n\n        this.getEndpoint = function(conn, endpointIndex) {\n            return params.endpoint || [ \"Dot\", { radius:10 }];\n        };\n\n        this.collapsed = false;\n        if (params.draggable !== false) {\n            var opts = {\n                stop:function(params) {\n                    _jsPlumb.fire(EVT_GROUP_DRAG_STOP, jsPlumb.extend(params, {group:self}));\n                },\n                scope:GROUP_DRAG_SCOPE\n            };\n            if (params.dragOptions) {\n                root.jsPlumb.extend(opts, params.dragOptions);\n            }\n            _jsPlumb.draggable(params.el, opts);\n        }\n        if (params.droppable !== false) {\n            _jsPlumb.droppable(params.el, {\n                drop:function(p) {\n                    var el = p.drag.el;\n                    if (el._isJsPlumbGroup) return;\n                    var currentGroup = el._jsPlumbGroup;\n                    if (currentGroup !== self) {\n                        if (currentGroup != null) {\n                            if (currentGroup.overrideDrop(el, self)) {\n                                return;\n                            }\n                        }\n                        _jsPlumb.getGroupManager().addToGroup(self, el, false);\n                    }\n\n                }\n            });\n        }\n        var _each = function(_el, fn) {\n            var els = _el.nodeType == null ?  _el : [ _el ];\n            for (var i = 0; i < els.length; i++) {\n                fn(els[i]);\n            }\n        };\n\n        this.overrideDrop = function(_el, targetGroup) {\n            return dropOverride && (revert || prune || orphan);\n        };\n\n        this.add = function(_el, doNotFireEvent) {\n            var dragArea = getDragArea();\n            _each(_el, function(__el) {\n\n                if (__el._jsPlumbGroup != null) {\n                    if (__el._jsPlumbGroup === self) {\n                        return;\n                    } else {\n                        __el._jsPlumbGroup.remove(__el, true, doNotFireEvent, false);\n                    }\n                }\n\n                __el._jsPlumbGroup = self;\n                elements.push(__el);\n                // test if draggable and add handlers if so.\n                if (_jsPlumb.isAlreadyDraggable(__el)) {\n                    _bindDragHandlers(__el);\n                }\n\n                if (__el.parentNode != dragArea) {\n                    dragArea.appendChild(__el);\n                }\n\n                if (!doNotFireEvent) {\n                    _jsPlumb.fire(EVT_CHILD_ADDED, {group: self, el: __el});\n                }\n            });\n\n            _jsPlumb.getGroupManager().updateConnectionsForGroup(self);\n        };\n\n        this.remove = function(el, manipulateDOM, doNotFireEvent, doNotUpdateConnections) {\n\n            _each(el, function(__el) {\n                delete __el._jsPlumbGroup;\n                _ju.removeWithFunction(elements, function(e) {\n                    return e === __el;\n                });\n\n                if (manipulateDOM) {\n                    try { self.getDragArea().removeChild(__el); }\n                    catch (e) {\n                        jsPlumbUtil.log(\"Could not remove element from Group \" + e);\n                    }\n                }\n                _unbindDragHandlers(__el);\n                if (!doNotFireEvent) {\n                    _jsPlumb.fire(EVT_CHILD_REMOVED, {group: self, el: __el});\n                }\n            });\n            if (!doNotUpdateConnections) {\n                _jsPlumb.getGroupManager().updateConnectionsForGroup(self);\n            }\n        };\n        this.removeAll = function(manipulateDOM, doNotFireEvent) {\n            for (var i = 0, l = elements.length; i < l; i++) {\n                self.remove(elements[0], manipulateDOM, doNotFireEvent, true);\n            }\n            elements.length = 0;\n            _jsPlumb.getGroupManager().updateConnectionsForGroup(self);\n        };\n        this.orphanAll = function() {\n            for (var i = 0; i < elements.length; i++) {\n                _orphan(elements[i]);\n            }\n            elements.length = 0;\n        };\n        this.getMembers = function() { return elements; };\n\n        el[GROUP] = this;\n\n        _jsPlumb.bind(ELEMENT_DRAGGABLE_EVENT, function(dragParams) {\n            // if its for the current group,\n            if (dragParams.el._jsPlumbGroup == this) {\n                _bindDragHandlers(dragParams.el);\n            }\n        }.bind(this));\n\n        function _findParent(_el) {\n            return _el.offsetParent;\n        }\n\n        function _isInsideParent(_el, pos) {\n            var p = _findParent(_el),\n                s = _jsPlumb.getSize(p),\n                ss = _jsPlumb.getSize(_el),\n                leftEdge = pos[0],\n                rightEdge = leftEdge + ss[0],\n                topEdge = pos[1],\n                bottomEdge = topEdge + ss[1];\n\n            return rightEdge > 0 && leftEdge < s[0] && bottomEdge > 0 && topEdge < s[1];\n        }\n\n        //\n        // orphaning an element means taking it out of the group and adding it to the main jsplumb container.\n        //\n        function _orphan(_el) {\n            var id = _jsPlumb.getId(_el);\n            var pos = _jsPlumb.getOffset(_el);\n            _el.parentNode.removeChild(_el);\n            _jsPlumb.getContainer().appendChild(_el);\n            _jsPlumb.setPosition(_el, pos);\n            delete _el._jsPlumbGroup;\n            _unbindDragHandlers(_el);\n            _jsPlumb.dragManager.clearParent(_el, id);\n        }\n\n        //\n        // remove an element from the group, then either prune it from the jsplumb instance, or just orphan it.\n        //\n        function _pruneOrOrphan(p) {\n            if (!_isInsideParent(p.el, p.pos)) {\n                var group = p.el._jsPlumbGroup;\n                if (prune) {\n                    _jsPlumb.remove(p.el);\n                } else {\n                    _orphan(p.el);\n                }\n\n                group.remove(p.el);\n            }\n        }\n\n        //\n        // redraws the element\n        //\n        function _revalidate(_el) {\n            var id = _jsPlumb.getId(_el);\n            _jsPlumb.revalidate(_el);\n            _jsPlumb.dragManager.revalidateParent(_el, id);\n        }\n\n        //\n        // unbind the group specific drag/revert handlers.\n        //\n        function _unbindDragHandlers(_el) {\n            if (!_el._katavorioDrag) return;\n            if (prune || orphan) {\n                _el._katavorioDrag.off(STOP, _pruneOrOrphan);\n            }\n            if (!prune && !orphan && revert) {\n                _el._katavorioDrag.off(REVERT, _revalidate);\n                _el._katavorioDrag.setRevert(null);\n            }\n        }\n\n        function _bindDragHandlers(_el) {\n            if (!_el._katavorioDrag) return;\n            if (prune || orphan) {\n                _el._katavorioDrag.on(STOP, _pruneOrOrphan);\n            }\n\n            if (constrain) {\n                _el._katavorioDrag.setConstrain(true);\n            }\n\n            if (ghost) {\n                _el._katavorioDrag.setUseGhostProxy(true);\n            }\n\n            if (!prune && !orphan && revert) {\n                _el._katavorioDrag.on(REVERT, _revalidate);\n                _el._katavorioDrag.setRevert(function(__el, pos) {\n                    return !_isInsideParent(__el, pos);\n                });\n            }\n        }\n\n        this.shouldProxy = function() {\n            return proxied;\n        };\n\n        _jsPlumb.getGroupManager().addGroup(this);\n    };\n\n    /**\n     * Adds a group to the jsPlumb instance.\n     * @method addGroup\n     * @param {Object} params\n     * @return {Group} The newly created Group.\n     */\n    _jpi.prototype.addGroup = function(params) {\n        var j = this;\n        j._groups = j._groups || {};\n        if (j._groups[params.id] != null) {\n            throw new TypeError(\"cannot create Group [\" + params.id + \"]; a Group with that ID exists\");\n        }\n        if (params.el[GROUP] != null) {\n            throw new TypeError(\"cannot create Group [\" + params.id + \"]; the given element is already a Group\");\n        }\n        var group = new Group(j, params);\n        j._groups[group.id] = group;\n        if (params.collapsed) {\n            this.collapseGroup(group);\n        }\n        return group;\n    };\n\n    /**\n     * Add an element to a group.\n     * @method addToGroup\n     * @param {String} group Group, or ID of the group, to add the element to.\n     * @param {Element} el Element to add to the group.\n     */\n    _jpi.prototype.addToGroup = function(group, el, doNotFireEvent) {\n\n        var _one = function(_el) {\n            var id = this.getId(_el);\n            this.manage(id, _el);\n            this.getGroupManager().addToGroup(group, _el, doNotFireEvent);\n        }.bind(this);\n\n        if (Array.isArray(el)) {\n            for (var i = 0; i < el.length; i++) {\n                _one(el[i]);\n            }\n        } else {\n            _one(el);\n        }\n    };\n\n    /**\n     * Remove an element from a group.\n     * @method removeFromGroup\n     * @param {String} group Group, or ID of the group, to remove the element from.\n     * @param {Element} el Element to add to the group.\n     */\n    _jpi.prototype.removeFromGroup = function(group, el, doNotFireEvent) {\n        this.getGroupManager().removeFromGroup(group, el, doNotFireEvent);\n    };\n\n    /**\n     * Remove a group, and optionally remove its members from the jsPlumb instance.\n     * @method removeGroup\n     * @param {String|Group} group Group to delete, or ID of Group to delete.\n     * @param {Boolean} [deleteMembers=false] If true, group members will be removed along with the group. Otherwise they will\n     * just be 'orphaned' (returned to the main container).\n     */\n    _jpi.prototype.removeGroup = function(group, deleteMembers, manipulateDOM, doNotFireEvent) {\n        this.getGroupManager().removeGroup(group, deleteMembers, manipulateDOM, doNotFireEvent);\n    };\n\n    /**\n     * Remove all groups, and optionally remove their members from the jsPlumb instance.\n     * @method removeAllGroup\n     * @param {Boolean} [deleteMembers=false] If true, group members will be removed along with the groups. Otherwise they will\n     * just be 'orphaned' (returned to the main container).\n     */\n    _jpi.prototype.removeAllGroups = function(deleteMembers, manipulateDOM, doNotFireEvent) {\n        this.getGroupManager().removeAllGroups(deleteMembers, manipulateDOM, doNotFireEvent);\n    };\n\n    /**\n     * Get a Group\n     * @method getGroup\n     * @param {String} groupId ID of the group to get\n     * @return {Group} Group with the given ID, null if not found.\n     */\n    _jpi.prototype.getGroup = function(groupId) {\n        return this.getGroupManager().getGroup(groupId);\n    };\n\n    /**\n     * Gets all the Groups managed by the jsPlumb instance.\n     * @returns {Group[]} List of Groups. Empty if none.\n     */\n    _jpi.prototype.getGroups = function() {\n        return this.getGroupManager().getGroups();\n    };\n\n    /**\n     * Expands a group element. jsPlumb doesn't do \"everything\" for you here, because what it means to expand a Group\n     * will vary from application to application. jsPlumb does these things:\n     *\n     * - Hides any connections that are internal to the group (connections between members, and connections from member of\n     * the group to the group itself)\n     * - Proxies all connections for which the source or target is a member of the group.\n     * - Hides the proxied connections.\n     * - Adds the jtk-group-expanded class to the group's element\n     * - Removes the jtk-group-collapsed class from the group's element.\n     *\n     * @method expandGroup\n     * @param {String|Group} group Group to expand, or ID of Group to expand.\n     */\n    _jpi.prototype.expandGroup = function(group) {\n        this.getGroupManager().expandGroup(group);\n    };\n\n    /**\n     * Collapses a group element. jsPlumb doesn't do \"everything\" for you here, because what it means to collapse a Group\n     * will vary from application to application. jsPlumb does these things:\n     *\n     * - Shows any connections that are internal to the group (connections between members, and connections from member of\n     * the group to the group itself)\n     * - Removes proxies for all connections for which the source or target is a member of the group.\n     * - Shows the previously proxied connections.\n     * - Adds the jtk-group-collapsed class to the group's element\n     * - Removes the jtk-group-expanded class from the group's element.\n     *\n     * @method expandGroup\n     * @param {String|Group} group Group to expand, or ID of Group to expand.\n     */\n    _jpi.prototype.collapseGroup = function(groupId) {\n        this.getGroupManager().collapseGroup(groupId);\n    };\n\n\n    _jpi.prototype.repaintGroup = function(group) {\n        this.getGroupManager().repaintGroup(group);\n    };\n\n    /**\n     * Collapses or expands a group element depending on its current state. See notes in the collapseGroup and expandGroup method.\n     *\n     * @method toggleGroup\n     * @param {String|Group} group Group to expand/collapse, or ID of Group to expand/collapse.\n     */\n    _jpi.prototype.toggleGroup = function(group) {\n        group = this.getGroupManager().getGroup(group);\n        if (group != null) {\n            this.getGroupManager()[group.collapsed ? \"expandGroup\" : \"collapseGroup\"](group);\n        }\n    };\n\n    //\n    // lazy init a group manager for the given jsplumb instance.\n    //\n    _jpi.prototype.getGroupManager = function() {\n        var mgr = this[GROUP_MANAGER];\n        if (mgr == null) {\n            mgr = this[GROUP_MANAGER] = new GroupManager(this);\n        }\n        return mgr;\n    };\n\n    _jpi.prototype.removeGroupManager = function() {\n        delete this[GROUP_MANAGER];\n    };\n\n    /**\n     * Gets the Group that the given element belongs to, null if none.\n     * @method getGroupFor\n     * @param {String|Element} el Element, or element ID.\n     * @returns {Group} A Group, if found, or null.\n     */\n    _jpi.prototype.getGroupFor = function(el) {\n        el = this.getElement(el);\n        if (el) {\n            return el[GROUP];\n        }\n    };\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the 'flowchart' connectors, consisting of vertical and horizontal line segments.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    var Flowchart = function (params) {\n        this.type = \"Flowchart\";\n        params = params || {};\n        params.stub = params.stub == null ? 30 : params.stub;\n        var segments,\n            _super = _jp.Connectors.AbstractConnector.apply(this, arguments),\n            midpoint = params.midpoint == null ? 0.5 : params.midpoint,\n            alwaysRespectStubs = params.alwaysRespectStubs === true,\n            lastx = null, lasty = null, lastOrientation,\n            cornerRadius = params.cornerRadius != null ? params.cornerRadius : 0,\n\n            // TODO now common between this and AbstractBezierEditor; refactor into superclass?\n            loopbackRadius = params.loopbackRadius || 25,\n            isLoopbackCurrently = false,\n\n            sgn = function (n) {\n                return n < 0 ? -1 : n === 0 ? 0 : 1;\n            },\n            /**\n             * helper method to add a segment.\n             */\n            addSegment = function (segments, x, y, paintInfo) {\n                if (lastx == x && lasty == y) return;\n                var lx = lastx == null ? paintInfo.sx : lastx,\n                    ly = lasty == null ? paintInfo.sy : lasty,\n                    o = lx == x ? \"v\" : \"h\",\n                    sgnx = sgn(x - lx),\n                    sgny = sgn(y - ly);\n\n                lastx = x;\n                lasty = y;\n                segments.push([lx, ly, x, y, o, sgnx, sgny]);\n            },\n            segLength = function (s) {\n                return Math.sqrt(Math.pow(s[0] - s[2], 2) + Math.pow(s[1] - s[3], 2));\n            },\n            _cloneArray = function (a) {\n                var _a = [];\n                _a.push.apply(_a, a);\n                return _a;\n            },\n            writeSegments = function (conn, segments, paintInfo) {\n                var current = null, next;\n                for (var i = 0; i < segments.length - 1; i++) {\n\n                    current = current || _cloneArray(segments[i]);\n                    next = _cloneArray(segments[i + 1]);\n                    if (cornerRadius > 0 && current[4] != next[4]) {\n                        var radiusToUse = Math.min(cornerRadius, segLength(current), segLength(next));\n                        // right angle. adjust current segment's end point, and next segment's start point.\n                        current[2] -= current[5] * radiusToUse;\n                        current[3] -= current[6] * radiusToUse;\n                        next[0] += next[5] * radiusToUse;\n                        next[1] += next[6] * radiusToUse;\n                        var ac = (current[6] == next[5] && next[5] == 1) ||\n                                ((current[6] == next[5] && next[5] === 0) && current[5] != next[6]) ||\n                                (current[6] == next[5] && next[5] == -1),\n                            sgny = next[1] > current[3] ? 1 : -1,\n                            sgnx = next[0] > current[2] ? 1 : -1,\n                            sgnEqual = sgny == sgnx,\n                            cx = (sgnEqual && ac || (!sgnEqual && !ac)) ? next[0] : current[2],\n                            cy = (sgnEqual && ac || (!sgnEqual && !ac)) ? current[3] : next[1];\n\n                        _super.addSegment(conn, \"Straight\", {\n                            x1: current[0], y1: current[1], x2: current[2], y2: current[3]\n                        });\n\n                        _super.addSegment(conn, \"Arc\", {\n                            r: radiusToUse,\n                            x1: current[2],\n                            y1: current[3],\n                            x2: next[0],\n                            y2: next[1],\n                            cx: cx,\n                            cy: cy,\n                            ac: ac\n                        });\n                    }\n                    else {\n                        // dx + dy are used to adjust for line width.\n                        var dx = (current[2] == current[0]) ? 0 : (current[2] > current[0]) ? (paintInfo.lw / 2) : -(paintInfo.lw / 2),\n                            dy = (current[3] == current[1]) ? 0 : (current[3] > current[1]) ? (paintInfo.lw / 2) : -(paintInfo.lw / 2);\n                        _super.addSegment(conn, \"Straight\", {\n                            x1: current[0] - dx, y1: current[1] - dy, x2: current[2] + dx, y2: current[3] + dy\n                        });\n                    }\n                    current = next;\n                }\n                if (next != null) {\n                    // last segment\n                    _super.addSegment(conn, \"Straight\", {\n                        x1: next[0], y1: next[1], x2: next[2], y2: next[3]\n                    });\n                }\n            };\n\n        this._compute = function (paintInfo, params) {\n\n            segments = [];\n            lastx = null;\n            lasty = null;\n            lastOrientation = null;\n\n            var commonStubCalculator = function () {\n                return [ paintInfo.startStubX, paintInfo.startStubY, paintInfo.endStubX, paintInfo.endStubY ];\n            },\n                stubCalculators = {\n                    perpendicular: commonStubCalculator,\n                    orthogonal: commonStubCalculator,\n                    opposite: function (axis) {\n                        var pi = paintInfo,\n                            idx = axis == \"x\" ? 0 : 1,\n                            areInProximity = {\n                                \"x\": function () {\n                                    return ( (pi.so[idx] == 1 && (\n                                        ( (pi.startStubX > pi.endStubX) && (pi.tx > pi.startStubX) ) ||\n                                        ( (pi.sx > pi.endStubX) && (pi.tx > pi.sx))))) ||\n\n                                        ( (pi.so[idx] == -1 && (\n                                            ( (pi.startStubX < pi.endStubX) && (pi.tx < pi.startStubX) ) ||\n                                            ( (pi.sx < pi.endStubX) && (pi.tx < pi.sx)))));\n                                },\n                                \"y\": function () {\n                                    return ( (pi.so[idx] == 1 && (\n                                        ( (pi.startStubY > pi.endStubY) && (pi.ty > pi.startStubY) ) ||\n                                        ( (pi.sy > pi.endStubY) && (pi.ty > pi.sy))))) ||\n\n                                        ( (pi.so[idx] == -1 && (\n                                            ( (pi.startStubY < pi.endStubY) && (pi.ty < pi.startStubY) ) ||\n                                            ( (pi.sy < pi.endStubY) && (pi.ty < pi.sy)))));\n                                }\n                            };\n\n                        if (!alwaysRespectStubs && areInProximity[axis]()) {\n                            return {\n                                \"x\": [(paintInfo.sx + paintInfo.tx) / 2, paintInfo.startStubY, (paintInfo.sx + paintInfo.tx) / 2, paintInfo.endStubY],\n                                \"y\": [paintInfo.startStubX, (paintInfo.sy + paintInfo.ty) / 2, paintInfo.endStubX, (paintInfo.sy + paintInfo.ty) / 2]\n                            }[axis];\n                        }\n                        else {\n                            return [ paintInfo.startStubX, paintInfo.startStubY, paintInfo.endStubX, paintInfo.endStubY ];\n                        }\n                    }\n                };\n\n            // calculate Stubs.\n            var stubs = stubCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis),\n                idx = paintInfo.sourceAxis == \"x\" ? 0 : 1,\n                oidx = paintInfo.sourceAxis == \"x\" ? 1 : 0,\n                ss = stubs[idx],\n                oss = stubs[oidx],\n                es = stubs[idx + 2],\n                oes = stubs[oidx + 2];\n\n            // add the start stub segment. use stubs for loopback as it will look better, with the loop spaced\n            // away from the element.\n            addSegment(segments, stubs[0], stubs[1], paintInfo);\n\n            // if its a loopback and we should treat it differently.\n            if (false &&params.sourcePos[0] == params.targetPos[0] && params.sourcePos[1] == params.targetPos[1]) {\n\n                // we use loopbackRadius here, as statemachine connectors do.\n                // so we go radius to the left from stubs[0], then upwards by 2*radius, to the right by 2*radius,\n                // down by 2*radius, left by radius.\n                addSegment(segments, stubs[0] - loopbackRadius, stubs[1], paintInfo);\n                addSegment(segments, stubs[0] - loopbackRadius, stubs[1] - (2 * loopbackRadius), paintInfo);\n                addSegment(segments, stubs[0] + loopbackRadius, stubs[1] - (2 * loopbackRadius), paintInfo);\n                addSegment(segments, stubs[0] + loopbackRadius, stubs[1], paintInfo);\n                addSegment(segments, stubs[0], stubs[1], paintInfo);\n\n            }\n            else {\n\n\n                var midx = paintInfo.startStubX + ((paintInfo.endStubX - paintInfo.startStubX) * midpoint),\n                    midy = paintInfo.startStubY + ((paintInfo.endStubY - paintInfo.startStubY) * midpoint);\n\n                var orientations = { x: [ 0, 1 ], y: [ 1, 0 ] },\n                    lineCalculators = {\n                        perpendicular: function (axis) {\n                            var pi = paintInfo,\n                                sis = {\n                                    x: [\n                                        [ [ 1, 2, 3, 4 ], null, [ 2, 1, 4, 3 ] ],\n                                        null,\n                                        [ [ 4, 3, 2, 1 ], null, [ 3, 4, 1, 2 ] ]\n                                    ],\n                                    y: [\n                                        [ [ 3, 2, 1, 4 ], null, [ 2, 3, 4, 1 ] ],\n                                        null,\n                                        [ [ 4, 1, 2, 3 ], null, [ 1, 4, 3, 2 ] ]\n                                    ]\n                                },\n                                stubs = {\n                                    x: [ [ pi.startStubX, pi.endStubX ], null, [ pi.endStubX, pi.startStubX ] ],\n                                    y: [ [ pi.startStubY, pi.endStubY ], null, [ pi.endStubY, pi.startStubY ] ]\n                                },\n                                midLines = {\n                                    x: [ [ midx, pi.startStubY ], [ midx, pi.endStubY ] ],\n                                    y: [ [ pi.startStubX, midy ], [ pi.endStubX, midy ] ]\n                                },\n                                linesToEnd = {\n                                    x: [ [ pi.endStubX, pi.startStubY ] ],\n                                    y: [ [ pi.startStubX, pi.endStubY ] ]\n                                },\n                                startToEnd = {\n                                    x: [ [ pi.startStubX, pi.endStubY ], [ pi.endStubX, pi.endStubY ] ],\n                                    y: [ [ pi.endStubX, pi.startStubY ], [ pi.endStubX, pi.endStubY ] ]\n                                },\n                                startToMidToEnd = {\n                                    x: [ [ pi.startStubX, midy ], [ pi.endStubX, midy ], [ pi.endStubX, pi.endStubY ] ],\n                                    y: [ [ midx, pi.startStubY ], [ midx, pi.endStubY ], [ pi.endStubX, pi.endStubY ] ]\n                                },\n                                otherStubs = {\n                                    x: [ pi.startStubY, pi.endStubY ],\n                                    y: [ pi.startStubX, pi.endStubX ]\n                                },\n                                soIdx = orientations[axis][0], toIdx = orientations[axis][1],\n                                _so = pi.so[soIdx] + 1,\n                                _to = pi.to[toIdx] + 1,\n                                otherFlipped = (pi.to[toIdx] == -1 && (otherStubs[axis][1] < otherStubs[axis][0])) || (pi.to[toIdx] == 1 && (otherStubs[axis][1] > otherStubs[axis][0])),\n                                stub1 = stubs[axis][_so][0],\n                                stub2 = stubs[axis][_so][1],\n                                segmentIndexes = sis[axis][_so][_to];\n\n                            if (pi.segment == segmentIndexes[3] || (pi.segment == segmentIndexes[2] && otherFlipped)) {\n                                return midLines[axis];\n                            }\n                            else if (pi.segment == segmentIndexes[2] && stub2 < stub1) {\n                                return linesToEnd[axis];\n                            }\n                            else if ((pi.segment == segmentIndexes[2] && stub2 >= stub1) || (pi.segment == segmentIndexes[1] && !otherFlipped)) {\n                                return startToMidToEnd[axis];\n                            }\n                            else if (pi.segment == segmentIndexes[0] || (pi.segment == segmentIndexes[1] && otherFlipped)) {\n                                return startToEnd[axis];\n                            }\n                        },\n                        orthogonal: function (axis, startStub, otherStartStub, endStub, otherEndStub) {\n                            var pi = paintInfo,\n                                extent = {\n                                    \"x\": pi.so[0] == -1 ? Math.min(startStub, endStub) : Math.max(startStub, endStub),\n                                    \"y\": pi.so[1] == -1 ? Math.min(startStub, endStub) : Math.max(startStub, endStub)\n                                }[axis];\n\n                            return {\n                                \"x\": [\n                                    [ extent, otherStartStub ],\n                                    [ extent, otherEndStub ],\n                                    [ endStub, otherEndStub ]\n                                ],\n                                \"y\": [\n                                    [ otherStartStub, extent ],\n                                    [ otherEndStub, extent ],\n                                    [ otherEndStub, endStub ]\n                                ]\n                            }[axis];\n                        },\n                        opposite: function (axis, ss, oss, es) {\n                            var pi = paintInfo,\n                                otherAxis = {\"x\": \"y\", \"y\": \"x\"}[axis],\n                                dim = {\"x\": \"height\", \"y\": \"width\"}[axis],\n                                comparator = pi[\"is\" + axis.toUpperCase() + \"GreaterThanStubTimes2\"];\n\n                            if (params.sourceEndpoint.elementId == params.targetEndpoint.elementId) {\n                                var _val = oss + ((1 - params.sourceEndpoint.anchor[otherAxis]) * params.sourceInfo[dim]) + _super.maxStub;\n                                return {\n                                    \"x\": [\n                                        [ ss, _val ],\n                                        [ es, _val ]\n                                    ],\n                                    \"y\": [\n                                        [ _val, ss ],\n                                        [ _val, es ]\n                                    ]\n                                }[axis];\n\n                            }\n                            else if (!comparator || (pi.so[idx] == 1 && ss > es) || (pi.so[idx] == -1 && ss < es)) {\n                                return {\n                                    \"x\": [\n                                        [ ss, midy ],\n                                        [ es, midy ]\n                                    ],\n                                    \"y\": [\n                                        [ midx, ss ],\n                                        [ midx, es ]\n                                    ]\n                                }[axis];\n                            }\n                            else if ((pi.so[idx] == 1 && ss < es) || (pi.so[idx] == -1 && ss > es)) {\n                                return {\n                                    \"x\": [\n                                        [ midx, pi.sy ],\n                                        [ midx, pi.ty ]\n                                    ],\n                                    \"y\": [\n                                        [ pi.sx, midy ],\n                                        [ pi.tx, midy ]\n                                    ]\n                                }[axis];\n                            }\n                        }\n                    };\n\n                // compute the rest of the line\n                var p = lineCalculators[paintInfo.anchorOrientation](paintInfo.sourceAxis, ss, oss, es, oes);\n                if (p) {\n                    for (var i = 0; i < p.length; i++) {\n                        addSegment(segments, p[i][0], p[i][1], paintInfo);\n                    }\n                }\n\n                // line to end stub\n                addSegment(segments, stubs[2], stubs[3], paintInfo);\n\n            }\n\n            // end stub to end (common)\n            addSegment(segments, paintInfo.tx, paintInfo.ty, paintInfo);\n\n            // write out the segments.\n            writeSegments(this, segments, paintInfo);\n        };\n\n        /*this.getPath = function () {\n            var _last = null, _lastAxis = null, s = [], segs = segments;\n            for (var i = 0; i < segs.length; i++) {\n                var seg = segs[i], axis = seg[4], axisIndex = (axis == \"v\" ? 3 : 2);\n                if (_last != null && _lastAxis === axis) {\n                    _last[axisIndex] = seg[axisIndex];\n                }\n                else {\n                    if (seg[0] != seg[2] || seg[1] != seg[3]) {\n                        s.push({\n                            start: [ seg[0], seg[1] ],\n                            end: [ seg[2], seg[3] ]\n                        });\n                        _last = seg;\n                        _lastAxis = seg[4];\n                    }\n                }\n            }\n            return s;\n        };*/\n    };\n\n    _ju.extend(Flowchart, _jp.Connectors.AbstractConnector);\n    _jp.registerConnectorType(Flowchart, \"Flowchart\");\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the code for the Bezier connector type.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    _jp.Connectors.AbstractBezierConnector = function(params) {\n        params = params || {};\n        var showLoopback = params.showLoopback !== false,\n            curviness = params.curviness || 10,\n            margin = params.margin || 5,\n            proximityLimit = params.proximityLimit || 80,\n            clockwise = params.orientation && params.orientation === \"clockwise\",\n            loopbackRadius = params.loopbackRadius || 25,\n            isLoopbackCurrently = false,\n            _super;\n\n        this.overrideSetEditable = function() { return !isLoopbackCurrently; };\n\n        this._compute = function (paintInfo, p) {\n\n            var sp = p.sourcePos,\n                tp = p.targetPos,\n                _w = Math.abs(sp[0] - tp[0]),\n                _h = Math.abs(sp[1] - tp[1]);\n\n            if (!showLoopback || (p.sourceEndpoint.elementId !== p.targetEndpoint.elementId)) {\n                isLoopbackCurrently = false;\n                this._computeBezier(paintInfo, p, sp, tp, _w, _h);\n            } else {\n                isLoopbackCurrently = true;\n                // a loopback connector.  draw an arc from one anchor to the other.\n                var x1 = p.sourcePos[0], y1 = p.sourcePos[1] - margin,\n                    cx = x1, cy = y1 - loopbackRadius,\n                // canvas sizing stuff, to ensure the whole painted area is visible.\n                    _x = cx - loopbackRadius,\n                    _y = cy - loopbackRadius;\n\n                _w = 2 * loopbackRadius;\n                _h = 2 * loopbackRadius;\n\n                paintInfo.points[0] = _x;\n                paintInfo.points[1] = _y;\n                paintInfo.points[2] = _w;\n                paintInfo.points[3] = _h;\n\n                // ADD AN ARC SEGMENT.\n                _super.addSegment(this, \"Arc\", {\n                    loopback: true,\n                    x1: (x1 - _x) + 4,\n                    y1: y1 - _y,\n                    startAngle: 0,\n                    endAngle: 2 * Math.PI,\n                    r: loopbackRadius,\n                    ac: !clockwise,\n                    x2: (x1 - _x) - 4,\n                    y2: y1 - _y,\n                    cx: cx - _x,\n                    cy: cy - _y\n                });\n            }\n        };\n\n        _super = _jp.Connectors.AbstractConnector.apply(this, arguments);\n        return _super;\n    };\n    _ju.extend(_jp.Connectors.AbstractBezierConnector, _jp.Connectors.AbstractConnector);\n\n    var Bezier = function (params) {\n        params = params || {};\n        this.type = \"Bezier\";\n\n        var _super = _jp.Connectors.AbstractBezierConnector.apply(this, arguments),\n            majorAnchor = params.curviness || 150,\n            minorAnchor = 10;\n\n        this.getCurviness = function () {\n            return majorAnchor;\n        };\n\n        this._findControlPoint = function (point, sourceAnchorPosition, targetAnchorPosition, sourceEndpoint, targetEndpoint, soo, too) {\n            // determine if the two anchors are perpendicular to each other in their orientation.  we swap the control\n            // points around if so (code could be tightened up)\n            var perpendicular = soo[0] != too[0] || soo[1] == too[1],\n                p = [];\n\n            if (!perpendicular) {\n                if (soo[0] === 0) // X\n                    p.push(sourceAnchorPosition[0] < targetAnchorPosition[0] ? point[0] + minorAnchor : point[0] - minorAnchor);\n                else p.push(point[0] - (majorAnchor * soo[0]));\n\n                if (soo[1] === 0) // Y\n                    p.push(sourceAnchorPosition[1] < targetAnchorPosition[1] ? point[1] + minorAnchor : point[1] - minorAnchor);\n                else p.push(point[1] + (majorAnchor * too[1]));\n            }\n            else {\n                if (too[0] === 0) // X\n                    p.push(targetAnchorPosition[0] < sourceAnchorPosition[0] ? point[0] + minorAnchor : point[0] - minorAnchor);\n                else p.push(point[0] + (majorAnchor * too[0]));\n\n                if (too[1] === 0) // Y\n                    p.push(targetAnchorPosition[1] < sourceAnchorPosition[1] ? point[1] + minorAnchor : point[1] - minorAnchor);\n                else p.push(point[1] + (majorAnchor * soo[1]));\n            }\n\n            return p;\n        };\n\n        this._computeBezier = function (paintInfo, p, sp, tp, _w, _h) {\n\n            var geometry = this.getGeometry(), _CP, _CP2,\n                _sx = sp[0] < tp[0] ? _w : 0,\n                _sy = sp[1] < tp[1] ? _h : 0,\n                _tx = sp[0] < tp[0] ? 0 : _w,\n                _ty = sp[1] < tp[1] ? 0 : _h;\n\n            if ((this.hasBeenEdited() || this.isEditing()) && geometry != null && geometry.controlPoints != null && geometry.controlPoints[0] != null && geometry.controlPoints[1] != null) {\n                _CP = geometry.controlPoints[0];\n                _CP2 = geometry.controlPoints[1];\n            }\n            else {\n                _CP = this._findControlPoint([_sx, _sy], sp, tp, p.sourceEndpoint, p.targetEndpoint, paintInfo.so, paintInfo.to);\n                _CP2 = this._findControlPoint([_tx, _ty], tp, sp, p.targetEndpoint, p.sourceEndpoint, paintInfo.to, paintInfo.so);\n            }\n\n            _super.setGeometry({controlPoints:[_CP, _CP2]}, true);\n\n            _super.addSegment(this, \"Bezier\", {\n                x1: _sx, y1: _sy, x2: _tx, y2: _ty,\n                cp1x: _CP[0], cp1y: _CP[1], cp2x: _CP2[0], cp2y: _CP2[1]\n            });\n        };\n\n\n    };\n\n    _ju.extend(Bezier, _jp.Connectors.AbstractBezierConnector);\n    _jp.registerConnectorType(Bezier, \"Bezier\");\n\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the state machine connectors, which extend AbstractBezierConnector.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    var _segment = function (x1, y1, x2, y2) {\n            if (x1 <= x2 && y2 <= y1) return 1;\n            else if (x1 <= x2 && y1 <= y2) return 2;\n            else if (x2 <= x1 && y2 >= y1) return 3;\n            return 4;\n        },\n\n    // the control point we will use depends on the faces to which each end of the connection is assigned, specifically whether or not the\n    // two faces are parallel or perpendicular.  if they are parallel then the control point lies on the midpoint of the axis in which they\n    // are parellel and varies only in the other axis; this variation is proportional to the distance that the anchor points lie from the\n    // center of that face.  if the two faces are perpendicular then the control point is at some distance from both the midpoints; the amount and\n    // direction are dependent on the orientation of the two elements. 'seg', passed in to this method, tells you which segment the target element\n    // lies in with respect to the source: 1 is top right, 2 is bottom right, 3 is bottom left, 4 is top left.\n    //\n    // sourcePos and targetPos are arrays of info about where on the source and target each anchor is located.  their contents are:\n    //\n    // 0 - absolute x\n    // 1 - absolute y\n    // 2 - proportional x in element (0 is left edge, 1 is right edge)\n    // 3 - proportional y in element (0 is top edge, 1 is bottom edge)\n    //\n        _findControlPoint = function (midx, midy, segment, sourceEdge, targetEdge, dx, dy, distance, proximityLimit) {\n            // TODO (maybe)\n            // - if anchor pos is 0.5, make the control point take into account the relative position of the elements.\n            if (distance <= proximityLimit) return [midx, midy];\n\n            if (segment === 1) {\n                if (sourceEdge[3] <= 0 && targetEdge[3] >= 1) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];\n                else if (sourceEdge[2] >= 1 && targetEdge[2] <= 0) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];\n                else return [ midx + (-1 * dx) , midy + (-1 * dy) ];\n            }\n            else if (segment === 2) {\n                if (sourceEdge[3] >= 1 && targetEdge[3] <= 0) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];\n                else if (sourceEdge[2] >= 1 && targetEdge[2] <= 0) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];\n                else return [ midx + dx, midy + (-1 * dy) ];\n            }\n            else if (segment === 3) {\n                if (sourceEdge[3] >= 1 && targetEdge[3] <= 0) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];\n                else if (sourceEdge[2] <= 0 && targetEdge[2] >= 1) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];\n                else return [ midx + (-1 * dx) , midy + (-1 * dy) ];\n            }\n            else if (segment === 4) {\n                if (sourceEdge[3] <= 0 && targetEdge[3] >= 1) return [ midx + (sourceEdge[2] < 0.5 ? -1 * dx : dx), midy ];\n                else if (sourceEdge[2] <= 0 && targetEdge[2] >= 1) return [ midx, midy + (sourceEdge[3] < 0.5 ? -1 * dy : dy) ];\n                else return [ midx + dx , midy + (-1 * dy) ];\n            }\n\n        };\n\n    var StateMachine = function (params) {\n        params = params || {};\n        this.type = \"StateMachine\";\n\n        var _super = _jp.Connectors.AbstractBezierConnector.apply(this, arguments),\n            curviness = params.curviness || 10,\n            margin = params.margin || 5,\n            proximityLimit = params.proximityLimit || 80,\n            clockwise = params.orientation && params.orientation === \"clockwise\",\n            _controlPoint;\n\n        this._computeBezier = function(paintInfo, params, sp, tp, w, h) {\n            var _sx = params.sourcePos[0] < params.targetPos[0] ? 0 : w,\n                _sy = params.sourcePos[1] < params.targetPos[1] ? 0 : h,\n                _tx = params.sourcePos[0] < params.targetPos[0] ? w : 0,\n                _ty = params.sourcePos[1] < params.targetPos[1] ? h : 0;\n\n            // now adjust for the margin\n            if (params.sourcePos[2] === 0) _sx -= margin;\n            if (params.sourcePos[2] === 1) _sx += margin;\n            if (params.sourcePos[3] === 0) _sy -= margin;\n            if (params.sourcePos[3] === 1) _sy += margin;\n            if (params.targetPos[2] === 0) _tx -= margin;\n            if (params.targetPos[2] === 1) _tx += margin;\n            if (params.targetPos[3] === 0) _ty -= margin;\n            if (params.targetPos[3] === 1) _ty += margin;\n\n            //\n            // these connectors are quadratic bezier curves, having a single control point. if both anchors\n            // are located at 0.5 on their respective faces, the control point is set to the midpoint and you\n            // get a straight line.  this is also the case if the two anchors are within 'proximityLimit', since\n            // it seems to make good aesthetic sense to do that. outside of that, the control point is positioned\n            // at 'curviness' pixels away along the normal to the straight line connecting the two anchors.\n            //\n            // there may be two improvements to this.  firstly, we might actually support the notion of avoiding nodes\n            // in the UI, or at least making a good effort at doing so.  if a connection would pass underneath some node,\n            // for example, we might increase the distance the control point is away from the midpoint in a bid to\n            // steer it around that node.  this will work within limits, but i think those limits would also be the likely\n            // limits for, once again, aesthetic good sense in the layout of a chart using these connectors.\n            //\n            // the second possible change is actually two possible changes: firstly, it is possible we should gradually\n            // decrease the 'curviness' as the distance between the anchors decreases; start tailing it off to 0 at some\n            // point (which should be configurable).  secondly, we might slightly increase the 'curviness' for connectors\n            // with respect to how far their anchor is from the center of its respective face. this could either look cool,\n            // or stupid, and may indeed work only in a way that is so subtle as to have been a waste of time.\n            //\n\n            var _midx = (_sx + _tx) / 2,\n                _midy = (_sy + _ty) / 2,\n                segment = _segment(_sx, _sy, _tx, _ty),\n                distance = Math.sqrt(Math.pow(_tx - _sx, 2) + Math.pow(_ty - _sy, 2)),\n                cp1x, cp2x, cp1y, cp2y,\n                geometry = _super.getGeometry();\n\n            if ((this.hasBeenEdited() || this.isEditing()) && geometry != null) {\n                cp1x = geometry.controlPoints[0][0];\n                cp1y = geometry.controlPoints[0][1];\n                cp2x = geometry.controlPoints[1][0];\n                cp2y = geometry.controlPoints[1][1];\n            }\n            else {\n                // calculate the control point.  this code will be where we'll put in a rudimentary element avoidance scheme; it\n                // will work by extending the control point to force the curve to be, um, curvier.\n                _controlPoint = _findControlPoint(_midx,\n                    _midy,\n                    segment,\n                    params.sourcePos,\n                    params.targetPos,\n                    curviness, curviness,\n                    distance,\n                    proximityLimit);\n\n                cp1x = _controlPoint[0];\n                cp2x = _controlPoint[0];\n                cp1y = _controlPoint[1];\n                cp2y = _controlPoint[1];\n\n                _super.setGeometry({controlPoints:[_controlPoint, _controlPoint]}, true);\n            }\n\n            _super.addSegment(this, \"Bezier\", {\n                x1: _tx, y1: _ty, x2: _sx, y2: _sy,\n                cp1x: cp1x, cp1y: cp1y,\n                cp2x: cp2x, cp2y: cp2y\n            });\n        };\n    };\n\n    _ju.extend(StateMachine, _jp.Connectors.AbstractBezierConnector);\n    _jp.registerConnectorType(StateMachine, \"StateMachine\");\n\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n *\n * Title:jsPlumb 2.3.0\n *\n * Provides a way to visually connect elements on an HTML page, using SVG.\n *\n * This file contains the 'flowchart' connectors, consisting of vertical and horizontal line segments.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n *\n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n *\n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n    var STRAIGHT = \"Straight\";\n\n    var Straight = function (params) {\n        this.type = STRAIGHT;\n        var _super = _jp.Connectors.AbstractConnector.apply(this, arguments);\n\n        this._compute = function (paintInfo, _) {\n            _super.addSegment(this, STRAIGHT, {x1: paintInfo.sx, y1: paintInfo.sy, x2: paintInfo.startStubX, y2: paintInfo.startStubY});\n            _super.addSegment(this, STRAIGHT, {x1: paintInfo.startStubX, y1: paintInfo.startStubY, x2: paintInfo.endStubX, y2: paintInfo.endStubY});\n            _super.addSegment(this, STRAIGHT, {x1: paintInfo.endStubX, y1: paintInfo.endStubY, x2: paintInfo.tx, y2: paintInfo.ty});\n        };\n    };\n\n    _ju.extend(Straight, _jp.Connectors.AbstractConnector);\n    _jp.registerConnectorType(Straight, STRAIGHT);\n\n}).call(typeof window !== 'undefined' ? window : this);\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the SVG renderers.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n// ************************** SVG utility methods ********************************************\t\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil;\n\n    var svgAttributeMap = {\n            \"stroke-linejoin\": \"stroke-linejoin\",\n            \"stroke-dashoffset\": \"stroke-dashoffset\",\n            \"stroke-linecap\": \"stroke-linecap\"\n        },\n        STROKE_DASHARRAY = \"stroke-dasharray\",\n        DASHSTYLE = \"dashstyle\",\n        LINEAR_GRADIENT = \"linearGradient\",\n        RADIAL_GRADIENT = \"radialGradient\",\n        DEFS = \"defs\",\n        FILL = \"fill\",\n        STOP = \"stop\",\n        STROKE = \"stroke\",\n        STROKE_WIDTH = \"stroke-width\",\n        STYLE = \"style\",\n        NONE = \"none\",\n        JSPLUMB_GRADIENT = \"jsplumb_gradient_\",\n        LINE_WIDTH = \"strokeWidth\",\n        ns = {\n            svg: \"http://www.w3.org/2000/svg\",\n            xhtml: \"http://www.w3.org/1999/xhtml\"\n        },\n        _attr = function (node, attributes) {\n            for (var i in attributes)\n                node.setAttribute(i, \"\" + attributes[i]);\n        },\n        _node = function (name, attributes) {\n            attributes = attributes || {};\n            attributes.version = \"1.1\";\n            attributes.xmlns = ns.xhtml;\n            return _jp.createElementNS(ns.svg, name, null, null, attributes);\n        },\n        _pos = function (d) {\n            return \"position:absolute;left:\" + d[0] + \"px;top:\" + d[1] + \"px\";\n        },\n        _clearGradient = function (parent) {\n            var els = parent.querySelectorAll(\" defs,linearGradient,radialGradient\");\n            for (var i = 0; i < els.length; i++)\n                els[i].parentNode.removeChild(els[i]);\n        },\n        _updateGradient = function (parent, node, style, dimensions, uiComponent) {\n            var id = JSPLUMB_GRADIENT + uiComponent._jsPlumb.instance.idstamp();\n            // first clear out any existing gradient\n            _clearGradient(parent);\n            // this checks for an 'offset' property in the gradient, and in the absence of it, assumes\n            // we want a linear gradient. if it's there, we create a radial gradient.\n            // it is possible that a more explicit means of defining the gradient type would be\n            // better. relying on 'offset' means that we can never have a radial gradient that uses\n            // some default offset, for instance.\n            // issue 244 suggested the 'gradientUnits' attribute; without this, straight/flowchart connectors with gradients would\n            // not show gradients when the line was perfectly horizontal or vertical.\n            var g;\n            if (!style.gradient.offset)\n                g = _node(LINEAR_GRADIENT, {id: id, gradientUnits: \"userSpaceOnUse\"});\n            else\n                g = _node(RADIAL_GRADIENT, { id: id });\n\n            var defs = _node(DEFS);\n            parent.appendChild(defs);\n            defs.appendChild(g);\n\n            // the svg radial gradient seems to treat stops in the reverse\n            // order to how canvas does it.  so we want to keep all the maths the same, but\n            // iterate the actual style declarations in reverse order, if the x indexes are not in order.\n            for (var i = 0; i < style.gradient.stops.length; i++) {\n                var styleToUse = uiComponent.segment == 1 || uiComponent.segment == 2 ? i : style.gradient.stops.length - 1 - i,\n                    //stopColor = _ju.convertStyle(style.gradient.stops[styleToUse][1], true),\n                    stopColor = style.gradient.stops[styleToUse][1],\n                    s = _node(STOP, {\"offset\": Math.floor(style.gradient.stops[i][0] * 100) + \"%\", \"stop-color\": stopColor});\n\n                g.appendChild(s);\n            }\n            var applyGradientTo = style.stroke ? STROKE : FILL;\n            node.setAttribute(applyGradientTo, \"url(#\" + id + \")\");\n        },\n        _applyStyles = function (parent, node, style, dimensions, uiComponent) {\n\n            node.setAttribute(FILL, style.fill ? style.fill : NONE);\n            node.setAttribute(STROKE, style.stroke ? style.stroke : NONE);\n\n            if (style.gradient) {\n                _updateGradient(parent, node, style, dimensions, uiComponent);\n            }\n            else {\n                // make sure we clear any existing gradient\n                _clearGradient(parent);\n                node.setAttribute(STYLE, \"\");\n            }\n\n            if (style.strokeWidth) {\n                node.setAttribute(STROKE_WIDTH, style.strokeWidth);\n            }\n\n            // in SVG there is a stroke-dasharray attribute we can set, and its syntax looks like\n            // the syntax in VML but is actually kind of nasty: values are given in the pixel\n            // coordinate space, whereas in VML they are multiples of the width of the stroked\n            // line, which makes a lot more sense.  for that reason, jsPlumb is supporting both\n            // the native svg 'stroke-dasharray' attribute, and also the 'dashstyle' concept from\n            // VML, which will be the preferred method.  the code below this converts a dashstyle\n            // attribute given in terms of stroke width into a pixel representation, by using the\n            // stroke's lineWidth.\n            if (style[DASHSTYLE] && style[LINE_WIDTH] && !style[STROKE_DASHARRAY]) {\n                var sep = style[DASHSTYLE].indexOf(\",\") == -1 ? \" \" : \",\",\n                    parts = style[DASHSTYLE].split(sep),\n                    styleToUse = \"\";\n                parts.forEach(function (p) {\n                    styleToUse += (Math.floor(p * style.strokeWidth) + sep);\n                });\n                node.setAttribute(STROKE_DASHARRAY, styleToUse);\n            }\n            else if (style[STROKE_DASHARRAY]) {\n                node.setAttribute(STROKE_DASHARRAY, style[STROKE_DASHARRAY]);\n            }\n\n            // extra attributes such as join type, dash offset.\n            for (var i in svgAttributeMap) {\n                if (style[i]) {\n                    node.setAttribute(svgAttributeMap[i], style[i]);\n                }\n            }\n        },\n        _appendAtIndex = function (svg, path, idx) {\n            if (svg.childNodes.length > idx) {\n                svg.insertBefore(path, svg.childNodes[idx]);\n            }\n            else svg.appendChild(path);\n        };\n\n    /**\n     utility methods for other objects to use.\n     */\n    _ju.svg = {\n        node: _node,\n        attr: _attr,\n        pos: _pos\n    };\n\n    // ************************** / SVG utility methods ********************************************\n\n    /*\n     * Base class for SVG components.\n     */\n    var SvgComponent = function (params) {\n        var pointerEventsSpec = params.pointerEventsSpec || \"all\", renderer = {};\n\n        _jp.jsPlumbUIComponent.apply(this, params.originalArgs);\n        this.canvas = null;\n        this.path = null;\n        this.svg = null;\n        this.bgCanvas = null;\n\n        var clazz = params.cssClass + \" \" + (params.originalArgs[0].cssClass || \"\"),\n            svgParams = {\n                \"style\": \"\",\n                \"width\": 0,\n                \"height\": 0,\n                \"pointer-events\": pointerEventsSpec,\n                \"position\": \"absolute\"\n            };\n\n        this.svg = _node(\"svg\", svgParams);\n\n        if (params.useDivWrapper) {\n            this.canvas = _jp.createElement(\"div\", { position : \"absolute\" });\n            _ju.sizeElement(this.canvas, 0, 0, 1, 1);\n            this.canvas.className = clazz;\n        }\n        else {\n            _attr(this.svg, { \"class\": clazz });\n            this.canvas = this.svg;\n        }\n\n        params._jsPlumb.appendElement(this.canvas, params.originalArgs[0].parent);\n        if (params.useDivWrapper) this.canvas.appendChild(this.svg);\n\n        var displayElements = [ this.canvas ];\n        this.getDisplayElements = function () {\n            return displayElements;\n        };\n\n        this.appendDisplayElement = function (el) {\n            displayElements.push(el);\n        };\n\n        this.paint = function (style, anchor, extents) {\n            if (style != null) {\n\n                var xy = [ this.x, this.y ], wh = [ this.w, this.h ], p;\n                if (extents != null) {\n                    if (extents.xmin < 0) xy[0] += extents.xmin;\n                    if (extents.ymin < 0) xy[1] += extents.ymin;\n                    wh[0] = extents.xmax + ((extents.xmin < 0) ? -extents.xmin : 0);\n                    wh[1] = extents.ymax + ((extents.ymin < 0) ? -extents.ymin : 0);\n                }\n\n                if (params.useDivWrapper) {\n                    _ju.sizeElement(this.canvas, xy[0], xy[1], wh[0], wh[1]);\n                    xy[0] = 0;\n                    xy[1] = 0;\n                    p = _pos([ 0, 0 ]);\n                }\n                else\n                    p = _pos([ xy[0], xy[1] ]);\n\n                renderer.paint.apply(this, arguments);\n\n                _attr(this.svg, {\n                    \"style\": p,\n                    \"width\": wh[0] || 0,\n                    \"height\": wh[1] || 0\n                });\n            }\n        };\n\n        return {\n            renderer: renderer\n        };\n    };\n\n    _ju.extend(SvgComponent, _jp.jsPlumbUIComponent, {\n        cleanup: function (force) {\n            if (force || this.typeId == null) {\n                if (this.canvas) this.canvas._jsPlumb = null;\n                if (this.svg) this.svg._jsPlumb = null;\n                if (this.bgCanvas) this.bgCanvas._jsPlumb = null;\n\n                if (this.canvas && this.canvas.parentNode)\n                    this.canvas.parentNode.removeChild(this.canvas);\n                if (this.bgCanvas && this.bgCanvas.parentNode)\n                    this.canvas.parentNode.removeChild(this.canvas);\n\n                this.svg = null;\n                this.canvas = null;\n                this.path = null;\n                this.group = null;\n            }\n            else {\n                // if not a forced cleanup, just detach from DOM for now.\n                if (this.canvas && this.canvas.parentNode) this.canvas.parentNode.removeChild(this.canvas);\n                if (this.bgCanvas && this.bgCanvas.parentNode) this.bgCanvas.parentNode.removeChild(this.bgCanvas);\n            }\n        },\n        reattach:function(instance) {\n            var c = instance.getContainer();\n            if (this.canvas && this.canvas.parentNode == null) c.appendChild(this.canvas);\n            if (this.bgCanvas && this.bgCanvas.parentNode == null) c.appendChild(this.bgCanvas);\n        },\n        setVisible: function (v) {\n            if (this.canvas) {\n                this.canvas.style.display = v ? \"block\" : \"none\";\n            }\n        }\n    });\n\n    /*\n     * Base class for SVG connectors.\n     */\n    _jp.ConnectorRenderers.svg = function (params) {\n        var self = this,\n            _super = SvgComponent.apply(this, [\n                {\n                    cssClass: params._jsPlumb.connectorClass + (this.isEditable() ? \" \" + params._jsPlumb.editableConnectorClass : \"\"),\n                    originalArgs: arguments,\n                    pointerEventsSpec: \"none\",\n                    _jsPlumb: params._jsPlumb\n                }\n            ]);\n\n        var _superSetEditable = this.setEditable;\n        this.setEditable = function(e) {\n            var result = _superSetEditable.apply(this, [e]);\n            _jp[result ? \"addClass\" : \"removeClass\"](this.canvas, this._jsPlumb.instance.editableConnectorClass);\n        };\n\n        _super.renderer.paint = function (style, anchor, extents) {\n\n            var segments = self.getSegments(), p = \"\", offset = [0, 0];\n            if (extents.xmin < 0) offset[0] = -extents.xmin;\n            if (extents.ymin < 0) offset[1] = -extents.ymin;\n\n            if (segments.length > 0) {\n\n                p = self.getPathData();\n\n                var a = {\n                        d: p,\n                        transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\",\n                        \"pointer-events\": params[\"pointer-events\"] || \"visibleStroke\"\n                    },\n                    outlineStyle = null,\n                    d = [self.x, self.y, self.w, self.h];\n\n                // outline style.  actually means drawing an svg object underneath the main one.\n                if (style.outlineStroke) {\n                    var outlineWidth = style.outlineWidth || 1,\n                        outlineStrokeWidth = style.strokeWidth + (2 * outlineWidth);\n                    outlineStyle = _jp.extend({}, style);\n                    delete outlineStyle.gradient;\n                    outlineStyle.stroke = style.outlineStroke;\n                    outlineStyle.strokeWidth = outlineStrokeWidth;\n\n                    if (self.bgPath == null) {\n                        self.bgPath = _node(\"path\", a);\n                        _jp.addClass(self.bgPath, _jp.connectorOutlineClass);\n                        _appendAtIndex(self.svg, self.bgPath, 0);\n                    }\n                    else {\n                        _attr(self.bgPath, a);\n                    }\n\n                    _applyStyles(self.svg, self.bgPath, outlineStyle, d, self);\n                }\n\n                if (self.path == null) {\n                    self.path = _node(\"path\", a);\n                    _appendAtIndex(self.svg, self.path, style.outlineStroke ? 1 : 0);\n                }\n                else {\n                    _attr(self.path, a);\n                }\n\n                _applyStyles(self.svg, self.path, style, d, self);\n            }\n        };\n    };\n    _ju.extend(_jp.ConnectorRenderers.svg, SvgComponent);\n\n// ******************************* svg segment renderer *****************************************************\t\n\n\n// ******************************* /svg segments *****************************************************\n\n    /*\n     * Base class for SVG endpoints.\n     */\n    var SvgEndpoint = _jp.SvgEndpoint = function (params) {\n        var _super = SvgComponent.apply(this, [\n            {\n                cssClass: params._jsPlumb.endpointClass,\n                originalArgs: arguments,\n                pointerEventsSpec: \"all\",\n                useDivWrapper: true,\n                _jsPlumb: params._jsPlumb\n            }\n        ]);\n\n        _super.renderer.paint = function (style) {\n            var s = _jp.extend({}, style);\n            if (s.outlineStroke) {\n                s.strokeWidth = s.strokeWidth;\n                s.stroke = s.outlineStroke;\n            }\n\n            if (this.node == null) {\n                this.node = this.makeNode(s);\n                this.svg.appendChild(this.node);\n            }\n            else if (this.updateNode != null) {\n                this.updateNode(this.node);\n            }\n            _applyStyles(this.svg, this.node, s, [ this.x, this.y, this.w, this.h ], this);\n            _pos(this.node, [ this.x, this.y ]);\n        }.bind(this);\n\n    };\n    _ju.extend(SvgEndpoint, SvgComponent);\n\n    /*\n     * SVG Dot Endpoint\n     */\n    _jp.Endpoints.svg.Dot = function () {\n        _jp.Endpoints.Dot.apply(this, arguments);\n        SvgEndpoint.apply(this, arguments);\n        this.makeNode = function (style) {\n            return _node(\"circle\", {\n                \"cx\": this.w / 2,\n                \"cy\": this.h / 2,\n                \"r\": this.radius\n            });\n        };\n        this.updateNode = function (node) {\n            _attr(node, {\n                \"cx\": this.w / 2,\n                \"cy\": this.h / 2,\n                \"r\": this.radius\n            });\n        };\n    };\n    _ju.extend(_jp.Endpoints.svg.Dot, [_jp.Endpoints.Dot, SvgEndpoint]);\n\n    /*\n     * SVG Rectangle Endpoint\n     */\n    _jp.Endpoints.svg.Rectangle = function () {\n        _jp.Endpoints.Rectangle.apply(this, arguments);\n        SvgEndpoint.apply(this, arguments);\n        this.makeNode = function (style) {\n            return _node(\"rect\", {\n                \"width\": this.w,\n                \"height\": this.h\n            });\n        };\n        this.updateNode = function (node) {\n            _attr(node, {\n                \"width\": this.w,\n                \"height\": this.h\n            });\n        };\n    };\n    _ju.extend(_jp.Endpoints.svg.Rectangle, [_jp.Endpoints.Rectangle, SvgEndpoint]);\n\n    /*\n     * SVG Image Endpoint is the default image endpoint.\n     */\n    _jp.Endpoints.svg.Image = _jp.Endpoints.Image;\n    /*\n     * Blank endpoint in svg renderer is the default Blank endpoint.\n     */\n    _jp.Endpoints.svg.Blank = _jp.Endpoints.Blank;\n    /*\n     * Label overlay in svg renderer is the default Label overlay.\n     */\n    _jp.Overlays.svg.Label = _jp.Overlays.Label;\n    /*\n     * Custom overlay in svg renderer is the default Custom overlay.\n     */\n    _jp.Overlays.svg.Custom = _jp.Overlays.Custom;\n\n    var AbstractSvgArrowOverlay = function (superclass, originalArgs) {\n        superclass.apply(this, originalArgs);\n        _jp.jsPlumbUIComponent.apply(this, originalArgs);\n        this.isAppendedAtTopLevel = false;\n        var self = this;\n        this.path = null;\n        this.paint = function (params, containerExtents) {\n            // only draws on connections, not endpoints.\n            if (params.component.svg && containerExtents) {\n                if (this.path == null) {\n                    this.path = _node(\"path\", {\n                        \"pointer-events\": \"all\"\n                    });\n                    params.component.svg.appendChild(this.path);\n                    if (this.elementCreated) {\n                        this.elementCreated(this.path, params.component);\n                    }\n\n                    this.canvas = params.component.svg; // for the sake of completeness; this behaves the same as other overlays\n                }\n                var clazz = originalArgs && (originalArgs.length == 1) ? (originalArgs[0].cssClass || \"\") : \"\",\n                    offset = [0, 0];\n\n                if (containerExtents.xmin < 0) offset[0] = -containerExtents.xmin;\n                if (containerExtents.ymin < 0) offset[1] = -containerExtents.ymin;\n\n                _attr(this.path, {\n                    \"d\": makePath(params.d),\n                    \"class\": clazz,\n                    stroke: params.stroke ? params.stroke : null,\n                    fill: params.fill ? params.fill : null,\n                    transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\"\n                });\n            }\n        };\n        var makePath = function (d) {\n            return (isNaN(d.cxy.x) || isNaN(d.cxy.y)) ? \"\" : \"M\" + d.hxy.x + \",\" + d.hxy.y +\n                \" L\" + d.tail[0].x + \",\" + d.tail[0].y +\n                \" L\" + d.cxy.x + \",\" + d.cxy.y +\n                \" L\" + d.tail[1].x + \",\" + d.tail[1].y +\n                \" L\" + d.hxy.x + \",\" + d.hxy.y;\n        };\n        this.transfer = function(target) {\n            if (target.canvas && this.path && this.path.parentNode) {\n                this.path.parentNode.removeChild(this.path);\n                target.canvas.appendChild(this.path);\n            }\n        };\n    };\n    _ju.extend(AbstractSvgArrowOverlay, [_jp.jsPlumbUIComponent, _jp.Overlays.AbstractOverlay], {\n        cleanup: function (force) {\n            if (this.path != null) {\n                if (force)\n                    this._jsPlumb.instance.removeElement(this.path);\n                else\n                    if (this.path.parentNode)\n                        this.path.parentNode.removeChild(this.path);\n            }\n        },\n        reattach:function(instance) {\n            if (this.path && this.canvas && this.path.parentNode == null)\n                this.canvas.appendChild(this.path);\n        },\n        setVisible: function (v) {\n            if (this.path != null) (this.path.style.display = (v ? \"block\" : \"none\"));\n        }\n    });\n\n    _jp.Overlays.svg.Arrow = function () {\n        AbstractSvgArrowOverlay.apply(this, [_jp.Overlays.Arrow, arguments]);\n    };\n    _ju.extend(_jp.Overlays.svg.Arrow, [ _jp.Overlays.Arrow, AbstractSvgArrowOverlay ]);\n\n    _jp.Overlays.svg.PlainArrow = function () {\n        AbstractSvgArrowOverlay.apply(this, [_jp.Overlays.PlainArrow, arguments]);\n    };\n    _ju.extend(_jp.Overlays.svg.PlainArrow, [ _jp.Overlays.PlainArrow, AbstractSvgArrowOverlay ]);\n\n    _jp.Overlays.svg.Diamond = function () {\n        AbstractSvgArrowOverlay.apply(this, [_jp.Overlays.Diamond, arguments]);\n    };\n    _ju.extend(_jp.Overlays.svg.Diamond, [ _jp.Overlays.Diamond, AbstractSvgArrowOverlay ]);\n\n    // a test\n    _jp.Overlays.svg.GuideLines = function () {\n        var path = null, self = this, p1_1, p1_2;\n        _jp.Overlays.GuideLines.apply(this, arguments);\n        this.paint = function (params, containerExtents) {\n            if (path == null) {\n                path = _node(\"path\");\n                params.connector.svg.appendChild(path);\n                self.attachListeners(path, params.connector);\n                self.attachListeners(path, self);\n\n                p1_1 = _node(\"path\");\n                params.connector.svg.appendChild(p1_1);\n                self.attachListeners(p1_1, params.connector);\n                self.attachListeners(p1_1, self);\n\n                p1_2 = _node(\"path\");\n                params.connector.svg.appendChild(p1_2);\n                self.attachListeners(p1_2, params.connector);\n                self.attachListeners(p1_2, self);\n            }\n\n            var offset = [0, 0];\n            if (containerExtents.xmin < 0) offset[0] = -containerExtents.xmin;\n            if (containerExtents.ymin < 0) offset[1] = -containerExtents.ymin;\n\n            _attr(path, {\n                \"d\": makePath(params.head, params.tail),\n                stroke: \"red\",\n                fill: null,\n                transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\"\n            });\n\n            _attr(p1_1, {\n                \"d\": makePath(params.tailLine[0], params.tailLine[1]),\n                stroke: \"blue\",\n                fill: null,\n                transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\"\n            });\n\n            _attr(p1_2, {\n                \"d\": makePath(params.headLine[0], params.headLine[1]),\n                stroke: \"green\",\n                fill: null,\n                transform: \"translate(\" + offset[0] + \",\" + offset[1] + \")\"\n            });\n        };\n\n        var makePath = function (d1, d2) {\n            return \"M \" + d1.x + \",\" + d1.y +\n                \" L\" + d2.x + \",\" + d2.y;\n        };\n    };\n    _ju.extend(_jp.Overlays.svg.GuideLines, _jp.Overlays.GuideLines);\n}).call(typeof window !== 'undefined' ? window : this);\n\n/*\n * jsPlumb\n * \n * Title:jsPlumb 2.3.0\n * \n * Provides a way to visually connect elements on an HTML page, using SVG.\n * \n * This file contains the 'vanilla' adapter - having no external dependencies other than bundled libs.\n *\n * Copyright (c) 2010 - 2017 jsPlumb (hello@jsplumbtoolkit.com)\n * \n * http://jsplumbtoolkit.com\n * http://github.com/sporritt/jsplumb\n * \n * Dual licensed under the MIT and GPL2 licenses.\n */\n;\n(function () {\n\n    \"use strict\";\n    var root = this, _jp = root.jsPlumb, _ju = root.jsPlumbUtil,\n        _jk = root.Katavorio, _jg = root.Biltong;\n\n    var _getDragManager = function (instance, category) {\n\n        category = category || \"main\";\n        var key = \"_katavorio_\" + category;\n        var k = instance[key],\n            e = instance.getEventManager();\n\n        if (!k) {\n            k = new _jk({\n                bind: e.on,\n                unbind: e.off,\n                getSize: _jp.getSize,\n                getPosition: function (el, relativeToRoot) {\n                    // if this is a nested draggable then compute the offset against its own offsetParent, otherwise\n                    // compute against the Container's origin. see also the getUIPosition method below.\n                    var o = instance.getOffset(el, relativeToRoot, el._katavorioDrag ? el.offsetParent : null);\n                    return [o.left, o.top];\n                },\n                setPosition: function (el, xy) {\n                    el.style.left = xy[0] + \"px\";\n                    el.style.top = xy[1] + \"px\";\n                },\n                addClass: _jp.addClass,\n                removeClass: _jp.removeClass,\n                intersects: _jg.intersects,\n                indexOf: function(l, i) { return l.indexOf(i); },\n                scope:instance.getDefaultScope(),\n                css: {\n                    noSelect: instance.dragSelectClass,\n                    droppable: \"jtk-droppable\",\n                    draggable: \"jtk-draggable\",\n                    drag: \"jtk-drag\",\n                    selected: \"jtk-drag-selected\",\n                    active: \"jtk-drag-active\",\n                    hover: \"jtk-drag-hover\",\n                    ghostProxy:\"jtk-ghost-proxy\"\n                }\n            });\n            k.setZoom(instance.getZoom());\n            instance[key] = k;\n            instance.bind(\"zoom\", k.setZoom);\n        }\n        return k;\n    };\n\n    var _animProps = function (o, p) {\n        var _one = function (pName) {\n            if (p[pName] != null) {\n                if (_ju.isString(p[pName])) {\n                    var m = p[pName].match(/-=/) ? -1 : 1,\n                        v = p[pName].substring(2);\n                    return o[pName] + (m * v);\n                }\n                else return p[pName];\n            }\n            else\n                return o[pName];\n        };\n        return [ _one(\"left\"), _one(\"top\") ];\n    };\n\n    _jp.extend(root.jsPlumbInstance.prototype, {\n\n        animationSupported:true,\n        getElement: function (el) {\n            if (el == null) return null;\n            // here we pluck the first entry if el was a list of entries.\n            // this is not my favourite thing to do, but previous versions of\n            // jsplumb supported jquery selectors, and it is possible a selector\n            // will be passed in here.\n            el = typeof el === \"string\" ? el : el.length != null && el.enctype == null ? el[0] : el;\n            return typeof el === \"string\" ? document.getElementById(el) : el;\n        },\n        removeElement: function (element) {\n            _getDragManager(this).elementRemoved(element);\n            this.getEventManager().remove(element);\n        },\n        //\n        // this adapter supports a rudimentary animation function. no easing is supported.  only\n        // left/top properties are supported. property delta args are expected to be in the form\n        //\n        // +=x.xxxx\n        //\n        // or\n        //\n        // -=x.xxxx\n        //\n        doAnimate: function (el, properties, options) {\n            options = options || {};\n            var o = this.getOffset(el),\n                ap = _animProps(o, properties),\n                ldist = ap[0] - o.left,\n                tdist = ap[1] - o.top,\n                d = options.duration || 250,\n                step = 15, steps = d / step,\n                linc = (step / d) * ldist,\n                tinc = (step / d) * tdist,\n                idx = 0,\n                _int = setInterval(function () {\n                    _jp.setPosition(el, {\n                        left: o.left + (linc * (idx + 1)),\n                        top: o.top + (tinc * (idx + 1))\n                    });\n                    if (options.step != null) options.step(idx, Math.ceil(steps));\n                    idx++;\n                    if (idx >= steps) {\n                        window.clearInterval(_int);\n                        if (options.complete != null) options.complete();\n                    }\n                }, step);\n        },\n        // DRAG/DROP\n        destroyDraggable: function (el, category) {\n            _getDragManager(this, category).destroyDraggable(el);\n        },\n        destroyDroppable: function (el, category) {\n            _getDragManager(this, category).destroyDroppable(el);\n        },\n        initDraggable: function (el, options, category) {\n            _getDragManager(this, category).draggable(el, options);\n        },\n        initDroppable: function (el, options, category) {\n            _getDragManager(this, category).droppable(el, options);\n        },\n        isAlreadyDraggable: function (el) {\n            return el._katavorioDrag != null;\n        },\n        isDragSupported: function (el, options) {\n            return true;\n        },\n        isDropSupported: function (el, options) {\n            return true;\n        },\n        isElementDraggable: function (el) {\n            el = _jp.getElement(el);\n            return el._katavorioDrag && el._katavorioDrag.isEnabled();\n        },\n        getDragObject: function (eventArgs) {\n            return eventArgs[0].drag.getDragElement();\n        },\n        getDragScope: function (el) {\n            return el._katavorioDrag && el._katavorioDrag.scopes.join(\" \") || \"\";\n        },\n        getDropEvent: function (args) {\n            return args[0].e;\n        },\n        getUIPosition: function (eventArgs, zoom) {\n            // here the position reported to us by Katavorio is relative to the element's offsetParent. For top\n            // level nodes that is fine, but if we have a nested draggable then its offsetParent is actually\n            // not going to be the jsplumb container; it's going to be some child of that element. In that case\n            // we want to adjust the UI position to account for the offsetParent's position relative to the Container\n            // origin.\n            var el = eventArgs[0].el;\n            if (el.offsetParent == null) {\n                return null;\n            }\n            var finalPos = eventArgs[0].finalPos || eventArgs[0].pos;\n            var p = { left:finalPos[0], top:finalPos[1] };\n            if (el._katavorioDrag && el.offsetParent !== this.getContainer()) {\n                var oc = this.getOffset(el.offsetParent);\n                p.left += oc.left;\n                p.top += oc.top;\n            }\n            return p;\n        },\n        setDragFilter: function (el, filter, _exclude) {\n            if (el._katavorioDrag) {\n                el._katavorioDrag.setFilter(filter, _exclude);\n            }\n        },\n        setElementDraggable: function (el, draggable) {\n            el = _jp.getElement(el);\n            if (el._katavorioDrag)\n                el._katavorioDrag.setEnabled(draggable);\n        },\n        setDragScope: function (el, scope) {\n            if (el._katavorioDrag)\n                el._katavorioDrag.k.setDragScope(el, scope);\n        },\n        setDropScope:function(el, scope) {\n            if (el._katavorioDrop && el._katavorioDrop.length > 0) {\n                el._katavorioDrop[0].k.setDropScope(el, scope);\n            }\n        },\n        addToPosse:function(el, spec) {\n            var specs = Array.prototype.slice.call(arguments, 1);\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) {\n                _el = [ _jp.getElement(_el) ];\n                _el.push.apply(_el, specs );\n                dm.addToPosse.apply(dm, _el);\n            });\n        },\n        setPosse:function(el, spec) {\n            var specs = Array.prototype.slice.call(arguments, 1);\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) {\n                _el = [ _jp.getElement(_el) ];\n                _el.push.apply(_el, specs );\n                dm.setPosse.apply(dm, _el);\n            });\n        },\n        removeFromPosse:function(el, posseId) {\n            var specs = Array.prototype.slice.call(arguments, 1);\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) {\n                _el = [ _jp.getElement(_el) ];\n                _el.push.apply(_el, specs );\n                dm.removeFromPosse.apply(dm, _el);\n            });\n        },\n        removeFromAllPosses:function(el) {\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) { dm.removeFromAllPosses(_jp.getElement(_el)); });\n        },\n        setPosseState:function(el, posseId, state) {\n            var dm = _getDragManager(this);\n            _jp.each(el, function(_el) { dm.setPosseState(_jp.getElement(_el), posseId, state); });\n        },\n        dragEvents: {\n            'start': 'start', 'stop': 'stop', 'drag': 'drag', 'step': 'step',\n            'over': 'over', 'out': 'out', 'drop': 'drop', 'complete': 'complete',\n            'beforeStart':'beforeStart'\n        },\n        animEvents: {\n            'step': \"step\", 'complete': 'complete'\n        },\n        stopDrag: function (el) {\n            if (el._katavorioDrag)\n                el._katavorioDrag.abort();\n        },\n        addToDragSelection: function (spec) {\n            _getDragManager(this).select(spec);\n        },\n        removeFromDragSelection: function (spec) {\n            _getDragManager(this).deselect(spec);\n        },\n        clearDragSelection: function () {\n            _getDragManager(this).deselectAll();\n        },\n        trigger: function (el, event, originalEvent, payload) {\n            this.getEventManager().trigger(el, event, originalEvent, payload);\n        },\n        doReset:function() {\n            // look for katavorio instances and reset each one if found.\n            for (var key in this) {\n                if (key.indexOf(\"_katavorio_\") === 0) {\n                    this[key].reset();\n                }\n            }\n        }\n    });\n\n    var ready = function (f) {\n        var _do = function () {\n            if (/complete|loaded|interactive/.test(document.readyState) && typeof(document.body) != \"undefined\" && document.body != null)\n                f();\n            else\n                setTimeout(_do, 9);\n        };\n\n        _do();\n    };\n    ready(_jp.init);\n\n}).call(typeof window !== 'undefined' ? window : this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jsplumb/dist/js/jsplumb.js\n// module id = 33\n// module chunks = 0","/**\n  * vue-router v2.5.3\n  * (c) 2017 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (process.env.NODE_ENV !== 'production' && !condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nvar View = {\n  name: 'router-view',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent) {\n      if (parent.$vnode && parent.$vnode.data.routerView) {\n        depth++;\n      }\n      if (parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      return h(cache[name], data, children)\n    }\n\n    var matched = route.matched[depth];\n    // render empty node if no matched route\n    if (!matched) {\n      cache[name] = null;\n      return h()\n    }\n\n    var component = cache[name] = matched.components[name];\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also regiseter instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // resolve props\n    data.props = resolveProps(route, matched.props && matched.props[name]);\n\n    return h(component, data, children)\n  }\n};\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n  .replace(encodeReserveRE, encodeReserveReplacer)\n  .replace(commaRE, ','); };\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    var val = extraQuery[key];\n    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;\n  }\n  return parsedQuery\n}\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0\n      ? decode(parts.join('='))\n      : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return ''\n    }\n\n    if (val === null) {\n      return encode(key)\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.slice().forEach(function (val2) {\n        if (val2 === undefined) {\n          return\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&')\n    }\n\n    return encode(key) + '=' + encode(val)\n  }).filter(function (x) { return x.length > 0; }).join('&') : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: location.query || {},\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery$$1),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\n  }\n  return Object.freeze(route)\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return (\n      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query)\n    )\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params)\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key) { return String(a[key]) === String(b[key]); })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar Link = {\n  name: 'router-link',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(this.to, current, this.append);\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback = globalActiveClass == null\n            ? 'router-link-active'\n            : globalActiveClass;\n    var exactActiveClassFallback = globalExactActiveClass == null\n            ? 'router-link-exact-active'\n            : globalExactActiveClass;\n    var activeClass = this.activeClass == null\n            ? activeClassFallback\n            : this.activeClass;\n    var exactActiveClass = this.exactActiveClass == null\n            ? exactActiveClassFallback\n            : this.exactActiveClass;\n    var compareTarget = location.path\n      ? createRoute(null, location, null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location);\n        } else {\n          router.push(location);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) { on[e] = handler; });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = {\n      class: classes\n    };\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var extend = _Vue.util.extend;\n        var aData = a.data = extend({}, a.data);\n        aData.on = on;\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this.$root._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this.$root._route }\n  });\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Vue.component('router-view', View);\n  Vue.component('router-link', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/\\//g, '/')\n}\n\nvar index$1 = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar index = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (index$1(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (index$1(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\nindex.parse = parse_1;\nindex.compile = compile_1;\nindex.tokensToFunction = tokensToFunction_1;\nindex.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = index.compile(path));\n    return filler(params || {}, { pretty: true })\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(false, (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  }\n}\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  var pathMap = oldPathMap || Object.create(null);\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(path || name)) + \" cannot be a \" +\n      \"string id. Use an actual component instead.\"\n    );\n  }\n\n  var normalizedPath = normalizePath(path, parent);\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (process.env.NODE_ENV !== 'production') {\n      if (route.name && route.children.some(function (child) { return /^\\/?$/.test(child.path); })) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n          \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'\\\"), \" +\n          \"the default child route will not be rendered. Remove the name from \" +\n          \"this route and use the name of the default child route for named \" +\n          \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (route.alias !== undefined) {\n    if (Array.isArray(route.alias)) {\n      route.alias.forEach(function (alias) {\n        var aliasRoute = {\n          path: alias,\n          children: route.children\n        };\n        addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path);\n      });\n    } else {\n      var aliasRoute = {\n        path: route.alias,\n        children: route.children\n      };\n      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path);\n    }\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n        \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (path) {\n  var regex = index(path);\n  if (process.env.NODE_ENV !== 'production') {\n    var keys = {};\n    regex.keys.forEach(function (key) {\n      warn(!keys[key.name], (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\"));\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (path, parent) {\n  path = path.replace(/\\/$/, '');\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next.name || next._normalized) {\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = assign({}, next);\n    next._normalized = true;\n    var params = assign(assign({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params;\n    } else if (current.matched) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params, (\"path \" + (current.path)));\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction assign (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      if (record) {\n        location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n        return _createRoute(record, location, redirectedFrom)\n      }\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n        ? originalRedirect(createRoute(record, location, null, router))\n        : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      params[key.name] = val;\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior(to, from, isPop ? position : null);\n    if (!shouldScroll) {\n      return\n    }\n    var isObject = typeof shouldScroll === 'object';\n    if (isObject && typeof shouldScroll.selector === 'string') {\n      var el = document.querySelector(shouldScroll.selector);\n      if (el) {\n        position = getElementPosition(el);\n      } else if (isValidPosition(shouldScroll)) {\n        position = normalizePosition(shouldScroll);\n      }\n    } else if (isObject && isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n\n    if (position) {\n      window.scrollTo(position.x, position.y);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left,\n    y: elRect.top - docRect.top\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\n/*  */\n\nvar supportsPushState = inBrowser && (function () {\n  var ua = window.navigator.userAgent;\n\n  if (\n    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n    ua.indexOf('Mobile Safari') !== -1 &&\n    ua.indexOf('Chrome') === -1 &&\n    ua.indexOf('Windows Phone') === -1\n  ) {\n    return false\n  }\n\n  return window.history && 'pushState' in window.history\n})();\n\n// use User Timing api (if present) for more accurate key precision\nvar Time = inBrowser && window.performance && window.performance.now\n  ? window.performance\n  : Date;\n\nvar _key = genKey();\n\nfunction genKey () {\n  return Time.now().toFixed(3)\n}\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  _key = key;\n}\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({ key: _key }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(route, function () {\n    this$1.updateRoute(route);\n    onComplete && onComplete(route);\n    this$1.ensureURL();\n\n    // fire ready cbs once\n    if (!this$1.ready) {\n      this$1.ready = true;\n      this$1.readyCbs.forEach(function (cb) { cb(route); });\n    }\n  }, function (err) {\n    if (onAbort) {\n      onAbort(err);\n    }\n    if (err && !this$1.ready) {\n      this$1.ready = true;\n      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });\n    }\n  });\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  var abort = function (err) {\n    if (isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) { cb(err); });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL();\n    return abort()\n  }\n\n  var ref = resolveQueue(this.current.matched, route.matched);\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  this.pending = route;\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort()\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' && (\n            typeof to.path === 'string' ||\n            typeof to.name === 'string'\n          ))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function () { return this$1.current === route; };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort()\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) { cb(); });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated,\n  cbs,\n  isValid\n) {\n  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {\n    return bindEnterGuard(guard, match, key, cbs, isValid)\n  })\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key,\n  cbs,\n  isValid\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      next(cb);\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n    })\n  }\n}\n\nfunction poll (\n  cb, // somehow flow cannot infer this is a function\n  instances,\n  key,\n  isValid\n) {\n  if (instances[key]) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          process.env.NODE_ENV !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (called) { return }\n    called = true;\n    return fn.apply(this, arguments)\n  }\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\n/*  */\n\n\nvar HTML5History = (function (History$$1) {\n  function HTML5History (router, base) {\n    var this$1 = this;\n\n    History$$1.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n\n    if (expectScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener('popstate', function (e) {\n      this$1.transitionTo(getLocation(this$1.base), function (route) {\n        if (expectScroll) {\n          handleScroll(router, route, this$1.current, true);\n        }\n      });\n    });\n  }\n\n  if ( History$$1 ) HTML5History.__proto__ = History$$1;\n  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\n\nvar HashHistory = (function (History$$1) {\n  function HashHistory (router, base, fallback) {\n    History$$1.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History$$1 ) HashHistory.__proto__ = History$$1;\n  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    window.addEventListener('hashchange', function () {\n      if (!ensureSlash()) {\n        return\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        replaceHash(route.fullPath);\n      });\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      pushHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      replaceHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(\n      cleanPath(base + '/#' + location)\n    );\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  return index === -1 ? '' : href.slice(index + 1)\n}\n\nfunction pushHash (path) {\n  window.location.hash = path;\n}\n\nfunction replaceHash (path) {\n  var i = window.location.href.indexOf('#');\n  window.location.replace(\n    window.location.href.slice(0, i >= 0 ? i : 0) + '#' + path\n  );\n}\n\n/*  */\n\n\nvar AbstractHistory = (function (History$$1) {\n  function AbstractHistory (router, base) {\n    History$$1.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;\n  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n      this$1.index++;\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(route, function () {\n      this$1.index = targetIndex;\n      this$1.updateRoute(route);\n    });\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: {} };\n\nVueRouter.prototype.match = function match (\n  raw,\n  current,\n  redirectedFrom\n) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n  process.env.NODE_ENV !== 'production' && assert(\n    install.installed,\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n    \"before creating root instance.\"\n  );\n\n  this.apps.push(app);\n\n  // main app already initialized.\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function () {\n      history.setupListeners();\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupHashListener,\n      setupHashListener\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n  this.history.push(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n  this.history.replace(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key]\n    })\n  }))\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  var location = normalizeLocation(\n    to,\n    current || this.history.current,\n    append,\n    this\n  );\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '2.5.3';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\nexport default VueRouter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-router/dist/vue-router.esm.js\n// module id = 39\n// module chunks = 0","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-style-loader/lib/listToStyles.js\n// module id = 40\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 41\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader/lib/css-base.js\n// module id = 42\n// module chunks = 0","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = require('./listToStyles')\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction) {\n  isProduction = _isProduction\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-style-loader/lib/addStylesClient.js\n// module id = 43\n// module chunks = 0"],"sourceRoot":""}